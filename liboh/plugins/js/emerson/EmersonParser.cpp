/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//Emerson.g
 *     -                            On : 2011-03-09 18:00:37
 *     -                for the parser : EmersonParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

  #include <stdlib.h>;
  #include <stdio.h>;
  #include "Util.h";

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonParserTokenNames[203+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "LEFT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "RIGHT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "TRIPLE_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "LEFT_SHIFT",
        (pANTLR3_UINT8) "RIGHT_SHIFT",
        (pANTLR3_UINT8) "TRIPLE_SHIFT",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "EXPR_LIST",
        (pANTLR3_UINT8) "COND_EXPR",
        (pANTLR3_UINT8) "COND_EXPR_NOIN",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_SEND",
        (pANTLR3_UINT8) "MESSAGE_RECV",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'<-'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'<<='",
        (pANTLR3_UINT8) "'>>='",
        (pANTLR3_UINT8) "'>>>='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'>>>'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static EmersonParser_program_return	program    (pEmersonParser ctx);
static EmersonParser_sourceElements_return	sourceElements    (pEmersonParser ctx);
static EmersonParser_sourceElement_return	sourceElement    (pEmersonParser ctx);
static EmersonParser_functionDeclaration_return	functionDeclaration    (pEmersonParser ctx);
static EmersonParser_functionExpression_return	functionExpression    (pEmersonParser ctx);
static EmersonParser_formalParameterList_return	formalParameterList    (pEmersonParser ctx);
static EmersonParser_functionBody_return	functionBody    (pEmersonParser ctx);
static EmersonParser_statement_return	statement    (pEmersonParser ctx);
static EmersonParser_statementBlock_return	statementBlock    (pEmersonParser ctx);
static EmersonParser_noOpStatement_return	noOpStatement    (pEmersonParser ctx);
static EmersonParser_statementList_return	statementList    (pEmersonParser ctx);
static EmersonParser_variableStatement_return	variableStatement    (pEmersonParser ctx);
static EmersonParser_variableDeclarationList_return	variableDeclarationList    (pEmersonParser ctx);
static EmersonParser_variableDeclarationListNoIn_return	variableDeclarationListNoIn    (pEmersonParser ctx);
static EmersonParser_variableDeclaration_return	variableDeclaration    (pEmersonParser ctx);
static EmersonParser_variableDeclarationNoIn_return	variableDeclarationNoIn    (pEmersonParser ctx);
static EmersonParser_initialiser_return	initialiser    (pEmersonParser ctx);
static EmersonParser_initialiserNoIn_return	initialiserNoIn    (pEmersonParser ctx);
static EmersonParser_emptyStatement_return	emptyStatement    (pEmersonParser ctx);
static EmersonParser_expressionStatement_return	expressionStatement    (pEmersonParser ctx);
static EmersonParser_whenStatement_return	whenStatement    (pEmersonParser ctx);
static EmersonParser_whenPred_return	whenPred    (pEmersonParser ctx);
static EmersonParser_whenCheckedListFirst_return	whenCheckedListFirst    (pEmersonParser ctx);
static EmersonParser_whenCheckedListSubsequent_return	whenCheckedListSubsequent    (pEmersonParser ctx);
static EmersonParser_ifStatement_return	ifStatement    (pEmersonParser ctx);
static EmersonParser_iterationStatement_return	iterationStatement    (pEmersonParser ctx);
static EmersonParser_doWhileStatement_return	doWhileStatement    (pEmersonParser ctx);
static EmersonParser_whileStatement_return	whileStatement    (pEmersonParser ctx);
static EmersonParser_forStatement_return	forStatement    (pEmersonParser ctx);
static EmersonParser_forStatementInitialiserPart_return	forStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_forInStatement_return	forInStatement    (pEmersonParser ctx);
static EmersonParser_forInStatementInitialiserPart_return	forInStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_continueStatement_return	continueStatement    (pEmersonParser ctx);
static EmersonParser_breakStatement_return	breakStatement    (pEmersonParser ctx);
static EmersonParser_returnStatement_return	returnStatement    (pEmersonParser ctx);
static EmersonParser_withStatement_return	withStatement    (pEmersonParser ctx);
static EmersonParser_labelledStatement_return	labelledStatement    (pEmersonParser ctx);
static EmersonParser_switchStatement_return	switchStatement    (pEmersonParser ctx);
static EmersonParser_caseBlock_return	caseBlock    (pEmersonParser ctx);
static EmersonParser_caseClause_return	caseClause    (pEmersonParser ctx);
static EmersonParser_defaultClause_return	defaultClause    (pEmersonParser ctx);
static EmersonParser_throwStatement_return	throwStatement    (pEmersonParser ctx);
static EmersonParser_tryStatement_return	tryStatement    (pEmersonParser ctx);
static EmersonParser_catchClause_return	catchClause    (pEmersonParser ctx);
static EmersonParser_finallyClause_return	finallyClause    (pEmersonParser ctx);
static EmersonParser_msgSendStatement_return	msgSendStatement    (pEmersonParser ctx);
static EmersonParser_msgRecvStatement_return	msgRecvStatement    (pEmersonParser ctx);
static EmersonParser_expression_return	expression    (pEmersonParser ctx);
static EmersonParser_expressionNoIn_return	expressionNoIn    (pEmersonParser ctx);
static EmersonParser_assignmentExpression_return	assignmentExpression    (pEmersonParser ctx);
static EmersonParser_assignmentExpressionNoIn_return	assignmentExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_leftHandSideExpression_return	leftHandSideExpression    (pEmersonParser ctx);
static EmersonParser_newExpression_return	newExpression    (pEmersonParser ctx);
static EmersonParser_indexSuffix1_return	indexSuffix1    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix1_return	propertyReferenceSuffix1    (pEmersonParser ctx);
static EmersonParser_memberExpression_return	memberExpression    (pEmersonParser ctx);
static EmersonParser_memberExpressionSuffix_return	memberExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_callExpression_return	callExpression    (pEmersonParser ctx);
static EmersonParser_callExpressionSuffix_return	callExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_arguments_return	arguments    (pEmersonParser ctx);
static EmersonParser_indexSuffix_return	indexSuffix    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix_return	propertyReferenceSuffix    (pEmersonParser ctx);
static EmersonParser_assignmentOperator_return	assignmentOperator    (pEmersonParser ctx);
static EmersonParser_conditionalExpression_return	conditionalExpression    (pEmersonParser ctx);
static EmersonParser_conditionalExpressionNoIn_return	conditionalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalORExpression_return	logicalORExpression    (pEmersonParser ctx);
static EmersonParser_logicalANDExpression_return	logicalANDExpression    (pEmersonParser ctx);
static EmersonParser_logicalORExpressionNoIn_return	logicalORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalANDExpressionNoIn_return	logicalANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpression_return	bitwiseORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpressionNoIn_return	bitwiseORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpression_return	bitwiseXORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpressionNoIn_return	bitwiseXORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpression_return	bitwiseANDExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpressionNoIn_return	bitwiseANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_equalityExpression_return	equalityExpression    (pEmersonParser ctx);
static EmersonParser_equalityOps_return	equalityOps    (pEmersonParser ctx);
static EmersonParser_equalityExpressionNoIn_return	equalityExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_relationalOps_return	relationalOps    (pEmersonParser ctx);
static EmersonParser_relationalExpression_return	relationalExpression    (pEmersonParser ctx);
static EmersonParser_relationalOpsNoIn_return	relationalOpsNoIn    (pEmersonParser ctx);
static EmersonParser_relationalExpressionNoIn_return	relationalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_shiftOps_return	shiftOps    (pEmersonParser ctx);
static EmersonParser_shiftExpression_return	shiftExpression    (pEmersonParser ctx);
static EmersonParser_addOps_return	addOps    (pEmersonParser ctx);
static EmersonParser_additiveExpression_return	additiveExpression    (pEmersonParser ctx);
static EmersonParser_multOps_return	multOps    (pEmersonParser ctx);
static EmersonParser_multiplicativeExpression_return	multiplicativeExpression    (pEmersonParser ctx);
static EmersonParser_postfixExpression_return	postfixExpression    (pEmersonParser ctx);
static EmersonParser_unaryOps_return	unaryOps    (pEmersonParser ctx);
static EmersonParser_unaryExpression_return	unaryExpression    (pEmersonParser ctx);
static EmersonParser_primaryExpression_return	primaryExpression    (pEmersonParser ctx);
static EmersonParser_dollarExpression_return	dollarExpression    (pEmersonParser ctx);
static EmersonParser_arrayLiteral_return	arrayLiteral    (pEmersonParser ctx);
static EmersonParser_objectLiteral_return	objectLiteral    (pEmersonParser ctx);
static EmersonParser_propertyNameAndValue_return	propertyNameAndValue    (pEmersonParser ctx);
static EmersonParser_propertyName_return	propertyName    (pEmersonParser ctx);
static EmersonParser_literal_return	literal    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred1_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred3_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred7_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred10_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred13_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred21_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred23_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred24_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred26_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred27_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred34_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred39_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred42_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred44_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred54_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred56_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred71_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred75_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred77_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred78_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred81_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred82_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred89_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred100_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred108_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred120_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred122_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred136_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred139_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred157_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred163_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred167_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred170_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred173_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred174_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred180_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred182_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred185_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred187_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred192_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred194_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred198_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred200_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred202_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred205_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred208_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred299_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred305_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred306_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred326_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred329_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred334_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred337_Emerson    (pEmersonParser ctx);
static void	EmersonParserFree(pEmersonParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//Emerson.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonParserNewSSD(instream, NULL);
}

/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonParser) ANTLR3_CALLOC(1, sizeof(EmersonParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our EmersonParser interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->statementBlock	= statementBlock;
    ctx->noOpStatement	= noOpStatement;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->emptyStatement	= emptyStatement;
    ctx->expressionStatement	= expressionStatement;
    ctx->whenStatement	= whenStatement;
    ctx->whenPred	= whenPred;
    ctx->whenCheckedListFirst	= whenCheckedListFirst;
    ctx->whenCheckedListSubsequent	= whenCheckedListSubsequent;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->labelledStatement	= labelledStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->msgSendStatement	= msgSendStatement;
    ctx->msgRecvStatement	= msgRecvStatement;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityOps	= equalityOps;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->shiftOps	= shiftOps;
    ctx->shiftExpression	= shiftExpression;
    ctx->addOps	= addOps;
    ctx->additiveExpression	= additiveExpression;
    ctx->multOps	= multOps;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred1_Emerson	= synpred1_Emerson;
    ctx->synpred3_Emerson	= synpred3_Emerson;
    ctx->synpred7_Emerson	= synpred7_Emerson;
    ctx->synpred10_Emerson	= synpred10_Emerson;
    ctx->synpred13_Emerson	= synpred13_Emerson;
    ctx->synpred21_Emerson	= synpred21_Emerson;
    ctx->synpred23_Emerson	= synpred23_Emerson;
    ctx->synpred24_Emerson	= synpred24_Emerson;
    ctx->synpred26_Emerson	= synpred26_Emerson;
    ctx->synpred27_Emerson	= synpred27_Emerson;
    ctx->synpred34_Emerson	= synpred34_Emerson;
    ctx->synpred39_Emerson	= synpred39_Emerson;
    ctx->synpred42_Emerson	= synpred42_Emerson;
    ctx->synpred44_Emerson	= synpred44_Emerson;
    ctx->synpred54_Emerson	= synpred54_Emerson;
    ctx->synpred56_Emerson	= synpred56_Emerson;
    ctx->synpred71_Emerson	= synpred71_Emerson;
    ctx->synpred75_Emerson	= synpred75_Emerson;
    ctx->synpred77_Emerson	= synpred77_Emerson;
    ctx->synpred78_Emerson	= synpred78_Emerson;
    ctx->synpred81_Emerson	= synpred81_Emerson;
    ctx->synpred82_Emerson	= synpred82_Emerson;
    ctx->synpred89_Emerson	= synpred89_Emerson;
    ctx->synpred100_Emerson	= synpred100_Emerson;
    ctx->synpred108_Emerson	= synpred108_Emerson;
    ctx->synpred120_Emerson	= synpred120_Emerson;
    ctx->synpred122_Emerson	= synpred122_Emerson;
    ctx->synpred136_Emerson	= synpred136_Emerson;
    ctx->synpred139_Emerson	= synpred139_Emerson;
    ctx->synpred157_Emerson	= synpred157_Emerson;
    ctx->synpred163_Emerson	= synpred163_Emerson;
    ctx->synpred167_Emerson	= synpred167_Emerson;
    ctx->synpred170_Emerson	= synpred170_Emerson;
    ctx->synpred173_Emerson	= synpred173_Emerson;
    ctx->synpred174_Emerson	= synpred174_Emerson;
    ctx->synpred180_Emerson	= synpred180_Emerson;
    ctx->synpred182_Emerson	= synpred182_Emerson;
    ctx->synpred185_Emerson	= synpred185_Emerson;
    ctx->synpred187_Emerson	= synpred187_Emerson;
    ctx->synpred192_Emerson	= synpred192_Emerson;
    ctx->synpred194_Emerson	= synpred194_Emerson;
    ctx->synpred198_Emerson	= synpred198_Emerson;
    ctx->synpred200_Emerson	= synpred200_Emerson;
    ctx->synpred202_Emerson	= synpred202_Emerson;
    ctx->synpred205_Emerson	= synpred205_Emerson;
    ctx->synpred208_Emerson	= synpred208_Emerson;
    ctx->synpred299_Emerson	= synpred299_Emerson;
    ctx->synpred305_Emerson	= synpred305_Emerson;
    ctx->synpred306_Emerson	= synpred306_Emerson;
    ctx->synpred326_Emerson	= synpred326_Emerson;
    ctx->synpred329_Emerson	= synpred329_Emerson;
    ctx->synpred334_Emerson	= synpred334_Emerson;
    ctx->synpred337_Emerson	= synpred337_Emerson;
    ctx->free			= EmersonParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonParserFree(pEmersonParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program793  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program793	= { FOLLOW_LTERM_in_program793_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program797  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program797	= { FOLLOW_sourceElements_in_program797_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program799  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program799_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program799	= { FOLLOW_LTERM_in_program799_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_program802  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_program802_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_program802	= { FOLLOW_EOF_in_program802_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements822  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements822	= { FOLLOW_sourceElement_in_sourceElements822_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_sourceElements825  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_sourceElements825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_sourceElements825	= { FOLLOW_LTERM_in_sourceElements825_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements828  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements828	= { FOLLOW_sourceElement_in_sourceElements828_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement849  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement849	= { FOLLOW_functionDeclaration_in_sourceElement849_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement858  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement858	= { FOLLOW_statement_in_sourceElement858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_functionDeclaration875  */
static	ANTLR3_BITWORD FOLLOW_127_in_functionDeclaration875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_functionDeclaration875	= { FOLLOW_127_in_functionDeclaration875_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration877  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration877	= { FOLLOW_LTERM_in_functionDeclaration877_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration880  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration880	= { FOLLOW_Identifier_in_functionDeclaration880_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration882  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration882	= { FOLLOW_LTERM_in_functionDeclaration882_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration886  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration886	= { FOLLOW_formalParameterList_in_functionDeclaration886_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration889  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration889	= { FOLLOW_LTERM_in_functionDeclaration889_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration892  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration892	= { FOLLOW_functionBody_in_functionDeclaration892_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_functionExpression917  */
static	ANTLR3_BITWORD FOLLOW_127_in_functionExpression917_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_functionExpression917	= { FOLLOW_127_in_functionExpression917_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression919  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression919	= { FOLLOW_LTERM_in_functionExpression919_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression922  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression922	= { FOLLOW_Identifier_in_functionExpression922_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression925  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression925	= { FOLLOW_LTERM_in_functionExpression925_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_functionExpression928  */
static	ANTLR3_BITWORD FOLLOW_128_in_functionExpression928_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_functionExpression928	= { FOLLOW_128_in_functionExpression928_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression930  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression930	= { FOLLOW_LTERM_in_functionExpression930_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression933  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression933	= { FOLLOW_formalParameterList_in_functionExpression933_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression936  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression936	= { FOLLOW_LTERM_in_functionExpression936_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_functionExpression939  */
static	ANTLR3_BITWORD FOLLOW_129_in_functionExpression939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_functionExpression939	= { FOLLOW_129_in_functionExpression939_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression941  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression941	= { FOLLOW_LTERM_in_functionExpression941_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression944  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression944	= { FOLLOW_functionBody_in_functionExpression944_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList972  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList972	= { FOLLOW_Identifier_in_formalParameterList972_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_formalParameterList975  */
static	ANTLR3_BITWORD FOLLOW_130_in_formalParameterList975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_formalParameterList975	= { FOLLOW_130_in_formalParameterList975_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList977  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList977	= { FOLLOW_LTERM_in_formalParameterList977_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList980  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList980	= { FOLLOW_Identifier_in_formalParameterList980_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_functionBody1003  */
static	ANTLR3_BITWORD FOLLOW_131_in_functionBody1003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_functionBody1003	= { FOLLOW_131_in_functionBody1003_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1005  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1005_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1005	= { FOLLOW_LTERM_in_functionBody1005_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_functionBody1008  */
static	ANTLR3_BITWORD FOLLOW_132_in_functionBody1008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_functionBody1008	= { FOLLOW_132_in_functionBody1008_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_functionBody1019  */
static	ANTLR3_BITWORD FOLLOW_131_in_functionBody1019_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_functionBody1019	= { FOLLOW_131_in_functionBody1019_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1021  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1021_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1021	= { FOLLOW_LTERM_in_functionBody1021_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody1025  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody1025_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody1025	= { FOLLOW_sourceElements_in_functionBody1025_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1032  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1032	= { FOLLOW_LTERM_in_functionBody1032_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_functionBody1035  */
static	ANTLR3_BITWORD FOLLOW_132_in_functionBody1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_functionBody1035	= { FOLLOW_132_in_functionBody1035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_statement1047  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_statement1047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_statement1047	= { FOLLOW_noOpStatement_in_statement1047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement1059  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement1059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement1059	= { FOLLOW_statementBlock_in_statement1059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement1064  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement1064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement1064	= { FOLLOW_variableStatement_in_statement1064_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_statement1069  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_statement1069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_statement1069	= { FOLLOW_emptyStatement_in_statement1069_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement1074  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement1074_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement1074	= { FOLLOW_expressionStatement_in_statement1074_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement1079  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement1079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement1079	= { FOLLOW_ifStatement_in_statement1079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement1084  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement1084_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement1084	= { FOLLOW_iterationStatement_in_statement1084_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement1089  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement1089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement1089	= { FOLLOW_continueStatement_in_statement1089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement1094  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement1094_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement1094	= { FOLLOW_breakStatement_in_statement1094_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1099  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1099	= { FOLLOW_returnStatement_in_statement1099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement1104  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement1104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement1104	= { FOLLOW_withStatement_in_statement1104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_statement1109  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_statement1109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_statement1109	= { FOLLOW_labelledStatement_in_statement1109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement1114  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement1114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement1114	= { FOLLOW_switchStatement_in_statement1114_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement1119  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement1119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement1119	= { FOLLOW_throwStatement_in_statement1119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenStatement_in_statement1131  */
static	ANTLR3_BITWORD FOLLOW_whenStatement_in_statement1131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenStatement_in_statement1131	= { FOLLOW_whenStatement_in_statement1131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement1136  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement1136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement1136	= { FOLLOW_tryStatement_in_statement1136_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_statement1141  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_statement1141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_statement1141	= { FOLLOW_msgSendStatement_in_statement1141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_statement1146  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_statement1146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_statement1146	= { FOLLOW_msgRecvStatement_in_statement1146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_statementBlock1165  */
static	ANTLR3_BITWORD FOLLOW_131_in_statementBlock1165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_statementBlock1165	= { FOLLOW_131_in_statementBlock1165_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1167  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1167	= { FOLLOW_LTERM_in_statementBlock1167_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_statementBlock1170  */
static	ANTLR3_BITWORD FOLLOW_132_in_statementBlock1170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_statementBlock1170	= { FOLLOW_132_in_statementBlock1170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_statementBlock1176  */
static	ANTLR3_BITWORD FOLLOW_131_in_statementBlock1176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_statementBlock1176	= { FOLLOW_131_in_statementBlock1176_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1178  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1178	= { FOLLOW_LTERM_in_statementBlock1178_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock1182  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock1182	= { FOLLOW_statementList_in_statementBlock1182_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1187  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1187	= { FOLLOW_LTERM_in_statementBlock1187_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_statementBlock1190  */
static	ANTLR3_BITWORD FOLLOW_132_in_statementBlock1190_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_statementBlock1190	= { FOLLOW_132_in_statementBlock1190_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_noOpStatement1210  */
static	ANTLR3_BITWORD FOLLOW_133_in_noOpStatement1210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_noOpStatement1210	= { FOLLOW_133_in_noOpStatement1210_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementList1252  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementList1252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementList1252	= { FOLLOW_LTERM_in_statementList1252_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1255  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1255	= { FOLLOW_statement_in_statementList1255_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_variableStatement1278  */
static	ANTLR3_BITWORD FOLLOW_134_in_variableStatement1278_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_variableStatement1278	= { FOLLOW_134_in_variableStatement1278_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1280  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1280	= { FOLLOW_LTERM_in_variableStatement1280_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1283  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1283	= { FOLLOW_variableDeclarationList_in_variableStatement1283_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1286  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1286	= { FOLLOW_LTERM_in_variableStatement1286_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_variableStatement1290  */
static	ANTLR3_BITWORD FOLLOW_133_in_variableStatement1290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_variableStatement1290	= { FOLLOW_133_in_variableStatement1290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1312  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1312	= { FOLLOW_variableDeclaration_in_variableDeclarationList1312_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1315  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1315	= { FOLLOW_LTERM_in_variableDeclarationList1315_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_variableDeclarationList1318  */
static	ANTLR3_BITWORD FOLLOW_130_in_variableDeclarationList1318_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_variableDeclarationList1318	= { FOLLOW_130_in_variableDeclarationList1318_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1320  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1320	= { FOLLOW_LTERM_in_variableDeclarationList1320_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1323  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1323	= { FOLLOW_variableDeclaration_in_variableDeclarationList1323_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1342  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1342	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1342_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1345  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1345	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1345_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_variableDeclarationListNoIn1348  */
static	ANTLR3_BITWORD FOLLOW_130_in_variableDeclarationListNoIn1348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_variableDeclarationListNoIn1348	= { FOLLOW_130_in_variableDeclarationListNoIn1348_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1350  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1350	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1350_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1353  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1353	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1353_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1372  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1372_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1372	= { FOLLOW_Identifier_in_variableDeclaration1372_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclaration1374  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclaration1374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclaration1374	= { FOLLOW_LTERM_in_variableDeclaration1374_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1377  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1377	= { FOLLOW_initialiser_in_variableDeclaration1377_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1401  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1401	= { FOLLOW_Identifier_in_variableDeclarationNoIn1401_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationNoIn1403  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationNoIn1403_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationNoIn1403	= { FOLLOW_LTERM_in_variableDeclarationNoIn1403_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1406  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1406	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1406_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_initialiser1431  */
static	ANTLR3_BITWORD FOLLOW_135_in_initialiser1431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_initialiser1431	= { FOLLOW_135_in_initialiser1431_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiser1433  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiser1433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiser1433	= { FOLLOW_LTERM_in_initialiser1433_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_initialiser1436  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_initialiser1436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_initialiser1436	= { FOLLOW_assignmentExpression_in_initialiser1436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_initialiserNoIn1453  */
static	ANTLR3_BITWORD FOLLOW_135_in_initialiserNoIn1453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_initialiserNoIn1453	= { FOLLOW_135_in_initialiserNoIn1453_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiserNoIn1455  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiserNoIn1455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiserNoIn1455	= { FOLLOW_LTERM_in_initialiserNoIn1455_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1458  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1458_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1458	= { FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1458_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_emptyStatement1481  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_emptyStatement1481_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_emptyStatement1481	= { FOLLOW_LTERM_in_emptyStatement1481_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_emptyStatement1484  */
static	ANTLR3_BITWORD FOLLOW_133_in_emptyStatement1484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_emptyStatement1484	= { FOLLOW_133_in_emptyStatement1484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1496  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1496	= { FOLLOW_expression_in_expressionStatement1496_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionStatement1499  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionStatement1499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionStatement1499	= { FOLLOW_LTERM_in_expressionStatement1499_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_expressionStatement1503  */
static	ANTLR3_BITWORD FOLLOW_133_in_expressionStatement1503_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_expressionStatement1503	= { FOLLOW_133_in_expressionStatement1503_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_whenStatement1523  */
static	ANTLR3_BITWORD FOLLOW_136_in_whenStatement1523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_whenStatement1523	= { FOLLOW_136_in_whenStatement1523_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1525  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1525	= { FOLLOW_LTERM_in_whenStatement1525_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_whenStatement1528  */
static	ANTLR3_BITWORD FOLLOW_128_in_whenStatement1528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_whenStatement1528	= { FOLLOW_128_in_whenStatement1528_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1530  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1530	= { FOLLOW_LTERM_in_whenStatement1530_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenPred_in_whenStatement1533  */
static	ANTLR3_BITWORD FOLLOW_whenPred_in_whenStatement1533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenPred_in_whenStatement1533	= { FOLLOW_whenPred_in_whenStatement1533_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1535  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1535	= { FOLLOW_LTERM_in_whenStatement1535_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_whenStatement1538  */
static	ANTLR3_BITWORD FOLLOW_129_in_whenStatement1538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_whenStatement1538	= { FOLLOW_129_in_whenStatement1538_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1540  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1540	= { FOLLOW_LTERM_in_whenStatement1540_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_whenStatement1543  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_whenStatement1543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_whenStatement1543	= { FOLLOW_functionBody_in_whenStatement1543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenPred1572  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenPred1572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenPred1572	= { FOLLOW_expression_in_whenPred1572_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListFirst1599  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListFirst1599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListFirst1599	= { FOLLOW_expression_in_whenCheckedListFirst1599_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListFirst1601  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListFirst1601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListFirst1601	= { FOLLOW_LTERM_in_whenCheckedListFirst1601_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_whenCheckedListFirst1605  */
static	ANTLR3_BITWORD FOLLOW_130_in_whenCheckedListFirst1605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_whenCheckedListFirst1605	= { FOLLOW_130_in_whenCheckedListFirst1605_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListFirst1607  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListFirst1607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListFirst1607	= { FOLLOW_LTERM_in_whenCheckedListFirst1607_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1612  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1612	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListSubsequent1649  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListSubsequent1649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListSubsequent1649	= { FOLLOW_expression_in_whenCheckedListSubsequent1649_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListSubsequent1651  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListSubsequent1651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListSubsequent1651	= { FOLLOW_LTERM_in_whenCheckedListSubsequent1651_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_whenCheckedListSubsequent1655  */
static	ANTLR3_BITWORD FOLLOW_130_in_whenCheckedListSubsequent1655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_whenCheckedListSubsequent1655	= { FOLLOW_130_in_whenCheckedListSubsequent1655_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListSubsequent1657  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListSubsequent1657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListSubsequent1657	= { FOLLOW_LTERM_in_whenCheckedListSubsequent1657_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1662  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1662	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1662_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_ifStatement1695  */
static	ANTLR3_BITWORD FOLLOW_137_in_ifStatement1695_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_ifStatement1695	= { FOLLOW_137_in_ifStatement1695_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1697  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1697	= { FOLLOW_LTERM_in_ifStatement1697_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_ifStatement1700  */
static	ANTLR3_BITWORD FOLLOW_128_in_ifStatement1700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_ifStatement1700	= { FOLLOW_128_in_ifStatement1700_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1702  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1702	= { FOLLOW_LTERM_in_ifStatement1702_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1705  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1705	= { FOLLOW_expression_in_ifStatement1705_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1707  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1707	= { FOLLOW_LTERM_in_ifStatement1707_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_ifStatement1710  */
static	ANTLR3_BITWORD FOLLOW_129_in_ifStatement1710_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_ifStatement1710	= { FOLLOW_129_in_ifStatement1710_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1712  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1712	= { FOLLOW_LTERM_in_ifStatement1712_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1717  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1717	= { FOLLOW_statement_in_ifStatement1717_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1720  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1720	= { FOLLOW_LTERM_in_ifStatement1720_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_ifStatement1723  */
static	ANTLR3_BITWORD FOLLOW_138_in_ifStatement1723_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_ifStatement1723	= { FOLLOW_138_in_ifStatement1723_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1725  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1725	= { FOLLOW_LTERM_in_ifStatement1725_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1730  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1730	= { FOLLOW_statement_in_ifStatement1730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1762  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1762	= { FOLLOW_doWhileStatement_in_iterationStatement1762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1767  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1767	= { FOLLOW_whileStatement_in_iterationStatement1767_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1772  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1772	= { FOLLOW_forStatement_in_iterationStatement1772_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1777  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1777	= { FOLLOW_forInStatement_in_iterationStatement1777_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_doWhileStatement1789  */
static	ANTLR3_BITWORD FOLLOW_139_in_doWhileStatement1789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_doWhileStatement1789	= { FOLLOW_139_in_doWhileStatement1789_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1791  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1791	= { FOLLOW_LTERM_in_doWhileStatement1791_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1794  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1794	= { FOLLOW_statement_in_doWhileStatement1794_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1796  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1796	= { FOLLOW_LTERM_in_doWhileStatement1796_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_doWhileStatement1799  */
static	ANTLR3_BITWORD FOLLOW_140_in_doWhileStatement1799_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_doWhileStatement1799	= { FOLLOW_140_in_doWhileStatement1799_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1801  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1801	= { FOLLOW_LTERM_in_doWhileStatement1801_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_doWhileStatement1804  */
static	ANTLR3_BITWORD FOLLOW_128_in_doWhileStatement1804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000E000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_doWhileStatement1804	= { FOLLOW_128_in_doWhileStatement1804_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1806  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1806	= { FOLLOW_expression_in_doWhileStatement1806_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_doWhileStatement1808  */
static	ANTLR3_BITWORD FOLLOW_129_in_doWhileStatement1808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_doWhileStatement1808	= { FOLLOW_129_in_doWhileStatement1808_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1811  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1811	= { FOLLOW_LTERM_in_doWhileStatement1811_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_doWhileStatement1815  */
static	ANTLR3_BITWORD FOLLOW_133_in_doWhileStatement1815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_doWhileStatement1815	= { FOLLOW_133_in_doWhileStatement1815_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_whileStatement1841  */
static	ANTLR3_BITWORD FOLLOW_140_in_whileStatement1841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_whileStatement1841	= { FOLLOW_140_in_whileStatement1841_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1843  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1843	= { FOLLOW_LTERM_in_whileStatement1843_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_whileStatement1846  */
static	ANTLR3_BITWORD FOLLOW_128_in_whileStatement1846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_whileStatement1846	= { FOLLOW_128_in_whileStatement1846_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1848  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1848	= { FOLLOW_LTERM_in_whileStatement1848_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1851  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1851	= { FOLLOW_expression_in_whileStatement1851_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1853  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1853	= { FOLLOW_LTERM_in_whileStatement1853_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_whileStatement1856  */
static	ANTLR3_BITWORD FOLLOW_129_in_whileStatement1856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_whileStatement1856	= { FOLLOW_129_in_whileStatement1856_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1858  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1858	= { FOLLOW_LTERM_in_whileStatement1858_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1861  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1861	= { FOLLOW_statement_in_whileStatement1861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forStatement1884  */
static	ANTLR3_BITWORD FOLLOW_141_in_forStatement1884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forStatement1884	= { FOLLOW_141_in_forStatement1884_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1886  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1886	= { FOLLOW_LTERM_in_forStatement1886_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_forStatement1889  */
static	ANTLR3_BITWORD FOLLOW_128_in_forStatement1889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000069), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_forStatement1889	= { FOLLOW_128_in_forStatement1889_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1892  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000049), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1892	= { FOLLOW_LTERM_in_forStatement1892_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement1897  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement1897_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement1897	= { FOLLOW_forStatementInitialiserPart_in_forStatement1897_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1901  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1901	= { FOLLOW_LTERM_in_forStatement1901_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_forStatement1904  */
static	ANTLR3_BITWORD FOLLOW_133_in_forStatement1904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000029), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_forStatement1904	= { FOLLOW_133_in_forStatement1904_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1907  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1907	= { FOLLOW_LTERM_in_forStatement1907_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1912  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1912	= { FOLLOW_expression_in_forStatement1912_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1916  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1916	= { FOLLOW_LTERM_in_forStatement1916_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_forStatement1919  */
static	ANTLR3_BITWORD FOLLOW_133_in_forStatement1919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006000000B), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_forStatement1919	= { FOLLOW_133_in_forStatement1919_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1922  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1922	= { FOLLOW_LTERM_in_forStatement1922_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1927  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1927_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1927	= { FOLLOW_expression_in_forStatement1927_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1931  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1931	= { FOLLOW_LTERM_in_forStatement1931_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_forStatement1934  */
static	ANTLR3_BITWORD FOLLOW_129_in_forStatement1934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_forStatement1934	= { FOLLOW_129_in_forStatement1934_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1936  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1936	= { FOLLOW_LTERM_in_forStatement1936_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement1939  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement1939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement1939	= { FOLLOW_statement_in_forStatement1939_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart1988  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart1988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart1988	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart1988_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_forStatementInitialiserPart1993  */
static	ANTLR3_BITWORD FOLLOW_134_in_forStatementInitialiserPart1993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_forStatementInitialiserPart1993	= { FOLLOW_134_in_forStatementInitialiserPart1993_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatementInitialiserPart1995  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatementInitialiserPart1995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatementInitialiserPart1995	= { FOLLOW_LTERM_in_forStatementInitialiserPart1995_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1998  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1998	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forInStatement2018  */
static	ANTLR3_BITWORD FOLLOW_141_in_forInStatement2018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forInStatement2018	= { FOLLOW_141_in_forInStatement2018_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2020  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2020	= { FOLLOW_LTERM_in_forInStatement2020_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_forInStatement2023  */
static	ANTLR3_BITWORD FOLLOW_128_in_forInStatement2023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0x0000000060000049), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_forInStatement2023	= { FOLLOW_128_in_forInStatement2023_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2025  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2025_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0x0000000060000049), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2025	= { FOLLOW_LTERM_in_forInStatement2025_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement2028  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement2028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement2028	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement2028_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2030  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2030	= { FOLLOW_LTERM_in_forInStatement2030_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_forInStatement2033  */
static	ANTLR3_BITWORD FOLLOW_142_in_forInStatement2033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_forInStatement2033	= { FOLLOW_142_in_forInStatement2033_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2035  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2035	= { FOLLOW_LTERM_in_forInStatement2035_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement2038  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement2038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement2038	= { FOLLOW_expression_in_forInStatement2038_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2040  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2040	= { FOLLOW_LTERM_in_forInStatement2040_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_forInStatement2043  */
static	ANTLR3_BITWORD FOLLOW_129_in_forInStatement2043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_forInStatement2043	= { FOLLOW_129_in_forInStatement2043_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2045  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2045	= { FOLLOW_LTERM_in_forInStatement2045_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement2048  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement2048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement2048	= { FOLLOW_statement_in_forInStatement2048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2072  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2072	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2072_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_forInStatementInitialiserPart2081  */
static	ANTLR3_BITWORD FOLLOW_134_in_forInStatementInitialiserPart2081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_forInStatementInitialiserPart2081	= { FOLLOW_134_in_forInStatementInitialiserPart2081_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatementInitialiserPart2083  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatementInitialiserPart2083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatementInitialiserPart2083	= { FOLLOW_LTERM_in_forInStatementInitialiserPart2083_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2086  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2086_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2086	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2086_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_continueStatement2105  */
static	ANTLR3_BITWORD FOLLOW_143_in_continueStatement2105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_continueStatement2105	= { FOLLOW_143_in_continueStatement2105_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2107  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2107	= { FOLLOW_Identifier_in_continueStatement2107_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_continueStatement2111  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_continueStatement2111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_continueStatement2111	= { FOLLOW_LTERM_in_continueStatement2111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_continueStatement2115  */
static	ANTLR3_BITWORD FOLLOW_133_in_continueStatement2115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_continueStatement2115	= { FOLLOW_133_in_continueStatement2115_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_breakStatement2137  */
static	ANTLR3_BITWORD FOLLOW_144_in_breakStatement2137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_breakStatement2137	= { FOLLOW_144_in_breakStatement2137_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2139  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2139	= { FOLLOW_Identifier_in_breakStatement2139_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_breakStatement2143  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_breakStatement2143_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_breakStatement2143	= { FOLLOW_LTERM_in_breakStatement2143_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_breakStatement2147  */
static	ANTLR3_BITWORD FOLLOW_133_in_breakStatement2147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_breakStatement2147	= { FOLLOW_133_in_breakStatement2147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_returnStatement2168  */
static	ANTLR3_BITWORD FOLLOW_145_in_returnStatement2168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000029), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_returnStatement2168	= { FOLLOW_145_in_returnStatement2168_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2170  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2170	= { FOLLOW_expression_in_returnStatement2170_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_returnStatement2174  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_returnStatement2174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_returnStatement2174	= { FOLLOW_LTERM_in_returnStatement2174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_returnStatement2178  */
static	ANTLR3_BITWORD FOLLOW_133_in_returnStatement2178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_returnStatement2178	= { FOLLOW_133_in_returnStatement2178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_withStatement2200  */
static	ANTLR3_BITWORD FOLLOW_146_in_withStatement2200_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_withStatement2200	= { FOLLOW_146_in_withStatement2200_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2202  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2202	= { FOLLOW_LTERM_in_withStatement2202_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_withStatement2205  */
static	ANTLR3_BITWORD FOLLOW_128_in_withStatement2205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_withStatement2205	= { FOLLOW_128_in_withStatement2205_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2207  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2207	= { FOLLOW_LTERM_in_withStatement2207_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2210  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2210	= { FOLLOW_expression_in_withStatement2210_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2212  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2212	= { FOLLOW_LTERM_in_withStatement2212_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_withStatement2215  */
static	ANTLR3_BITWORD FOLLOW_129_in_withStatement2215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_withStatement2215	= { FOLLOW_129_in_withStatement2215_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2217  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2217	= { FOLLOW_LTERM_in_withStatement2217_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2220  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2220	= { FOLLOW_statement_in_withStatement2220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_labelledStatement2241  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_labelledStatement2241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_labelledStatement2241	= { FOLLOW_Identifier_in_labelledStatement2241_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2243  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2243	= { FOLLOW_LTERM_in_labelledStatement2243_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_labelledStatement2246  */
static	ANTLR3_BITWORD FOLLOW_147_in_labelledStatement2246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_labelledStatement2246	= { FOLLOW_147_in_labelledStatement2246_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2248  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2248	= { FOLLOW_LTERM_in_labelledStatement2248_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labelledStatement2251  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labelledStatement2251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labelledStatement2251	= { FOLLOW_statement_in_labelledStatement2251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_switchStatement2274  */
static	ANTLR3_BITWORD FOLLOW_148_in_switchStatement2274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_switchStatement2274	= { FOLLOW_148_in_switchStatement2274_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2276  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2276	= { FOLLOW_LTERM_in_switchStatement2276_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_switchStatement2279  */
static	ANTLR3_BITWORD FOLLOW_128_in_switchStatement2279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_switchStatement2279	= { FOLLOW_128_in_switchStatement2279_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2281  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2281	= { FOLLOW_LTERM_in_switchStatement2281_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2284  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2284	= { FOLLOW_expression_in_switchStatement2284_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2286  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2286	= { FOLLOW_LTERM_in_switchStatement2286_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_switchStatement2289  */
static	ANTLR3_BITWORD FOLLOW_129_in_switchStatement2289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_switchStatement2289	= { FOLLOW_129_in_switchStatement2289_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2291  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2291	= { FOLLOW_LTERM_in_switchStatement2291_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2294  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2294	= { FOLLOW_caseBlock_in_switchStatement2294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_caseBlock2316  */
static	ANTLR3_BITWORD FOLLOW_131_in_caseBlock2316_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000600010) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_caseBlock2316	= { FOLLOW_131_in_caseBlock2316_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2319  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2319	= { FOLLOW_LTERM_in_caseBlock2319_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2324  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000600010) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2324	= { FOLLOW_caseClause_in_caseBlock2324_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2329  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2329	= { FOLLOW_LTERM_in_caseBlock2329_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2332  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000200010) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2332	= { FOLLOW_defaultClause_in_caseBlock2332_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2335  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2335	= { FOLLOW_LTERM_in_caseBlock2335_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2340  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000200010) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2340	= { FOLLOW_caseClause_in_caseBlock2340_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2346  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2346	= { FOLLOW_LTERM_in_caseBlock2346_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_caseBlock2349  */
static	ANTLR3_BITWORD FOLLOW_132_in_caseBlock2349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_caseBlock2349	= { FOLLOW_132_in_caseBlock2349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_caseClause2386  */
static	ANTLR3_BITWORD FOLLOW_149_in_caseClause2386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_caseClause2386	= { FOLLOW_149_in_caseClause2386_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2388  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2388_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2388	= { FOLLOW_LTERM_in_caseClause2388_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause2391  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause2391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause2391	= { FOLLOW_expression_in_caseClause2391_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2393  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2393	= { FOLLOW_LTERM_in_caseClause2393_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_caseClause2396  */
static	ANTLR3_BITWORD FOLLOW_147_in_caseClause2396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_caseClause2396	= { FOLLOW_147_in_caseClause2396_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2398  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2398	= { FOLLOW_LTERM_in_caseClause2398_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2401  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2401	= { FOLLOW_statementList_in_caseClause2401_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_defaultClause2426  */
static	ANTLR3_BITWORD FOLLOW_150_in_defaultClause2426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_defaultClause2426	= { FOLLOW_150_in_defaultClause2426_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2428  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2428	= { FOLLOW_LTERM_in_defaultClause2428_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_defaultClause2431  */
static	ANTLR3_BITWORD FOLLOW_147_in_defaultClause2431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_defaultClause2431	= { FOLLOW_147_in_defaultClause2431_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2433  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2433	= { FOLLOW_LTERM_in_defaultClause2433_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause2436  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause2436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause2436	= { FOLLOW_statementList_in_defaultClause2436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_throwStatement2458  */
static	ANTLR3_BITWORD FOLLOW_151_in_throwStatement2458_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000E000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_throwStatement2458	= { FOLLOW_151_in_throwStatement2458_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement2460  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement2460_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement2460	= { FOLLOW_expression_in_throwStatement2460_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_throwStatement2463  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_throwStatement2463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_throwStatement2463	= { FOLLOW_LTERM_in_throwStatement2463_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_throwStatement2467  */
static	ANTLR3_BITWORD FOLLOW_133_in_throwStatement2467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_throwStatement2467	= { FOLLOW_133_in_throwStatement2467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_tryStatement2488  */
static	ANTLR3_BITWORD FOLLOW_152_in_tryStatement2488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_tryStatement2488	= { FOLLOW_152_in_tryStatement2488_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2490  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2490	= { FOLLOW_LTERM_in_tryStatement2490_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement2493  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement2493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement2493	= { FOLLOW_statementBlock_in_tryStatement2493_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2495  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2495	= { FOLLOW_LTERM_in_tryStatement2495_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2507  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2507	= { FOLLOW_finallyClause_in_tryStatement2507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchClause_in_tryStatement2519  */
static	ANTLR3_BITWORD FOLLOW_catchClause_in_tryStatement2519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_catchClause_in_tryStatement2519	= { FOLLOW_catchClause_in_tryStatement2519_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2522  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2522	= { FOLLOW_LTERM_in_tryStatement2522_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2525  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2525	= { FOLLOW_finallyClause_in_tryStatement2525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_catchClause2558  */
static	ANTLR3_BITWORD FOLLOW_153_in_catchClause2558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_catchClause2558	= { FOLLOW_153_in_catchClause2558_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2560  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2560	= { FOLLOW_LTERM_in_catchClause2560_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_catchClause2563  */
static	ANTLR3_BITWORD FOLLOW_128_in_catchClause2563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_catchClause2563	= { FOLLOW_128_in_catchClause2563_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2565  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2565	= { FOLLOW_LTERM_in_catchClause2565_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause2568  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause2568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause2568	= { FOLLOW_Identifier_in_catchClause2568_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2570  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2570	= { FOLLOW_LTERM_in_catchClause2570_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_catchClause2573  */
static	ANTLR3_BITWORD FOLLOW_129_in_catchClause2573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_catchClause2573	= { FOLLOW_129_in_catchClause2573_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2575  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2575	= { FOLLOW_LTERM_in_catchClause2575_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause2578  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause2578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause2578	= { FOLLOW_statementBlock_in_catchClause2578_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_finallyClause2600  */
static	ANTLR3_BITWORD FOLLOW_154_in_finallyClause2600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_finallyClause2600	= { FOLLOW_154_in_finallyClause2600_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_finallyClause2602  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_finallyClause2602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_finallyClause2602	= { FOLLOW_LTERM_in_finallyClause2602_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause2605  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause2605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause2605	= { FOLLOW_statementBlock_in_finallyClause2605_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2630  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2630	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2630_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2633  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2633	= { FOLLOW_LTERM_in_msgSendStatement2633_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgSendStatement2636  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgSendStatement2636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000E000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgSendStatement2636	= { FOLLOW_155_in_msgSendStatement2636_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2641  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2641	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2641_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2644  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2644	= { FOLLOW_LTERM_in_msgSendStatement2644_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_msgSendStatement2648  */
static	ANTLR3_BITWORD FOLLOW_133_in_msgSendStatement2648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_msgSendStatement2648	= { FOLLOW_133_in_msgSendStatement2648_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgSendStatement2667  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgSendStatement2667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000E000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgSendStatement2667	= { FOLLOW_155_in_msgSendStatement2667_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement2669  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement2669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement2669	= { FOLLOW_memberExpression_in_msgSendStatement2669_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2697  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2697	= { FOLLOW_memberExpression_in_msgRecvStatement2697_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2699  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2699	= { FOLLOW_LTERM_in_msgRecvStatement2699_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_msgRecvStatement2701  */
static	ANTLR3_BITWORD FOLLOW_156_in_msgRecvStatement2701_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000E000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_msgRecvStatement2701	= { FOLLOW_156_in_msgRecvStatement2701_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2705  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2705	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2705_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2708  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2708	= { FOLLOW_LTERM_in_msgRecvStatement2708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_msgRecvStatement2712  */
static	ANTLR3_BITWORD FOLLOW_133_in_msgRecvStatement2712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_msgRecvStatement2712	= { FOLLOW_133_in_msgRecvStatement2712_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2733  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2733	= { FOLLOW_memberExpression_in_msgRecvStatement2733_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2735  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2735	= { FOLLOW_LTERM_in_msgRecvStatement2735_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_msgRecvStatement2737  */
static	ANTLR3_BITWORD FOLLOW_156_in_msgRecvStatement2737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000E000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_msgRecvStatement2737	= { FOLLOW_156_in_msgRecvStatement2737_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2741  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2741	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2741_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2743  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2743	= { FOLLOW_LTERM_in_msgRecvStatement2743_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_msgRecvStatement2746  */
static	ANTLR3_BITWORD FOLLOW_156_in_msgRecvStatement2746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000E000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_msgRecvStatement2746	= { FOLLOW_156_in_msgRecvStatement2746_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2750  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2750_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2750	= { FOLLOW_memberExpression_in_msgRecvStatement2750_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2753  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2753_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2753	= { FOLLOW_LTERM_in_msgRecvStatement2753_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_msgRecvStatement2757  */
static	ANTLR3_BITWORD FOLLOW_133_in_msgRecvStatement2757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_msgRecvStatement2757	= { FOLLOW_133_in_msgRecvStatement2757_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2784  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2784_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2784	= { FOLLOW_assignmentExpression_in_expression2784_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2787  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2787_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2787	= { FOLLOW_LTERM_in_expression2787_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_expression2790  */
static	ANTLR3_BITWORD FOLLOW_130_in_expression2790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_expression2790	= { FOLLOW_130_in_expression2790_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2792  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2792	= { FOLLOW_LTERM_in_expression2792_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2795  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2795	= { FOLLOW_assignmentExpression_in_expression2795_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2819  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2819	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2819_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2822  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2822	= { FOLLOW_LTERM_in_expressionNoIn2822_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_expressionNoIn2825  */
static	ANTLR3_BITWORD FOLLOW_130_in_expressionNoIn2825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_expressionNoIn2825	= { FOLLOW_130_in_expressionNoIn2825_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2827  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2827	= { FOLLOW_LTERM_in_expressionNoIn2827_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2830  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2830	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2830_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression2854  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression2854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression2854	= { FOLLOW_conditionalExpression_in_assignmentExpression2854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression2867  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression2867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x00000FFE00000080) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression2867	= { FOLLOW_leftHandSideExpression_in_assignmentExpression2867_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2869  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x00000FFE00000080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2869	= { FOLLOW_LTERM_in_assignmentExpression2869_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpression2872  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpression2872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpression2872	= { FOLLOW_assignmentOperator_in_assignmentExpression2872_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2874  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2874	= { FOLLOW_LTERM_in_assignmentExpression2874_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression2877  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression2877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression2877	= { FOLLOW_assignmentExpression_in_assignmentExpression2877_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2901  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2901	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2914  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x00000FFE00000080) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2914	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2914_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2916  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x00000FFE00000080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2916	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2916_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2919  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2919	= { FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2919_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2921  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2921	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2921_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2924  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2924	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression2949  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression2949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression2949	= { FOLLOW_callExpression_in_leftHandSideExpression2949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression2958  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression2958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression2958	= { FOLLOW_newExpression_in_leftHandSideExpression2958_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression2974  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression2974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression2974	= { FOLLOW_memberExpression_in_newExpression2974_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_newExpression2983  */
static	ANTLR3_BITWORD FOLLOW_157_in_newExpression2983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_newExpression2983	= { FOLLOW_157_in_newExpression2983_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_newExpression2985  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_newExpression2985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_newExpression2985	= { FOLLOW_LTERM_in_newExpression2985_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression2988  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression2988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression2988	= { FOLLOW_newExpression_in_newExpression2988_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_indexSuffix13010  */
static	ANTLR3_BITWORD FOLLOW_158_in_indexSuffix13010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_indexSuffix13010	= { FOLLOW_158_in_indexSuffix13010_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13012  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13012	= { FOLLOW_LTERM_in_indexSuffix13012_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix13015  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix13015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix13015	= { FOLLOW_expression_in_indexSuffix13015_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13017  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13017	= { FOLLOW_LTERM_in_indexSuffix13017_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_indexSuffix13020  */
static	ANTLR3_BITWORD FOLLOW_159_in_indexSuffix13020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_indexSuffix13020	= { FOLLOW_159_in_indexSuffix13020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_propertyReferenceSuffix13037  */
static	ANTLR3_BITWORD FOLLOW_160_in_propertyReferenceSuffix13037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_propertyReferenceSuffix13037	= { FOLLOW_160_in_propertyReferenceSuffix13037_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix13039  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix13039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix13039	= { FOLLOW_LTERM_in_propertyReferenceSuffix13039_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix13042  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix13042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix13042	= { FOLLOW_Identifier_in_propertyReferenceSuffix13042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression3059  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression3059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression3059	= { FOLLOW_primaryExpression_in_memberExpression3059_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3068  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3068	= { FOLLOW_LTERM_in_memberExpression3068_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3071  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3071_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3071	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3071_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3088  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3088	= { FOLLOW_LTERM_in_memberExpression3088_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3091  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3091	= { FOLLOW_indexSuffix1_in_memberExpression3091_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression3110  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression3110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression3110	= { FOLLOW_functionExpression_in_memberExpression3110_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3118  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3118	= { FOLLOW_LTERM_in_memberExpression3118_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3121  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3121	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3121_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3137  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3137	= { FOLLOW_LTERM_in_memberExpression3137_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3140  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3140	= { FOLLOW_indexSuffix1_in_memberExpression3140_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_memberExpression3159  */
static	ANTLR3_BITWORD FOLLOW_157_in_memberExpression3159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_memberExpression3159	= { FOLLOW_157_in_memberExpression3159_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3161  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3161	= { FOLLOW_LTERM_in_memberExpression3161_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression3166  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression3166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression3166	= { FOLLOW_memberExpression_in_memberExpression3166_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3168  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3168	= { FOLLOW_LTERM_in_memberExpression3168_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression3171  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression3171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression3171	= { FOLLOW_arguments_in_memberExpression3171_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3186  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3186	= { FOLLOW_LTERM_in_memberExpression3186_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3189  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3189	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3189_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3202  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3202	= { FOLLOW_LTERM_in_memberExpression3202_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3205  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3205	= { FOLLOW_indexSuffix1_in_memberExpression3205_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix3240  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix3240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix3240	= { FOLLOW_indexSuffix_in_memberExpressionSuffix3240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3250  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3250	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression3270  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression3270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression3270	= { FOLLOW_memberExpression_in_callExpression3270_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3272  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3272	= { FOLLOW_LTERM_in_callExpression3272_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3275  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000001) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3275	= { FOLLOW_arguments_in_callExpression3275_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3289  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3289	= { FOLLOW_LTERM_in_callExpression3289_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3292  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000001) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3292	= { FOLLOW_arguments_in_callExpression3292_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3307  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3307	= { FOLLOW_LTERM_in_callExpression3307_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression3310  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression3310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000001) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression3310	= { FOLLOW_indexSuffix1_in_callExpression3310_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3325  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3325	= { FOLLOW_LTERM_in_callExpression3325_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression3328  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression3328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000001) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression3328	= { FOLLOW_propertyReferenceSuffix1_in_callExpression3328_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix3355  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix3355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix3355	= { FOLLOW_arguments_in_callExpressionSuffix3355_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix3364  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix3364_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix3364	= { FOLLOW_indexSuffix_in_callExpressionSuffix3364_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3373  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3373	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_arguments3395  */
static	ANTLR3_BITWORD FOLLOW_128_in_arguments3395_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006000000B), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_arguments3395	= { FOLLOW_128_in_arguments3395_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3397  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3397_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006000000B), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3397	= { FOLLOW_LTERM_in_arguments3397_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3401  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3401	= { FOLLOW_assignmentExpression_in_arguments3401_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3405  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3405	= { FOLLOW_LTERM_in_arguments3405_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_arguments3408  */
static	ANTLR3_BITWORD FOLLOW_129_in_arguments3408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_arguments3408	= { FOLLOW_129_in_arguments3408_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_arguments3422  */
static	ANTLR3_BITWORD FOLLOW_128_in_arguments3422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_arguments3422	= { FOLLOW_128_in_arguments3422_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3424  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3424	= { FOLLOW_LTERM_in_arguments3424_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3429  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000006) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3429	= { FOLLOW_assignmentExpression_in_arguments3429_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_arguments3432  */
static	ANTLR3_BITWORD FOLLOW_130_in_arguments3432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_arguments3432	= { FOLLOW_130_in_arguments3432_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3434  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3434	= { FOLLOW_LTERM_in_arguments3434_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3439  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000006) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3439	= { FOLLOW_assignmentExpression_in_arguments3439_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3443  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3443_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3443	= { FOLLOW_LTERM_in_arguments3443_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_arguments3446  */
static	ANTLR3_BITWORD FOLLOW_129_in_arguments3446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_arguments3446	= { FOLLOW_129_in_arguments3446_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_indexSuffix3480  */
static	ANTLR3_BITWORD FOLLOW_158_in_indexSuffix3480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_indexSuffix3480	= { FOLLOW_158_in_indexSuffix3480_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3482  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3482	= { FOLLOW_LTERM_in_indexSuffix3482_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix3485  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix3485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix3485	= { FOLLOW_expression_in_indexSuffix3485_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3487  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3487	= { FOLLOW_LTERM_in_indexSuffix3487_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_indexSuffix3490  */
static	ANTLR3_BITWORD FOLLOW_159_in_indexSuffix3490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_indexSuffix3490	= { FOLLOW_159_in_indexSuffix3490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_propertyReferenceSuffix3511  */
static	ANTLR3_BITWORD FOLLOW_160_in_propertyReferenceSuffix3511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_propertyReferenceSuffix3511	= { FOLLOW_160_in_propertyReferenceSuffix3511_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix3513  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix3513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix3513	= { FOLLOW_LTERM_in_propertyReferenceSuffix3513_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix3516  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix3516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix3516	= { FOLLOW_Identifier_in_propertyReferenceSuffix3516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_assignmentOperator3544  */
static	ANTLR3_BITWORD FOLLOW_135_in_assignmentOperator3544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_assignmentOperator3544	= { FOLLOW_135_in_assignmentOperator3544_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_assignmentOperator3553  */
static	ANTLR3_BITWORD FOLLOW_161_in_assignmentOperator3553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_assignmentOperator3553	= { FOLLOW_161_in_assignmentOperator3553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_assignmentOperator3562  */
static	ANTLR3_BITWORD FOLLOW_162_in_assignmentOperator3562_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_assignmentOperator3562	= { FOLLOW_162_in_assignmentOperator3562_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_assignmentOperator3572  */
static	ANTLR3_BITWORD FOLLOW_163_in_assignmentOperator3572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_assignmentOperator3572	= { FOLLOW_163_in_assignmentOperator3572_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_assignmentOperator3581  */
static	ANTLR3_BITWORD FOLLOW_164_in_assignmentOperator3581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_assignmentOperator3581	= { FOLLOW_164_in_assignmentOperator3581_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_assignmentOperator3590  */
static	ANTLR3_BITWORD FOLLOW_165_in_assignmentOperator3590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_assignmentOperator3590	= { FOLLOW_165_in_assignmentOperator3590_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_assignmentOperator3599  */
static	ANTLR3_BITWORD FOLLOW_166_in_assignmentOperator3599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_assignmentOperator3599	= { FOLLOW_166_in_assignmentOperator3599_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_assignmentOperator3608  */
static	ANTLR3_BITWORD FOLLOW_167_in_assignmentOperator3608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_assignmentOperator3608	= { FOLLOW_167_in_assignmentOperator3608_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_assignmentOperator3617  */
static	ANTLR3_BITWORD FOLLOW_168_in_assignmentOperator3617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_assignmentOperator3617	= { FOLLOW_168_in_assignmentOperator3617_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_assignmentOperator3626  */
static	ANTLR3_BITWORD FOLLOW_169_in_assignmentOperator3626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_assignmentOperator3626	= { FOLLOW_169_in_assignmentOperator3626_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_assignmentOperator3634  */
static	ANTLR3_BITWORD FOLLOW_170_in_assignmentOperator3634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_assignmentOperator3634	= { FOLLOW_170_in_assignmentOperator3634_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_assignmentOperator3643  */
static	ANTLR3_BITWORD FOLLOW_171_in_assignmentOperator3643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_assignmentOperator3643	= { FOLLOW_171_in_assignmentOperator3643_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression3661  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression3661_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression3661	= { FOLLOW_logicalORExpression_in_conditionalExpression3661_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3669  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3669	= { FOLLOW_LTERM_in_conditionalExpression3669_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_conditionalExpression3672  */
static	ANTLR3_BITWORD FOLLOW_172_in_conditionalExpression3672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_conditionalExpression3672	= { FOLLOW_172_in_conditionalExpression3672_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3674  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3674	= { FOLLOW_LTERM_in_conditionalExpression3674_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3679  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3679	= { FOLLOW_assignmentExpression_in_conditionalExpression3679_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3681  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3681_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3681	= { FOLLOW_LTERM_in_conditionalExpression3681_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_conditionalExpression3684  */
static	ANTLR3_BITWORD FOLLOW_147_in_conditionalExpression3684_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_conditionalExpression3684	= { FOLLOW_147_in_conditionalExpression3684_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3686  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3686_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3686	= { FOLLOW_LTERM_in_conditionalExpression3686_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3691  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3691_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3691	= { FOLLOW_assignmentExpression_in_conditionalExpression3691_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3722  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3722	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3722_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3729  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3729_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3729	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3729_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_conditionalExpressionNoIn3732  */
static	ANTLR3_BITWORD FOLLOW_172_in_conditionalExpressionNoIn3732_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_conditionalExpressionNoIn3732	= { FOLLOW_172_in_conditionalExpressionNoIn3732_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3734  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3734	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3734_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3739  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3739	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3739_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3741  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3741	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3741_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_conditionalExpressionNoIn3744  */
static	ANTLR3_BITWORD FOLLOW_147_in_conditionalExpressionNoIn3744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_conditionalExpressionNoIn3744	= { FOLLOW_147_in_conditionalExpressionNoIn3744_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3746  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3746	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3746_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3751  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3751	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3781  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3781	= { FOLLOW_logicalANDExpression_in_logicalORExpression3781_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3788  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3788	= { FOLLOW_LTERM_in_logicalORExpression3788_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_logicalORExpression3791  */
static	ANTLR3_BITWORD FOLLOW_173_in_logicalORExpression3791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_logicalORExpression3791	= { FOLLOW_173_in_logicalORExpression3791_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3793  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3793	= { FOLLOW_LTERM_in_logicalORExpression3793_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3796  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3796	= { FOLLOW_logicalANDExpression_in_logicalORExpression3796_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3823  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3823	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3823_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3830  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3830	= { FOLLOW_LTERM_in_logicalANDExpression3830_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_logicalANDExpression3833  */
static	ANTLR3_BITWORD FOLLOW_174_in_logicalANDExpression3833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_logicalANDExpression3833	= { FOLLOW_174_in_logicalANDExpression3833_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3835  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3835	= { FOLLOW_LTERM_in_logicalANDExpression3835_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3838  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3838_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3838	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3838_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3866  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3866	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3866_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3873  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3873	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3873_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_logicalORExpressionNoIn3876  */
static	ANTLR3_BITWORD FOLLOW_173_in_logicalORExpressionNoIn3876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_logicalORExpressionNoIn3876	= { FOLLOW_173_in_logicalORExpressionNoIn3876_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3878  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3878	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3878_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3881  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3881	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3881_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3910  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3910	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3910_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3918  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3918_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3918	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3918_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_logicalANDExpressionNoIn3921  */
static	ANTLR3_BITWORD FOLLOW_174_in_logicalANDExpressionNoIn3921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_logicalANDExpressionNoIn3921	= { FOLLOW_174_in_logicalANDExpressionNoIn3921_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3923  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3923	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3923_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3926  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3926	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3926_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3953  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3953	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3953_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3961  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3961	= { FOLLOW_LTERM_in_bitwiseORExpression3961_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_bitwiseORExpression3964  */
static	ANTLR3_BITWORD FOLLOW_175_in_bitwiseORExpression3964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_bitwiseORExpression3964	= { FOLLOW_175_in_bitwiseORExpression3964_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3966  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3966	= { FOLLOW_LTERM_in_bitwiseORExpression3966_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3969  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3969	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3969_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3996  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3996	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3996_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4004  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4004	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4004_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_bitwiseORExpressionNoIn4007  */
static	ANTLR3_BITWORD FOLLOW_175_in_bitwiseORExpressionNoIn4007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_bitwiseORExpressionNoIn4007	= { FOLLOW_175_in_bitwiseORExpressionNoIn4007_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4009  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4009	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4009_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4012  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4012	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4012_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4038  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4038	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4038_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4046  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4046	= { FOLLOW_LTERM_in_bitwiseXORExpression4046_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_bitwiseXORExpression4049  */
static	ANTLR3_BITWORD FOLLOW_176_in_bitwiseXORExpression4049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_bitwiseXORExpression4049	= { FOLLOW_176_in_bitwiseXORExpression4049_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4051  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4051	= { FOLLOW_LTERM_in_bitwiseXORExpression4051_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4054  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4054	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4054_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4081  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4081	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4081_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4088  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4088	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4088_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_bitwiseXORExpressionNoIn4091  */
static	ANTLR3_BITWORD FOLLOW_176_in_bitwiseXORExpressionNoIn4091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_bitwiseXORExpressionNoIn4091	= { FOLLOW_176_in_bitwiseXORExpressionNoIn4091_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4093  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4093	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4093_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4096  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4096	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4096_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4124  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4124	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4124_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4132  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4132	= { FOLLOW_LTERM_in_bitwiseANDExpression4132_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_bitwiseANDExpression4135  */
static	ANTLR3_BITWORD FOLLOW_177_in_bitwiseANDExpression4135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_bitwiseANDExpression4135	= { FOLLOW_177_in_bitwiseANDExpression4135_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4137  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4137	= { FOLLOW_LTERM_in_bitwiseANDExpression4137_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4140  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4140	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4140_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4168  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4168	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4168_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4176  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4176	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4176_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_bitwiseANDExpressionNoIn4179  */
static	ANTLR3_BITWORD FOLLOW_177_in_bitwiseANDExpressionNoIn4179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_bitwiseANDExpressionNoIn4179	= { FOLLOW_177_in_bitwiseANDExpressionNoIn4179_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4181  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4181	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4181_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4184  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4184	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4184_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4211  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4211	= { FOLLOW_relationalExpression_in_equalityExpression4211_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4218  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4218	= { FOLLOW_LTERM_in_equalityExpression4218_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpression4221  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpression4221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpression4221	= { FOLLOW_equalityOps_in_equalityExpression4221_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4223  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4223	= { FOLLOW_LTERM_in_equalityExpression4223_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4226  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4226	= { FOLLOW_relationalExpression_in_equalityExpression4226_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_equalityOps4251  */
static	ANTLR3_BITWORD FOLLOW_178_in_equalityOps4251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_equalityOps4251	= { FOLLOW_178_in_equalityOps4251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_equalityOps4261  */
static	ANTLR3_BITWORD FOLLOW_179_in_equalityOps4261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_equalityOps4261	= { FOLLOW_179_in_equalityOps4261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_equalityOps4271  */
static	ANTLR3_BITWORD FOLLOW_180_in_equalityOps4271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_equalityOps4271	= { FOLLOW_180_in_equalityOps4271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_equalityOps4281  */
static	ANTLR3_BITWORD FOLLOW_181_in_equalityOps4281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_equalityOps4281	= { FOLLOW_181_in_equalityOps4281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4298  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4298_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4298	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4298_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4305  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4305	= { FOLLOW_LTERM_in_equalityExpressionNoIn4305_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpressionNoIn4308  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpressionNoIn4308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpressionNoIn4308	= { FOLLOW_equalityOps_in_equalityExpressionNoIn4308_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4310  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4310	= { FOLLOW_LTERM_in_equalityExpressionNoIn4310_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4313  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4313	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4313_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_relationalOps4338  */
static	ANTLR3_BITWORD FOLLOW_182_in_relationalOps4338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_relationalOps4338	= { FOLLOW_182_in_relationalOps4338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_relationalOps4349  */
static	ANTLR3_BITWORD FOLLOW_183_in_relationalOps4349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_relationalOps4349	= { FOLLOW_183_in_relationalOps4349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_relationalOps4360  */
static	ANTLR3_BITWORD FOLLOW_184_in_relationalOps4360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_relationalOps4360	= { FOLLOW_184_in_relationalOps4360_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_relationalOps4370  */
static	ANTLR3_BITWORD FOLLOW_185_in_relationalOps4370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_relationalOps4370	= { FOLLOW_185_in_relationalOps4370_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_relationalOps4380  */
static	ANTLR3_BITWORD FOLLOW_186_in_relationalOps4380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_relationalOps4380	= { FOLLOW_186_in_relationalOps4380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_relationalOps4390  */
static	ANTLR3_BITWORD FOLLOW_142_in_relationalOps4390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_relationalOps4390	= { FOLLOW_142_in_relationalOps4390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4415  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x07C0000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4415	= { FOLLOW_shiftExpression_in_relationalExpression4415_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4423  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x07C0000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4423	= { FOLLOW_LTERM_in_relationalExpression4423_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression4426  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression4426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression4426	= { FOLLOW_relationalOps_in_relationalExpression4426_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4428  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4428	= { FOLLOW_LTERM_in_relationalExpression4428_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4431  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x07C0000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4431	= { FOLLOW_shiftExpression_in_relationalExpression4431_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_relationalOpsNoIn4455  */
static	ANTLR3_BITWORD FOLLOW_182_in_relationalOpsNoIn4455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_relationalOpsNoIn4455	= { FOLLOW_182_in_relationalOpsNoIn4455_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_relationalOpsNoIn4466  */
static	ANTLR3_BITWORD FOLLOW_183_in_relationalOpsNoIn4466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_relationalOpsNoIn4466	= { FOLLOW_183_in_relationalOpsNoIn4466_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_relationalOpsNoIn4477  */
static	ANTLR3_BITWORD FOLLOW_184_in_relationalOpsNoIn4477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_relationalOpsNoIn4477	= { FOLLOW_184_in_relationalOpsNoIn4477_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_relationalOpsNoIn4487  */
static	ANTLR3_BITWORD FOLLOW_185_in_relationalOpsNoIn4487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_relationalOpsNoIn4487	= { FOLLOW_185_in_relationalOpsNoIn4487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_relationalOpsNoIn4497  */
static	ANTLR3_BITWORD FOLLOW_186_in_relationalOpsNoIn4497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_relationalOpsNoIn4497	= { FOLLOW_186_in_relationalOpsNoIn4497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4514  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x07C0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4514	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4514_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4522  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x07C0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4522	= { FOLLOW_LTERM_in_relationalExpressionNoIn4522_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4525  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4525	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4525_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4527  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4527	= { FOLLOW_LTERM_in_relationalExpressionNoIn4527_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4530  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x07C0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4530	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4530_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_shiftOps4553  */
static	ANTLR3_BITWORD FOLLOW_187_in_shiftOps4553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_shiftOps4553	= { FOLLOW_187_in_shiftOps4553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_shiftOps4563  */
static	ANTLR3_BITWORD FOLLOW_188_in_shiftOps4563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_shiftOps4563	= { FOLLOW_188_in_shiftOps4563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_shiftOps4572  */
static	ANTLR3_BITWORD FOLLOW_189_in_shiftOps4572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_shiftOps4572	= { FOLLOW_189_in_shiftOps4572_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4589  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x3800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4589	= { FOLLOW_additiveExpression_in_shiftExpression4589_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4596  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x3800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4596	= { FOLLOW_LTERM_in_shiftExpression4596_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftOps_in_shiftExpression4599  */
static	ANTLR3_BITWORD FOLLOW_shiftOps_in_shiftExpression4599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftOps_in_shiftExpression4599	= { FOLLOW_shiftOps_in_shiftExpression4599_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4601  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4601	= { FOLLOW_LTERM_in_shiftExpression4601_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4604  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4604_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x3800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4604	= { FOLLOW_additiveExpression_in_shiftExpression4604_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_addOps4630  */
static	ANTLR3_BITWORD FOLLOW_190_in_addOps4630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_addOps4630	= { FOLLOW_190_in_addOps4630_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_addOps4640  */
static	ANTLR3_BITWORD FOLLOW_191_in_addOps4640_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_addOps4640	= { FOLLOW_191_in_addOps4640_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4658  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0xC000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4658	= { FOLLOW_multiplicativeExpression_in_additiveExpression4658_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4665  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0xC000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4665	= { FOLLOW_LTERM_in_additiveExpression4665_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_additiveExpression4668  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_additiveExpression4668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_additiveExpression4668	= { FOLLOW_addOps_in_additiveExpression4668_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4670  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4670	= { FOLLOW_LTERM_in_additiveExpression4670_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4673  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0xC000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4673	= { FOLLOW_multiplicativeExpression_in_additiveExpression4673_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_multOps4698  */
static	ANTLR3_BITWORD FOLLOW_192_in_multOps4698_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_multOps4698	= { FOLLOW_192_in_multOps4698_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_multOps4708  */
static	ANTLR3_BITWORD FOLLOW_193_in_multOps4708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_multOps4708	= { FOLLOW_193_in_multOps4708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_multOps4718  */
static	ANTLR3_BITWORD FOLLOW_194_in_multOps4718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_multOps4718	= { FOLLOW_194_in_multOps4718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4735  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4735	= { FOLLOW_unaryExpression_in_multiplicativeExpression4735_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4744  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4744	= { FOLLOW_LTERM_in_multiplicativeExpression4744_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multOps_in_multiplicativeExpression4747  */
static	ANTLR3_BITWORD FOLLOW_multOps_in_multiplicativeExpression4747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_multOps_in_multiplicativeExpression4747	= { FOLLOW_multOps_in_multiplicativeExpression4747_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4749  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4749	= { FOLLOW_LTERM_in_multiplicativeExpression4749_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4752  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4752	= { FOLLOW_unaryExpression_in_multiplicativeExpression4752_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression4777  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression4777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression4777	= { FOLLOW_leftHandSideExpression_in_postfixExpression4777_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_postfixExpression4779  */
static	ANTLR3_BITWORD FOLLOW_195_in_postfixExpression4779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_postfixExpression4779	= { FOLLOW_195_in_postfixExpression4779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression4793  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression4793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression4793	= { FOLLOW_leftHandSideExpression_in_postfixExpression4793_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_postfixExpression4795  */
static	ANTLR3_BITWORD FOLLOW_196_in_postfixExpression4795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_postfixExpression4795	= { FOLLOW_196_in_postfixExpression4795_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression4807  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression4807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression4807	= { FOLLOW_leftHandSideExpression_in_postfixExpression4807_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_unaryOps4824  */
static	ANTLR3_BITWORD FOLLOW_197_in_unaryOps4824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_unaryOps4824	= { FOLLOW_197_in_unaryOps4824_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_unaryOps4834  */
static	ANTLR3_BITWORD FOLLOW_198_in_unaryOps4834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_unaryOps4834	= { FOLLOW_198_in_unaryOps4834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_unaryOps4844  */
static	ANTLR3_BITWORD FOLLOW_199_in_unaryOps4844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_unaryOps4844	= { FOLLOW_199_in_unaryOps4844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_unaryOps4854  */
static	ANTLR3_BITWORD FOLLOW_196_in_unaryOps4854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_unaryOps4854	= { FOLLOW_196_in_unaryOps4854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_unaryOps4865  */
static	ANTLR3_BITWORD FOLLOW_195_in_unaryOps4865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_unaryOps4865	= { FOLLOW_195_in_unaryOps4865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_unaryOps4876  */
static	ANTLR3_BITWORD FOLLOW_190_in_unaryOps4876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_unaryOps4876	= { FOLLOW_190_in_unaryOps4876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_unaryOps4888  */
static	ANTLR3_BITWORD FOLLOW_191_in_unaryOps4888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_unaryOps4888	= { FOLLOW_191_in_unaryOps4888_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_unaryOps4900  */
static	ANTLR3_BITWORD FOLLOW_200_in_unaryOps4900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_unaryOps4900	= { FOLLOW_200_in_unaryOps4900_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_unaryOps4912  */
static	ANTLR3_BITWORD FOLLOW_201_in_unaryOps4912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_unaryOps4912	= { FOLLOW_201_in_unaryOps4912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression4931  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression4931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression4931	= { FOLLOW_postfixExpression_in_unaryExpression4931_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryOps_in_unaryExpression4940  */
static	ANTLR3_BITWORD FOLLOW_unaryOps_in_unaryExpression4940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000E000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryOps_in_unaryExpression4940	= { FOLLOW_unaryOps_in_unaryExpression4940_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression4944  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression4944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression4944	= { FOLLOW_unaryExpression_in_unaryExpression4944_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_primaryExpression4966  */
static	ANTLR3_BITWORD FOLLOW_202_in_primaryExpression4966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_primaryExpression4966	= { FOLLOW_202_in_primaryExpression4966_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression4971  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression4971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression4971	= { FOLLOW_Identifier_in_primaryExpression4971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression4983  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression4983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression4983	= { FOLLOW_dollarExpression_in_primaryExpression4983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression4988  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression4988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression4988	= { FOLLOW_literal_in_primaryExpression4988_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression4993  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression4993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression4993	= { FOLLOW_arrayLiteral_in_primaryExpression4993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression4998  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression4998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression4998	= { FOLLOW_objectLiteral_in_primaryExpression4998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_primaryExpression5003  */
static	ANTLR3_BITWORD FOLLOW_128_in_primaryExpression5003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_primaryExpression5003	= { FOLLOW_128_in_primaryExpression5003_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5005  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5005_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5005	= { FOLLOW_LTERM_in_primaryExpression5005_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression5008  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression5008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression5008	= { FOLLOW_expression_in_primaryExpression5008_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5010  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5010	= { FOLLOW_LTERM_in_primaryExpression5010_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_primaryExpression5013  */
static	ANTLR3_BITWORD FOLLOW_129_in_primaryExpression5013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_primaryExpression5013	= { FOLLOW_129_in_primaryExpression5013_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_dollarExpression5041  */
static	ANTLR3_BITWORD FOLLOW_203_in_dollarExpression5041_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_dollarExpression5041	= { FOLLOW_203_in_dollarExpression5041_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression5043  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression5043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression5043	= { FOLLOW_LTERM_in_dollarExpression5043_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression5046  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression5046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression5046	= { FOLLOW_Identifier_in_dollarExpression5046_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression5048  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression5048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression5048	= { FOLLOW_LTERM_in_dollarExpression5048_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_dollarExpression5051  */
static	ANTLR3_BITWORD FOLLOW_203_in_dollarExpression5051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_dollarExpression5051	= { FOLLOW_203_in_dollarExpression5051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_arrayLiteral5087  */
static	ANTLR3_BITWORD FOLLOW_158_in_arrayLiteral5087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC0000000E0000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_arrayLiteral5087	= { FOLLOW_158_in_arrayLiteral5087_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5089  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC0000000E0000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5089	= { FOLLOW_LTERM_in_arrayLiteral5089_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral5093  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral5093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral5093	= { FOLLOW_assignmentExpression_in_arrayLiteral5093_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5097  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5097_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5097	= { FOLLOW_LTERM_in_arrayLiteral5097_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_arrayLiteral5100  */
static	ANTLR3_BITWORD FOLLOW_159_in_arrayLiteral5100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_arrayLiteral5100	= { FOLLOW_159_in_arrayLiteral5100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_arrayLiteral5114  */
static	ANTLR3_BITWORD FOLLOW_158_in_arrayLiteral5114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_arrayLiteral5114	= { FOLLOW_158_in_arrayLiteral5114_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5116  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5116	= { FOLLOW_LTERM_in_arrayLiteral5116_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral5121  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral5121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000004) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral5121	= { FOLLOW_assignmentExpression_in_arrayLiteral5121_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_arrayLiteral5124  */
static	ANTLR3_BITWORD FOLLOW_130_in_arrayLiteral5124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_arrayLiteral5124	= { FOLLOW_130_in_arrayLiteral5124_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5126  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5126	= { FOLLOW_LTERM_in_arrayLiteral5126_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral5131  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral5131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000004) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral5131	= { FOLLOW_assignmentExpression_in_arrayLiteral5131_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5135  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5135	= { FOLLOW_LTERM_in_arrayLiteral5135_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_arrayLiteral5138  */
static	ANTLR3_BITWORD FOLLOW_159_in_arrayLiteral5138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_arrayLiteral5138	= { FOLLOW_159_in_arrayLiteral5138_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_objectLiteral5169  */
static	ANTLR3_BITWORD FOLLOW_131_in_objectLiteral5169_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000F000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_objectLiteral5169	= { FOLLOW_131_in_objectLiteral5169_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5171  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000F000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5171	= { FOLLOW_LTERM_in_objectLiteral5171_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5174  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5174	= { FOLLOW_propertyNameAndValue_in_objectLiteral5174_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5177  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5177	= { FOLLOW_LTERM_in_objectLiteral5177_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_objectLiteral5180  */
static	ANTLR3_BITWORD FOLLOW_132_in_objectLiteral5180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_objectLiteral5180	= { FOLLOW_132_in_objectLiteral5180_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_objectLiteral5194  */
static	ANTLR3_BITWORD FOLLOW_131_in_objectLiteral5194_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000F000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_objectLiteral5194	= { FOLLOW_131_in_objectLiteral5194_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5196  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000F000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5196	= { FOLLOW_LTERM_in_objectLiteral5196_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5201  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000014) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5201	= { FOLLOW_propertyNameAndValue_in_objectLiteral5201_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_objectLiteral5204  */
static	ANTLR3_BITWORD FOLLOW_130_in_objectLiteral5204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000F000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_objectLiteral5204	= { FOLLOW_130_in_objectLiteral5204_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5206  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000F000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5206	= { FOLLOW_LTERM_in_objectLiteral5206_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5211  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000014) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5211	= { FOLLOW_propertyNameAndValue_in_objectLiteral5211_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5215  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5215	= { FOLLOW_LTERM_in_objectLiteral5215_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_objectLiteral5222  */
static	ANTLR3_BITWORD FOLLOW_132_in_objectLiteral5222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_objectLiteral5222	= { FOLLOW_132_in_objectLiteral5222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue5246  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue5246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue5246	= { FOLLOW_propertyName_in_propertyNameAndValue5246_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue5248  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue5248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue5248	= { FOLLOW_LTERM_in_propertyNameAndValue5248_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_propertyNameAndValue5251  */
static	ANTLR3_BITWORD FOLLOW_147_in_propertyNameAndValue5251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_propertyNameAndValue5251	= { FOLLOW_147_in_propertyNameAndValue5251_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue5253  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue5253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue5253	= { FOLLOW_LTERM_in_propertyNameAndValue5253_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_propertyNameAndValue5256  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_propertyNameAndValue5256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_propertyNameAndValue5256	= { FOLLOW_assignmentExpression_in_propertyNameAndValue5256_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_propertyName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_propertyName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_propertyName0	= { FOLLOW_set_in_propertyName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred1_Emerson793  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred1_Emerson793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred1_Emerson793	= { FOLLOW_LTERM_in_synpred1_Emerson793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred3_Emerson825  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred3_Emerson825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred3_Emerson825	= { FOLLOW_LTERM_in_synpred3_Emerson825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred7_Emerson882  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred7_Emerson882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred7_Emerson882	= { FOLLOW_LTERM_in_synpred7_Emerson882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred10_Emerson919  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred10_Emerson919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred10_Emerson919	= { FOLLOW_LTERM_in_synpred10_Emerson919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred13_Emerson930  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred13_Emerson930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred13_Emerson930	= { FOLLOW_LTERM_in_synpred13_Emerson930_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred21_Emerson1021  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred21_Emerson1021_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred21_Emerson1021	= { FOLLOW_LTERM_in_synpred21_Emerson1021_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_synpred23_Emerson1047  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_synpred23_Emerson1047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_synpred23_Emerson1047	= { FOLLOW_noOpStatement_in_synpred23_Emerson1047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred24_Emerson1059  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred24_Emerson1059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred24_Emerson1059	= { FOLLOW_statementBlock_in_synpred24_Emerson1059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_synpred26_Emerson1069  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_synpred26_Emerson1069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_synpred26_Emerson1069	= { FOLLOW_emptyStatement_in_synpred26_Emerson1069_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred27_Emerson1074  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred27_Emerson1074_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred27_Emerson1074	= { FOLLOW_expressionStatement_in_synpred27_Emerson1074_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_synpred34_Emerson1109  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_synpred34_Emerson1109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_synpred34_Emerson1109	= { FOLLOW_labelledStatement_in_synpred34_Emerson1109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_synpred39_Emerson1141  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_synpred39_Emerson1141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_synpred39_Emerson1141	= { FOLLOW_msgSendStatement_in_synpred39_Emerson1141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred42_Emerson1178  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred42_Emerson1178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred42_Emerson1178	= { FOLLOW_LTERM_in_synpred42_Emerson1178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred44_Emerson1252  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred44_Emerson1252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred44_Emerson1252	= { FOLLOW_LTERM_in_synpred44_Emerson1252_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred54_Emerson1374  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred54_Emerson1374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred54_Emerson1374	= { FOLLOW_LTERM_in_synpred54_Emerson1374_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred56_Emerson1403  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred56_Emerson1403_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred56_Emerson1403	= { FOLLOW_LTERM_in_synpred56_Emerson1403_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_synpred71_Emerson1655  */
static	ANTLR3_BITWORD FOLLOW_130_in_synpred71_Emerson1655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_synpred71_Emerson1655	= { FOLLOW_130_in_synpred71_Emerson1655_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred71_Emerson1657  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred71_Emerson1657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred71_Emerson1657	= { FOLLOW_LTERM_in_synpred71_Emerson1657_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_synpred71_Emerson1662  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_synpred71_Emerson1662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_synpred71_Emerson1662	= { FOLLOW_whenCheckedListSubsequent_in_synpred71_Emerson1662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred75_Emerson1712  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred75_Emerson1712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred75_Emerson1712	= { FOLLOW_LTERM_in_synpred75_Emerson1712_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred77_Emerson1725  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred77_Emerson1725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred77_Emerson1725	= { FOLLOW_LTERM_in_synpred77_Emerson1725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred78_Emerson1720  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred78_Emerson1720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred78_Emerson1720	= { FOLLOW_LTERM_in_synpred78_Emerson1720_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_synpred78_Emerson1723  */
static	ANTLR3_BITWORD FOLLOW_138_in_synpred78_Emerson1723_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_synpred78_Emerson1723	= { FOLLOW_138_in_synpred78_Emerson1723_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred78_Emerson1725  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred78_Emerson1725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006197BB69), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred78_Emerson1725	= { FOLLOW_LTERM_in_synpred78_Emerson1725_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred78_Emerson1730  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred78_Emerson1730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred78_Emerson1730	= { FOLLOW_statement_in_synpred78_Emerson1730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_synpred81_Emerson1772  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_synpred81_Emerson1772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_synpred81_Emerson1772	= { FOLLOW_forStatement_in_synpred81_Emerson1772_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred82_Emerson1791  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred82_Emerson1791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred82_Emerson1791	= { FOLLOW_LTERM_in_synpred82_Emerson1791_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred89_Emerson1858  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred89_Emerson1858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred89_Emerson1858	= { FOLLOW_LTERM_in_synpred89_Emerson1858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred100_Emerson1936  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred100_Emerson1936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred100_Emerson1936	= { FOLLOW_LTERM_in_synpred100_Emerson1936_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred108_Emerson2045  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred108_Emerson2045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred108_Emerson2045	= { FOLLOW_LTERM_in_synpred108_Emerson2045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred120_Emerson2217  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred120_Emerson2217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred120_Emerson2217	= { FOLLOW_LTERM_in_synpred120_Emerson2217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred122_Emerson2248  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred122_Emerson2248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred122_Emerson2248	= { FOLLOW_LTERM_in_synpred122_Emerson2248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred136_Emerson2398  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred136_Emerson2398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred136_Emerson2398	= { FOLLOW_LTERM_in_synpred136_Emerson2398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred139_Emerson2433  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred139_Emerson2433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred139_Emerson2433	= { FOLLOW_LTERM_in_synpred139_Emerson2433_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred157_Emerson2697  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred157_Emerson2697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred157_Emerson2697	= { FOLLOW_memberExpression_in_synpred157_Emerson2697_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred157_Emerson2699  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred157_Emerson2699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred157_Emerson2699	= { FOLLOW_LTERM_in_synpred157_Emerson2699_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_synpred157_Emerson2701  */
static	ANTLR3_BITWORD FOLLOW_156_in_synpred157_Emerson2701_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000E000000000), ANTLR3_UINT64_LIT(0x0000000060000009), ANTLR3_UINT64_LIT(0x0000000000007C00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_synpred157_Emerson2701	= { FOLLOW_156_in_synpred157_Emerson2701_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred157_Emerson2705  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred157_Emerson2705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred157_Emerson2705	= { FOLLOW_leftHandSideExpression_in_synpred157_Emerson2705_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred157_Emerson2707  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred157_Emerson2707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred157_Emerson2707	= { FOLLOW_set_in_synpred157_Emerson2707_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred163_Emerson2787  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred163_Emerson2787_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred163_Emerson2787	= { FOLLOW_LTERM_in_synpred163_Emerson2787_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_synpred163_Emerson2790  */
static	ANTLR3_BITWORD FOLLOW_130_in_synpred163_Emerson2790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_synpred163_Emerson2790	= { FOLLOW_130_in_synpred163_Emerson2790_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred163_Emerson2792  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred163_Emerson2792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred163_Emerson2792	= { FOLLOW_LTERM_in_synpred163_Emerson2792_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred163_Emerson2795  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred163_Emerson2795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred163_Emerson2795	= { FOLLOW_assignmentExpression_in_synpred163_Emerson2795_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_synpred167_Emerson2854  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_synpred167_Emerson2854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_synpred167_Emerson2854	= { FOLLOW_conditionalExpression_in_synpred167_Emerson2854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_synpred170_Emerson2901  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_synpred170_Emerson2901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_synpred170_Emerson2901	= { FOLLOW_conditionalExpressionNoIn_in_synpred170_Emerson2901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred173_Emerson2949  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred173_Emerson2949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred173_Emerson2949	= { FOLLOW_callExpression_in_synpred173_Emerson2949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred174_Emerson2974  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred174_Emerson2974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred174_Emerson2974	= { FOLLOW_memberExpression_in_synpred174_Emerson2974_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred180_Emerson3068  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred180_Emerson3068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred180_Emerson3068	= { FOLLOW_LTERM_in_synpred180_Emerson3068_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3071  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3071_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3071	= { FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3071_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred182_Emerson3088  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred182_Emerson3088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred182_Emerson3088	= { FOLLOW_LTERM_in_synpred182_Emerson3088_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred182_Emerson3091  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred182_Emerson3091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred182_Emerson3091	= { FOLLOW_indexSuffix1_in_synpred182_Emerson3091_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred185_Emerson3118  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred185_Emerson3118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred185_Emerson3118	= { FOLLOW_LTERM_in_synpred185_Emerson3118_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred185_Emerson3121  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred185_Emerson3121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred185_Emerson3121	= { FOLLOW_propertyReferenceSuffix1_in_synpred185_Emerson3121_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred187_Emerson3137  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred187_Emerson3137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred187_Emerson3137	= { FOLLOW_LTERM_in_synpred187_Emerson3137_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred187_Emerson3140  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred187_Emerson3140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred187_Emerson3140	= { FOLLOW_indexSuffix1_in_synpred187_Emerson3140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred192_Emerson3186  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred192_Emerson3186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred192_Emerson3186	= { FOLLOW_LTERM_in_synpred192_Emerson3186_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3189  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3189	= { FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred194_Emerson3202  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred194_Emerson3202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred194_Emerson3202	= { FOLLOW_LTERM_in_synpred194_Emerson3202_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred194_Emerson3205  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred194_Emerson3205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred194_Emerson3205	= { FOLLOW_indexSuffix1_in_synpred194_Emerson3205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred198_Emerson3289  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred198_Emerson3289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred198_Emerson3289	= { FOLLOW_LTERM_in_synpred198_Emerson3289_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred198_Emerson3292  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred198_Emerson3292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred198_Emerson3292	= { FOLLOW_arguments_in_synpred198_Emerson3292_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred200_Emerson3307  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred200_Emerson3307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred200_Emerson3307	= { FOLLOW_LTERM_in_synpred200_Emerson3307_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred200_Emerson3310  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred200_Emerson3310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred200_Emerson3310	= { FOLLOW_indexSuffix1_in_synpred200_Emerson3310_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred202_Emerson3325  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred202_Emerson3325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred202_Emerson3325	= { FOLLOW_LTERM_in_synpred202_Emerson3325_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred202_Emerson3328  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred202_Emerson3328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred202_Emerson3328	= { FOLLOW_propertyReferenceSuffix1_in_synpred202_Emerson3328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred205_Emerson3397  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred205_Emerson3397_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred205_Emerson3397	= { FOLLOW_LTERM_in_synpred205_Emerson3397_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_synpred208_Emerson3395  */
static	ANTLR3_BITWORD FOLLOW_128_in_synpred208_Emerson3395_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006000000B), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_synpred208_Emerson3395	= { FOLLOW_128_in_synpred208_Emerson3395_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred208_Emerson3397  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred208_Emerson3397_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC00000006000000B), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred208_Emerson3397	= { FOLLOW_LTERM_in_synpred208_Emerson3397_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred208_Emerson3401  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred208_Emerson3401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred208_Emerson3401	= { FOLLOW_assignmentExpression_in_synpred208_Emerson3401_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred208_Emerson3405  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred208_Emerson3405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred208_Emerson3405	= { FOLLOW_LTERM_in_synpred208_Emerson3405_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_synpred208_Emerson3408  */
static	ANTLR3_BITWORD FOLLOW_129_in_synpred208_Emerson3408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_synpred208_Emerson3408	= { FOLLOW_129_in_synpred208_Emerson3408_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred299_Emerson4665  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred299_Emerson4665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0xC000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred299_Emerson4665	= { FOLLOW_LTERM_in_synpred299_Emerson4665_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_synpred299_Emerson4668  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_synpred299_Emerson4668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_synpred299_Emerson4668	= { FOLLOW_addOps_in_synpred299_Emerson4668_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred299_Emerson4670  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred299_Emerson4670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC000000060000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred299_Emerson4670	= { FOLLOW_LTERM_in_synpred299_Emerson4670_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_synpred299_Emerson4673  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_synpred299_Emerson4673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_synpred299_Emerson4673	= { FOLLOW_multiplicativeExpression_in_synpred299_Emerson4673_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred305_Emerson4777  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred305_Emerson4777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred305_Emerson4777	= { FOLLOW_leftHandSideExpression_in_synpred305_Emerson4777_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_synpred305_Emerson4779  */
static	ANTLR3_BITWORD FOLLOW_195_in_synpred305_Emerson4779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_synpred305_Emerson4779	= { FOLLOW_195_in_synpred305_Emerson4779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred306_Emerson4793  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred306_Emerson4793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred306_Emerson4793	= { FOLLOW_leftHandSideExpression_in_synpred306_Emerson4793_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_synpred306_Emerson4795  */
static	ANTLR3_BITWORD FOLLOW_196_in_synpred306_Emerson4795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_synpred306_Emerson4795	= { FOLLOW_196_in_synpred306_Emerson4795_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred326_Emerson5089  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred326_Emerson5089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred326_Emerson5089	= { FOLLOW_LTERM_in_synpred326_Emerson5089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_synpred329_Emerson5087  */
static	ANTLR3_BITWORD FOLLOW_158_in_synpred329_Emerson5087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC0000000E0000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_synpred329_Emerson5087	= { FOLLOW_158_in_synpred329_Emerson5087_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred329_Emerson5089  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred329_Emerson5089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x800000F000000000), ANTLR3_UINT64_LIT(0xC0000000E0000009), ANTLR3_UINT64_LIT(0x0000000000007FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred329_Emerson5089	= { FOLLOW_LTERM_in_synpred329_Emerson5089_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred329_Emerson5093  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred329_Emerson5093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred329_Emerson5093	= { FOLLOW_assignmentExpression_in_synpred329_Emerson5093_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred329_Emerson5097  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred329_Emerson5097_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred329_Emerson5097	= { FOLLOW_LTERM_in_synpred329_Emerson5097_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_synpred329_Emerson5100  */
static	ANTLR3_BITWORD FOLLOW_159_in_synpred329_Emerson5100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_synpred329_Emerson5100	= { FOLLOW_159_in_synpred329_Emerson5100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred334_Emerson5171  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred334_Emerson5171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred334_Emerson5171	= { FOLLOW_LTERM_in_synpred334_Emerson5171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_synpred337_Emerson5169  */
static	ANTLR3_BITWORD FOLLOW_131_in_synpred337_Emerson5169_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000F000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_synpred337_Emerson5169	= { FOLLOW_131_in_synpred337_Emerson5169_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred337_Emerson5171  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred337_Emerson5171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000F000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred337_Emerson5171	= { FOLLOW_LTERM_in_synpred337_Emerson5171_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred337_Emerson5174  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred337_Emerson5174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred337_Emerson5174	= { FOLLOW_propertyNameAndValue_in_synpred337_Emerson5174_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred337_Emerson5177  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred337_Emerson5177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred337_Emerson5177	= { FOLLOW_LTERM_in_synpred337_Emerson5177_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_synpred337_Emerson5180  */
static	ANTLR3_BITWORD FOLLOW_132_in_synpred337_Emerson5180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_synpred337_Emerson5180	= { FOLLOW_132_in_synpred337_Emerson5180_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 136:18: ( ( LTERM )* sourceElement )*
 */
static const ANTLR3_INT32 dfa4_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa4_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa4_max[4] =
    {
	206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa4_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa4_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa4_T_empty	    NULL

static const ANTLR3_INT32 dfa4_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa4_transitions[] =
{
    dfa4_T0, dfa4_T0, dfa4_T_empty, dfa4_T_empty	
};


/* Declare tracking structure for Cyclic DFA 4
 */
static
ANTLR3_CYCLIC_DFA cdfa4
    =	{
	    4,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 136:18: ( ( LTERM )* sourceElement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa4_eot,	    /* EOT table			    */
	    dfa4_eof,	    /* EOF table			    */
	    dfa4_min,	    /* Minimum tokens for each state    */
	    dfa4_max,	    /* Maximum tokens for each state    */
	    dfa4_accept,	/* Accept table			    */
	    dfa4_special,	/* Special transition states	    */
	    dfa4_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 4
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    139:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static const ANTLR3_INT32 dfa5_eot[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[7] =
    {
	100, 100, -1, 100, 100, 100, -1
    };
static const ANTLR3_INT32 dfa5_max[7] =
    {
	206, 128, -1, 128, 131, 131, -1
    };
static const ANTLR3_INT32 dfa5_accept[7] =
    {
	-1, -1, 2, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa5_special[7] =
    {	
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 6
    };static const ANTLR3_INT32 dfa5_T1[] =
    {
	2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 2, -1, 2, 2, -1, 2, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa5_T2[] =
    {
	3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T1, dfa5_T2, dfa5_T_empty, dfa5_T2, dfa5_T0, dfa5_T0, dfa5_T_empty	
};


/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"139:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    157:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa22_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_min[5] =
    {
	131, 100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa22_max[5] =
    {
	131, 206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa22_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa22_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa22_T_empty	    NULL

static const ANTLR3_INT32 dfa22_T0[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 4, 3, 3, -1, 3, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa22_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa22_transitions[] =
{
    dfa22_T1, dfa22_T0, dfa22_T0, dfa22_T_empty, dfa22_T_empty	
};


/* Declare tracking structure for Cyclic DFA 22
 */
static
ANTLR3_CYCLIC_DFA cdfa22
    =	{
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"157:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 22
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    163:1: statement : ( noOpStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static const ANTLR3_INT32 dfa23_eot[39] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[39] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[39] =
    {
	100, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa23_max[39] =
    {
	206, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa23_accept[39] =
    {
	-1, -1, -1, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 
	-1, -1, -1, 6, 7, -1, -1, 8, 9, 10, 11, 13, 14, 15, 16, 1, 2, 17, 18, 12
    };
static const ANTLR3_INT32 dfa23_special[39] =
    {	
	-1, 0, 1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	4, 6, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, 10, -1, -1, 2, -1, 1, 3, -1, 32, 22, 
	-1, 23, 23, 23, -1, 26, 27, 28, 29, -1, 30, -1, -1, 31, 33, -1, -1, -1, 
	-1, 12, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, 
	-1, -1, -1, 13, 13, 13, 13, 13, 13, 13, 5, 7, 8, 8, 8
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T0, dfa23_T1, dfa23_T1, dfa23_T_empty, dfa23_T_empty, dfa23_T1, 
    dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty	
};

static ANTLR3_INT32 dfa23_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA23_1;

    	    ANTLR3_MARKER index23_1;


    		LA23_1 = LA(1);

    	 
    	    index23_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred23_Emerson(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index23_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA23_2;

    	    ANTLR3_MARKER index23_2;


    		LA23_2 = LA(1);

    	 
    	    index23_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred24_Emerson(ctx)) )
    	    {
    	        s = 35;
    	    }

    	    else if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (synpred39_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index23_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA23_5;

    	    ANTLR3_MARKER index23_5;


    		LA23_5 = LA(1);

    	 
    	    index23_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (synpred39_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index23_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA23_6;

    	    ANTLR3_MARKER index23_6;


    		LA23_6 = LA(1);

    	 
    	    index23_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (synpred34_Emerson(ctx)) )
    	    {
    	        s = 38;
    	    }

    	    else if ( (synpred39_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index23_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA23_7;

    	    ANTLR3_MARKER index23_7;


    		LA23_7 = LA(1);

    	 
    	    index23_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (synpred39_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index23_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA23_8;

    	    ANTLR3_MARKER index23_8;


    		LA23_8 = LA(1);

    	 
    	    index23_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (synpred39_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index23_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA23_9;

    	    ANTLR3_MARKER index23_9;


    		LA23_9 = LA(1);

    	 
    	    index23_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (synpred39_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index23_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA23_10;

    	    ANTLR3_MARKER index23_10;


    		LA23_10 = LA(1);

    	 
    	    index23_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (synpred39_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index23_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA23_11;

    	    ANTLR3_MARKER index23_11;


    		LA23_11 = LA(1);

    	 
    	    index23_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (synpred39_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index23_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA23_12;

    	    ANTLR3_MARKER index23_12;


    		LA23_12 = LA(1);

    	 
    	    index23_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (synpred39_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index23_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"163:1: statement : ( noOpStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );";
    EXCEPTION->decisionNum  = 23;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"163:1: statement : ( noOpStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa23_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 23
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    184:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa27_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_min[5] =
    {
	131, 100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa27_max[5] =
    {
	131, 206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa27_accept[5] =
    {
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa27_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa27_T_empty	    NULL

static const ANTLR3_INT32 dfa27_T0[] =
    {
	1
    };static const ANTLR3_INT32 dfa27_T1[] =
    {
	2, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, 3, 4, 4, -1, 4, 4, -1, 
	4, 4, 4, -1, 4, 4, 4, 4, -1, 4, -1, -1, 4, 4, -1, -1, -1, -1, 4, 4, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa27_transitions[] =
{
    dfa27_T0, dfa27_T1, dfa27_T1, dfa27_T_empty, dfa27_T_empty	
};


/* Declare tracking structure for Cyclic DFA 27
 */
static
ANTLR3_CYCLIC_DFA cdfa27
    =	{
	    27,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"184:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa27_eot,	    /* EOT table			    */
	    dfa27_eof,	    /* EOF table			    */
	    dfa27_min,	    /* Minimum tokens for each state    */
	    dfa27_max,	    /* Maximum tokens for each state    */
	    dfa27_accept,	/* Accept table			    */
	    dfa27_special,	/* Special transition states	    */
	    dfa27_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 27
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()+ loopback of 195:4: ( ( LTERM )* statement )+
 */
static const ANTLR3_INT32 dfa29_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa29_max[4] =
    {
	206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa29_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa29_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa29_T_empty	    NULL

static const ANTLR3_INT32 dfa29_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, 2, 2, 3, 3, -1, -1, -1, -1, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa29_transitions[] =
{
    dfa29_T0, dfa29_T0, dfa29_T_empty, dfa29_T_empty	
};


/* Declare tracking structure for Cyclic DFA 29
 */
static
ANTLR3_CYCLIC_DFA cdfa29
    =	{
	    29,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()+ loopback of 195:4: ( ( LTERM )* statement )+",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa29_eot,	    /* EOT table			    */
	    dfa29_eof,	    /* EOF table			    */
	    dfa29_min,	    /* Minimum tokens for each state    */
	    dfa29_max,	    /* Maximum tokens for each state    */
	    dfa29_accept,	/* Accept table			    */
	    dfa29_special,	/* Special transition states	    */
	    dfa29_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 29
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 203:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
 */
static const ANTLR3_INT32 dfa34_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa34_eof[5] =
    {
	-1, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa34_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa34_max[5] =
    {
	133, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa34_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa34_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa34_T_empty	    NULL

static const ANTLR3_INT32 dfa34_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa34_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa34_transitions[] =
{
    dfa34_T1, dfa34_T0, dfa34_T_empty, dfa34_T_empty, dfa34_T0	
};


/* Declare tracking structure for Cyclic DFA 34
 */
static
ANTLR3_CYCLIC_DFA cdfa34
    =	{
	    34,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 203:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa34_eot,	    /* EOT table			    */
	    dfa34_eof,	    /* EOF table			    */
	    dfa34_min,	    /* Minimum tokens for each state    */
	    dfa34_max,	    /* Maximum tokens for each state    */
	    dfa34_accept,	/* Accept table			    */
	    dfa34_special,	/* Special transition states	    */
	    dfa34_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 34
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 207:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
 */
static const ANTLR3_INT32 dfa37_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa37_max[4] =
    {
	133, 133, -1, -1
    };
static const ANTLR3_INT32 dfa37_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa37_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa37_T_empty	    NULL

static const ANTLR3_INT32 dfa37_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa37_transitions[] =
{
    dfa37_T0, dfa37_T0, dfa37_T_empty, dfa37_T_empty	
};


/* Declare tracking structure for Cyclic DFA 37
 */
static
ANTLR3_CYCLIC_DFA cdfa37
    =	{
	    37,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 207:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa37_eot,	    /* EOT table			    */
	    dfa37_eof,	    /* EOF table			    */
	    dfa37_min,	    /* Minimum tokens for each state    */
	    dfa37_max,	    /* Maximum tokens for each state    */
	    dfa37_accept,	/* Accept table			    */
	    dfa37_special,	/* Special transition states	    */
	    dfa37_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 37
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    274:21: ( ( LTERM )* init= forStatementInitialiserPart )?
 */
static const ANTLR3_INT32 dfa74_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa74_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa74_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa74_max[4] =
    {
	206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa74_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa74_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa74_T_empty	    NULL

static const ANTLR3_INT32 dfa74_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa74_transitions[] =
{
    dfa74_T0, dfa74_T0, dfa74_T_empty, dfa74_T_empty	
};


/* Declare tracking structure for Cyclic DFA 74
 */
static
ANTLR3_CYCLIC_DFA cdfa74
    =	{
	    74,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"274:21: ( ( LTERM )* init= forStatementInitialiserPart )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa74_eot,	    /* EOT table			    */
	    dfa74_eof,	    /* EOF table			    */
	    dfa74_min,	    /* Minimum tokens for each state    */
	    dfa74_max,	    /* Maximum tokens for each state    */
	    dfa74_accept,	/* Accept table			    */
	    dfa74_special,	/* Special transition states	    */
	    dfa74_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 74
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    274:75: ( ( LTERM )* cond= expression )?
 */
static const ANTLR3_INT32 dfa77_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa77_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa77_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa77_max[4] =
    {
	206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa77_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa77_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa77_T_empty	    NULL

static const ANTLR3_INT32 dfa77_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa77_transitions[] =
{
    dfa77_T0, dfa77_T0, dfa77_T_empty, dfa77_T_empty	
};


/* Declare tracking structure for Cyclic DFA 77
 */
static
ANTLR3_CYCLIC_DFA cdfa77
    =	{
	    77,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"274:75: ( ( LTERM )* cond= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa77_eot,	    /* EOT table			    */
	    dfa77_eof,	    /* EOF table			    */
	    dfa77_min,	    /* Minimum tokens for each state    */
	    dfa77_max,	    /* Maximum tokens for each state    */
	    dfa77_accept,	/* Accept table			    */
	    dfa77_special,	/* Special transition states	    */
	    dfa77_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 77
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    274:112: ( ( LTERM )* iter= expression )?
 */
static const ANTLR3_INT32 dfa80_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa80_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa80_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa80_max[4] =
    {
	206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa80_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa80_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa80_T_empty	    NULL

static const ANTLR3_INT32 dfa80_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa80_transitions[] =
{
    dfa80_T0, dfa80_T0, dfa80_T_empty, dfa80_T_empty	
};


/* Declare tracking structure for Cyclic DFA 80
 */
static
ANTLR3_CYCLIC_DFA cdfa80
    =	{
	    80,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"274:112: ( ( LTERM )* iter= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa80_eot,	    /* EOT table			    */
	    dfa80_eof,	    /* EOF table			    */
	    dfa80_min,	    /* Minimum tokens for each state    */
	    dfa80_max,	    /* Maximum tokens for each state    */
	    dfa80_accept,	/* Accept table			    */
	    dfa80_special,	/* Special transition states	    */
	    dfa80_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 80
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 316:8: ( ( LTERM )* case1= caseClause )*
 */
static const ANTLR3_INT32 dfa110_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa110_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa110_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa110_max[4] =
    {
	150, 150, -1, -1
    };
static const ANTLR3_INT32 dfa110_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa110_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa110_T_empty	    NULL

static const ANTLR3_INT32 dfa110_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa110_transitions[] =
{
    dfa110_T0, dfa110_T0, dfa110_T_empty, dfa110_T_empty	
};


/* Declare tracking structure for Cyclic DFA 110
 */
static
ANTLR3_CYCLIC_DFA cdfa110
    =	{
	    110,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 316:8: ( ( LTERM )* case1= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa110_eot,	    /* EOT table			    */
	    dfa110_eof,	    /* EOF table			    */
	    dfa110_min,	    /* Minimum tokens for each state    */
	    dfa110_max,	    /* Maximum tokens for each state    */
	    dfa110_accept,	/* Accept table			    */
	    dfa110_special,	/* Special transition states	    */
	    dfa110_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 110
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    316:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
 */
static const ANTLR3_INT32 dfa114_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa114_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa114_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa114_max[4] =
    {
	150, 150, -1, -1
    };
static const ANTLR3_INT32 dfa114_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa114_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa114_T_empty	    NULL

static const ANTLR3_INT32 dfa114_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa114_transitions[] =
{
    dfa114_T0, dfa114_T0, dfa114_T_empty, dfa114_T_empty	
};


/* Declare tracking structure for Cyclic DFA 114
 */
static
ANTLR3_CYCLIC_DFA cdfa114
    =	{
	    114,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"316:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa114_eot,	    /* EOT table			    */
	    dfa114_eof,	    /* EOF table			    */
	    dfa114_min,	    /* Minimum tokens for each state    */
	    dfa114_max,	    /* Maximum tokens for each state    */
	    dfa114_accept,	/* Accept table			    */
	    dfa114_special,	/* Special transition states	    */
	    dfa114_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 114
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 316:57: ( ( LTERM )* case2= caseClause )*
 */
static const ANTLR3_INT32 dfa113_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa113_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa113_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa113_max[4] =
    {
	149, 149, -1, -1
    };
static const ANTLR3_INT32 dfa113_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa113_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa113_T_empty	    NULL

static const ANTLR3_INT32 dfa113_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa113_transitions[] =
{
    dfa113_T0, dfa113_T0, dfa113_T_empty, dfa113_T_empty	
};


/* Declare tracking structure for Cyclic DFA 113
 */
static
ANTLR3_CYCLIC_DFA cdfa113
    =	{
	    113,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 316:57: ( ( LTERM )* case2= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa113_eot,	    /* EOT table			    */
	    dfa113_eof,	    /* EOF table			    */
	    dfa113_min,	    /* Minimum tokens for each state    */
	    dfa113_max,	    /* Maximum tokens for each state    */
	    dfa113_accept,	/* Accept table			    */
	    dfa113_special,	/* Special transition states	    */
	    dfa113_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 113
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    320:47: ( statementList )?
 */
static const ANTLR3_INT32 dfa119_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa119_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa119_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa119_max[4] =
    {
	206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa119_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa119_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa119_T_empty	    NULL

static const ANTLR3_INT32 dfa119_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, -1, 2, 3, 3, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa119_transitions[] =
{
    dfa119_T0, dfa119_T0, dfa119_T_empty, dfa119_T_empty	
};


/* Declare tracking structure for Cyclic DFA 119
 */
static
ANTLR3_CYCLIC_DFA cdfa119
    =	{
	    119,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"320:47: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa119_eot,	    /* EOT table			    */
	    dfa119_eof,	    /* EOF table			    */
	    dfa119_min,	    /* Minimum tokens for each state    */
	    dfa119_max,	    /* Maximum tokens for each state    */
	    dfa119_accept,	/* Accept table			    */
	    dfa119_special,	/* Special transition states	    */
	    dfa119_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 119
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    324:32: ( statementList )?
 */
static const ANTLR3_INT32 dfa122_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa122_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa122_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa122_max[4] =
    {
	206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa122_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa122_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa122_T_empty	    NULL

static const ANTLR3_INT32 dfa122_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, -1, 2, 3, -1, 2, 2, -1, -1, -1, -1, 2, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa122_transitions[] =
{
    dfa122_T0, dfa122_T0, dfa122_T_empty, dfa122_T_empty	
};


/* Declare tracking structure for Cyclic DFA 122
 */
static
ANTLR3_CYCLIC_DFA cdfa122
    =	{
	    122,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"324:32: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa122_eot,	    /* EOT table			    */
	    dfa122_eof,	    /* EOF table			    */
	    dfa122_min,	    /* Minimum tokens for each state    */
	    dfa122_max,	    /* Maximum tokens for each state    */
	    dfa122_accept,	/* Accept table			    */
	    dfa122_special,	/* Special transition states	    */
	    dfa122_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 122
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    332:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
 */
static const ANTLR3_INT32 dfa127_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa127_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa127_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa127_max[4] =
    {
	206, 206, -1, -1
    };
static const ANTLR3_INT32 dfa127_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa127_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa127_T_empty	    NULL

static const ANTLR3_INT32 dfa127_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 3, 3, 3, -1, 3, 3, 3, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, -1, 2, -1, -1, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa127_transitions[] =
{
    dfa127_T0, dfa127_T0, dfa127_T_empty, dfa127_T_empty	
};


/* Declare tracking structure for Cyclic DFA 127
 */
static
ANTLR3_CYCLIC_DFA cdfa127
    =	{
	    127,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"332:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa127_eot,	    /* EOT table			    */
	    dfa127_eof,	    /* EOF table			    */
	    dfa127_min,	    /* Minimum tokens for each state    */
	    dfa127_max,	    /* Maximum tokens for each state    */
	    dfa127_accept,	/* Accept table			    */
	    dfa127_special,	/* Special transition states	    */
	    dfa127_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 127
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    352:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static const ANTLR3_INT32 dfa142_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa142_eof[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa142_min[12] =
    {
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa142_max[12] =
    {
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa142_accept[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa142_special[12] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa142_T_empty	    NULL

static const ANTLR3_INT32 dfa142_T0[] =
    {
	2, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 4, 4, 4
    };static const ANTLR3_INT32 dfa142_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa142_transitions[] =
{
    dfa142_T0, dfa142_T1, dfa142_T1, dfa142_T1, dfa142_T1, dfa142_T1, dfa142_T1, 
    dfa142_T1, dfa142_T1, dfa142_T1, dfa142_T_empty, dfa142_T_empty	
};

static ANTLR3_INT32 dfa142_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA142_1;

    	    ANTLR3_MARKER index142_1;


    		LA142_1 = LA(1);

    	 
    	    index142_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index142_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA142_2;

    	    ANTLR3_MARKER index142_2;


    		LA142_2 = LA(1);

    	 
    	    index142_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index142_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA142_3;

    	    ANTLR3_MARKER index142_3;


    		LA142_3 = LA(1);

    	 
    	    index142_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index142_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA142_4;

    	    ANTLR3_MARKER index142_4;


    		LA142_4 = LA(1);

    	 
    	    index142_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index142_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA142_5;

    	    ANTLR3_MARKER index142_5;


    		LA142_5 = LA(1);

    	 
    	    index142_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index142_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA142_6;

    	    ANTLR3_MARKER index142_6;


    		LA142_6 = LA(1);

    	 
    	    index142_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index142_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA142_7;

    	    ANTLR3_MARKER index142_7;


    		LA142_7 = LA(1);

    	 
    	    index142_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index142_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA142_8;

    	    ANTLR3_MARKER index142_8;


    		LA142_8 = LA(1);

    	 
    	    index142_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index142_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA142_9;

    	    ANTLR3_MARKER index142_9;


    		LA142_9 = LA(1);

    	 
    	    index142_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index142_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"352:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );";
    EXCEPTION->decisionNum  = 142;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 142
 */
static
ANTLR3_CYCLIC_DFA cdfa142
    =	{
	    142,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"352:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );",	
	    (CDFA_SPECIAL_FUNC) dfa142_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa142_eot,	    /* EOT table			    */
	    dfa142_eof,	    /* EOF table			    */
	    dfa142_min,	    /* Minimum tokens for each state    */
	    dfa142_max,	    /* Maximum tokens for each state    */
	    dfa142_accept,	/* Accept table			    */
	    dfa142_special,	/* Special transition states	    */
	    dfa142_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 142
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 363:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
 */
static const ANTLR3_INT32 dfa148_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa148_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa148_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa148_max[4] =
    {
	133, 133, -1, -1
    };
static const ANTLR3_INT32 dfa148_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa148_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa148_T_empty	    NULL

static const ANTLR3_INT32 dfa148_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa148_transitions[] =
{
    dfa148_T0, dfa148_T0, dfa148_T_empty, dfa148_T_empty	
};


/* Declare tracking structure for Cyclic DFA 148
 */
static
ANTLR3_CYCLIC_DFA cdfa148
    =	{
	    148,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 363:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa148_eot,	    /* EOT table			    */
	    dfa148_eof,	    /* EOF table			    */
	    dfa148_min,	    /* Minimum tokens for each state    */
	    dfa148_max,	    /* Maximum tokens for each state    */
	    dfa148_accept,	/* Accept table			    */
	    dfa148_special,	/* Special transition states	    */
	    dfa148_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 148
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    367:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static const ANTLR3_INT32 dfa151_eot[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa151_eof[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa151_min[20] =
    {
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa151_max[20] =
    {
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa151_accept[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2
    };
static const ANTLR3_INT32 dfa151_special[20] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa151_T_empty	    NULL

static const ANTLR3_INT32 dfa151_T0[] =
    {
	2, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, -1, -1, 
	-1, 10, 10, 10, 10, 10, 10, 10, 1, 3, 4, 4, 4
    };static const ANTLR3_INT32 dfa151_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa151_transitions[] =
{
    dfa151_T0, dfa151_T1, dfa151_T1, dfa151_T1, dfa151_T1, dfa151_T1, dfa151_T1, 
    dfa151_T1, dfa151_T1, dfa151_T1, dfa151_T_empty, dfa151_T_empty, dfa151_T_empty, 
    dfa151_T_empty, dfa151_T_empty, dfa151_T_empty, dfa151_T_empty, dfa151_T_empty, 
    dfa151_T_empty, dfa151_T_empty	
};

static ANTLR3_INT32 dfa151_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA151_1;

    	    ANTLR3_MARKER index151_1;


    		LA151_1 = LA(1);

    	 
    	    index151_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index151_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA151_2;

    	    ANTLR3_MARKER index151_2;


    		LA151_2 = LA(1);

    	 
    	    index151_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index151_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA151_3;

    	    ANTLR3_MARKER index151_3;


    		LA151_3 = LA(1);

    	 
    	    index151_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index151_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA151_4;

    	    ANTLR3_MARKER index151_4;


    		LA151_4 = LA(1);

    	 
    	    index151_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index151_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA151_5;

    	    ANTLR3_MARKER index151_5;


    		LA151_5 = LA(1);

    	 
    	    index151_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index151_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA151_6;

    	    ANTLR3_MARKER index151_6;


    		LA151_6 = LA(1);

    	 
    	    index151_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index151_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA151_7;

    	    ANTLR3_MARKER index151_7;


    		LA151_7 = LA(1);

    	 
    	    index151_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index151_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA151_8;

    	    ANTLR3_MARKER index151_8;


    		LA151_8 = LA(1);

    	 
    	    index151_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index151_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA151_9;

    	    ANTLR3_MARKER index151_9;


    		LA151_9 = LA(1);

    	 
    	    index151_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index151_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"367:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );";
    EXCEPTION->decisionNum  = 151;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 151
 */
static
ANTLR3_CYCLIC_DFA cdfa151
    =	{
	    151,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"367:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa151_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa151_eot,	    /* EOT table			    */
	    dfa151_eof,	    /* EOF table			    */
	    dfa151_min,	    /* Minimum tokens for each state    */
	    dfa151_max,	    /* Maximum tokens for each state    */
	    dfa151_accept,	/* Accept table			    */
	    dfa151_special,	/* Special transition states	    */
	    dfa151_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 151
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    372:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static const ANTLR3_INT32 dfa154_eot[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa154_eof[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa154_min[20] =
    {
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa154_max[20] =
    {
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa154_accept[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2
    };
static const ANTLR3_INT32 dfa154_special[20] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa154_T_empty	    NULL

static const ANTLR3_INT32 dfa154_T0[] =
    {
	2, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, -1, -1, 
	-1, 10, 10, 10, 10, 10, 10, 10, 1, 3, 4, 4, 4
    };static const ANTLR3_INT32 dfa154_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa154_transitions[] =
{
    dfa154_T0, dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T1, 
    dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T_empty, dfa154_T_empty, dfa154_T_empty, 
    dfa154_T_empty, dfa154_T_empty, dfa154_T_empty, dfa154_T_empty, dfa154_T_empty, 
    dfa154_T_empty, dfa154_T_empty	
};

static ANTLR3_INT32 dfa154_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA154_1;

    	    ANTLR3_MARKER index154_1;


    		LA154_1 = LA(1);

    	 
    	    index154_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index154_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA154_2;

    	    ANTLR3_MARKER index154_2;


    		LA154_2 = LA(1);

    	 
    	    index154_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index154_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA154_3;

    	    ANTLR3_MARKER index154_3;


    		LA154_3 = LA(1);

    	 
    	    index154_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index154_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA154_4;

    	    ANTLR3_MARKER index154_4;


    		LA154_4 = LA(1);

    	 
    	    index154_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index154_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA154_5;

    	    ANTLR3_MARKER index154_5;


    		LA154_5 = LA(1);

    	 
    	    index154_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index154_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA154_6;

    	    ANTLR3_MARKER index154_6;


    		LA154_6 = LA(1);

    	 
    	    index154_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index154_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA154_7;

    	    ANTLR3_MARKER index154_7;


    		LA154_7 = LA(1);

    	 
    	    index154_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index154_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA154_8;

    	    ANTLR3_MARKER index154_8;


    		LA154_8 = LA(1);

    	 
    	    index154_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index154_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA154_9;

    	    ANTLR3_MARKER index154_9;


    		LA154_9 = LA(1);

    	 
    	    index154_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index154_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"372:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );";
    EXCEPTION->decisionNum  = 154;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 154
 */
static
ANTLR3_CYCLIC_DFA cdfa154
    =	{
	    154,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"372:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );",	
	    (CDFA_SPECIAL_FUNC) dfa154_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa154_eot,	    /* EOT table			    */
	    dfa154_eof,	    /* EOF table			    */
	    dfa154_min,	    /* Minimum tokens for each state    */
	    dfa154_max,	    /* Maximum tokens for each state    */
	    dfa154_accept,	/* Accept table			    */
	    dfa154_special,	/* Special transition states	    */
	    dfa154_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 154
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    377:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static const ANTLR3_INT32 dfa155_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa155_eof[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa155_min[12] =
    {
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa155_max[12] =
    {
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa155_accept[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa155_special[12] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa155_T_empty	    NULL

static const ANTLR3_INT32 dfa155_T0[] =
    {
	2, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 4, 4, 4
    };static const ANTLR3_INT32 dfa155_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa155_transitions[] =
{
    dfa155_T0, dfa155_T1, dfa155_T1, dfa155_T1, dfa155_T1, dfa155_T1, dfa155_T1, 
    dfa155_T1, dfa155_T1, dfa155_T1, dfa155_T_empty, dfa155_T_empty	
};

static ANTLR3_INT32 dfa155_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA155_1;

    	    ANTLR3_MARKER index155_1;


    		LA155_1 = LA(1);

    	 
    	    index155_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index155_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA155_2;

    	    ANTLR3_MARKER index155_2;


    		LA155_2 = LA(1);

    	 
    	    index155_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index155_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA155_3;

    	    ANTLR3_MARKER index155_3;


    		LA155_3 = LA(1);

    	 
    	    index155_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index155_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA155_4;

    	    ANTLR3_MARKER index155_4;


    		LA155_4 = LA(1);

    	 
    	    index155_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index155_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA155_5;

    	    ANTLR3_MARKER index155_5;


    		LA155_5 = LA(1);

    	 
    	    index155_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index155_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA155_6;

    	    ANTLR3_MARKER index155_6;


    		LA155_6 = LA(1);

    	 
    	    index155_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index155_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA155_7;

    	    ANTLR3_MARKER index155_7;


    		LA155_7 = LA(1);

    	 
    	    index155_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index155_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA155_8;

    	    ANTLR3_MARKER index155_8;


    		LA155_8 = LA(1);

    	 
    	    index155_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index155_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA155_9;

    	    ANTLR3_MARKER index155_9;


    		LA155_9 = LA(1);

    	 
    	    index155_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index155_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"377:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );";
    EXCEPTION->decisionNum  = 155;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 155
 */
static
ANTLR3_CYCLIC_DFA cdfa155
    =	{
	    155,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"377:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa155_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa155_eot,	    /* EOT table			    */
	    dfa155_eof,	    /* EOF table			    */
	    dfa155_min,	    /* Minimum tokens for each state    */
	    dfa155_max,	    /* Maximum tokens for each state    */
	    dfa155_accept,	/* Accept table			    */
	    dfa155_special,	/* Special transition states	    */
	    dfa155_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 155
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    382:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa157_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa157_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa157_min[11] =
    {
	101, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa157_max[11] =
    {
	206, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa157_accept[11] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa157_special[11] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa157_T_empty	    NULL

static const ANTLR3_INT32 dfa157_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa157_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa157_transitions[] =
{
    dfa157_T0, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T1, 
    dfa157_T_empty	
};

static ANTLR3_INT32 dfa157_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA157_9;

    	    ANTLR3_MARKER index157_9;


    		LA157_9 = LA(1);

    	 
    	    index157_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index157_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"382:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 157;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 157
 */
static
ANTLR3_CYCLIC_DFA cdfa157
    =	{
	    157,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"382:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa157_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa157_eot,	    /* EOT table			    */
	    dfa157_eof,	    /* EOF table			    */
	    dfa157_min,	    /* Minimum tokens for each state    */
	    dfa157_max,	    /* Maximum tokens for each state    */
	    dfa157_accept,	/* Accept table			    */
	    dfa157_special,	/* Special transition states	    */
	    dfa157_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 157
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 399:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa163_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa163_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa163_min[81] =
    {
	100, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa163_max[81] =
    {
	206, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa163_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa163_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa163_T_empty	    NULL

static const ANTLR3_INT32 dfa163_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 10, 2, 79, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa163_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa163_transitions[] =
{
    dfa163_T0, dfa163_T1, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T1, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, dfa163_T_empty, 
    dfa163_T_empty	
};

static ANTLR3_INT32 dfa163_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA163_1;

    	    ANTLR3_MARKER index163_1;


    		LA163_1 = LA(1);

    	 
    	    index163_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred180_Emerson(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred182_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index163_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA163_10;

    	    ANTLR3_MARKER index163_10;


    		LA163_10 = LA(1);

    	 
    	    index163_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index163_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 399:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 163;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 163
 */
static
ANTLR3_CYCLIC_DFA cdfa163
    =	{
	    163,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 399:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa163_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa163_eot,	    /* EOT table			    */
	    dfa163_eof,	    /* EOF table			    */
	    dfa163_min,	    /* Minimum tokens for each state    */
	    dfa163_max,	    /* Maximum tokens for each state    */
	    dfa163_accept,	/* Accept table			    */
	    dfa163_special,	/* Special transition states	    */
	    dfa163_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 163
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 400:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa166_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa166_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa166_min[81] =
    {
	100, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa166_max[81] =
    {
	206, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa166_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa166_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa166_T_empty	    NULL

static const ANTLR3_INT32 dfa166_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 10, 2, 79, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa166_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa166_transitions[] =
{
    dfa166_T0, dfa166_T1, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T1, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, dfa166_T_empty, 
    dfa166_T_empty	
};

static ANTLR3_INT32 dfa166_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA166_1;

    	    ANTLR3_MARKER index166_1;


    		LA166_1 = LA(1);

    	 
    	    index166_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred185_Emerson(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred187_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index166_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA166_10;

    	    ANTLR3_MARKER index166_10;


    		LA166_10 = LA(1);

    	 
    	    index166_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred187_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index166_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 400:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 166;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 166
 */
static
ANTLR3_CYCLIC_DFA cdfa166
    =	{
	    166,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 400:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa166_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa166_eot,	    /* EOT table			    */
	    dfa166_eof,	    /* EOF table			    */
	    dfa166_min,	    /* Minimum tokens for each state    */
	    dfa166_max,	    /* Maximum tokens for each state    */
	    dfa166_accept,	/* Accept table			    */
	    dfa166_special,	/* Special transition states	    */
	    dfa166_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 166
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 401:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa171_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa171_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa171_min[81] =
    {
	100, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa171_max[81] =
    {
	206, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa171_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa171_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa171_T_empty	    NULL

static const ANTLR3_INT32 dfa171_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 10, 2, 79, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa171_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa171_transitions[] =
{
    dfa171_T0, dfa171_T1, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T1, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty	
};

static ANTLR3_INT32 dfa171_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA171_1;

    	    ANTLR3_MARKER index171_1;


    		LA171_1 = LA(1);

    	 
    	    index171_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred192_Emerson(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred194_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index171_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA171_10;

    	    ANTLR3_MARKER index171_10;


    		LA171_10 = LA(1);

    	 
    	    index171_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred194_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index171_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 401:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 171;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 171
 */
static
ANTLR3_CYCLIC_DFA cdfa171
    =	{
	    171,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 401:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa171_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa171_eot,	    /* EOT table			    */
	    dfa171_eof,	    /* EOF table			    */
	    dfa171_min,	    /* Minimum tokens for each state    */
	    dfa171_max,	    /* Maximum tokens for each state    */
	    dfa171_accept,	/* Accept table			    */
	    dfa171_special,	/* Special transition states	    */
	    dfa171_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 171
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 410:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa178_eot[52] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa178_eof[52] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa178_min[52] =
    {
	100, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa178_max[52] =
    {
	196, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa178_accept[52] =
    {
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3
    };
static const ANTLR3_INT32 dfa178_special[52] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa178_T_empty	    NULL

static const ANTLR3_INT32 dfa178_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 2, 2, -1, 2, 2, -1, 2, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, 50, 2, 51, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa178_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa178_transitions[] =
{
    dfa178_T0, dfa178_T1, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, dfa178_T_empty, 
    dfa178_T_empty, dfa178_T_empty	
};

static ANTLR3_INT32 dfa178_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA178_1;

    	    ANTLR3_MARKER index178_1;


    		LA178_1 = LA(1);

    	 
    	    index178_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred198_Emerson(ctx)) )
    	    {
    	        s = 49;
    	    }

    	    else if ( (synpred200_Emerson(ctx)) )
    	    {
    	        s = 50;
    	    }

    	    else if ( (synpred202_Emerson(ctx)) )
    	    {
    	        s = 51;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index178_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 410:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*";
    EXCEPTION->decisionNum  = 178;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 178
 */
static
ANTLR3_CYCLIC_DFA cdfa178
    =	{
	    178,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 410:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa178_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa178_eot,	    /* EOT table			    */
	    dfa178_eof,	    /* EOF table			    */
	    dfa178_min,	    /* Minimum tokens for each state    */
	    dfa178_max,	    /* Maximum tokens for each state    */
	    dfa178_accept,	/* Accept table			    */
	    dfa178_special,	/* Special transition states	    */
	    dfa178_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 178
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    440:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa196_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa196_eof[5] =
    {
	3, 3, -1, -1, 3
    };
static const ANTLR3_INT32 dfa196_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa196_max[5] =
    {
	172, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa196_accept[5] =
    {
	-1, -1, 1, 2, -1
    };
static const ANTLR3_INT32 dfa196_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa196_T_empty	    NULL

static const ANTLR3_INT32 dfa196_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, 3, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };static const ANTLR3_INT32 dfa196_T1[] =
    {
	4, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 
	3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, 3, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa196_transitions[] =
{
    dfa196_T0, dfa196_T1, dfa196_T_empty, dfa196_T_empty, dfa196_T1	
};


/* Declare tracking structure for Cyclic DFA 196
 */
static
ANTLR3_CYCLIC_DFA cdfa196
    =	{
	    196,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"440:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa196_eot,	    /* EOT table			    */
	    dfa196_eof,	    /* EOF table			    */
	    dfa196_min,	    /* Minimum tokens for each state    */
	    dfa196_max,	    /* Maximum tokens for each state    */
	    dfa196_accept,	/* Accept table			    */
	    dfa196_special,	/* Special transition states	    */
	    dfa196_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 196
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    444:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa201_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa201_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa201_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa201_max[4] =
    {
	172, 172, -1, -1
    };
static const ANTLR3_INT32 dfa201_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa201_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa201_T_empty	    NULL

static const ANTLR3_INT32 dfa201_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa201_transitions[] =
{
    dfa201_T0, dfa201_T0, dfa201_T_empty, dfa201_T_empty	
};


/* Declare tracking structure for Cyclic DFA 201
 */
static
ANTLR3_CYCLIC_DFA cdfa201
    =	{
	    201,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"444:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa201_eot,	    /* EOT table			    */
	    dfa201_eof,	    /* EOF table			    */
	    dfa201_min,	    /* Minimum tokens for each state    */
	    dfa201_max,	    /* Maximum tokens for each state    */
	    dfa201_accept,	/* Accept table			    */
	    dfa201_special,	/* Special transition states	    */
	    dfa201_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 201
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 449:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
 */
static const ANTLR3_INT32 dfa204_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa204_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa204_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa204_max[5] =
    {
	173, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa204_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa204_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa204_T_empty	    NULL

static const ANTLR3_INT32 dfa204_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3
    };static const ANTLR3_INT32 dfa204_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa204_transitions[] =
{
    dfa204_T0, dfa204_T1, dfa204_T_empty, dfa204_T_empty, dfa204_T1	
};


/* Declare tracking structure for Cyclic DFA 204
 */
static
ANTLR3_CYCLIC_DFA cdfa204
    =	{
	    204,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 449:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa204_eot,	    /* EOT table			    */
	    dfa204_eof,	    /* EOF table			    */
	    dfa204_min,	    /* Minimum tokens for each state    */
	    dfa204_max,	    /* Maximum tokens for each state    */
	    dfa204_accept,	/* Accept table			    */
	    dfa204_special,	/* Special transition states	    */
	    dfa204_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 204
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 453:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
 */
static const ANTLR3_INT32 dfa207_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa207_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa207_max[5] =
    {
	174, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa207_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa207_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa207_T_empty	    NULL

static const ANTLR3_INT32 dfa207_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa207_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa207_transitions[] =
{
    dfa207_T1, dfa207_T0, dfa207_T_empty, dfa207_T_empty, dfa207_T0	
};


/* Declare tracking structure for Cyclic DFA 207
 */
static
ANTLR3_CYCLIC_DFA cdfa207
    =	{
	    207,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 453:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa207_eot,	    /* EOT table			    */
	    dfa207_eof,	    /* EOF table			    */
	    dfa207_min,	    /* Minimum tokens for each state    */
	    dfa207_max,	    /* Maximum tokens for each state    */
	    dfa207_accept,	/* Accept table			    */
	    dfa207_special,	/* Special transition states	    */
	    dfa207_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 207
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 457:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa210_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa210_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa210_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa210_max[4] =
    {
	173, 173, -1, -1
    };
static const ANTLR3_INT32 dfa210_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa210_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa210_T_empty	    NULL

static const ANTLR3_INT32 dfa210_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa210_transitions[] =
{
    dfa210_T0, dfa210_T0, dfa210_T_empty, dfa210_T_empty	
};


/* Declare tracking structure for Cyclic DFA 210
 */
static
ANTLR3_CYCLIC_DFA cdfa210
    =	{
	    210,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 457:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa210_eot,	    /* EOT table			    */
	    dfa210_eof,	    /* EOF table			    */
	    dfa210_min,	    /* Minimum tokens for each state    */
	    dfa210_max,	    /* Maximum tokens for each state    */
	    dfa210_accept,	/* Accept table			    */
	    dfa210_special,	/* Special transition states	    */
	    dfa210_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 210
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 462:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa213_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa213_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa213_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa213_max[4] =
    {
	174, 174, -1, -1
    };
static const ANTLR3_INT32 dfa213_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa213_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa213_T_empty	    NULL

static const ANTLR3_INT32 dfa213_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa213_transitions[] =
{
    dfa213_T0, dfa213_T0, dfa213_T_empty, dfa213_T_empty	
};


/* Declare tracking structure for Cyclic DFA 213
 */
static
ANTLR3_CYCLIC_DFA cdfa213
    =	{
	    213,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 462:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa213_eot,	    /* EOT table			    */
	    dfa213_eof,	    /* EOF table			    */
	    dfa213_min,	    /* Minimum tokens for each state    */
	    dfa213_max,	    /* Maximum tokens for each state    */
	    dfa213_accept,	/* Accept table			    */
	    dfa213_special,	/* Special transition states	    */
	    dfa213_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 213
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 466:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
 */
static const ANTLR3_INT32 dfa216_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa216_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa216_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa216_max[5] =
    {
	175, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa216_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa216_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa216_T_empty	    NULL

static const ANTLR3_INT32 dfa216_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 3, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa216_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa216_transitions[] =
{
    dfa216_T1, dfa216_T0, dfa216_T_empty, dfa216_T_empty, dfa216_T0	
};


/* Declare tracking structure for Cyclic DFA 216
 */
static
ANTLR3_CYCLIC_DFA cdfa216
    =	{
	    216,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 466:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa216_eot,	    /* EOT table			    */
	    dfa216_eof,	    /* EOF table			    */
	    dfa216_min,	    /* Minimum tokens for each state    */
	    dfa216_max,	    /* Maximum tokens for each state    */
	    dfa216_accept,	/* Accept table			    */
	    dfa216_special,	/* Special transition states	    */
	    dfa216_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 216
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 470:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa219_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa219_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa219_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa219_max[4] =
    {
	175, 175, -1, -1
    };
static const ANTLR3_INT32 dfa219_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa219_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa219_T_empty	    NULL

static const ANTLR3_INT32 dfa219_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa219_transitions[] =
{
    dfa219_T0, dfa219_T0, dfa219_T_empty, dfa219_T_empty	
};


/* Declare tracking structure for Cyclic DFA 219
 */
static
ANTLR3_CYCLIC_DFA cdfa219
    =	{
	    219,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 470:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa219_eot,	    /* EOT table			    */
	    dfa219_eof,	    /* EOF table			    */
	    dfa219_min,	    /* Minimum tokens for each state    */
	    dfa219_max,	    /* Maximum tokens for each state    */
	    dfa219_accept,	/* Accept table			    */
	    dfa219_special,	/* Special transition states	    */
	    dfa219_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 219
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 474:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
 */
static const ANTLR3_INT32 dfa222_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa222_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa222_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa222_max[5] =
    {
	176, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa222_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa222_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa222_T_empty	    NULL

static const ANTLR3_INT32 dfa222_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa222_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa222_transitions[] =
{
    dfa222_T1, dfa222_T0, dfa222_T_empty, dfa222_T_empty, dfa222_T0	
};


/* Declare tracking structure for Cyclic DFA 222
 */
static
ANTLR3_CYCLIC_DFA cdfa222
    =	{
	    222,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 474:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa222_eot,	    /* EOT table			    */
	    dfa222_eof,	    /* EOF table			    */
	    dfa222_min,	    /* Minimum tokens for each state    */
	    dfa222_max,	    /* Maximum tokens for each state    */
	    dfa222_accept,	/* Accept table			    */
	    dfa222_special,	/* Special transition states	    */
	    dfa222_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 222
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 478:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa225_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa225_max[4] =
    {
	176, 176, -1, -1
    };
static const ANTLR3_INT32 dfa225_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa225_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa225_T_empty	    NULL

static const ANTLR3_INT32 dfa225_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa225_transitions[] =
{
    dfa225_T0, dfa225_T0, dfa225_T_empty, dfa225_T_empty	
};


/* Declare tracking structure for Cyclic DFA 225
 */
static
ANTLR3_CYCLIC_DFA cdfa225
    =	{
	    225,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 478:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa225_eot,	    /* EOT table			    */
	    dfa225_eof,	    /* EOF table			    */
	    dfa225_min,	    /* Minimum tokens for each state    */
	    dfa225_max,	    /* Maximum tokens for each state    */
	    dfa225_accept,	/* Accept table			    */
	    dfa225_special,	/* Special transition states	    */
	    dfa225_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 225
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 482:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
 */
static const ANTLR3_INT32 dfa228_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa228_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa228_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa228_max[5] =
    {
	177, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa228_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa228_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa228_T_empty	    NULL

static const ANTLR3_INT32 dfa228_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 2, 3
    };static const ANTLR3_INT32 dfa228_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa228_transitions[] =
{
    dfa228_T0, dfa228_T1, dfa228_T_empty, dfa228_T_empty, dfa228_T1	
};


/* Declare tracking structure for Cyclic DFA 228
 */
static
ANTLR3_CYCLIC_DFA cdfa228
    =	{
	    228,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 482:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa228_eot,	    /* EOT table			    */
	    dfa228_eof,	    /* EOF table			    */
	    dfa228_min,	    /* Minimum tokens for each state    */
	    dfa228_max,	    /* Maximum tokens for each state    */
	    dfa228_accept,	/* Accept table			    */
	    dfa228_special,	/* Special transition states	    */
	    dfa228_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 228
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 486:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa231_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa231_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa231_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa231_max[4] =
    {
	177, 177, -1, -1
    };
static const ANTLR3_INT32 dfa231_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa231_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa231_T_empty	    NULL

static const ANTLR3_INT32 dfa231_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa231_transitions[] =
{
    dfa231_T0, dfa231_T0, dfa231_T_empty, dfa231_T_empty	
};


/* Declare tracking structure for Cyclic DFA 231
 */
static
ANTLR3_CYCLIC_DFA cdfa231
    =	{
	    231,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 486:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa231_eot,	    /* EOT table			    */
	    dfa231_eof,	    /* EOF table			    */
	    dfa231_min,	    /* Minimum tokens for each state    */
	    dfa231_max,	    /* Maximum tokens for each state    */
	    dfa231_accept,	/* Accept table			    */
	    dfa231_special,	/* Special transition states	    */
	    dfa231_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 231
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 490:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
 */
static const ANTLR3_INT32 dfa234_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa234_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa234_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa234_max[5] =
    {
	181, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa234_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa234_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa234_T_empty	    NULL

static const ANTLR3_INT32 dfa234_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa234_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa234_transitions[] =
{
    dfa234_T0, dfa234_T1, dfa234_T_empty, dfa234_T_empty, dfa234_T1	
};


/* Declare tracking structure for Cyclic DFA 234
 */
static
ANTLR3_CYCLIC_DFA cdfa234
    =	{
	    234,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 490:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa234_eot,	    /* EOT table			    */
	    dfa234_eof,	    /* EOF table			    */
	    dfa234_min,	    /* Minimum tokens for each state    */
	    dfa234_max,	    /* Maximum tokens for each state    */
	    dfa234_accept,	/* Accept table			    */
	    dfa234_special,	/* Special transition states	    */
	    dfa234_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 234
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 501:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa238_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa238_max[4] =
    {
	181, 181, -1, -1
    };
static const ANTLR3_INT32 dfa238_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa238_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa238_T_empty	    NULL

static const ANTLR3_INT32 dfa238_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa238_transitions[] =
{
    dfa238_T0, dfa238_T0, dfa238_T_empty, dfa238_T_empty	
};


/* Declare tracking structure for Cyclic DFA 238
 */
static
ANTLR3_CYCLIC_DFA cdfa238
    =	{
	    238,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 501:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa238_eot,	    /* EOT table			    */
	    dfa238_eof,	    /* EOF table			    */
	    dfa238_min,	    /* Minimum tokens for each state    */
	    dfa238_max,	    /* Maximum tokens for each state    */
	    dfa238_accept,	/* Accept table			    */
	    dfa238_special,	/* Special transition states	    */
	    dfa238_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 238
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 515:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa242_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa242_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa242_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa242_max[5] =
    {
	186, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa242_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa242_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa242_T_empty	    NULL

static const ANTLR3_INT32 dfa242_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 3, 3, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa242_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa242_transitions[] =
{
    dfa242_T1, dfa242_T0, dfa242_T_empty, dfa242_T_empty, dfa242_T0	
};


/* Declare tracking structure for Cyclic DFA 242
 */
static
ANTLR3_CYCLIC_DFA cdfa242
    =	{
	    242,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 515:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa242_eot,	    /* EOT table			    */
	    dfa242_eof,	    /* EOF table			    */
	    dfa242_min,	    /* Minimum tokens for each state    */
	    dfa242_max,	    /* Maximum tokens for each state    */
	    dfa242_accept,	/* Accept table			    */
	    dfa242_special,	/* Special transition states	    */
	    dfa242_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 242
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 527:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa246_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa246_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa246_min[4] =
    {
	100, 100, -1, -1
    };
static const ANTLR3_INT32 dfa246_max[4] =
    {
	186, 186, -1, -1
    };
static const ANTLR3_INT32 dfa246_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa246_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa246_T_empty	    NULL

static const ANTLR3_INT32 dfa246_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa246_transitions[] =
{
    dfa246_T0, dfa246_T0, dfa246_T_empty, dfa246_T_empty	
};


/* Declare tracking structure for Cyclic DFA 246
 */
static
ANTLR3_CYCLIC_DFA cdfa246
    =	{
	    246,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 527:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa246_eot,	    /* EOT table			    */
	    dfa246_eof,	    /* EOF table			    */
	    dfa246_min,	    /* Minimum tokens for each state    */
	    dfa246_max,	    /* Maximum tokens for each state    */
	    dfa246_accept,	/* Accept table			    */
	    dfa246_special,	/* Special transition states	    */
	    dfa246_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 246
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 537:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa250_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa250_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa250_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa250_max[5] =
    {
	189, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa250_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa250_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa250_T_empty	    NULL

static const ANTLR3_INT32 dfa250_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 3, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2
    };static const ANTLR3_INT32 dfa250_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa250_transitions[] =
{
    dfa250_T1, dfa250_T0, dfa250_T_empty, dfa250_T_empty, dfa250_T0	
};


/* Declare tracking structure for Cyclic DFA 250
 */
static
ANTLR3_CYCLIC_DFA cdfa250
    =	{
	    250,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 537:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa250_eot,	    /* EOT table			    */
	    dfa250_eof,	    /* EOF table			    */
	    dfa250_min,	    /* Minimum tokens for each state    */
	    dfa250_max,	    /* Maximum tokens for each state    */
	    dfa250_accept,	/* Accept table			    */
	    dfa250_special,	/* Special transition states	    */
	    dfa250_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 250
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 548:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
 */
static const ANTLR3_INT32 dfa254_eot[30] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_eof[30] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_min[30] =
    {
	100, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_max[30] =
    {
	191, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_accept[30] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1
    };
static const ANTLR3_INT32 dfa254_special[30] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa254_T_empty	    NULL

static const ANTLR3_INT32 dfa254_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 28, 28
    };static const ANTLR3_INT32 dfa254_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa254_transitions[] =
{
    dfa254_T0, dfa254_T1, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty	
};

static ANTLR3_INT32 dfa254_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA254_1;

    	    ANTLR3_MARKER index254_1;


    		LA254_1 = LA(1);

    	 
    	    index254_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred299_Emerson(ctx)) )
    	    {
    	        s = 28;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index254_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 548:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*";
    EXCEPTION->decisionNum  = 254;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 254
 */
static
ANTLR3_CYCLIC_DFA cdfa254
    =	{
	    254,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 548:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa254_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa254_eot,	    /* EOT table			    */
	    dfa254_eof,	    /* EOF table			    */
	    dfa254_min,	    /* Minimum tokens for each state    */
	    dfa254_max,	    /* Maximum tokens for each state    */
	    dfa254_accept,	/* Accept table			    */
	    dfa254_special,	/* Special transition states	    */
	    dfa254_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 254
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 558:42: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
 */
static const ANTLR3_INT32 dfa258_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa258_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa258_min[5] =
    {
	100, 100, -1, -1, 100
    };
static const ANTLR3_INT32 dfa258_max[5] =
    {
	194, 206, -1, -1, 206
    };
static const ANTLR3_INT32 dfa258_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa258_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa258_T_empty	    NULL

static const ANTLR3_INT32 dfa258_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa258_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa258_transitions[] =
{
    dfa258_T1, dfa258_T0, dfa258_T_empty, dfa258_T_empty, dfa258_T0	
};


/* Declare tracking structure for Cyclic DFA 258
 */
static
ANTLR3_CYCLIC_DFA cdfa258
    =	{
	    258,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 558:42: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa258_eot,	    /* EOT table			    */
	    dfa258_eof,	    /* EOF table			    */
	    dfa258_min,	    /* Minimum tokens for each state    */
	    dfa258_max,	    /* Maximum tokens for each state    */
	    dfa258_accept,	/* Accept table			    */
	    dfa258_special,	/* Special transition states	    */
	    dfa258_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 258
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    562:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static const ANTLR3_INT32 dfa259_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_min[13] =
    {
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_max[13] =
    {
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3
    };
static const ANTLR3_INT32 dfa259_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa259_T_empty	    NULL

static const ANTLR3_INT32 dfa259_T0[] =
    {
	2, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 4, 4, 4
    };static const ANTLR3_INT32 dfa259_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa259_transitions[] =
{
    dfa259_T0, dfa259_T1, dfa259_T1, dfa259_T1, dfa259_T1, dfa259_T1, dfa259_T1, 
    dfa259_T1, dfa259_T1, dfa259_T1, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty	
};

static ANTLR3_INT32 dfa259_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA259_1;

    	    ANTLR3_MARKER index259_1;


    		LA259_1 = LA(1);

    	 
    	    index259_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index259_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA259_2;

    	    ANTLR3_MARKER index259_2;


    		LA259_2 = LA(1);

    	 
    	    index259_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index259_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA259_3;

    	    ANTLR3_MARKER index259_3;


    		LA259_3 = LA(1);

    	 
    	    index259_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index259_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA259_4;

    	    ANTLR3_MARKER index259_4;


    		LA259_4 = LA(1);

    	 
    	    index259_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index259_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA259_5;

    	    ANTLR3_MARKER index259_5;


    		LA259_5 = LA(1);

    	 
    	    index259_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index259_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA259_6;

    	    ANTLR3_MARKER index259_6;


    		LA259_6 = LA(1);

    	 
    	    index259_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index259_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA259_7;

    	    ANTLR3_MARKER index259_7;


    		LA259_7 = LA(1);

    	 
    	    index259_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index259_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA259_8;

    	    ANTLR3_MARKER index259_8;


    		LA259_8 = LA(1);

    	 
    	    index259_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index259_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA259_9;

    	    ANTLR3_MARKER index259_9;


    		LA259_9 = LA(1);

    	 
    	    index259_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index259_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"562:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );";
    EXCEPTION->decisionNum  = 259;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 259
 */
static
ANTLR3_CYCLIC_DFA cdfa259
    =	{
	    259,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"562:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa259_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa259_eot,	    /* EOT table			    */
	    dfa259_eof,	    /* EOF table			    */
	    dfa259_min,	    /* Minimum tokens for each state    */
	    dfa259_max,	    /* Maximum tokens for each state    */
	    dfa259_accept,	/* Accept table			    */
	    dfa259_special,	/* Special transition states	    */
	    dfa259_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 259
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//Emerson.g:131:1: program : (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) ;
 */
static EmersonParser_program_return
program(pEmersonParser ctx)
{   
    EmersonParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    LTERM2;
    pANTLR3_COMMON_TOKEN    EOF3;
    EmersonParser_sourceElements_return sourceElements1;
    #undef	RETURN_TYPE_sourceElements1
    #define	RETURN_TYPE_sourceElements1 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE LTERM2_tree;
    pANTLR3_BASE_TREE EOF3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        return retval; 
    }
    a       = NULL;
    LTERM2       = NULL;
    EOF3       = NULL;
    sourceElements1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    a_tree   = NULL;
    LTERM2_tree   = NULL;
    EOF3_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:132:2: ( (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) )
        // .//Emerson.g:132:4: (a= LTERM )* sourceElements ( LTERM )* EOF
        {

            // .//Emerson.g:132:5: (a= LTERM )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA1_2 = LA(2);
                            if ( (synpred1_Emerson(ctx)) ) 
                            {
                                alt1=1;
                            }

                        }
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: a= LTERM
            	    {
            	        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program793); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, a, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_sourceElements_in_program797);
            sourceElements1=sourceElements(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements1.tree, NULL); }

            // .//Emerson.g:132:29: ( LTERM )*

            for (;;)
            {
                int alt2=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (LA2_0 == LTERM) ) 
                    {
                        alt2=1;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM2 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program799); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM2, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */

            EOF3 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_program802); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF3, NULL); }


             
            /* AST REWRITE
             * elements          : sourceElements
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 132:40: -> ^( PROG sourceElements )
            	{
            	    // .//Emerson.g:132:43: ^( PROG sourceElements )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROG, (pANTLR3_UINT8)"PROG"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }
    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//Emerson.g:135:1: sourceElements : sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ ;
 */
static EmersonParser_sourceElements_return
sourceElements(pEmersonParser ctx)
{   
    EmersonParser_sourceElements_return retval;
    ANTLR3_UINT32 sourceElements_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM5;
    EmersonParser_sourceElement_return sourceElement4;
    #undef	RETURN_TYPE_sourceElement4
    #define	RETURN_TYPE_sourceElement4 EmersonParser_sourceElement_return

    EmersonParser_sourceElement_return sourceElement6;
    #undef	RETURN_TYPE_sourceElement6
    #define	RETURN_TYPE_sourceElement6 EmersonParser_sourceElement_return

    pANTLR3_BASE_TREE LTERM5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElement;
    /* Initialize rule variables
     */
    sourceElements_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM5       = NULL;
    sourceElement4.tree = NULL;

    sourceElement6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM5_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_sourceElement   = NULL;
    #define CREATE_stream_sourceElement  if (stream_sourceElement == NULL) {stream_sourceElement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:136:2: ( sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ )
        // .//Emerson.g:136:4: sourceElement ( ( LTERM )* sourceElement )*
        {
            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements822);
            sourceElement4=sourceElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceElementsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement4.tree, NULL); }

            // .//Emerson.g:136:18: ( ( LTERM )* sourceElement )*

            for (;;)
            {
                int alt4=2;
                alt4 = cdfa4.predict(ctx, RECOGNIZER, ISTREAM, &cdfa4);
                if  (HASEXCEPTION())
                {
                    goto rulesourceElementsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//Emerson.g:136:19: ( LTERM )* sourceElement
            	    {

            	        // .//Emerson.g:136:19: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt3=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA3_0 = LA(1);
            	                if ( (LA3_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA3_2 = LA(2);
            	                        if ( (synpred3_Emerson(ctx)) ) 
            	                        {
            	                            alt3=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt3) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM5 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_sourceElements825); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceElementsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM5, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop3;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop3: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements828);
            	        sourceElement6=sourceElement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceElementsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : sourceElement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 136:42: -> ( sourceElement )+
            	{
            	    if ((stream_sourceElement == NULL || !stream_sourceElement->hasNext(stream_sourceElement))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_sourceElement->hasNext(stream_sourceElement))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElement == NULL ? NULL : stream_sourceElement->nextTree(stream_sourceElement));

            	    	}
            	    	stream_sourceElement->reset(stream_sourceElement);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_sourceElement != NULL) stream_sourceElement->free(stream_sourceElement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, sourceElements_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//Emerson.g:139:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static EmersonParser_sourceElement_return
sourceElement(pEmersonParser ctx)
{   
    EmersonParser_sourceElement_return retval;
    ANTLR3_UINT32 sourceElement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_functionDeclaration_return functionDeclaration7;
    #undef	RETURN_TYPE_functionDeclaration7
    #define	RETURN_TYPE_functionDeclaration7 EmersonParser_functionDeclaration_return

    EmersonParser_statement_return statement8;
    #undef	RETURN_TYPE_statement8
    #define	RETURN_TYPE_statement8 EmersonParser_statement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionDeclaration;
    /* Initialize rule variables
     */
    sourceElement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        return retval; 
    }
    functionDeclaration7.tree = NULL;

    statement8.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_functionDeclaration   = NULL;
    #define CREATE_stream_functionDeclaration  if (stream_functionDeclaration == NULL) {stream_functionDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionDeclaration"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:140:2: ( functionDeclaration -> functionDeclaration | statement -> statement )
            
            ANTLR3_UINT32 alt5;

            alt5=2;

            alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
            if  (HASEXCEPTION())
            {
                goto rulesourceElementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt5) 
            {
        	case 1:
        	    // .//Emerson.g:140:4: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement849);
        	        functionDeclaration7=functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_functionDeclaration; stream_functionDeclaration->add(stream_functionDeclaration, functionDeclaration7.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : functionDeclaration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 140:24: -> functionDeclaration
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionDeclaration == NULL ? NULL : stream_functionDeclaration->nextTree(stream_functionDeclaration));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:141:4: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement858);
        	        statement8=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement8.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 141:14: -> statement
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_functionDeclaration != NULL) stream_functionDeclaration->free(stream_functionDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, sourceElement_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//Emerson.g:145:1: functionDeclaration : 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionDeclaration_return
functionDeclaration(pEmersonParser ctx)
{   
    EmersonParser_functionDeclaration_return retval;
    ANTLR3_UINT32 functionDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal9;
    pANTLR3_COMMON_TOKEN    LTERM10;
    pANTLR3_COMMON_TOKEN    Identifier11;
    pANTLR3_COMMON_TOKEN    LTERM12;
    pANTLR3_COMMON_TOKEN    LTERM14;
    EmersonParser_formalParameterList_return formalParameterList13;
    #undef	RETURN_TYPE_formalParameterList13
    #define	RETURN_TYPE_formalParameterList13 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody15;
    #undef	RETURN_TYPE_functionBody15
    #define	RETURN_TYPE_functionBody15 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal9_tree;
    pANTLR3_BASE_TREE LTERM10_tree;
    pANTLR3_BASE_TREE Identifier11_tree;
    pANTLR3_BASE_TREE LTERM12_tree;
    pANTLR3_BASE_TREE LTERM14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal9       = NULL;
    LTERM10       = NULL;
    Identifier11       = NULL;
    LTERM12       = NULL;
    LTERM14       = NULL;
    formalParameterList13.tree = NULL;

    functionBody15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal9_tree   = NULL;
    LTERM10_tree   = NULL;
    Identifier11_tree   = NULL;
    LTERM12_tree   = NULL;
    LTERM14_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:146:2: ( 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//Emerson.g:146:4: 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody
        {
            string_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_functionDeclaration875); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, string_literal9, NULL); }


            // .//Emerson.g:146:15: ( LTERM )*

            for (;;)
            {
                int alt6=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == LTERM) ) 
                    {
                        alt6=1;
                    }

                }
                switch (alt6) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM10 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration877); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM10, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */

            Identifier11 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration880); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier11, NULL); }


            // .//Emerson.g:146:33: ( LTERM )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA7_2 = LA(2);
                            if ( (synpred7_Emerson(ctx)) ) 
                            {
                                alt7=1;
                            }

                        }
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM12 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration882); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM12, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:146:41: ( formalParameterList )?
            {
                int alt8=2;
                {
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == Identifier) ) 
                    {
                        alt8=1;
                    }
                }
                switch (alt8) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration886);
            	        formalParameterList13=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList13.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:146:62: ( LTERM )*

            for (;;)
            {
                int alt9=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == LTERM) ) 
                    {
                        alt9=1;
                    }

                }
                switch (alt9) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM14 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration889); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM14, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration892);
            functionBody15=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody15.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, formalParameterList, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 146:82: -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:146:85: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DECL, (pANTLR3_UINT8)"FUNC_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:146:109: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, functionDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//Emerson.g:149:1: functionExpression : 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionExpression_return
functionExpression(pEmersonParser ctx)
{   
    EmersonParser_functionExpression_return retval;
    ANTLR3_UINT32 functionExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal16;
    pANTLR3_COMMON_TOKEN    LTERM17;
    pANTLR3_COMMON_TOKEN    Identifier18;
    pANTLR3_COMMON_TOKEN    LTERM19;
    pANTLR3_COMMON_TOKEN    char_literal20;
    pANTLR3_COMMON_TOKEN    LTERM21;
    pANTLR3_COMMON_TOKEN    LTERM23;
    pANTLR3_COMMON_TOKEN    char_literal24;
    pANTLR3_COMMON_TOKEN    LTERM25;
    EmersonParser_formalParameterList_return formalParameterList22;
    #undef	RETURN_TYPE_formalParameterList22
    #define	RETURN_TYPE_formalParameterList22 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody26;
    #undef	RETURN_TYPE_functionBody26
    #define	RETURN_TYPE_functionBody26 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal16_tree;
    pANTLR3_BASE_TREE LTERM17_tree;
    pANTLR3_BASE_TREE Identifier18_tree;
    pANTLR3_BASE_TREE LTERM19_tree;
    pANTLR3_BASE_TREE char_literal20_tree;
    pANTLR3_BASE_TREE LTERM21_tree;
    pANTLR3_BASE_TREE LTERM23_tree;
    pANTLR3_BASE_TREE char_literal24_tree;
    pANTLR3_BASE_TREE LTERM25_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal16       = NULL;
    LTERM17       = NULL;
    Identifier18       = NULL;
    LTERM19       = NULL;
    char_literal20       = NULL;
    LTERM21       = NULL;
    LTERM23       = NULL;
    char_literal24       = NULL;
    LTERM25       = NULL;
    formalParameterList22.tree = NULL;

    functionBody26.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal16_tree   = NULL;
    LTERM17_tree   = NULL;
    Identifier18_tree   = NULL;
    LTERM19_tree   = NULL;
    char_literal20_tree   = NULL;
    LTERM21_tree   = NULL;
    LTERM23_tree   = NULL;
    char_literal24_tree   = NULL;
    LTERM25_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:150:2: ( 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//Emerson.g:150:4: 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody
        {
            string_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_functionExpression917); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, string_literal16, NULL); }


            // .//Emerson.g:150:15: ( LTERM )*

            for (;;)
            {
                int alt10=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA10_2 = LA(2);
                            if ( (synpred10_Emerson(ctx)) ) 
                            {
                                alt10=1;
                            }

                        }
                    }

                }
                switch (alt10) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM17 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression919); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM17, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:150:22: ( Identifier )?
            {
                int alt11=2;
                {
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == Identifier) ) 
                    {
                        alt11=1;
                    }
                }
                switch (alt11) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier18 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression922); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier18, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:150:34: ( LTERM )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == LTERM) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM19 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression925); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM19, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */

            char_literal20 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_functionExpression928); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal20, NULL); }


            // .//Emerson.g:150:45: ( LTERM )*

            for (;;)
            {
                int alt13=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA13_0 = LA(1);
                    if ( (LA13_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA13_2 = LA(2);
                            if ( (synpred13_Emerson(ctx)) ) 
                            {
                                alt13=1;
                            }

                        }
                    }

                }
                switch (alt13) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM21 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression930); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM21, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:150:52: ( formalParameterList )?
            {
                int alt14=2;
                {
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == Identifier) ) 
                    {
                        alt14=1;
                    }
                }
                switch (alt14) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression933);
            	        formalParameterList22=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList22.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:150:73: ( LTERM )*

            for (;;)
            {
                int alt15=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA15_0 = LA(1);
                    if ( (LA15_0 == LTERM) ) 
                    {
                        alt15=1;
                    }

                }
                switch (alt15) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM23 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression936); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM23, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */

            char_literal24 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_functionExpression939); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal24, NULL); }


            // .//Emerson.g:150:84: ( LTERM )*

            for (;;)
            {
                int alt16=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA16_0 = LA(1);
                    if ( (LA16_0 == LTERM) ) 
                    {
                        alt16=1;
                    }

                }
                switch (alt16) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM25 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression941); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM25, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression944);
            functionBody26=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody26.tree, NULL); }

             
            /* AST REWRITE
             * elements          : formalParameterList, Identifier, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 150:104: -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:150:107: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_EXPR, (pANTLR3_UINT8)"FUNC_EXPR"), root_1));

            	        // .//Emerson.g:150:120: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }
            	        // .//Emerson.g:150:133: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, functionExpression_StartIndex); }
    return retval;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//Emerson.g:153:1: formalParameterList : Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) ;
 */
static EmersonParser_formalParameterList_return
formalParameterList(pEmersonParser ctx)
{   
    EmersonParser_formalParameterList_return retval;
    ANTLR3_UINT32 formalParameterList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier27;
    pANTLR3_COMMON_TOKEN    char_literal28;
    pANTLR3_COMMON_TOKEN    LTERM29;
    pANTLR3_COMMON_TOKEN    Identifier30;

    pANTLR3_BASE_TREE Identifier27_tree;
    pANTLR3_BASE_TREE char_literal28_tree;
    pANTLR3_BASE_TREE LTERM29_tree;
    pANTLR3_BASE_TREE Identifier30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;

    /* Initialize rule variables
     */
    formalParameterList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier27       = NULL;
    char_literal28       = NULL;
    LTERM29       = NULL;
    Identifier30       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    Identifier27_tree   = NULL;
    char_literal28_tree   = NULL;
    LTERM29_tree   = NULL;
    Identifier30_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:154:2: ( Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) )
        // .//Emerson.g:154:4: Identifier ( ',' ( LTERM )* Identifier )*
        {
            Identifier27 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList972); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier27, NULL); }


            // .//Emerson.g:154:15: ( ',' ( LTERM )* Identifier )*

            for (;;)
            {
                int alt18=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == 130) ) 
                    {
                        alt18=1;
                    }

                }
                switch (alt18) 
                {
            	case 1:
            	    // .//Emerson.g:154:16: ',' ( LTERM )* Identifier
            	    {
            	        char_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_formalParameterList975); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal28, NULL); }


            	        // .//Emerson.g:154:20: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt17=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA17_0 = LA(1);
            	                if ( (LA17_0 == LTERM) ) 
            	                {
            	                    alt17=1;
            	                }

            	            }
            	            switch (alt17) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM29 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList977); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM29, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop17;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop17: ; /* Jump out to here if this rule does not match */

            	        Identifier30 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList980); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier30, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 154:40: -> ^( FUNC_PARAMS ( Identifier )+ )
            	{
            	    // .//Emerson.g:154:43: ^( FUNC_PARAMS ( Identifier )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_PARAMS, (pANTLR3_UINT8)"FUNC_PARAMS"), root_1));

            	        if ((stream_Identifier == NULL || !stream_Identifier->hasNext(stream_Identifier))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_Identifier->hasNext(stream_Identifier))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	stream_Identifier->reset(stream_Identifier);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_130 != NULL) stream_130->free(stream_130);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, formalParameterList_StartIndex); }
    return retval;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//Emerson.g:157:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static EmersonParser_functionBody_return
functionBody(pEmersonParser ctx)
{   
    EmersonParser_functionBody_return retval;
    ANTLR3_UINT32 functionBody_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal31;
    pANTLR3_COMMON_TOKEN    LTERM32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    char_literal34;
    pANTLR3_COMMON_TOKEN    LTERM35;
    pANTLR3_COMMON_TOKEN    LTERM37;
    pANTLR3_COMMON_TOKEN    char_literal38;
    EmersonParser_sourceElements_return sourceElements36;
    #undef	RETURN_TYPE_sourceElements36
    #define	RETURN_TYPE_sourceElements36 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE char_literal31_tree;
    pANTLR3_BASE_TREE LTERM32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE char_literal34_tree;
    pANTLR3_BASE_TREE LTERM35_tree;
    pANTLR3_BASE_TREE LTERM37_tree;
    pANTLR3_BASE_TREE char_literal38_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    functionBody_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal31       = NULL;
    LTERM32       = NULL;
    char_literal33       = NULL;
    char_literal34       = NULL;
    LTERM35       = NULL;
    LTERM37       = NULL;
    char_literal38       = NULL;
    sourceElements36.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal31_tree   = NULL;
    LTERM32_tree   = NULL;
    char_literal33_tree   = NULL;
    char_literal34_tree   = NULL;
    LTERM35_tree   = NULL;
    LTERM37_tree   = NULL;
    char_literal38_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:158:2: ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt22;

            alt22=2;

            alt22 = cdfa22.predict(ctx, RECOGNIZER, ISTREAM, &cdfa22);
            if  (HASEXCEPTION())
            {
                goto rulefunctionBodyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//Emerson.g:158:4: '{' ( LTERM )* '}'
        	    {
        	        char_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_functionBody1003); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal31, NULL); }


        	        // .//Emerson.g:158:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt19=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA19_0 = LA(1);
        	                if ( (LA19_0 == LTERM) ) 
        	                {
        	                    alt19=1;
        	                }

        	            }
        	            switch (alt19) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM32 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1005); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM32, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop19;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop19: ; /* Jump out to here if this rule does not match */

        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_functionBody1008); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal33, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 158:19: -> ^( EMPTY_FUNC_BODY )
        	        	{
        	        	    // .//Emerson.g:158:22: ^( EMPTY_FUNC_BODY )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_FUNC_BODY, (pANTLR3_UINT8)"EMPTY_FUNC_BODY"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:159:4: '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}'
        	    {
        	        char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_functionBody1019); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal34, NULL); }


        	        // .//Emerson.g:159:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA20_0 = LA(1);
        	                if ( (LA20_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA20_2 = LA(2);
        	                        if ( (synpred21_Emerson(ctx)) ) 
        	                        {
        	                            alt20=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt20) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM35 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1021); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM35, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:159:15: ( sourceElements -> sourceElements )
        	        // .//Emerson.g:159:16: sourceElements
        	        {
        	            FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody1025);
        	            sourceElements36=sourceElements(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefunctionBodyEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements36.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sourceElements
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 159:31: -> sourceElements
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:159:50: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA21_0 = LA(1);
        	                if ( (LA21_0 == LTERM) ) 
        	                {
        	                    alt21=1;
        	                }

        	            }
        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM37 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1032); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM37, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	        char_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_functionBody1035); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal38, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, functionBody_StartIndex); }
    return retval;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//Emerson.g:163:1: statement : ( noOpStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static EmersonParser_statement_return
statement(pEmersonParser ctx)
{   
    EmersonParser_statement_return retval;
    ANTLR3_UINT32 statement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_noOpStatement_return noOpStatement39;
    #undef	RETURN_TYPE_noOpStatement39
    #define	RETURN_TYPE_noOpStatement39 EmersonParser_noOpStatement_return

    EmersonParser_statementBlock_return statementBlock40;
    #undef	RETURN_TYPE_statementBlock40
    #define	RETURN_TYPE_statementBlock40 EmersonParser_statementBlock_return

    EmersonParser_variableStatement_return variableStatement41;
    #undef	RETURN_TYPE_variableStatement41
    #define	RETURN_TYPE_variableStatement41 EmersonParser_variableStatement_return

    EmersonParser_emptyStatement_return emptyStatement42;
    #undef	RETURN_TYPE_emptyStatement42
    #define	RETURN_TYPE_emptyStatement42 EmersonParser_emptyStatement_return

    EmersonParser_expressionStatement_return expressionStatement43;
    #undef	RETURN_TYPE_expressionStatement43
    #define	RETURN_TYPE_expressionStatement43 EmersonParser_expressionStatement_return

    EmersonParser_ifStatement_return ifStatement44;
    #undef	RETURN_TYPE_ifStatement44
    #define	RETURN_TYPE_ifStatement44 EmersonParser_ifStatement_return

    EmersonParser_iterationStatement_return iterationStatement45;
    #undef	RETURN_TYPE_iterationStatement45
    #define	RETURN_TYPE_iterationStatement45 EmersonParser_iterationStatement_return

    EmersonParser_continueStatement_return continueStatement46;
    #undef	RETURN_TYPE_continueStatement46
    #define	RETURN_TYPE_continueStatement46 EmersonParser_continueStatement_return

    EmersonParser_breakStatement_return breakStatement47;
    #undef	RETURN_TYPE_breakStatement47
    #define	RETURN_TYPE_breakStatement47 EmersonParser_breakStatement_return

    EmersonParser_returnStatement_return returnStatement48;
    #undef	RETURN_TYPE_returnStatement48
    #define	RETURN_TYPE_returnStatement48 EmersonParser_returnStatement_return

    EmersonParser_withStatement_return withStatement49;
    #undef	RETURN_TYPE_withStatement49
    #define	RETURN_TYPE_withStatement49 EmersonParser_withStatement_return

    EmersonParser_labelledStatement_return labelledStatement50;
    #undef	RETURN_TYPE_labelledStatement50
    #define	RETURN_TYPE_labelledStatement50 EmersonParser_labelledStatement_return

    EmersonParser_switchStatement_return switchStatement51;
    #undef	RETURN_TYPE_switchStatement51
    #define	RETURN_TYPE_switchStatement51 EmersonParser_switchStatement_return

    EmersonParser_throwStatement_return throwStatement52;
    #undef	RETURN_TYPE_throwStatement52
    #define	RETURN_TYPE_throwStatement52 EmersonParser_throwStatement_return

    EmersonParser_whenStatement_return whenStatement53;
    #undef	RETURN_TYPE_whenStatement53
    #define	RETURN_TYPE_whenStatement53 EmersonParser_whenStatement_return

    EmersonParser_tryStatement_return tryStatement54;
    #undef	RETURN_TYPE_tryStatement54
    #define	RETURN_TYPE_tryStatement54 EmersonParser_tryStatement_return

    EmersonParser_msgSendStatement_return msgSendStatement55;
    #undef	RETURN_TYPE_msgSendStatement55
    #define	RETURN_TYPE_msgSendStatement55 EmersonParser_msgSendStatement_return

    EmersonParser_msgRecvStatement_return msgRecvStatement56;
    #undef	RETURN_TYPE_msgRecvStatement56
    #define	RETURN_TYPE_msgRecvStatement56 EmersonParser_msgRecvStatement_return


    /* Initialize rule variables
     */
    statement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        return retval; 
    }
    noOpStatement39.tree = NULL;

    statementBlock40.tree = NULL;

    variableStatement41.tree = NULL;

    emptyStatement42.tree = NULL;

    expressionStatement43.tree = NULL;

    ifStatement44.tree = NULL;

    iterationStatement45.tree = NULL;

    continueStatement46.tree = NULL;

    breakStatement47.tree = NULL;

    returnStatement48.tree = NULL;

    withStatement49.tree = NULL;

    labelledStatement50.tree = NULL;

    switchStatement51.tree = NULL;

    throwStatement52.tree = NULL;

    whenStatement53.tree = NULL;

    tryStatement54.tree = NULL;

    msgSendStatement55.tree = NULL;

    msgRecvStatement56.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:164:2: ( noOpStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement )
            
            ANTLR3_UINT32 alt23;

            alt23=18;

            alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//Emerson.g:164:4: noOpStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noOpStatement_in_statement1047);
        	        noOpStatement39=noOpStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, noOpStatement39.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:165:11: statementBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement1059);
        	        statementBlock40=statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statementBlock40.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:166:4: variableStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement1064);
        	        variableStatement41=variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableStatement41.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:167:4: emptyStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_emptyStatement_in_statement1069);
        	        emptyStatement42=emptyStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, emptyStatement42.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:168:4: expressionStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement1074);
        	        expressionStatement43=expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionStatement43.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:169:4: ifStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement1079);
        	        ifStatement44=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStatement44.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:170:4: iterationStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement1084);
        	        iterationStatement45=iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iterationStatement45.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:171:4: continueStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement1089);
        	        continueStatement46=continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continueStatement46.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:172:4: breakStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement1094);
        	        breakStatement47=breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, breakStatement47.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:173:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1099);
        	        returnStatement48=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement48.tree);

        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:174:4: withStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement1104);
        	        withStatement49=withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, withStatement49.tree);

        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:175:4: labelledStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_labelledStatement_in_statement1109);
        	        labelledStatement50=labelledStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, labelledStatement50.tree);

        	    }
        	    break;
        	case 13:
        	    // .//Emerson.g:176:4: switchStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement1114);
        	        switchStatement51=switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switchStatement51.tree);

        	    }
        	    break;
        	case 14:
        	    // .//Emerson.g:177:4: throwStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement1119);
        	        throwStatement52=throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throwStatement52.tree);

        	    }
        	    break;
        	case 15:
        	    // .//Emerson.g:178:11: whenStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whenStatement_in_statement1131);
        	        whenStatement53=whenStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whenStatement53.tree);

        	    }
        	    break;
        	case 16:
        	    // .//Emerson.g:179:4: tryStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement1136);
        	        tryStatement54=tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tryStatement54.tree);

        	    }
        	    break;
        	case 17:
        	    // .//Emerson.g:180:4: msgSendStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgSendStatement_in_statement1141);
        	        msgSendStatement55=msgSendStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgSendStatement55.tree);

        	    }
        	    break;
        	case 18:
        	    // .//Emerson.g:181:4: msgRecvStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_statement1146);
        	        msgRecvStatement56=msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgRecvStatement56.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, statement_StartIndex); }
    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start statementBlock
 * .//Emerson.g:184:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static EmersonParser_statementBlock_return
statementBlock(pEmersonParser ctx)
{   
    EmersonParser_statementBlock_return retval;
    ANTLR3_UINT32 statementBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal57;
    pANTLR3_COMMON_TOKEN    LTERM58;
    pANTLR3_COMMON_TOKEN    char_literal59;
    pANTLR3_COMMON_TOKEN    char_literal60;
    pANTLR3_COMMON_TOKEN    LTERM61;
    pANTLR3_COMMON_TOKEN    LTERM63;
    pANTLR3_COMMON_TOKEN    char_literal64;
    EmersonParser_statementList_return statementList62;
    #undef	RETURN_TYPE_statementList62
    #define	RETURN_TYPE_statementList62 EmersonParser_statementList_return

    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_BASE_TREE LTERM58_tree;
    pANTLR3_BASE_TREE char_literal59_tree;
    pANTLR3_BASE_TREE char_literal60_tree;
    pANTLR3_BASE_TREE LTERM61_tree;
    pANTLR3_BASE_TREE LTERM63_tree;
    pANTLR3_BASE_TREE char_literal64_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    statementBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal57       = NULL;
    LTERM58       = NULL;
    char_literal59       = NULL;
    char_literal60       = NULL;
    LTERM61       = NULL;
    LTERM63       = NULL;
    char_literal64       = NULL;
    statementList62.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal57_tree   = NULL;
    LTERM58_tree   = NULL;
    char_literal59_tree   = NULL;
    char_literal60_tree   = NULL;
    LTERM61_tree   = NULL;
    LTERM63_tree   = NULL;
    char_literal64_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:185:9: ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt27;

            alt27=2;

            alt27 = cdfa27.predict(ctx, RECOGNIZER, ISTREAM, &cdfa27);
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt27) 
            {
        	case 1:
        	    // .//Emerson.g:185:11: '{' ( LTERM )* '}'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_statementBlock1165); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal57_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal57));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal57_tree);
        	        }

        	        // .//Emerson.g:185:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt24=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA24_0 = LA(1);
        	                if ( (LA24_0 == LTERM) ) 
        	                {
        	                    alt24=1;
        	                }

        	            }
        	            switch (alt24) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM58 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1167); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        LTERM58_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LTERM58));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, LTERM58_tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop24;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop24: ; /* Jump out to here if this rule does not match */

        	        char_literal59 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_statementBlock1170); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal59_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal59));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal59_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:186:4: '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}'
        	    {
        	        char_literal60 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_statementBlock1176); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal60, NULL); }


        	        // .//Emerson.g:186:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt25=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA25_0 = LA(1);
        	                if ( (LA25_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA25_1 = LA(2);
        	                        if ( (synpred42_Emerson(ctx)) ) 
        	                        {
        	                            alt25=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt25) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM61 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1178); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM61, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop25;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop25: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:186:15: ( statementList -> statementList )
        	        // .//Emerson.g:186:16: statementList
        	        {
        	            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock1182);
        	            statementList62=statementList(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList62.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : statementList
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 186:29: -> statementList
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:186:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA26_0 = LA(1);
        	                if ( (LA26_0 == LTERM) ) 
        	                {
        	                    alt26=1;
        	                }

        	            }
        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM63 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1187); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM63, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        char_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_statementBlock1190); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal64, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, statementBlock_StartIndex); }
    return retval;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start noOpStatement
 * .//Emerson.g:189:1: noOpStatement : ';' -> ^( NOOP ) ;
 */
static EmersonParser_noOpStatement_return
noOpStatement(pEmersonParser ctx)
{   
    EmersonParser_noOpStatement_return retval;
    ANTLR3_UINT32 noOpStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal65;

    pANTLR3_BASE_TREE char_literal65_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;

    /* Initialize rule variables
     */
    noOpStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal65       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal65_tree   = NULL;

    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:190:9: ( ';' -> ^( NOOP ) )
        // .//Emerson.g:190:11: ';'
        {
            char_literal65 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_noOpStatement1210); 
            if  (HASEXCEPTION())
            {
                goto rulenoOpStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal65, NULL); }


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 190:15: -> ^( NOOP )
            	{
            	    // .//Emerson.g:190:18: ^( NOOP )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOOP, (pANTLR3_UINT8)"NOOP"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoOpStatementEx; /* Prevent compiler warnings */
    rulenoOpStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_133 != NULL) stream_133->free(stream_133);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, noOpStatement_StartIndex); }
    return retval;
}
/* $ANTLR end noOpStatement */

/** 
 * $ANTLR start statementList
 * .//Emerson.g:194:1: statementList : ( ( LTERM )* statement )+ -> ^( SLIST ( statement )+ ) ;
 */
static EmersonParser_statementList_return
statementList(pEmersonParser ctx)
{   
    EmersonParser_statementList_return retval;
    ANTLR3_UINT32 statementList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM66;
    EmersonParser_statement_return statement67;
    #undef	RETURN_TYPE_statement67
    #define	RETURN_TYPE_statement67 EmersonParser_statement_return

    pANTLR3_BASE_TREE LTERM66_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    statementList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM66       = NULL;
    statement67.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM66_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:195:2: ( ( ( LTERM )* statement )+ -> ^( SLIST ( statement )+ ) )
        // .//Emerson.g:195:4: ( ( LTERM )* statement )+
        {
            // .//Emerson.g:195:4: ( ( LTERM )* statement )+
            {
                int cnt29=0;

                for (;;)
                {
                    int alt29=2;
            	alt29 = cdfa29.predict(ctx, RECOGNIZER, ISTREAM, &cdfa29);
            	if  (HASEXCEPTION())
            	{
            	    goto rulestatementListEx;
            	}
            	if (HASFAILED())
            	{
            	    return retval;
            	}
            	switch (alt29) 
            	{
            	    case 1:
            	        // .//Emerson.g:195:5: ( LTERM )* statement
            	        {

            	            // .//Emerson.g:195:5: ( LTERM )*

            	            for (;;)
            	            {
            	                int alt28=2;
            	                {
            	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                    */
            	                    int LA28_0 = LA(1);
            	                    if ( (LA28_0 == LTERM) ) 
            	                    {
            	                        {
            	                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                            */
            	                            int LA28_2 = LA(2);
            	                            if ( (synpred44_Emerson(ctx)) ) 
            	                            {
            	                                alt28=1;
            	                            }

            	                        }
            	                    }

            	                }
            	                switch (alt28) 
            	                {
            	            	case 1:
            	            	    // .//Emerson.g:0:0: LTERM
            	            	    {
            	            	        LTERM66 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementList1252); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto rulestatementListEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM66, NULL); }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop28;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop28: ; /* Jump out to here if this rule does not match */

            	            FOLLOWPUSH(FOLLOW_statement_in_statementList1255);
            	            statement67=statement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulestatementListEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement67.tree, NULL); }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt29 >= 1 )
            		{
            		    goto loop29;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulestatementListEx;
            	}
            	cnt29++;
                }
                loop29: ;	/* Jump to here if this rule does not match */
            }

             
            /* AST REWRITE
             * elements          : statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 195:24: -> ^( SLIST ( statement )+ )
            	{
            	    // .//Emerson.g:195:27: ^( SLIST ( statement )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SLIST, (pANTLR3_UINT8)"SLIST"), root_1));

            	        if ((stream_statement == NULL || !stream_statement->hasNext(stream_statement))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_statement->hasNext(stream_statement))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	stream_statement->reset(stream_statement);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, statementList_StartIndex); }
    return retval;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//Emerson.g:198:1: variableStatement : 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) ;
 */
static EmersonParser_variableStatement_return
variableStatement(pEmersonParser ctx)
{   
    EmersonParser_variableStatement_return retval;
    ANTLR3_UINT32 variableStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal68;
    pANTLR3_COMMON_TOKEN    LTERM69;
    pANTLR3_COMMON_TOKEN    LTERM71;
    pANTLR3_COMMON_TOKEN    char_literal72;
    EmersonParser_variableDeclarationList_return variableDeclarationList70;
    #undef	RETURN_TYPE_variableDeclarationList70
    #define	RETURN_TYPE_variableDeclarationList70 EmersonParser_variableDeclarationList_return

    pANTLR3_BASE_TREE string_literal68_tree;
    pANTLR3_BASE_TREE LTERM69_tree;
    pANTLR3_BASE_TREE LTERM71_tree;
    pANTLR3_BASE_TREE char_literal72_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationList;
    /* Initialize rule variables
     */
    variableStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal68       = NULL;
    LTERM69       = NULL;
    LTERM71       = NULL;
    char_literal72       = NULL;
    variableDeclarationList70.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal68_tree   = NULL;
    LTERM69_tree   = NULL;
    LTERM71_tree   = NULL;
    char_literal72_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_variableDeclarationList   = NULL;
    #define CREATE_stream_variableDeclarationList  if (stream_variableDeclarationList == NULL) {stream_variableDeclarationList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:199:2: ( 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) )
        // .//Emerson.g:199:4: 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' )
        {
            string_literal68 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_variableStatement1278); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, string_literal68, NULL); }


            // .//Emerson.g:199:10: ( LTERM )*

            for (;;)
            {
                int alt30=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA30_0 = LA(1);
                    if ( (LA30_0 == LTERM) ) 
                    {
                        alt30=1;
                    }

                }
                switch (alt30) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM69 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1280); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM69, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1283);
            variableDeclarationList70=variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationList; stream_variableDeclarationList->add(stream_variableDeclarationList, variableDeclarationList70.tree, NULL); }

            // .//Emerson.g:199:41: ( LTERM | ';' )
            {
                int alt31=2;

                {
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == LTERM) ) 
                    {
                        alt31=1;
                    }
                    else if ( (LA31_0 == 133) ) 
                    {
                        alt31=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 31;
                        EXCEPTION->state        = 0;


                        goto rulevariableStatementEx;
                    }
                }
                switch (alt31) 
                {
            	case 1:
            	    // .//Emerson.g:199:42: LTERM
            	    {
            	        LTERM71 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1286); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM71, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:199:50: ';'
            	    {
            	        char_literal72 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_variableStatement1290); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal72, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : variableDeclarationList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 199:55: -> ^( VARLIST variableDeclarationList )
            	{
            	    // .//Emerson.g:199:58: ^( VARLIST variableDeclarationList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationList == NULL ? NULL : stream_variableDeclarationList->nextTree(stream_variableDeclarationList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_variableDeclarationList != NULL) stream_variableDeclarationList->free(stream_variableDeclarationList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, variableStatement_StartIndex); }
    return retval;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//Emerson.g:202:1: variableDeclarationList : variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ ;
 */
static EmersonParser_variableDeclarationList_return
variableDeclarationList(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationList_return retval;
    ANTLR3_UINT32 variableDeclarationList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM74;
    pANTLR3_COMMON_TOKEN    char_literal75;
    pANTLR3_COMMON_TOKEN    LTERM76;
    EmersonParser_variableDeclaration_return variableDeclaration73;
    #undef	RETURN_TYPE_variableDeclaration73
    #define	RETURN_TYPE_variableDeclaration73 EmersonParser_variableDeclaration_return

    EmersonParser_variableDeclaration_return variableDeclaration77;
    #undef	RETURN_TYPE_variableDeclaration77
    #define	RETURN_TYPE_variableDeclaration77 EmersonParser_variableDeclaration_return

    pANTLR3_BASE_TREE LTERM74_tree;
    pANTLR3_BASE_TREE char_literal75_tree;
    pANTLR3_BASE_TREE LTERM76_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclaration;
    /* Initialize rule variables
     */
    variableDeclarationList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM74       = NULL;
    char_literal75       = NULL;
    LTERM76       = NULL;
    variableDeclaration73.tree = NULL;

    variableDeclaration77.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM74_tree   = NULL;
    char_literal75_tree   = NULL;
    LTERM76_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_variableDeclaration   = NULL;
    #define CREATE_stream_variableDeclaration  if (stream_variableDeclaration == NULL) {stream_variableDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclaration"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:203:2: ( variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ )
        // .//Emerson.g:203:4: variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1312);
            variableDeclaration73=variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration73.tree, NULL); }

            // .//Emerson.g:203:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*

            for (;;)
            {
                int alt34=2;
                alt34 = cdfa34.predict(ctx, RECOGNIZER, ISTREAM, &cdfa34);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt34) 
                {
            	case 1:
            	    // .//Emerson.g:203:25: ( LTERM )* ',' ( LTERM )* variableDeclaration
            	    {

            	        // .//Emerson.g:203:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt32=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA32_0 = LA(1);
            	                if ( (LA32_0 == LTERM) ) 
            	                {
            	                    alt32=1;
            	                }

            	            }
            	            switch (alt32) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM74 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1315); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM74, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop32;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop32: ; /* Jump out to here if this rule does not match */

            	        char_literal75 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_variableDeclarationList1318); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal75, NULL); }


            	        // .//Emerson.g:203:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == LTERM) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM76 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1320); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM76, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1323);
            	        variableDeclaration77=variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration77.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclaration
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 203:65: -> ( variableDeclaration )+
            	{
            	    if ((stream_variableDeclaration == NULL || !stream_variableDeclaration->hasNext(stream_variableDeclaration))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclaration->hasNext(stream_variableDeclaration))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclaration == NULL ? NULL : stream_variableDeclaration->nextTree(stream_variableDeclaration));

            	    	}
            	    	stream_variableDeclaration->reset(stream_variableDeclaration);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_variableDeclaration != NULL) stream_variableDeclaration->free(stream_variableDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, variableDeclarationList_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//Emerson.g:206:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ ;
 */
static EmersonParser_variableDeclarationListNoIn_return
variableDeclarationListNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationListNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationListNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM79;
    pANTLR3_COMMON_TOKEN    char_literal80;
    pANTLR3_COMMON_TOKEN    LTERM81;
    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn78;
    #undef	RETURN_TYPE_variableDeclarationNoIn78
    #define	RETURN_TYPE_variableDeclarationNoIn78 EmersonParser_variableDeclarationNoIn_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn82;
    #undef	RETURN_TYPE_variableDeclarationNoIn82
    #define	RETURN_TYPE_variableDeclarationNoIn82 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE LTERM79_tree;
    pANTLR3_BASE_TREE char_literal80_tree;
    pANTLR3_BASE_TREE LTERM81_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    variableDeclarationListNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM79       = NULL;
    char_literal80       = NULL;
    LTERM81       = NULL;
    variableDeclarationNoIn78.tree = NULL;

    variableDeclarationNoIn82.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM79_tree   = NULL;
    char_literal80_tree   = NULL;
    LTERM81_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:207:2: ( variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ )
        // .//Emerson.g:207:4: variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1342);
            variableDeclarationNoIn78=variableDeclarationNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn78.tree, NULL); }

            // .//Emerson.g:207:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*

            for (;;)
            {
                int alt37=2;
                alt37 = cdfa37.predict(ctx, RECOGNIZER, ISTREAM, &cdfa37);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt37) 
                {
            	case 1:
            	    // .//Emerson.g:207:29: ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn
            	    {

            	        // .//Emerson.g:207:29: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt35=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA35_0 = LA(1);
            	                if ( (LA35_0 == LTERM) ) 
            	                {
            	                    alt35=1;
            	                }

            	            }
            	            switch (alt35) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM79 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1345); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM79, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop35;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop35: ; /* Jump out to here if this rule does not match */

            	        char_literal80 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_variableDeclarationListNoIn1348); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal80, NULL); }


            	        // .//Emerson.g:207:40: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt36=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA36_0 = LA(1);
            	                if ( (LA36_0 == LTERM) ) 
            	                {
            	                    alt36=1;
            	                }

            	            }
            	            switch (alt36) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM81 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1350); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM81, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1353);
            	        variableDeclarationNoIn82=variableDeclarationNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn82.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclarationNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 207:73: -> ( variableDeclarationNoIn )+
            	{
            	    if ((stream_variableDeclarationNoIn == NULL || !stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

            	    	}
            	    	stream_variableDeclarationNoIn->reset(stream_variableDeclarationNoIn);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, variableDeclarationListNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//Emerson.g:210:1: variableDeclaration : Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) ;
 */
static EmersonParser_variableDeclaration_return
variableDeclaration(pEmersonParser ctx)
{   
    EmersonParser_variableDeclaration_return retval;
    ANTLR3_UINT32 variableDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier83;
    pANTLR3_COMMON_TOKEN    LTERM84;
    EmersonParser_initialiser_return initialiser85;
    #undef	RETURN_TYPE_initialiser85
    #define	RETURN_TYPE_initialiser85 EmersonParser_initialiser_return

    pANTLR3_BASE_TREE Identifier83_tree;
    pANTLR3_BASE_TREE LTERM84_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiser;
    /* Initialize rule variables
     */
    variableDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier83       = NULL;
    LTERM84       = NULL;
    initialiser85.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier83_tree   = NULL;
    LTERM84_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiser   = NULL;
    #define CREATE_stream_initialiser  if (stream_initialiser == NULL) {stream_initialiser = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiser"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:211:2: ( Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) )
        // .//Emerson.g:211:4: Identifier ( LTERM )* ( initialiser )?
        {
            Identifier83 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1372); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier83, NULL); }


            // .//Emerson.g:211:15: ( LTERM )*

            for (;;)
            {
                int alt38=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA38_0 = LA(1);
                    if ( (LA38_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA38_2 = LA(2);
                            if ( (synpred54_Emerson(ctx)) ) 
                            {
                                alt38=1;
                            }

                        }
                    }

                }
                switch (alt38) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM84 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclaration1374); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM84, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:211:22: ( initialiser )?
            {
                int alt39=2;
                {
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == 135) ) 
                    {
                        alt39=1;
                    }
                }
                switch (alt39) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiser
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1377);
            	        initialiser85=initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiser; stream_initialiser->add(stream_initialiser, initialiser85.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier, initialiser
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 211:35: -> ^( VAR Identifier ( initialiser )? )
            	{
            	    // .//Emerson.g:211:38: ^( VAR Identifier ( initialiser )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:211:55: ( initialiser )?
            	        {
            	        	if ( (stream_initialiser != NULL && stream_initialiser->hasNext(stream_initialiser))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiser == NULL ? NULL : stream_initialiser->nextTree(stream_initialiser));

            	        	}
            	        	if ( stream_initialiser != NULL) stream_initialiser->reset(stream_initialiser);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiser != NULL) stream_initialiser->free(stream_initialiser);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, variableDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//Emerson.g:214:1: variableDeclarationNoIn : Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static EmersonParser_variableDeclarationNoIn_return
variableDeclarationNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier86;
    pANTLR3_COMMON_TOKEN    LTERM87;
    EmersonParser_initialiserNoIn_return initialiserNoIn88;
    #undef	RETURN_TYPE_initialiserNoIn88
    #define	RETURN_TYPE_initialiserNoIn88 EmersonParser_initialiserNoIn_return

    pANTLR3_BASE_TREE Identifier86_tree;
    pANTLR3_BASE_TREE LTERM87_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiserNoIn;
    /* Initialize rule variables
     */
    variableDeclarationNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier86       = NULL;
    LTERM87       = NULL;
    initialiserNoIn88.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier86_tree   = NULL;
    LTERM87_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiserNoIn   = NULL;
    #define CREATE_stream_initialiserNoIn  if (stream_initialiserNoIn == NULL) {stream_initialiserNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiserNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:215:2: ( Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//Emerson.g:215:4: Identifier ( LTERM )* ( initialiserNoIn )?
        {
            Identifier86 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1401); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier86, NULL); }


            // .//Emerson.g:215:15: ( LTERM )*

            for (;;)
            {
                int alt40=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA40_2 = LA(2);
                            if ( (synpred56_Emerson(ctx)) ) 
                            {
                                alt40=1;
                            }

                        }
                    }

                }
                switch (alt40) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM87 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationNoIn1403); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM87, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:215:22: ( initialiserNoIn )?
            {
                int alt41=2;
                {
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == 135) ) 
                    {
                        alt41=1;
                    }
                }
                switch (alt41) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiserNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1406);
            	        initialiserNoIn88=initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiserNoIn; stream_initialiserNoIn->add(stream_initialiserNoIn, initialiserNoIn88.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier, initialiserNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 215:39: -> ^( VAR Identifier ( initialiserNoIn )? )
            	{
            	    // .//Emerson.g:215:43: ^( VAR Identifier ( initialiserNoIn )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:215:60: ( initialiserNoIn )?
            	        {
            	        	if ( (stream_initialiserNoIn != NULL && stream_initialiserNoIn->hasNext(stream_initialiserNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiserNoIn == NULL ? NULL : stream_initialiserNoIn->nextTree(stream_initialiserNoIn));

            	        	}
            	        	if ( stream_initialiserNoIn != NULL) stream_initialiserNoIn->reset(stream_initialiserNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiserNoIn != NULL) stream_initialiserNoIn->free(stream_initialiserNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, variableDeclarationNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//Emerson.g:218:1: initialiser : '=' ( LTERM )* assignmentExpression -> assignmentExpression ;
 */
static EmersonParser_initialiser_return
initialiser(pEmersonParser ctx)
{   
    EmersonParser_initialiser_return retval;
    ANTLR3_UINT32 initialiser_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal89;
    pANTLR3_COMMON_TOKEN    LTERM90;
    EmersonParser_assignmentExpression_return assignmentExpression91;
    #undef	RETURN_TYPE_assignmentExpression91
    #define	RETURN_TYPE_assignmentExpression91 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal89_tree;
    pANTLR3_BASE_TREE LTERM90_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    initialiser_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal89       = NULL;
    LTERM90       = NULL;
    assignmentExpression91.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal89_tree   = NULL;
    LTERM90_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:219:2: ( '=' ( LTERM )* assignmentExpression -> assignmentExpression )
        // .//Emerson.g:219:4: '=' ( LTERM )* assignmentExpression
        {
            char_literal89 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_initialiser1431); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, char_literal89, NULL); }


            // .//Emerson.g:219:8: ( LTERM )*

            for (;;)
            {
                int alt42=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA42_0 = LA(1);
                    if ( (LA42_0 == LTERM) ) 
                    {
                        alt42=1;
                    }

                }
                switch (alt42) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM90 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiser1433); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM90, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_initialiser1436);
            assignmentExpression91=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression91.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 219:36: -> assignmentExpression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, initialiser_StartIndex); }
    return retval;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//Emerson.g:222:1: initialiserNoIn : '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn ;
 */
static EmersonParser_initialiserNoIn_return
initialiserNoIn(pEmersonParser ctx)
{   
    EmersonParser_initialiserNoIn_return retval;
    ANTLR3_UINT32 initialiserNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal92;
    pANTLR3_COMMON_TOKEN    LTERM93;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn94;
    #undef	RETURN_TYPE_assignmentExpressionNoIn94
    #define	RETURN_TYPE_assignmentExpressionNoIn94 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE char_literal92_tree;
    pANTLR3_BASE_TREE LTERM93_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    initialiserNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal92       = NULL;
    LTERM93       = NULL;
    assignmentExpressionNoIn94.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal92_tree   = NULL;
    LTERM93_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:223:2: ( '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn )
        // .//Emerson.g:223:4: '=' ( LTERM )* assignmentExpressionNoIn
        {
            char_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_initialiserNoIn1453); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, char_literal92, NULL); }


            // .//Emerson.g:223:8: ( LTERM )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (LA43_0 == LTERM) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM93 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiserNoIn1455); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM93, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1458);
            assignmentExpressionNoIn94=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn94.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 223:40: -> assignmentExpressionNoIn
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, initialiserNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start emptyStatement
 * .//Emerson.g:226:1: emptyStatement : ( LTERM )* ';' ;
 */
static EmersonParser_emptyStatement_return
emptyStatement(pEmersonParser ctx)
{   
    EmersonParser_emptyStatement_return retval;
    ANTLR3_UINT32 emptyStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM95;
    pANTLR3_COMMON_TOKEN    char_literal96;

    pANTLR3_BASE_TREE LTERM95_tree;
    pANTLR3_BASE_TREE char_literal96_tree;

    /* Initialize rule variables
     */
    emptyStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM95       = NULL;
    char_literal96       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LTERM95_tree   = NULL;
    char_literal96_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:227:9: ( ( LTERM )* ';' )
        // .//Emerson.g:227:11: ( LTERM )* ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // .//Emerson.g:227:11: ( LTERM )*

            for (;;)
            {
                int alt44=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == LTERM) ) 
                    {
                        alt44=1;
                    }

                }
                switch (alt44) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM95 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_emptyStatement1481); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleemptyStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        LTERM95_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LTERM95));
            	        ADAPTOR->addChild(ADAPTOR, root_0, LTERM95_tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop44;	/* break out of the loop */
            	    break;
                }
            }
            loop44: ; /* Jump out to here if this rule does not match */

            char_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_emptyStatement1484); 
            if  (HASEXCEPTION())
            {
                goto ruleemptyStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal96_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal96));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal96_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleemptyStatementEx; /* Prevent compiler warnings */
    ruleemptyStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, emptyStatement_StartIndex); }
    return retval;
}
/* $ANTLR end emptyStatement */

/** 
 * $ANTLR start expressionStatement
 * .//Emerson.g:230:1: expressionStatement : expression ( LTERM | ';' ) -> expression ;
 */
static EmersonParser_expressionStatement_return
expressionStatement(pEmersonParser ctx)
{   
    EmersonParser_expressionStatement_return retval;
    ANTLR3_UINT32 expressionStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM98;
    pANTLR3_COMMON_TOKEN    char_literal99;
    EmersonParser_expression_return expression97;
    #undef	RETURN_TYPE_expression97
    #define	RETURN_TYPE_expression97 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM98_tree;
    pANTLR3_BASE_TREE char_literal99_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expressionStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM98       = NULL;
    char_literal99       = NULL;
    expression97.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM98_tree   = NULL;
    char_literal99_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:231:2: ( expression ( LTERM | ';' ) -> expression )
        // .//Emerson.g:231:4: expression ( LTERM | ';' )
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1496);
            expression97=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression97.tree, NULL); }

            // .//Emerson.g:231:15: ( LTERM | ';' )
            {
                int alt45=2;

                {
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == LTERM) ) 
                    {
                        alt45=1;
                    }
                    else if ( (LA45_0 == 133) ) 
                    {
                        alt45=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 45;
                        EXCEPTION->state        = 0;


                        goto ruleexpressionStatementEx;
                    }
                }
                switch (alt45) 
                {
            	case 1:
            	    // .//Emerson.g:231:16: LTERM
            	    {
            	        LTERM98 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionStatement1499); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM98, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:231:24: ';'
            	    {
            	        char_literal99 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_expressionStatement1503); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal99, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 231:29: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, expressionStatement_StartIndex); }
    return retval;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start whenStatement
 * .//Emerson.g:234:1: whenStatement : 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* functionBody -> ^( WHEN whenPred functionBody ) ;
 */
static EmersonParser_whenStatement_return
whenStatement(pEmersonParser ctx)
{   
    EmersonParser_whenStatement_return retval;
    ANTLR3_UINT32 whenStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal100;
    pANTLR3_COMMON_TOKEN    LTERM101;
    pANTLR3_COMMON_TOKEN    char_literal102;
    pANTLR3_COMMON_TOKEN    LTERM103;
    pANTLR3_COMMON_TOKEN    LTERM105;
    pANTLR3_COMMON_TOKEN    char_literal106;
    pANTLR3_COMMON_TOKEN    LTERM107;
    EmersonParser_whenPred_return whenPred104;
    #undef	RETURN_TYPE_whenPred104
    #define	RETURN_TYPE_whenPred104 EmersonParser_whenPred_return

    EmersonParser_functionBody_return functionBody108;
    #undef	RETURN_TYPE_functionBody108
    #define	RETURN_TYPE_functionBody108 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal100_tree;
    pANTLR3_BASE_TREE LTERM101_tree;
    pANTLR3_BASE_TREE char_literal102_tree;
    pANTLR3_BASE_TREE LTERM103_tree;
    pANTLR3_BASE_TREE LTERM105_tree;
    pANTLR3_BASE_TREE char_literal106_tree;
    pANTLR3_BASE_TREE LTERM107_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenPred;
    /* Initialize rule variables
     */
    whenStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal100       = NULL;
    LTERM101       = NULL;
    char_literal102       = NULL;
    LTERM103       = NULL;
    LTERM105       = NULL;
    char_literal106       = NULL;
    LTERM107       = NULL;
    whenPred104.tree = NULL;

    functionBody108.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal100_tree   = NULL;
    LTERM101_tree   = NULL;
    char_literal102_tree   = NULL;
    LTERM103_tree   = NULL;
    LTERM105_tree   = NULL;
    char_literal106_tree   = NULL;
    LTERM107_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_whenPred   = NULL;
    #define CREATE_stream_whenPred  if (stream_whenPred == NULL) {stream_whenPred = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenPred"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:236:5: ( 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* functionBody -> ^( WHEN whenPred functionBody ) )
        // .//Emerson.g:236:7: 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* functionBody
        {
            string_literal100 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_whenStatement1523); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, string_literal100, NULL); }


            // .//Emerson.g:236:14: ( LTERM )*

            for (;;)
            {
                int alt46=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == LTERM) ) 
                    {
                        alt46=1;
                    }

                }
                switch (alt46) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM101 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1525); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM101, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop46;	/* break out of the loop */
            	    break;
                }
            }
            loop46: ; /* Jump out to here if this rule does not match */

            char_literal102 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_whenStatement1528); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal102, NULL); }


            // .//Emerson.g:236:25: ( LTERM )*

            for (;;)
            {
                int alt47=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA47_0 = LA(1);
                    if ( (LA47_0 == LTERM) ) 
                    {
                        alt47=1;
                    }

                }
                switch (alt47) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM103 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1530); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM103, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_whenPred_in_whenStatement1533);
            whenPred104=whenPred(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_whenPred; stream_whenPred->add(stream_whenPred, whenPred104.tree, NULL); }

            // .//Emerson.g:236:41: ( LTERM )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == LTERM) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM105 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1535); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM105, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */

            char_literal106 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_whenStatement1538); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal106, NULL); }


            // .//Emerson.g:236:52: ( LTERM )*

            for (;;)
            {
                int alt49=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA49_0 = LA(1);
                    if ( (LA49_0 == LTERM) ) 
                    {
                        alt49=1;
                    }

                }
                switch (alt49) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM107 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1540); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM107, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_whenStatement1543);
            functionBody108=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody108.tree, NULL); }

             
            /* AST REWRITE
             * elements          : functionBody, whenPred
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 236:72: -> ^( WHEN whenPred functionBody )
            	{
            	    // .//Emerson.g:236:75: ^( WHEN whenPred functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN, (pANTLR3_UINT8)"WHEN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_whenPred == NULL ? NULL : stream_whenPred->nextTree(stream_whenPred));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenStatementEx; /* Prevent compiler warnings */
    rulewhenStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_whenPred != NULL) stream_whenPred->free(stream_whenPred);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, whenStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whenStatement */

/** 
 * $ANTLR start whenPred
 * .//Emerson.g:241:1: whenPred : expression -> ^( WHEN_PRED expression ) ;
 */
static EmersonParser_whenPred_return
whenPred(pEmersonParser ctx)
{   
    EmersonParser_whenPred_return retval;
    ANTLR3_UINT32 whenPred_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_expression_return expression109;
    #undef	RETURN_TYPE_expression109
    #define	RETURN_TYPE_expression109 EmersonParser_expression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    whenPred_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        return retval; 
    }
    expression109.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:242:5: ( expression -> ^( WHEN_PRED expression ) )
        // .//Emerson.g:242:7: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenPred1572);
            expression109=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression109.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 242:18: -> ^( WHEN_PRED expression )
            	{
            	    // .//Emerson.g:242:21: ^( WHEN_PRED expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_PRED, (pANTLR3_UINT8)"WHEN_PRED"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenPredEx; /* Prevent compiler warnings */
    rulewhenPredEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, whenPred_StartIndex); }
    return retval;
}
/* $ANTLR end whenPred */

/** 
 * $ANTLR start whenCheckedListFirst
 * .//Emerson.g:245:1: whenCheckedListFirst : s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )? -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? ) ;
 */
static EmersonParser_whenCheckedListFirst_return
whenCheckedListFirst(pEmersonParser ctx)
{   
    EmersonParser_whenCheckedListFirst_return retval;
    ANTLR3_UINT32 whenCheckedListFirst_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM110;
    pANTLR3_COMMON_TOKEN    char_literal111;
    pANTLR3_COMMON_TOKEN    LTERM112;
    EmersonParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_expression_return

    EmersonParser_whenCheckedListSubsequent_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_whenCheckedListSubsequent_return

    pANTLR3_BASE_TREE LTERM110_tree;
    pANTLR3_BASE_TREE char_literal111_tree;
    pANTLR3_BASE_TREE LTERM112_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedListSubsequent;
    /* Initialize rule variables
     */
    whenCheckedListFirst_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM110       = NULL;
    char_literal111       = NULL;
    LTERM112       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM110_tree   = NULL;
    char_literal111_tree   = NULL;
    LTERM112_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_whenCheckedListSubsequent   = NULL;
    #define CREATE_stream_whenCheckedListSubsequent  if (stream_whenCheckedListSubsequent == NULL) {stream_whenCheckedListSubsequent = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedListSubsequent"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:246:5: (s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )? -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? ) )
        // .//Emerson.g:246:7: s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )?
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListFirst1599);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//Emerson.g:246:21: ( LTERM )*

            for (;;)
            {
                int alt50=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA50_0 = LA(1);
                    if ( (LA50_0 == LTERM) ) 
                    {
                        alt50=1;
                    }

                }
                switch (alt50) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM110 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListFirst1601); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM110, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop50;	/* break out of the loop */
            	    break;
                }
            }
            loop50: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:246:28: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )?
            {
                int alt52=2;
                {
                    int LA52_0 = LA(1);
                    if ( (LA52_0 == 130) ) 
                    {
                        alt52=1;
                    }
                }
                switch (alt52) 
                {
            	case 1:
            	    // .//Emerson.g:246:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
            	    {
            	        char_literal111 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_whenCheckedListFirst1605); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal111, NULL); }


            	        // .//Emerson.g:246:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt51=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA51_0 = LA(1);
            	                if ( (LA51_0 == LTERM) ) 
            	                {
            	                    alt51=1;
            	                }

            	            }
            	            switch (alt51) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM112 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListFirst1607); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhenCheckedListFirstEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM112, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop51;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop51: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1612);
            	        s2=whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedListSubsequent; stream_whenCheckedListSubsequent->add(stream_whenCheckedListSubsequent, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s2, s1
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 246:71: -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:246:77: ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_CHECKED_LIST_FIRST, (pANTLR3_UINT8)"WHEN_CHECKED_LIST_FIRST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:246:107: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListFirstEx; /* Prevent compiler warnings */
    rulewhenCheckedListFirstEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_whenCheckedListSubsequent != NULL) stream_whenCheckedListSubsequent->free(stream_whenCheckedListSubsequent);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, whenCheckedListFirst_StartIndex); }
    return retval;
}
/* $ANTLR end whenCheckedListFirst */

/** 
 * $ANTLR start whenCheckedListSubsequent
 * .//Emerson.g:249:1: whenCheckedListSubsequent : s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )* -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* ) ;
 */
static EmersonParser_whenCheckedListSubsequent_return
whenCheckedListSubsequent(pEmersonParser ctx)
{   
    EmersonParser_whenCheckedListSubsequent_return retval;
    ANTLR3_UINT32 whenCheckedListSubsequent_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM113;
    pANTLR3_COMMON_TOKEN    char_literal114;
    pANTLR3_COMMON_TOKEN    LTERM115;
    EmersonParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_expression_return

    EmersonParser_whenCheckedListSubsequent_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_whenCheckedListSubsequent_return

    pANTLR3_BASE_TREE LTERM113_tree;
    pANTLR3_BASE_TREE char_literal114_tree;
    pANTLR3_BASE_TREE LTERM115_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedListSubsequent;
    /* Initialize rule variables
     */
    whenCheckedListSubsequent_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM113       = NULL;
    char_literal114       = NULL;
    LTERM115       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM113_tree   = NULL;
    char_literal114_tree   = NULL;
    LTERM115_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_whenCheckedListSubsequent   = NULL;
    #define CREATE_stream_whenCheckedListSubsequent  if (stream_whenCheckedListSubsequent == NULL) {stream_whenCheckedListSubsequent = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedListSubsequent"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:250:5: (s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )* -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* ) )
        // .//Emerson.g:250:7: s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )*
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListSubsequent1649);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//Emerson.g:250:21: ( LTERM )*

            for (;;)
            {
                int alt53=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA53_0 = LA(1);
                    if ( (LA53_0 == LTERM) ) 
                    {
                        alt53=1;
                    }

                }
                switch (alt53) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM113 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListSubsequent1651); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM113, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop53;	/* break out of the loop */
            	    break;
                }
            }
            loop53: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:250:28: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )*

            for (;;)
            {
                int alt55=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA55_0 = LA(1);
                    if ( (LA55_0 == 130) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA55_2 = LA(2);
                            if ( (synpred71_Emerson(ctx)) ) 
                            {
                                alt55=1;
                            }

                        }
                    }

                }
                switch (alt55) 
                {
            	case 1:
            	    // .//Emerson.g:250:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
            	    {
            	        char_literal114 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_whenCheckedListSubsequent1655); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal114, NULL); }


            	        // .//Emerson.g:250:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt54=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA54_0 = LA(1);
            	                if ( (LA54_0 == LTERM) ) 
            	                {
            	                    alt54=1;
            	                }

            	            }
            	            switch (alt54) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM115 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListSubsequent1657); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhenCheckedListSubsequentEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM115, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop54;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop54: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1662);
            	        s2=whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedListSubsequent; stream_whenCheckedListSubsequent->add(stream_whenCheckedListSubsequent, s2.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : s1, s2
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 250:71: -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* )
            	{
            	    // .//Emerson.g:250:74: ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_CHECKED_LIST_SUBSEQUENT, (pANTLR3_UINT8)"WHEN_CHECKED_LIST_SUBSEQUENT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:250:109: ( $s2)*
            	        {
            	        	while ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if (stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListSubsequentEx; /* Prevent compiler warnings */
    rulewhenCheckedListSubsequentEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_whenCheckedListSubsequent != NULL) stream_whenCheckedListSubsequent->free(stream_whenCheckedListSubsequent);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, whenCheckedListSubsequent_StartIndex); }
    return retval;
}
/* $ANTLR end whenCheckedListSubsequent */

/** 
 * $ANTLR start ifStatement
 * .//Emerson.g:254:1: ifStatement : 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) ;
 */
static EmersonParser_ifStatement_return
ifStatement(pEmersonParser ctx)
{   
    EmersonParser_ifStatement_return retval;
    ANTLR3_UINT32 ifStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal116;
    pANTLR3_COMMON_TOKEN    LTERM117;
    pANTLR3_COMMON_TOKEN    char_literal118;
    pANTLR3_COMMON_TOKEN    LTERM119;
    pANTLR3_COMMON_TOKEN    LTERM121;
    pANTLR3_COMMON_TOKEN    char_literal122;
    pANTLR3_COMMON_TOKEN    LTERM123;
    pANTLR3_COMMON_TOKEN    LTERM124;
    pANTLR3_COMMON_TOKEN    string_literal125;
    pANTLR3_COMMON_TOKEN    LTERM126;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_statement_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_statement_return

    EmersonParser_expression_return expression120;
    #undef	RETURN_TYPE_expression120
    #define	RETURN_TYPE_expression120 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal116_tree;
    pANTLR3_BASE_TREE LTERM117_tree;
    pANTLR3_BASE_TREE char_literal118_tree;
    pANTLR3_BASE_TREE LTERM119_tree;
    pANTLR3_BASE_TREE LTERM121_tree;
    pANTLR3_BASE_TREE char_literal122_tree;
    pANTLR3_BASE_TREE LTERM123_tree;
    pANTLR3_BASE_TREE LTERM124_tree;
    pANTLR3_BASE_TREE string_literal125_tree;
    pANTLR3_BASE_TREE LTERM126_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    ifStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal116       = NULL;
    LTERM117       = NULL;
    char_literal118       = NULL;
    LTERM119       = NULL;
    LTERM121       = NULL;
    char_literal122       = NULL;
    LTERM123       = NULL;
    LTERM124       = NULL;
    string_literal125       = NULL;
    LTERM126       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expression120.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal116_tree   = NULL;
    LTERM117_tree   = NULL;
    char_literal118_tree   = NULL;
    LTERM119_tree   = NULL;
    LTERM121_tree   = NULL;
    char_literal122_tree   = NULL;
    LTERM123_tree   = NULL;
    LTERM124_tree   = NULL;
    string_literal125_tree   = NULL;
    LTERM126_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:255:5: ( 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) )
        // .//Emerson.g:255:7: 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
        {
            string_literal116 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_ifStatement1695); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, string_literal116, NULL); }


            // .//Emerson.g:255:12: ( LTERM )*

            for (;;)
            {
                int alt56=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA56_0 = LA(1);
                    if ( (LA56_0 == LTERM) ) 
                    {
                        alt56=1;
                    }

                }
                switch (alt56) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM117 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1697); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM117, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */

            char_literal118 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_ifStatement1700); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal118, NULL); }


            // .//Emerson.g:255:23: ( LTERM )*

            for (;;)
            {
                int alt57=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA57_0 = LA(1);
                    if ( (LA57_0 == LTERM) ) 
                    {
                        alt57=1;
                    }

                }
                switch (alt57) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM119 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1702); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM119, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop57;	/* break out of the loop */
            	    break;
                }
            }
            loop57: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1705);
            expression120=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression120.tree, NULL); }

            // .//Emerson.g:255:41: ( LTERM )*

            for (;;)
            {
                int alt58=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA58_0 = LA(1);
                    if ( (LA58_0 == LTERM) ) 
                    {
                        alt58=1;
                    }

                }
                switch (alt58) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM121 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1707); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM121, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop58;	/* break out of the loop */
            	    break;
                }
            }
            loop58: ; /* Jump out to here if this rule does not match */

            char_literal122 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_ifStatement1710); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal122, NULL); }


            // .//Emerson.g:255:52: ( LTERM )*

            for (;;)
            {
                int alt59=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA59_0 = LA(1);
                    if ( (LA59_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA59_2 = LA(2);
                            if ( (synpred75_Emerson(ctx)) ) 
                            {
                                alt59=1;
                            }

                        }
                    }

                }
                switch (alt59) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM123 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1712); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM123, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1717);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

            // .//Emerson.g:255:72: ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
            {
                int alt62=2;
                {
                    int LA62_0 = LA(1);
                    if ( (LA62_0 == LTERM) ) 
                    {
                        {
                            int LA62_1 = LA(2);
                            if ( (synpred78_Emerson(ctx)) ) 
                            {
                                alt62=1;
                            }
                        }
                    }
                    else if ( (LA62_0 == 138) ) 
                    {
                        {
                            int LA62_2 = LA(2);
                            if ( (synpred78_Emerson(ctx)) ) 
                            {
                                alt62=1;
                            }
                        }
                    }
                }
                switch (alt62) 
                {
            	case 1:
            	    // .//Emerson.g:255:73: ( LTERM )* 'else' ( LTERM )* s2= statement
            	    {

            	        // .//Emerson.g:255:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt60=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA60_0 = LA(1);
            	                if ( (LA60_0 == LTERM) ) 
            	                {
            	                    alt60=1;
            	                }

            	            }
            	            switch (alt60) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM124 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1720); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM124, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop60;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop60: ; /* Jump out to here if this rule does not match */

            	        string_literal125 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_ifStatement1723); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, string_literal125, NULL); }


            	        // .//Emerson.g:255:87: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt61=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA61_0 = LA(1);
            	                if ( (LA61_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA61_2 = LA(2);
            	                        if ( (synpred77_Emerson(ctx)) ) 
            	                        {
            	                            alt61=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt61) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM126 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1725); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM126, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop61;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop61: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1730);
            	        s2=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s2, s1, expression
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 255:109: -> ^( IF expression $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:255:112: ^( IF expression $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:255:132: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, ifStatement_StartIndex); }
    return retval;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//Emerson.g:258:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static EmersonParser_iterationStatement_return
iterationStatement(pEmersonParser ctx)
{   
    EmersonParser_iterationStatement_return retval;
    ANTLR3_UINT32 iterationStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_doWhileStatement_return doWhileStatement127;
    #undef	RETURN_TYPE_doWhileStatement127
    #define	RETURN_TYPE_doWhileStatement127 EmersonParser_doWhileStatement_return

    EmersonParser_whileStatement_return whileStatement128;
    #undef	RETURN_TYPE_whileStatement128
    #define	RETURN_TYPE_whileStatement128 EmersonParser_whileStatement_return

    EmersonParser_forStatement_return forStatement129;
    #undef	RETURN_TYPE_forStatement129
    #define	RETURN_TYPE_forStatement129 EmersonParser_forStatement_return

    EmersonParser_forInStatement_return forInStatement130;
    #undef	RETURN_TYPE_forInStatement130
    #define	RETURN_TYPE_forInStatement130 EmersonParser_forInStatement_return


    /* Initialize rule variables
     */
    iterationStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        return retval; 
    }
    doWhileStatement127.tree = NULL;

    whileStatement128.tree = NULL;

    forStatement129.tree = NULL;

    forInStatement130.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:259:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt63;

            alt63=4;

            switch ( LA(1) ) 
            {
            case 139:
            	{
            		alt63=1;
            	}
                break;
            case 140:
            	{
            		alt63=2;
            	}
                break;
            case 141:
            	{

            		{
            		    int LA63_3 = LA(2);
            		    if ( (synpred81_Emerson(ctx)) ) 
            		    {
            		        alt63=3;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt63=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 63;
            		        EXCEPTION->state        = 3;


            		        goto ruleiterationStatementEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 63;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt63) 
            {
        	case 1:
        	    // .//Emerson.g:259:4: doWhileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1762);
        	        doWhileStatement127=doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, doWhileStatement127.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:260:4: whileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1767);
        	        whileStatement128=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStatement128.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:261:4: forStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1772);
        	        forStatement129=forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forStatement129.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:262:4: forInStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1777);
        	        forInStatement130=forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forInStatement130.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, iterationStatement_StartIndex); }
    return retval;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//Emerson.g:265:1: doWhileStatement : 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) ;
 */
static EmersonParser_doWhileStatement_return
doWhileStatement(pEmersonParser ctx)
{   
    EmersonParser_doWhileStatement_return retval;
    ANTLR3_UINT32 doWhileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal131;
    pANTLR3_COMMON_TOKEN    LTERM132;
    pANTLR3_COMMON_TOKEN    LTERM134;
    pANTLR3_COMMON_TOKEN    string_literal135;
    pANTLR3_COMMON_TOKEN    LTERM136;
    pANTLR3_COMMON_TOKEN    char_literal137;
    pANTLR3_COMMON_TOKEN    char_literal139;
    pANTLR3_COMMON_TOKEN    LTERM140;
    pANTLR3_COMMON_TOKEN    char_literal141;
    EmersonParser_statement_return statement133;
    #undef	RETURN_TYPE_statement133
    #define	RETURN_TYPE_statement133 EmersonParser_statement_return

    EmersonParser_expression_return expression138;
    #undef	RETURN_TYPE_expression138
    #define	RETURN_TYPE_expression138 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal131_tree;
    pANTLR3_BASE_TREE LTERM132_tree;
    pANTLR3_BASE_TREE LTERM134_tree;
    pANTLR3_BASE_TREE string_literal135_tree;
    pANTLR3_BASE_TREE LTERM136_tree;
    pANTLR3_BASE_TREE char_literal137_tree;
    pANTLR3_BASE_TREE char_literal139_tree;
    pANTLR3_BASE_TREE LTERM140_tree;
    pANTLR3_BASE_TREE char_literal141_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    doWhileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal131       = NULL;
    LTERM132       = NULL;
    LTERM134       = NULL;
    string_literal135       = NULL;
    LTERM136       = NULL;
    char_literal137       = NULL;
    char_literal139       = NULL;
    LTERM140       = NULL;
    char_literal141       = NULL;
    statement133.tree = NULL;

    expression138.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal131_tree   = NULL;
    LTERM132_tree   = NULL;
    LTERM134_tree   = NULL;
    string_literal135_tree   = NULL;
    LTERM136_tree   = NULL;
    char_literal137_tree   = NULL;
    char_literal139_tree   = NULL;
    LTERM140_tree   = NULL;
    char_literal141_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:266:2: ( 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) )
        // .//Emerson.g:266:4: 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' )
        {
            string_literal131 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_doWhileStatement1789); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, string_literal131, NULL); }


            // .//Emerson.g:266:9: ( LTERM )*

            for (;;)
            {
                int alt64=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA64_0 = LA(1);
                    if ( (LA64_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA64_2 = LA(2);
                            if ( (synpred82_Emerson(ctx)) ) 
                            {
                                alt64=1;
                            }

                        }
                    }

                }
                switch (alt64) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM132 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1791); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM132, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop64;	/* break out of the loop */
            	    break;
                }
            }
            loop64: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1794);
            statement133=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement133.tree, NULL); }

            // .//Emerson.g:266:26: ( LTERM )*

            for (;;)
            {
                int alt65=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA65_0 = LA(1);
                    if ( (LA65_0 == LTERM) ) 
                    {
                        alt65=1;
                    }

                }
                switch (alt65) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM134 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1796); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM134, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop65;	/* break out of the loop */
            	    break;
                }
            }
            loop65: ; /* Jump out to here if this rule does not match */

            string_literal135 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_doWhileStatement1799); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, string_literal135, NULL); }


            // .//Emerson.g:266:41: ( LTERM )*

            for (;;)
            {
                int alt66=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA66_0 = LA(1);
                    if ( (LA66_0 == LTERM) ) 
                    {
                        alt66=1;
                    }

                }
                switch (alt66) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM136 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1801); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM136, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop66;	/* break out of the loop */
            	    break;
                }
            }
            loop66: ; /* Jump out to here if this rule does not match */

            char_literal137 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_doWhileStatement1804); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal137, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1806);
            expression138=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression138.tree, NULL); }
            char_literal139 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_doWhileStatement1808); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal139, NULL); }


            // .//Emerson.g:266:67: ( LTERM | ';' )
            {
                int alt67=2;

                {
                    int LA67_0 = LA(1);
                    if ( (LA67_0 == LTERM) ) 
                    {
                        alt67=1;
                    }
                    else if ( (LA67_0 == 133) ) 
                    {
                        alt67=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 67;
                        EXCEPTION->state        = 0;


                        goto ruledoWhileStatementEx;
                    }
                }
                switch (alt67) 
                {
            	case 1:
            	    // .//Emerson.g:266:68: LTERM
            	    {
            	        LTERM140 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1811); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM140, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:266:76: ';'
            	    {
            	        char_literal141 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_doWhileStatement1815); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal141, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 266:81: -> ^( DO statement expression )
            	{
            	    // .//Emerson.g:266:84: ^( DO statement expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO, (pANTLR3_UINT8)"DO"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, doWhileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//Emerson.g:269:1: whileStatement : 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) ;
 */
static EmersonParser_whileStatement_return
whileStatement(pEmersonParser ctx)
{   
    EmersonParser_whileStatement_return retval;
    ANTLR3_UINT32 whileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal142;
    pANTLR3_COMMON_TOKEN    LTERM143;
    pANTLR3_COMMON_TOKEN    char_literal144;
    pANTLR3_COMMON_TOKEN    LTERM145;
    pANTLR3_COMMON_TOKEN    LTERM147;
    pANTLR3_COMMON_TOKEN    char_literal148;
    pANTLR3_COMMON_TOKEN    LTERM149;
    EmersonParser_expression_return expression146;
    #undef	RETURN_TYPE_expression146
    #define	RETURN_TYPE_expression146 EmersonParser_expression_return

    EmersonParser_statement_return statement150;
    #undef	RETURN_TYPE_statement150
    #define	RETURN_TYPE_statement150 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal142_tree;
    pANTLR3_BASE_TREE LTERM143_tree;
    pANTLR3_BASE_TREE char_literal144_tree;
    pANTLR3_BASE_TREE LTERM145_tree;
    pANTLR3_BASE_TREE LTERM147_tree;
    pANTLR3_BASE_TREE char_literal148_tree;
    pANTLR3_BASE_TREE LTERM149_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal142       = NULL;
    LTERM143       = NULL;
    char_literal144       = NULL;
    LTERM145       = NULL;
    LTERM147       = NULL;
    char_literal148       = NULL;
    LTERM149       = NULL;
    expression146.tree = NULL;

    statement150.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal142_tree   = NULL;
    LTERM143_tree   = NULL;
    char_literal144_tree   = NULL;
    LTERM145_tree   = NULL;
    LTERM147_tree   = NULL;
    char_literal148_tree   = NULL;
    LTERM149_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:270:2: ( 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) )
        // .//Emerson.g:270:4: 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal142 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_whileStatement1841); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, string_literal142, NULL); }


            // .//Emerson.g:270:12: ( LTERM )*

            for (;;)
            {
                int alt68=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA68_0 = LA(1);
                    if ( (LA68_0 == LTERM) ) 
                    {
                        alt68=1;
                    }

                }
                switch (alt68) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM143 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1843); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM143, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop68;	/* break out of the loop */
            	    break;
                }
            }
            loop68: ; /* Jump out to here if this rule does not match */

            char_literal144 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_whileStatement1846); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal144, NULL); }


            // .//Emerson.g:270:23: ( LTERM )*

            for (;;)
            {
                int alt69=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA69_0 = LA(1);
                    if ( (LA69_0 == LTERM) ) 
                    {
                        alt69=1;
                    }

                }
                switch (alt69) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM145 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1848); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM145, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop69;	/* break out of the loop */
            	    break;
                }
            }
            loop69: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1851);
            expression146=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression146.tree, NULL); }

            // .//Emerson.g:270:41: ( LTERM )*

            for (;;)
            {
                int alt70=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA70_0 = LA(1);
                    if ( (LA70_0 == LTERM) ) 
                    {
                        alt70=1;
                    }

                }
                switch (alt70) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM147 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1853); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM147, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop70;	/* break out of the loop */
            	    break;
                }
            }
            loop70: ; /* Jump out to here if this rule does not match */

            char_literal148 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_whileStatement1856); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal148, NULL); }


            // .//Emerson.g:270:52: ( LTERM )*

            for (;;)
            {
                int alt71=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA71_0 = LA(1);
                    if ( (LA71_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA71_2 = LA(2);
                            if ( (synpred89_Emerson(ctx)) ) 
                            {
                                alt71=1;
                            }

                        }
                    }

                }
                switch (alt71) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM149 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1858); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM149, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop71;	/* break out of the loop */
            	    break;
                }
            }
            loop71: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1861);
            statement150=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement150.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 270:69: -> ^( WHILE expression statement )
            	{
            	    // .//Emerson.g:270:72: ^( WHILE expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE, (pANTLR3_UINT8)"WHILE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, whileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//Emerson.g:273:1: forStatement : 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) ;
 */
static EmersonParser_forStatement_return
forStatement(pEmersonParser ctx)
{   
    EmersonParser_forStatement_return retval;
    ANTLR3_UINT32 forStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal151;
    pANTLR3_COMMON_TOKEN    LTERM152;
    pANTLR3_COMMON_TOKEN    char_literal153;
    pANTLR3_COMMON_TOKEN    LTERM154;
    pANTLR3_COMMON_TOKEN    LTERM155;
    pANTLR3_COMMON_TOKEN    char_literal156;
    pANTLR3_COMMON_TOKEN    LTERM157;
    pANTLR3_COMMON_TOKEN    LTERM158;
    pANTLR3_COMMON_TOKEN    char_literal159;
    pANTLR3_COMMON_TOKEN    LTERM160;
    pANTLR3_COMMON_TOKEN    LTERM161;
    pANTLR3_COMMON_TOKEN    char_literal162;
    pANTLR3_COMMON_TOKEN    LTERM163;
    EmersonParser_forStatementInitialiserPart_return init;
    #undef	RETURN_TYPE_init
    #define	RETURN_TYPE_init EmersonParser_forStatementInitialiserPart_return

    EmersonParser_expression_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond EmersonParser_expression_return

    EmersonParser_expression_return iter;
    #undef	RETURN_TYPE_iter
    #define	RETURN_TYPE_iter EmersonParser_expression_return

    EmersonParser_statement_return statement164;
    #undef	RETURN_TYPE_statement164
    #define	RETURN_TYPE_statement164 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal151_tree;
    pANTLR3_BASE_TREE LTERM152_tree;
    pANTLR3_BASE_TREE char_literal153_tree;
    pANTLR3_BASE_TREE LTERM154_tree;
    pANTLR3_BASE_TREE LTERM155_tree;
    pANTLR3_BASE_TREE char_literal156_tree;
    pANTLR3_BASE_TREE LTERM157_tree;
    pANTLR3_BASE_TREE LTERM158_tree;
    pANTLR3_BASE_TREE char_literal159_tree;
    pANTLR3_BASE_TREE LTERM160_tree;
    pANTLR3_BASE_TREE LTERM161_tree;
    pANTLR3_BASE_TREE char_literal162_tree;
    pANTLR3_BASE_TREE LTERM163_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forStatementInitialiserPart;
    /* Initialize rule variables
     */
    forStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal151       = NULL;
    LTERM152       = NULL;
    char_literal153       = NULL;
    LTERM154       = NULL;
    LTERM155       = NULL;
    char_literal156       = NULL;
    LTERM157       = NULL;
    LTERM158       = NULL;
    char_literal159       = NULL;
    LTERM160       = NULL;
    LTERM161       = NULL;
    char_literal162       = NULL;
    LTERM163       = NULL;
    init.tree = NULL;

    cond.tree = NULL;

    iter.tree = NULL;

    statement164.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal151_tree   = NULL;
    LTERM152_tree   = NULL;
    char_literal153_tree   = NULL;
    LTERM154_tree   = NULL;
    LTERM155_tree   = NULL;
    char_literal156_tree   = NULL;
    LTERM157_tree   = NULL;
    LTERM158_tree   = NULL;
    char_literal159_tree   = NULL;
    LTERM160_tree   = NULL;
    LTERM161_tree   = NULL;
    char_literal162_tree   = NULL;
    LTERM163_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forStatementInitialiserPart   = NULL;
    #define CREATE_stream_forStatementInitialiserPart  if (stream_forStatementInitialiserPart == NULL) {stream_forStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:274:2: ( 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) )
        // .//Emerson.g:274:4: 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal151 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forStatement1884); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal151, NULL); }


            // .//Emerson.g:274:10: ( LTERM )*

            for (;;)
            {
                int alt72=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA72_0 = LA(1);
                    if ( (LA72_0 == LTERM) ) 
                    {
                        alt72=1;
                    }

                }
                switch (alt72) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM152 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1886); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM152, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop72;	/* break out of the loop */
            	    break;
                }
            }
            loop72: ; /* Jump out to here if this rule does not match */

            char_literal153 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_forStatement1889); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal153, NULL); }


            // .//Emerson.g:274:21: ( ( LTERM )* init= forStatementInitialiserPart )?
            {
                int alt74=2;
                alt74 = cdfa74.predict(ctx, RECOGNIZER, ISTREAM, &cdfa74);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt74) 
                {
            	case 1:
            	    // .//Emerson.g:274:22: ( LTERM )* init= forStatementInitialiserPart
            	    {

            	        // .//Emerson.g:274:22: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt73=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA73_0 = LA(1);
            	                if ( (LA73_0 == LTERM) ) 
            	                {
            	                    alt73=1;
            	                }

            	            }
            	            switch (alt73) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM154 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1892); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM154, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop73;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop73: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement1897);
            	        init=forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_forStatementInitialiserPart; stream_forStatementInitialiserPart->add(stream_forStatementInitialiserPart, init.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:274:64: ( LTERM )*

            for (;;)
            {
                int alt75=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA75_0 = LA(1);
                    if ( (LA75_0 == LTERM) ) 
                    {
                        alt75=1;
                    }

                }
                switch (alt75) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM155 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1901); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM155, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop75;	/* break out of the loop */
            	    break;
                }
            }
            loop75: ; /* Jump out to here if this rule does not match */

            char_literal156 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_forStatement1904); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal156, NULL); }


            // .//Emerson.g:274:75: ( ( LTERM )* cond= expression )?
            {
                int alt77=2;
                alt77 = cdfa77.predict(ctx, RECOGNIZER, ISTREAM, &cdfa77);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt77) 
                {
            	case 1:
            	    // .//Emerson.g:274:76: ( LTERM )* cond= expression
            	    {

            	        // .//Emerson.g:274:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt76=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA76_0 = LA(1);
            	                if ( (LA76_0 == LTERM) ) 
            	                {
            	                    alt76=1;
            	                }

            	            }
            	            switch (alt76) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM157 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1907); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM157, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop76;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop76: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1912);
            	        cond=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, cond.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:274:101: ( LTERM )*

            for (;;)
            {
                int alt78=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA78_0 = LA(1);
                    if ( (LA78_0 == LTERM) ) 
                    {
                        alt78=1;
                    }

                }
                switch (alt78) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM158 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1916); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM158, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop78;	/* break out of the loop */
            	    break;
                }
            }
            loop78: ; /* Jump out to here if this rule does not match */

            char_literal159 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_forStatement1919); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal159, NULL); }


            // .//Emerson.g:274:112: ( ( LTERM )* iter= expression )?
            {
                int alt80=2;
                alt80 = cdfa80.predict(ctx, RECOGNIZER, ISTREAM, &cdfa80);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt80) 
                {
            	case 1:
            	    // .//Emerson.g:274:113: ( LTERM )* iter= expression
            	    {

            	        // .//Emerson.g:274:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt79=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA79_0 = LA(1);
            	                if ( (LA79_0 == LTERM) ) 
            	                {
            	                    alt79=1;
            	                }

            	            }
            	            switch (alt79) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM160 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1922); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM160, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop79;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop79: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1927);
            	        iter=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, iter.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:274:138: ( LTERM )*

            for (;;)
            {
                int alt81=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA81_0 = LA(1);
                    if ( (LA81_0 == LTERM) ) 
                    {
                        alt81=1;
                    }

                }
                switch (alt81) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM161 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1931); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM161, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop81;	/* break out of the loop */
            	    break;
                }
            }
            loop81: ; /* Jump out to here if this rule does not match */

            char_literal162 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_forStatement1934); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal162, NULL); }


            // .//Emerson.g:274:149: ( LTERM )*

            for (;;)
            {
                int alt82=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA82_0 = LA(1);
                    if ( (LA82_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA82_2 = LA(2);
                            if ( (synpred100_Emerson(ctx)) ) 
                            {
                                alt82=1;
                            }

                        }
                    }

                }
                switch (alt82) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM163 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1936); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM163, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop82;	/* break out of the loop */
            	    break;
                }
            }
            loop82: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forStatement1939);
            statement164=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement164.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, cond, iter, init
             * token labels      : 
             * rule labels       : retval, init, iter, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_iter;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_init=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token init", init.tree != NULL ? init.tree : NULL);
            	stream_iter=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token iter", iter.tree != NULL ? iter.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 274:166: -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	{
            	    // .//Emerson.g:274:170: ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR"), root_1));

            	        // .//Emerson.g:274:176: ( ^( FORINIT $init) )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		// .//Emerson.g:274:176: ^( FORINIT $init)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORINIT, (pANTLR3_UINT8)"FORINIT"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }
            	        // .//Emerson.g:274:196: ( ^( FORCOND $cond) )?
            	        {
            	        	if ( (stream_cond != NULL && stream_cond->hasNext(stream_cond))  )
            	        	{
            	        		// .//Emerson.g:274:196: ^( FORCOND $cond)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORCOND, (pANTLR3_UINT8)"FORCOND"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_cond != NULL) stream_cond->reset(stream_cond);

            	        }
            	        // .//Emerson.g:274:215: ( ^( FORITER $iter) )?
            	        {
            	        	if ( (stream_iter != NULL && stream_iter->hasNext(stream_iter))  )
            	        	{
            	        		// .//Emerson.g:274:215: ^( FORITER $iter)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORITER, (pANTLR3_UINT8)"FORITER"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_iter == NULL ? NULL : stream_iter->nextTree(stream_iter));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_iter != NULL) stream_iter->reset(stream_iter);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_init != NULL) stream_init->free(stream_init);
            	if (stream_iter != NULL) stream_iter->free(stream_iter);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forStatementInitialiserPart != NULL) stream_forStatementInitialiserPart->free(stream_forStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, forStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//Emerson.g:277:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) );
 */
static EmersonParser_forStatementInitialiserPart_return
forStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal166;
    pANTLR3_COMMON_TOKEN    LTERM167;
    EmersonParser_expressionNoIn_return expressionNoIn165;
    #undef	RETURN_TYPE_expressionNoIn165
    #define	RETURN_TYPE_expressionNoIn165 EmersonParser_expressionNoIn_return

    EmersonParser_variableDeclarationListNoIn_return variableDeclarationListNoIn168;
    #undef	RETURN_TYPE_variableDeclarationListNoIn168
    #define	RETURN_TYPE_variableDeclarationListNoIn168 EmersonParser_variableDeclarationListNoIn_return

    pANTLR3_BASE_TREE string_literal166_tree;
    pANTLR3_BASE_TREE LTERM167_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationListNoIn;
    /* Initialize rule variables
     */
    forStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal166       = NULL;
    LTERM167       = NULL;
    expressionNoIn165.tree = NULL;

    variableDeclarationListNoIn168.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal166_tree   = NULL;
    LTERM167_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_variableDeclarationListNoIn   = NULL;
    #define CREATE_stream_variableDeclarationListNoIn  if (stream_variableDeclarationListNoIn == NULL) {stream_variableDeclarationListNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationListNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:278:2: ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt84;

            alt84=2;


            {
                int LA84_0 = LA(1);
                if ( (((LA84_0 >= Identifier) && (LA84_0 <= NumericLiteral)) || ((LA84_0 >= 127) && (LA84_0 <= 128)) || LA84_0 == 131 || ((LA84_0 >= 157) && (LA84_0 <= 158)) || ((LA84_0 >= 190) && (LA84_0 <= 191)) || ((LA84_0 >= 195) && (LA84_0 <= 206))) ) 
                {
                    alt84=1;
                }
                else if ( (LA84_0 == 134) ) 
                {
                    alt84=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 84;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt84) 
            {
        	case 1:
        	    // .//Emerson.g:278:4: expressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart1988);
        	        expressionNoIn165=expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionNoIn165.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:279:4: 'var' ( LTERM )* variableDeclarationListNoIn
        	    {
        	        string_literal166 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_forStatementInitialiserPart1993); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, string_literal166, NULL); }


        	        // .//Emerson.g:279:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt83=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA83_0 = LA(1);
        	                if ( (LA83_0 == LTERM) ) 
        	                {
        	                    alt83=1;
        	                }

        	            }
        	            switch (alt83) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM167 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatementInitialiserPart1995); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM167, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop83;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop83: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1998);
        	        variableDeclarationListNoIn168=variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationListNoIn; stream_variableDeclarationListNoIn->add(stream_variableDeclarationListNoIn, variableDeclarationListNoIn168.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationListNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 279:45: -> ^( VARLIST variableDeclarationListNoIn )
        	        	{
        	        	    // .//Emerson.g:279:48: ^( VARLIST variableDeclarationListNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationListNoIn == NULL ? NULL : stream_variableDeclarationListNoIn->nextTree(stream_variableDeclarationListNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_variableDeclarationListNoIn != NULL) stream_variableDeclarationListNoIn->free(stream_variableDeclarationListNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, forStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//Emerson.g:282:1: forInStatement : 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static EmersonParser_forInStatement_return
forInStatement(pEmersonParser ctx)
{   
    EmersonParser_forInStatement_return retval;
    ANTLR3_UINT32 forInStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal169;
    pANTLR3_COMMON_TOKEN    LTERM170;
    pANTLR3_COMMON_TOKEN    char_literal171;
    pANTLR3_COMMON_TOKEN    LTERM172;
    pANTLR3_COMMON_TOKEN    LTERM174;
    pANTLR3_COMMON_TOKEN    string_literal175;
    pANTLR3_COMMON_TOKEN    LTERM176;
    pANTLR3_COMMON_TOKEN    LTERM178;
    pANTLR3_COMMON_TOKEN    char_literal179;
    pANTLR3_COMMON_TOKEN    LTERM180;
    EmersonParser_forInStatementInitialiserPart_return forInStatementInitialiserPart173;
    #undef	RETURN_TYPE_forInStatementInitialiserPart173
    #define	RETURN_TYPE_forInStatementInitialiserPart173 EmersonParser_forInStatementInitialiserPart_return

    EmersonParser_expression_return expression177;
    #undef	RETURN_TYPE_expression177
    #define	RETURN_TYPE_expression177 EmersonParser_expression_return

    EmersonParser_statement_return statement181;
    #undef	RETURN_TYPE_statement181
    #define	RETURN_TYPE_statement181 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal169_tree;
    pANTLR3_BASE_TREE LTERM170_tree;
    pANTLR3_BASE_TREE char_literal171_tree;
    pANTLR3_BASE_TREE LTERM172_tree;
    pANTLR3_BASE_TREE LTERM174_tree;
    pANTLR3_BASE_TREE string_literal175_tree;
    pANTLR3_BASE_TREE LTERM176_tree;
    pANTLR3_BASE_TREE LTERM178_tree;
    pANTLR3_BASE_TREE char_literal179_tree;
    pANTLR3_BASE_TREE LTERM180_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forInStatementInitialiserPart;
    /* Initialize rule variables
     */
    forInStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal169       = NULL;
    LTERM170       = NULL;
    char_literal171       = NULL;
    LTERM172       = NULL;
    LTERM174       = NULL;
    string_literal175       = NULL;
    LTERM176       = NULL;
    LTERM178       = NULL;
    char_literal179       = NULL;
    LTERM180       = NULL;
    forInStatementInitialiserPart173.tree = NULL;

    expression177.tree = NULL;

    statement181.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal169_tree   = NULL;
    LTERM170_tree   = NULL;
    char_literal171_tree   = NULL;
    LTERM172_tree   = NULL;
    LTERM174_tree   = NULL;
    string_literal175_tree   = NULL;
    LTERM176_tree   = NULL;
    LTERM178_tree   = NULL;
    char_literal179_tree   = NULL;
    LTERM180_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forInStatementInitialiserPart   = NULL;
    #define CREATE_stream_forInStatementInitialiserPart  if (stream_forInStatementInitialiserPart == NULL) {stream_forInStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forInStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:283:2: ( 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//Emerson.g:283:4: 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal169 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forInStatement2018); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal169, NULL); }


            // .//Emerson.g:283:10: ( LTERM )*

            for (;;)
            {
                int alt85=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA85_0 = LA(1);
                    if ( (LA85_0 == LTERM) ) 
                    {
                        alt85=1;
                    }

                }
                switch (alt85) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM170 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2020); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM170, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop85;	/* break out of the loop */
            	    break;
                }
            }
            loop85: ; /* Jump out to here if this rule does not match */

            char_literal171 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_forInStatement2023); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal171, NULL); }


            // .//Emerson.g:283:21: ( LTERM )*

            for (;;)
            {
                int alt86=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA86_0 = LA(1);
                    if ( (LA86_0 == LTERM) ) 
                    {
                        alt86=1;
                    }

                }
                switch (alt86) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM172 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2025); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM172, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop86;	/* break out of the loop */
            	    break;
                }
            }
            loop86: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement2028);
            forInStatementInitialiserPart173=forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_forInStatementInitialiserPart; stream_forInStatementInitialiserPart->add(stream_forInStatementInitialiserPart, forInStatementInitialiserPart173.tree, NULL); }

            // .//Emerson.g:283:58: ( LTERM )*

            for (;;)
            {
                int alt87=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA87_0 = LA(1);
                    if ( (LA87_0 == LTERM) ) 
                    {
                        alt87=1;
                    }

                }
                switch (alt87) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM174 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2030); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM174, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop87;	/* break out of the loop */
            	    break;
                }
            }
            loop87: ; /* Jump out to here if this rule does not match */

            string_literal175 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_forInStatement2033); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal175, NULL); }


            // .//Emerson.g:283:70: ( LTERM )*

            for (;;)
            {
                int alt88=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA88_0 = LA(1);
                    if ( (LA88_0 == LTERM) ) 
                    {
                        alt88=1;
                    }

                }
                switch (alt88) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM176 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2035); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM176, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop88;	/* break out of the loop */
            	    break;
                }
            }
            loop88: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_forInStatement2038);
            expression177=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression177.tree, NULL); }

            // .//Emerson.g:283:88: ( LTERM )*

            for (;;)
            {
                int alt89=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA89_0 = LA(1);
                    if ( (LA89_0 == LTERM) ) 
                    {
                        alt89=1;
                    }

                }
                switch (alt89) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM178 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2040); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM178, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop89;	/* break out of the loop */
            	    break;
                }
            }
            loop89: ; /* Jump out to here if this rule does not match */

            char_literal179 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_forInStatement2043); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal179, NULL); }


            // .//Emerson.g:283:99: ( LTERM )*

            for (;;)
            {
                int alt90=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA90_0 = LA(1);
                    if ( (LA90_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA90_2 = LA(2);
                            if ( (synpred108_Emerson(ctx)) ) 
                            {
                                alt90=1;
                            }

                        }
                    }

                }
                switch (alt90) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM180 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2045); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM180, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop90;	/* break out of the loop */
            	    break;
                }
            }
            loop90: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forInStatement2048);
            statement181=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement181.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, forInStatementInitialiserPart, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 283:116: -> ^( FORIN forInStatementInitialiserPart expression statement )
            	{
            	    // .//Emerson.g:283:119: ^( FORIN forInStatementInitialiserPart expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORIN, (pANTLR3_UINT8)"FORIN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_forInStatementInitialiserPart == NULL ? NULL : stream_forInStatementInitialiserPart->nextTree(stream_forInStatementInitialiserPart));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forInStatementInitialiserPart != NULL) stream_forInStatementInitialiserPart->free(stream_forInStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, forInStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//Emerson.g:286:1: forInStatementInitialiserPart : ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) );
 */
static EmersonParser_forInStatementInitialiserPart_return
forInStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forInStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forInStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal183;
    pANTLR3_COMMON_TOKEN    LTERM184;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression182;
    #undef	RETURN_TYPE_leftHandSideExpression182
    #define	RETURN_TYPE_leftHandSideExpression182 EmersonParser_leftHandSideExpression_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn185;
    #undef	RETURN_TYPE_variableDeclarationNoIn185
    #define	RETURN_TYPE_variableDeclarationNoIn185 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE string_literal183_tree;
    pANTLR3_BASE_TREE LTERM184_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    forInStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal183       = NULL;
    LTERM184       = NULL;
    leftHandSideExpression182.tree = NULL;

    variableDeclarationNoIn185.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal183_tree   = NULL;
    LTERM184_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:287:2: ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt92;

            alt92=2;


            {
                int LA92_0 = LA(1);
                if ( (((LA92_0 >= Identifier) && (LA92_0 <= NumericLiteral)) || ((LA92_0 >= 127) && (LA92_0 <= 128)) || LA92_0 == 131 || ((LA92_0 >= 157) && (LA92_0 <= 158)) || ((LA92_0 >= 202) && (LA92_0 <= 206))) ) 
                {
                    alt92=1;
                }
                else if ( (LA92_0 == 134) ) 
                {
                    alt92=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 92;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt92) 
            {
        	case 1:
        	    // .//Emerson.g:287:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2072);
        	        leftHandSideExpression182=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression182.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 287:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:288:4: 'var' ( LTERM )* variableDeclarationNoIn
        	    {
        	        string_literal183 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_forInStatementInitialiserPart2081); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, string_literal183, NULL); }


        	        // .//Emerson.g:288:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt91=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA91_0 = LA(1);
        	                if ( (LA91_0 == LTERM) ) 
        	                {
        	                    alt91=1;
        	                }

        	            }
        	            switch (alt91) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM184 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatementInitialiserPart2083); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforInStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM184, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop91;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop91: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2086);
        	        variableDeclarationNoIn185=variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn185.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 288:41: -> ^( VAR variableDeclarationNoIn )
        	        	{
        	        	    // .//Emerson.g:288:44: ^( VAR variableDeclarationNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, forInStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//Emerson.g:291:1: continueStatement : 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) ;
 */
static EmersonParser_continueStatement_return
continueStatement(pEmersonParser ctx)
{   
    EmersonParser_continueStatement_return retval;
    ANTLR3_UINT32 continueStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal186;
    pANTLR3_COMMON_TOKEN    Identifier187;
    pANTLR3_COMMON_TOKEN    LTERM188;
    pANTLR3_COMMON_TOKEN    char_literal189;

    pANTLR3_BASE_TREE string_literal186_tree;
    pANTLR3_BASE_TREE Identifier187_tree;
    pANTLR3_BASE_TREE LTERM188_tree;
    pANTLR3_BASE_TREE char_literal189_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    continueStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal186       = NULL;
    Identifier187       = NULL;
    LTERM188       = NULL;
    char_literal189       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal186_tree   = NULL;
    Identifier187_tree   = NULL;
    LTERM188_tree   = NULL;
    char_literal189_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:292:2: ( 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) )
        // .//Emerson.g:292:4: 'continue' ( Identifier )? ( LTERM | ';' )
        {
            string_literal186 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_continueStatement2105); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, string_literal186, NULL); }


            // .//Emerson.g:292:15: ( Identifier )?
            {
                int alt93=2;
                {
                    int LA93_0 = LA(1);
                    if ( (LA93_0 == Identifier) ) 
                    {
                        alt93=1;
                    }
                }
                switch (alt93) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier187 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2107); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier187, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:292:27: ( LTERM | ';' )
            {
                int alt94=2;

                {
                    int LA94_0 = LA(1);
                    if ( (LA94_0 == LTERM) ) 
                    {
                        alt94=1;
                    }
                    else if ( (LA94_0 == 133) ) 
                    {
                        alt94=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 94;
                        EXCEPTION->state        = 0;


                        goto rulecontinueStatementEx;
                    }
                }
                switch (alt94) 
                {
            	case 1:
            	    // .//Emerson.g:292:28: LTERM
            	    {
            	        LTERM188 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_continueStatement2111); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM188, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:292:36: ';'
            	    {
            	        char_literal189 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_continueStatement2115); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal189, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 292:42: -> ^( CONTINUE ( Identifier )? )
            	{
            	    // .//Emerson.g:292:45: ^( CONTINUE ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE, (pANTLR3_UINT8)"CONTINUE"), root_1));

            	        // .//Emerson.g:292:56: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, continueStatement_StartIndex); }
    return retval;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//Emerson.g:295:1: breakStatement : 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) ;
 */
static EmersonParser_breakStatement_return
breakStatement(pEmersonParser ctx)
{   
    EmersonParser_breakStatement_return retval;
    ANTLR3_UINT32 breakStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal190;
    pANTLR3_COMMON_TOKEN    Identifier191;
    pANTLR3_COMMON_TOKEN    LTERM192;
    pANTLR3_COMMON_TOKEN    char_literal193;

    pANTLR3_BASE_TREE string_literal190_tree;
    pANTLR3_BASE_TREE Identifier191_tree;
    pANTLR3_BASE_TREE LTERM192_tree;
    pANTLR3_BASE_TREE char_literal193_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    breakStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal190       = NULL;
    Identifier191       = NULL;
    LTERM192       = NULL;
    char_literal193       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal190_tree   = NULL;
    Identifier191_tree   = NULL;
    LTERM192_tree   = NULL;
    char_literal193_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:296:2: ( 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) )
        // .//Emerson.g:296:4: 'break' ( Identifier )? ( LTERM | ';' )
        {
            string_literal190 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_breakStatement2137); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, string_literal190, NULL); }


            // .//Emerson.g:296:12: ( Identifier )?
            {
                int alt95=2;
                {
                    int LA95_0 = LA(1);
                    if ( (LA95_0 == Identifier) ) 
                    {
                        alt95=1;
                    }
                }
                switch (alt95) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier191 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2139); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier191, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:296:24: ( LTERM | ';' )
            {
                int alt96=2;

                {
                    int LA96_0 = LA(1);
                    if ( (LA96_0 == LTERM) ) 
                    {
                        alt96=1;
                    }
                    else if ( (LA96_0 == 133) ) 
                    {
                        alt96=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 96;
                        EXCEPTION->state        = 0;


                        goto rulebreakStatementEx;
                    }
                }
                switch (alt96) 
                {
            	case 1:
            	    // .//Emerson.g:296:25: LTERM
            	    {
            	        LTERM192 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_breakStatement2143); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM192, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:296:33: ';'
            	    {
            	        char_literal193 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_breakStatement2147); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal193, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 296:38: -> ^( BREAK ( Identifier )? )
            	{
            	    // .//Emerson.g:296:41: ^( BREAK ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK, (pANTLR3_UINT8)"BREAK"), root_1));

            	        // .//Emerson.g:296:49: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, breakStatement_StartIndex); }
    return retval;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//Emerson.g:299:1: returnStatement : 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) ;
 */
static EmersonParser_returnStatement_return
returnStatement(pEmersonParser ctx)
{   
    EmersonParser_returnStatement_return retval;
    ANTLR3_UINT32 returnStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal194;
    pANTLR3_COMMON_TOKEN    LTERM196;
    pANTLR3_COMMON_TOKEN    char_literal197;
    EmersonParser_expression_return expression195;
    #undef	RETURN_TYPE_expression195
    #define	RETURN_TYPE_expression195 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal194_tree;
    pANTLR3_BASE_TREE LTERM196_tree;
    pANTLR3_BASE_TREE char_literal197_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    returnStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal194       = NULL;
    LTERM196       = NULL;
    char_literal197       = NULL;
    expression195.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal194_tree   = NULL;
    LTERM196_tree   = NULL;
    char_literal197_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:300:2: ( 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) )
        // .//Emerson.g:300:4: 'return' ( expression )? ( LTERM | ';' )
        {
            string_literal194 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_returnStatement2168); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, string_literal194, NULL); }


            // .//Emerson.g:300:13: ( expression )?
            {
                int alt97=2;
                {
                    int LA97_0 = LA(1);
                    if ( (((LA97_0 >= Identifier) && (LA97_0 <= NumericLiteral)) || ((LA97_0 >= 127) && (LA97_0 <= 128)) || LA97_0 == 131 || ((LA97_0 >= 157) && (LA97_0 <= 158)) || ((LA97_0 >= 190) && (LA97_0 <= 191)) || ((LA97_0 >= 195) && (LA97_0 <= 206))) ) 
                    {
                        alt97=1;
                    }
                }
                switch (alt97) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2170);
            	        expression195=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression195.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:300:25: ( LTERM | ';' )
            {
                int alt98=2;

                {
                    int LA98_0 = LA(1);
                    if ( (LA98_0 == LTERM) ) 
                    {
                        alt98=1;
                    }
                    else if ( (LA98_0 == 133) ) 
                    {
                        alt98=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 98;
                        EXCEPTION->state        = 0;


                        goto rulereturnStatementEx;
                    }
                }
                switch (alt98) 
                {
            	case 1:
            	    // .//Emerson.g:300:26: LTERM
            	    {
            	        LTERM196 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_returnStatement2174); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM196, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:300:34: ';'
            	    {
            	        char_literal197 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_returnStatement2178); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal197, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 300:39: -> ^( RETURN ( expression )? )
            	{
            	    // .//Emerson.g:300:42: ^( RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        // .//Emerson.g:300:51: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, returnStatement_StartIndex); }
    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//Emerson.g:303:1: withStatement : 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) ;
 */
static EmersonParser_withStatement_return
withStatement(pEmersonParser ctx)
{   
    EmersonParser_withStatement_return retval;
    ANTLR3_UINT32 withStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal198;
    pANTLR3_COMMON_TOKEN    LTERM199;
    pANTLR3_COMMON_TOKEN    char_literal200;
    pANTLR3_COMMON_TOKEN    LTERM201;
    pANTLR3_COMMON_TOKEN    LTERM203;
    pANTLR3_COMMON_TOKEN    char_literal204;
    pANTLR3_COMMON_TOKEN    LTERM205;
    EmersonParser_expression_return expression202;
    #undef	RETURN_TYPE_expression202
    #define	RETURN_TYPE_expression202 EmersonParser_expression_return

    EmersonParser_statement_return statement206;
    #undef	RETURN_TYPE_statement206
    #define	RETURN_TYPE_statement206 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal198_tree;
    pANTLR3_BASE_TREE LTERM199_tree;
    pANTLR3_BASE_TREE char_literal200_tree;
    pANTLR3_BASE_TREE LTERM201_tree;
    pANTLR3_BASE_TREE LTERM203_tree;
    pANTLR3_BASE_TREE char_literal204_tree;
    pANTLR3_BASE_TREE LTERM205_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    withStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal198       = NULL;
    LTERM199       = NULL;
    char_literal200       = NULL;
    LTERM201       = NULL;
    LTERM203       = NULL;
    char_literal204       = NULL;
    LTERM205       = NULL;
    expression202.tree = NULL;

    statement206.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal198_tree   = NULL;
    LTERM199_tree   = NULL;
    char_literal200_tree   = NULL;
    LTERM201_tree   = NULL;
    LTERM203_tree   = NULL;
    char_literal204_tree   = NULL;
    LTERM205_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:304:2: ( 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) )
        // .//Emerson.g:304:4: 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal198 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_withStatement2200); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, string_literal198, NULL); }


            // .//Emerson.g:304:11: ( LTERM )*

            for (;;)
            {
                int alt99=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA99_0 = LA(1);
                    if ( (LA99_0 == LTERM) ) 
                    {
                        alt99=1;
                    }

                }
                switch (alt99) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM199 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2202); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM199, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop99;	/* break out of the loop */
            	    break;
                }
            }
            loop99: ; /* Jump out to here if this rule does not match */

            char_literal200 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_withStatement2205); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal200, NULL); }


            // .//Emerson.g:304:22: ( LTERM )*

            for (;;)
            {
                int alt100=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA100_0 = LA(1);
                    if ( (LA100_0 == LTERM) ) 
                    {
                        alt100=1;
                    }

                }
                switch (alt100) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM201 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2207); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM201, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop100;	/* break out of the loop */
            	    break;
                }
            }
            loop100: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_withStatement2210);
            expression202=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression202.tree, NULL); }

            // .//Emerson.g:304:40: ( LTERM )*

            for (;;)
            {
                int alt101=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA101_0 = LA(1);
                    if ( (LA101_0 == LTERM) ) 
                    {
                        alt101=1;
                    }

                }
                switch (alt101) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM203 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2212); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM203, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop101;	/* break out of the loop */
            	    break;
                }
            }
            loop101: ; /* Jump out to here if this rule does not match */

            char_literal204 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_withStatement2215); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal204, NULL); }


            // .//Emerson.g:304:51: ( LTERM )*

            for (;;)
            {
                int alt102=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA102_0 = LA(1);
                    if ( (LA102_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA102_2 = LA(2);
                            if ( (synpred120_Emerson(ctx)) ) 
                            {
                                alt102=1;
                            }

                        }
                    }

                }
                switch (alt102) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM205 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2217); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM205, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop102;	/* break out of the loop */
            	    break;
                }
            }
            loop102: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_withStatement2220);
            statement206=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement206.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 304:68: -> ^( WITH expression statement )
            	{
            	    // .//Emerson.g:304:71: ^( WITH expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WITH, (pANTLR3_UINT8)"WITH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, withStatement_StartIndex); }
    return retval;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start labelledStatement
 * .//Emerson.g:307:1: labelledStatement : Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) ;
 */
static EmersonParser_labelledStatement_return
labelledStatement(pEmersonParser ctx)
{   
    EmersonParser_labelledStatement_return retval;
    ANTLR3_UINT32 labelledStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier207;
    pANTLR3_COMMON_TOKEN    LTERM208;
    pANTLR3_COMMON_TOKEN    char_literal209;
    pANTLR3_COMMON_TOKEN    LTERM210;
    EmersonParser_statement_return statement211;
    #undef	RETURN_TYPE_statement211
    #define	RETURN_TYPE_statement211 EmersonParser_statement_return

    pANTLR3_BASE_TREE Identifier207_tree;
    pANTLR3_BASE_TREE LTERM208_tree;
    pANTLR3_BASE_TREE char_literal209_tree;
    pANTLR3_BASE_TREE LTERM210_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    labelledStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier207       = NULL;
    LTERM208       = NULL;
    char_literal209       = NULL;
    LTERM210       = NULL;
    statement211.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier207_tree   = NULL;
    LTERM208_tree   = NULL;
    char_literal209_tree   = NULL;
    LTERM210_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:308:2: ( Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) )
        // .//Emerson.g:308:4: Identifier ( LTERM )* ':' ( LTERM )* statement
        {
            Identifier207 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_labelledStatement2241); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier207, NULL); }


            // .//Emerson.g:308:15: ( LTERM )*

            for (;;)
            {
                int alt103=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA103_0 = LA(1);
                    if ( (LA103_0 == LTERM) ) 
                    {
                        alt103=1;
                    }

                }
                switch (alt103) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM208 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2243); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM208, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop103;	/* break out of the loop */
            	    break;
                }
            }
            loop103: ; /* Jump out to here if this rule does not match */

            char_literal209 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_labelledStatement2246); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal209, NULL); }


            // .//Emerson.g:308:26: ( LTERM )*

            for (;;)
            {
                int alt104=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA104_0 = LA(1);
                    if ( (LA104_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA104_2 = LA(2);
                            if ( (synpred122_Emerson(ctx)) ) 
                            {
                                alt104=1;
                            }

                        }
                    }

                }
                switch (alt104) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM210 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2248); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM210, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop104;	/* break out of the loop */
            	    break;
                }
            }
            loop104: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_labelledStatement2251);
            statement211=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement211.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 308:43: -> ^( LABEL Identifier statement )
            	{
            	    // .//Emerson.g:308:46: ^( LABEL Identifier statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LABEL, (pANTLR3_UINT8)"LABEL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelabelledStatementEx; /* Prevent compiler warnings */
    rulelabelledStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, labelledStatement_StartIndex); }
    return retval;
}
/* $ANTLR end labelledStatement */

/** 
 * $ANTLR start switchStatement
 * .//Emerson.g:311:1: switchStatement : 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) ;
 */
static EmersonParser_switchStatement_return
switchStatement(pEmersonParser ctx)
{   
    EmersonParser_switchStatement_return retval;
    ANTLR3_UINT32 switchStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal212;
    pANTLR3_COMMON_TOKEN    LTERM213;
    pANTLR3_COMMON_TOKEN    char_literal214;
    pANTLR3_COMMON_TOKEN    LTERM215;
    pANTLR3_COMMON_TOKEN    LTERM217;
    pANTLR3_COMMON_TOKEN    char_literal218;
    pANTLR3_COMMON_TOKEN    LTERM219;
    EmersonParser_expression_return expression216;
    #undef	RETURN_TYPE_expression216
    #define	RETURN_TYPE_expression216 EmersonParser_expression_return

    EmersonParser_caseBlock_return caseBlock220;
    #undef	RETURN_TYPE_caseBlock220
    #define	RETURN_TYPE_caseBlock220 EmersonParser_caseBlock_return

    pANTLR3_BASE_TREE string_literal212_tree;
    pANTLR3_BASE_TREE LTERM213_tree;
    pANTLR3_BASE_TREE char_literal214_tree;
    pANTLR3_BASE_TREE LTERM215_tree;
    pANTLR3_BASE_TREE LTERM217_tree;
    pANTLR3_BASE_TREE char_literal218_tree;
    pANTLR3_BASE_TREE LTERM219_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseBlock;
    /* Initialize rule variables
     */
    switchStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal212       = NULL;
    LTERM213       = NULL;
    char_literal214       = NULL;
    LTERM215       = NULL;
    LTERM217       = NULL;
    char_literal218       = NULL;
    LTERM219       = NULL;
    expression216.tree = NULL;

    caseBlock220.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal212_tree   = NULL;
    LTERM213_tree   = NULL;
    char_literal214_tree   = NULL;
    LTERM215_tree   = NULL;
    LTERM217_tree   = NULL;
    char_literal218_tree   = NULL;
    LTERM219_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_caseBlock   = NULL;
    #define CREATE_stream_caseBlock  if (stream_caseBlock == NULL) {stream_caseBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:312:2: ( 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) )
        // .//Emerson.g:312:4: 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock
        {
            string_literal212 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_switchStatement2274); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal212, NULL); }


            // .//Emerson.g:312:13: ( LTERM )*

            for (;;)
            {
                int alt105=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA105_0 = LA(1);
                    if ( (LA105_0 == LTERM) ) 
                    {
                        alt105=1;
                    }

                }
                switch (alt105) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM213 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2276); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM213, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop105;	/* break out of the loop */
            	    break;
                }
            }
            loop105: ; /* Jump out to here if this rule does not match */

            char_literal214 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_switchStatement2279); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal214, NULL); }


            // .//Emerson.g:312:24: ( LTERM )*

            for (;;)
            {
                int alt106=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA106_0 = LA(1);
                    if ( (LA106_0 == LTERM) ) 
                    {
                        alt106=1;
                    }

                }
                switch (alt106) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM215 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2281); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM215, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2284);
            expression216=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression216.tree, NULL); }

            // .//Emerson.g:312:42: ( LTERM )*

            for (;;)
            {
                int alt107=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA107_0 = LA(1);
                    if ( (LA107_0 == LTERM) ) 
                    {
                        alt107=1;
                    }

                }
                switch (alt107) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM217 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2286); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM217, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop107;	/* break out of the loop */
            	    break;
                }
            }
            loop107: ; /* Jump out to here if this rule does not match */

            char_literal218 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_switchStatement2289); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal218, NULL); }


            // .//Emerson.g:312:53: ( LTERM )*

            for (;;)
            {
                int alt108=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA108_0 = LA(1);
                    if ( (LA108_0 == LTERM) ) 
                    {
                        alt108=1;
                    }

                }
                switch (alt108) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM219 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2291); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM219, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop108;	/* break out of the loop */
            	    break;
                }
            }
            loop108: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2294);
            caseBlock220=caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_caseBlock; stream_caseBlock->add(stream_caseBlock, caseBlock220.tree, NULL); }

             
            /* AST REWRITE
             * elements          : caseBlock, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 312:70: -> ^( SWITCH expression caseBlock )
            	{
            	    // .//Emerson.g:312:73: ^( SWITCH expression caseBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH, (pANTLR3_UINT8)"SWITCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_caseBlock == NULL ? NULL : stream_caseBlock->nextTree(stream_caseBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_caseBlock != NULL) stream_caseBlock->free(stream_caseBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, switchStatement_StartIndex); }
    return retval;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//Emerson.g:315:1: caseBlock : '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? ;
 */
static EmersonParser_caseBlock_return
caseBlock(pEmersonParser ctx)
{   
    EmersonParser_caseBlock_return retval;
    ANTLR3_UINT32 caseBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal221;
    pANTLR3_COMMON_TOKEN    LTERM222;
    pANTLR3_COMMON_TOKEN    LTERM223;
    pANTLR3_COMMON_TOKEN    LTERM225;
    pANTLR3_COMMON_TOKEN    LTERM226;
    pANTLR3_COMMON_TOKEN    char_literal227;
    EmersonParser_caseClause_return case1;
    #undef	RETURN_TYPE_case1
    #define	RETURN_TYPE_case1 EmersonParser_caseClause_return

    EmersonParser_caseClause_return case2;
    #undef	RETURN_TYPE_case2
    #define	RETURN_TYPE_case2 EmersonParser_caseClause_return

    EmersonParser_defaultClause_return defaultClause224;
    #undef	RETURN_TYPE_defaultClause224
    #define	RETURN_TYPE_defaultClause224 EmersonParser_defaultClause_return

    pANTLR3_BASE_TREE char_literal221_tree;
    pANTLR3_BASE_TREE LTERM222_tree;
    pANTLR3_BASE_TREE LTERM223_tree;
    pANTLR3_BASE_TREE LTERM225_tree;
    pANTLR3_BASE_TREE LTERM226_tree;
    pANTLR3_BASE_TREE char_literal227_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal221       = NULL;
    LTERM222       = NULL;
    LTERM223       = NULL;
    LTERM225       = NULL;
    LTERM226       = NULL;
    char_literal227       = NULL;
    case1.tree = NULL;

    case2.tree = NULL;

    defaultClause224.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal221_tree   = NULL;
    LTERM222_tree   = NULL;
    LTERM223_tree   = NULL;
    LTERM225_tree   = NULL;
    LTERM226_tree   = NULL;
    char_literal227_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:316:2: ( '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? )
        // .//Emerson.g:316:4: '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}'
        {
            char_literal221 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_caseBlock2316); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal221, NULL); }


            // .//Emerson.g:316:8: ( ( LTERM )* case1= caseClause )*

            for (;;)
            {
                int alt110=2;
                alt110 = cdfa110.predict(ctx, RECOGNIZER, ISTREAM, &cdfa110);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt110) 
                {
            	case 1:
            	    // .//Emerson.g:316:9: ( LTERM )* case1= caseClause
            	    {

            	        // .//Emerson.g:316:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt109=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA109_0 = LA(1);
            	                if ( (LA109_0 == LTERM) ) 
            	                {
            	                    alt109=1;
            	                }

            	            }
            	            switch (alt109) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM222 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2319); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM222, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop109;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop109: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2324);
            	        case1=caseClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case1.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop110;	/* break out of the loop */
            	    break;
                }
            }
            loop110: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:316:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
            {
                int alt114=2;
                alt114 = cdfa114.predict(ctx, RECOGNIZER, ISTREAM, &cdfa114);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt114) 
                {
            	case 1:
            	    // .//Emerson.g:316:36: ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )*
            	    {

            	        // .//Emerson.g:316:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt111=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA111_0 = LA(1);
            	                if ( (LA111_0 == LTERM) ) 
            	                {
            	                    alt111=1;
            	                }

            	            }
            	            switch (alt111) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM223 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2329); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM223, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop111;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop111: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2332);
            	        defaultClause224=defaultClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, defaultClause224.tree, NULL); }

            	        // .//Emerson.g:316:57: ( ( LTERM )* case2= caseClause )*

            	        for (;;)
            	        {
            	            int alt113=2;
            	            alt113 = cdfa113.predict(ctx, RECOGNIZER, ISTREAM, &cdfa113);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulecaseBlockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt113) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:316:58: ( LTERM )* case2= caseClause
            	        	    {

            	        	        // .//Emerson.g:316:58: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt112=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA112_0 = LA(1);
            	        	                if ( (LA112_0 == LTERM) ) 
            	        	                {
            	        	                    alt112=1;
            	        	                }

            	        	            }
            	        	            switch (alt112) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM225 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2335); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulecaseBlockEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM225, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop112;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop112: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2340);
            	        	        case2=caseClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case2.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop113;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop113: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:316:86: ( LTERM )*

            for (;;)
            {
                int alt115=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA115_0 = LA(1);
                    if ( (LA115_0 == LTERM) ) 
                    {
                        alt115=1;
                    }

                }
                switch (alt115) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM226 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2346); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM226, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop115;	/* break out of the loop */
            	    break;
                }
            }
            loop115: ; /* Jump out to here if this rule does not match */

            char_literal227 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_caseBlock2349); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal227, NULL); }


             
            /* AST REWRITE
             * elements          : case1, defaultClause, case2
             * token labels      : 
             * rule labels       : case2, retval, case1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case1;

            	stream_case2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case2", case2.tree != NULL ? case2.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_case1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case1", case1.tree != NULL ? case1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 316:97: -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )?
            	{
            	    // .//Emerson.g:316:101: ( ^( $case1) )*
            	    {
            	    	while ( (stream_case1 != NULL && stream_case1->hasNext(stream_case1))  )
            	    	{
            	    		// .//Emerson.g:316:101: ^( $case1)
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case1 == NULL ? NULL : stream_case1->nextNode(stream_case1), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_case1 != NULL) stream_case1->reset(stream_case1);

            	    }
            	    // .//Emerson.g:316:112: ( ( ^( defaultClause ) )* )?
            	    {
            	    	if ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    	{
            	    		// .//Emerson.g:316:113: ( ^( defaultClause ) )*
            	    		{
            	    			while ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    			{
            	    				// .//Emerson.g:316:113: ^( defaultClause )
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_defaultClause == NULL ? NULL : stream_defaultClause->nextNode(stream_defaultClause), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    		}

            	    	}
            	    	if ( stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    }
            	    // .//Emerson.g:316:133: ( ( ^( $case2) )* )?
            	    {
            	    	if ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    	{
            	    		// .//Emerson.g:316:134: ( ^( $case2) )*
            	    		{
            	    			while ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    			{
            	    				// .//Emerson.g:316:134: ^( $case2)
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case2 == NULL ? NULL : stream_case2->nextNode(stream_case2), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    		}

            	    	}
            	    	if ( stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_case2 != NULL) stream_case2->free(stream_case2);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_case1 != NULL) stream_case1->free(stream_case1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, caseBlock_StartIndex); }
    return retval;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//Emerson.g:319:1: caseClause : 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) ;
 */
static EmersonParser_caseClause_return
caseClause(pEmersonParser ctx)
{   
    EmersonParser_caseClause_return retval;
    ANTLR3_UINT32 caseClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal228;
    pANTLR3_COMMON_TOKEN    LTERM229;
    pANTLR3_COMMON_TOKEN    LTERM231;
    pANTLR3_COMMON_TOKEN    char_literal232;
    pANTLR3_COMMON_TOKEN    LTERM233;
    EmersonParser_expression_return expression230;
    #undef	RETURN_TYPE_expression230
    #define	RETURN_TYPE_expression230 EmersonParser_expression_return

    EmersonParser_statementList_return statementList234;
    #undef	RETURN_TYPE_statementList234
    #define	RETURN_TYPE_statementList234 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal228_tree;
    pANTLR3_BASE_TREE LTERM229_tree;
    pANTLR3_BASE_TREE LTERM231_tree;
    pANTLR3_BASE_TREE char_literal232_tree;
    pANTLR3_BASE_TREE LTERM233_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    caseClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal228       = NULL;
    LTERM229       = NULL;
    LTERM231       = NULL;
    char_literal232       = NULL;
    LTERM233       = NULL;
    expression230.tree = NULL;

    statementList234.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal228_tree   = NULL;
    LTERM229_tree   = NULL;
    LTERM231_tree   = NULL;
    char_literal232_tree   = NULL;
    LTERM233_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:320:2: ( 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) )
        // .//Emerson.g:320:4: 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal228 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_caseClause2386); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal228, NULL); }


            // .//Emerson.g:320:11: ( LTERM )*

            for (;;)
            {
                int alt116=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA116_0 = LA(1);
                    if ( (LA116_0 == LTERM) ) 
                    {
                        alt116=1;
                    }

                }
                switch (alt116) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM229 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2388); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM229, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop116;	/* break out of the loop */
            	    break;
                }
            }
            loop116: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_caseClause2391);
            expression230=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression230.tree, NULL); }

            // .//Emerson.g:320:29: ( LTERM )*

            for (;;)
            {
                int alt117=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA117_0 = LA(1);
                    if ( (LA117_0 == LTERM) ) 
                    {
                        alt117=1;
                    }

                }
                switch (alt117) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM231 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2393); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM231, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop117;	/* break out of the loop */
            	    break;
                }
            }
            loop117: ; /* Jump out to here if this rule does not match */

            char_literal232 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_caseClause2396); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal232, NULL); }


            // .//Emerson.g:320:40: ( LTERM )*

            for (;;)
            {
                int alt118=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA118_0 = LA(1);
                    if ( (LA118_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA118_1 = LA(2);
                            if ( (synpred136_Emerson(ctx)) ) 
                            {
                                alt118=1;
                            }

                        }
                    }

                }
                switch (alt118) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM233 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2398); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM233, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop118;	/* break out of the loop */
            	    break;
                }
            }
            loop118: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:320:47: ( statementList )?
            {
                int alt119=2;
                alt119 = cdfa119.predict(ctx, RECOGNIZER, ISTREAM, &cdfa119);
                if  (HASEXCEPTION())
                {
                    goto rulecaseClauseEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt119) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2401);
            	        statementList234=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList234.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 320:62: -> ^( CASE expression ( statementList )? )
            	{
            	    // .//Emerson.g:320:65: ^( CASE expression ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        // .//Emerson.g:320:84: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, caseClause_StartIndex); }
    return retval;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//Emerson.g:323:1: defaultClause : 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) ;
 */
static EmersonParser_defaultClause_return
defaultClause(pEmersonParser ctx)
{   
    EmersonParser_defaultClause_return retval;
    ANTLR3_UINT32 defaultClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal235;
    pANTLR3_COMMON_TOKEN    LTERM236;
    pANTLR3_COMMON_TOKEN    char_literal237;
    pANTLR3_COMMON_TOKEN    LTERM238;
    EmersonParser_statementList_return statementList239;
    #undef	RETURN_TYPE_statementList239
    #define	RETURN_TYPE_statementList239 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal235_tree;
    pANTLR3_BASE_TREE LTERM236_tree;
    pANTLR3_BASE_TREE char_literal237_tree;
    pANTLR3_BASE_TREE LTERM238_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    defaultClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal235       = NULL;
    LTERM236       = NULL;
    char_literal237       = NULL;
    LTERM238       = NULL;
    statementList239.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal235_tree   = NULL;
    LTERM236_tree   = NULL;
    char_literal237_tree   = NULL;
    LTERM238_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:324:2: ( 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) )
        // .//Emerson.g:324:4: 'default' ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal235 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_defaultClause2426); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal235, NULL); }


            // .//Emerson.g:324:14: ( LTERM )*

            for (;;)
            {
                int alt120=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA120_0 = LA(1);
                    if ( (LA120_0 == LTERM) ) 
                    {
                        alt120=1;
                    }

                }
                switch (alt120) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM236 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2428); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM236, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop120;	/* break out of the loop */
            	    break;
                }
            }
            loop120: ; /* Jump out to here if this rule does not match */

            char_literal237 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_defaultClause2431); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal237, NULL); }


            // .//Emerson.g:324:25: ( LTERM )*

            for (;;)
            {
                int alt121=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA121_0 = LA(1);
                    if ( (LA121_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA121_1 = LA(2);
                            if ( (synpred139_Emerson(ctx)) ) 
                            {
                                alt121=1;
                            }

                        }
                    }

                }
                switch (alt121) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM238 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2433); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM238, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop121;	/* break out of the loop */
            	    break;
                }
            }
            loop121: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:324:32: ( statementList )?
            {
                int alt122=2;
                alt122 = cdfa122.predict(ctx, RECOGNIZER, ISTREAM, &cdfa122);
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt122) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause2436);
            	        statementList239=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList239.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 324:47: -> ^( DEFAULT ( statementList )? )
            	{
            	    // .//Emerson.g:324:50: ^( DEFAULT ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"), root_1));

            	        // .//Emerson.g:324:60: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, defaultClause_StartIndex); }
    return retval;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start throwStatement
 * .//Emerson.g:327:1: throwStatement : 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) ;
 */
static EmersonParser_throwStatement_return
throwStatement(pEmersonParser ctx)
{   
    EmersonParser_throwStatement_return retval;
    ANTLR3_UINT32 throwStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal240;
    pANTLR3_COMMON_TOKEN    LTERM242;
    pANTLR3_COMMON_TOKEN    char_literal243;
    EmersonParser_expression_return expression241;
    #undef	RETURN_TYPE_expression241
    #define	RETURN_TYPE_expression241 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal240_tree;
    pANTLR3_BASE_TREE LTERM242_tree;
    pANTLR3_BASE_TREE char_literal243_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    throwStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal240       = NULL;
    LTERM242       = NULL;
    char_literal243       = NULL;
    expression241.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal240_tree   = NULL;
    LTERM242_tree   = NULL;
    char_literal243_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:328:2: ( 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) )
        // .//Emerson.g:328:4: 'throw' expression ( LTERM | ';' )
        {
            string_literal240 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_throwStatement2458); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal240, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_throwStatement2460);
            expression241=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression241.tree, NULL); }

            // .//Emerson.g:328:23: ( LTERM | ';' )
            {
                int alt123=2;

                {
                    int LA123_0 = LA(1);
                    if ( (LA123_0 == LTERM) ) 
                    {
                        alt123=1;
                    }
                    else if ( (LA123_0 == 133) ) 
                    {
                        alt123=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 123;
                        EXCEPTION->state        = 0;


                        goto rulethrowStatementEx;
                    }
                }
                switch (alt123) 
                {
            	case 1:
            	    // .//Emerson.g:328:24: LTERM
            	    {
            	        LTERM242 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_throwStatement2463); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM242, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:328:32: ';'
            	    {
            	        char_literal243 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_throwStatement2467); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal243, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 328:37: -> ^( THROW expression )
            	{
            	    // .//Emerson.g:328:40: ^( THROW expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THROW, (pANTLR3_UINT8)"THROW"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, throwStatement_StartIndex); }
    return retval;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//Emerson.g:331:1: tryStatement : ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) ;
 */
static EmersonParser_tryStatement_return
tryStatement(pEmersonParser ctx)
{   
    EmersonParser_tryStatement_return retval;
    ANTLR3_UINT32 tryStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal244;
    pANTLR3_COMMON_TOKEN    LTERM245;
    pANTLR3_COMMON_TOKEN    LTERM247;
    pANTLR3_COMMON_TOKEN    LTERM250;
    EmersonParser_statementBlock_return statementBlock246;
    #undef	RETURN_TYPE_statementBlock246
    #define	RETURN_TYPE_statementBlock246 EmersonParser_statementBlock_return

    EmersonParser_finallyClause_return finallyClause248;
    #undef	RETURN_TYPE_finallyClause248
    #define	RETURN_TYPE_finallyClause248 EmersonParser_finallyClause_return

    EmersonParser_catchClause_return catchClause249;
    #undef	RETURN_TYPE_catchClause249
    #define	RETURN_TYPE_catchClause249 EmersonParser_catchClause_return

    EmersonParser_finallyClause_return finallyClause251;
    #undef	RETURN_TYPE_finallyClause251
    #define	RETURN_TYPE_finallyClause251 EmersonParser_finallyClause_return

    pANTLR3_BASE_TREE string_literal244_tree;
    pANTLR3_BASE_TREE LTERM245_tree;
    pANTLR3_BASE_TREE LTERM247_tree;
    pANTLR3_BASE_TREE LTERM250_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_finallyClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    tryStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal244       = NULL;
    LTERM245       = NULL;
    LTERM247       = NULL;
    LTERM250       = NULL;
    statementBlock246.tree = NULL;

    finallyClause248.tree = NULL;

    catchClause249.tree = NULL;

    finallyClause251.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal244_tree   = NULL;
    LTERM245_tree   = NULL;
    LTERM247_tree   = NULL;
    LTERM250_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_finallyClause   = NULL;
    #define CREATE_stream_finallyClause  if (stream_finallyClause == NULL) {stream_finallyClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule finallyClause"); }
    stream_catchClause   = NULL;
    #define CREATE_stream_catchClause  if (stream_catchClause == NULL) {stream_catchClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchClause"); }
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:332:2: ( ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) )
        // .//Emerson.g:332:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
        {
            // .//Emerson.g:332:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) )
            // .//Emerson.g:332:5: 'try' ( LTERM )* statementBlock ( LTERM )*
            {
                string_literal244 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_tryStatement2488); 
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, string_literal244, NULL); }


                // .//Emerson.g:332:11: ( LTERM )*

                for (;;)
                {
                    int alt124=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA124_0 = LA(1);
                        if ( (LA124_0 == LTERM) ) 
                        {
                            alt124=1;
                        }

                    }
                    switch (alt124) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM245 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2490); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM245, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop124;	/* break out of the loop */
                	    break;
                    }
                }
                loop124: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement2493);
                statementBlock246=statementBlock(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock246.tree, NULL); }

                // .//Emerson.g:332:33: ( LTERM )*

                for (;;)
                {
                    int alt125=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA125_0 = LA(1);
                        if ( (LA125_0 == LTERM) ) 
                        {
                            alt125=1;
                        }

                    }
                    switch (alt125) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM247 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2495); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM247, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop125;	/* break out of the loop */
                	    break;
                    }
                }
                loop125: ; /* Jump out to here if this rule does not match */


                 
                /* AST REWRITE
                 * elements          : statementBlock
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 332:40: -> ^( TRY statementBlock )
                	{
                	    // .//Emerson.g:332:43: ^( TRY statementBlock )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRY, (pANTLR3_UINT8)"TRY"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:332:65: ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
            {
                int alt128=2;

                {
                    int LA128_0 = LA(1);
                    if ( (LA128_0 == 154) ) 
                    {
                        alt128=1;
                    }
                    else if ( (LA128_0 == 153) ) 
                    {
                        alt128=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 128;
                        EXCEPTION->state        = 0;


                        goto ruletryStatementEx;
                    }
                }
                switch (alt128) 
                {
            	case 1:
            	    // .//Emerson.g:332:66: finallyClause
            	    {
            	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2507);
            	        finallyClause248=finallyClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause248.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : tryStatement, finallyClause
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 332:80: -> ^( $tryStatement finallyClause )
            	        	{
            	        	    // .//Emerson.g:332:83: ^( $tryStatement finallyClause )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:332:115: catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	    {
            	        FOLLOWPUSH(FOLLOW_catchClause_in_tryStatement2519);
            	        catchClause249=catchClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_catchClause; stream_catchClause->add(stream_catchClause, catchClause249.tree, NULL); }

            	        // .//Emerson.g:332:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	        {
            	            int alt127=2;
            	            alt127 = cdfa127.predict(ctx, RECOGNIZER, ISTREAM, &cdfa127);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruletryStatementEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt127) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:332:128: ( LTERM )* finallyClause
            	        	    {

            	        	        // .//Emerson.g:332:128: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt126=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA126_0 = LA(1);
            	        	                if ( (LA126_0 == LTERM) ) 
            	        	                {
            	        	                    alt126=1;
            	        	                }

            	        	            }
            	        	            switch (alt126) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM250 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2522); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruletryStatementEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM250, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop126;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop126: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2525);
            	        	        finallyClause251=finallyClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletryStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause251.tree, NULL); }

            	        	         
            	        	        /* AST REWRITE
            	        	         * elements          : finallyClause, catchClause, tryStatement
            	        	         * token labels      : 
            	        	         * rule labels       : retval
            	        	         * token list labels : 
            	        	         * rule list labels  : 
            	        	         */
            	        	        if ( BACKTRACKING==0 ) 
            	        	        {
            	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	retval.tree    = root_0;
            	        	        	// 332:149: -> ^( $tryStatement catchClause finallyClause )
            	        	        	{
            	        	        	    // .//Emerson.g:332:152: ^( $tryStatement catchClause finallyClause )
            	        	        	    {
            	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_catchClause == NULL ? NULL : stream_catchClause->nextTree(stream_catchClause));
            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.tree = root_0; // set result root
            	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        	        }
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_finallyClause != NULL) stream_finallyClause->free(stream_finallyClause);
        if (stream_catchClause != NULL) stream_catchClause->free(stream_catchClause);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, tryStatement_StartIndex); }
    return retval;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchClause
 * .//Emerson.g:335:1: catchClause : 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) ;
 */
static EmersonParser_catchClause_return
catchClause(pEmersonParser ctx)
{   
    EmersonParser_catchClause_return retval;
    ANTLR3_UINT32 catchClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal252;
    pANTLR3_COMMON_TOKEN    LTERM253;
    pANTLR3_COMMON_TOKEN    char_literal254;
    pANTLR3_COMMON_TOKEN    LTERM255;
    pANTLR3_COMMON_TOKEN    Identifier256;
    pANTLR3_COMMON_TOKEN    LTERM257;
    pANTLR3_COMMON_TOKEN    char_literal258;
    pANTLR3_COMMON_TOKEN    LTERM259;
    EmersonParser_statementBlock_return statementBlock260;
    #undef	RETURN_TYPE_statementBlock260
    #define	RETURN_TYPE_statementBlock260 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal252_tree;
    pANTLR3_BASE_TREE LTERM253_tree;
    pANTLR3_BASE_TREE char_literal254_tree;
    pANTLR3_BASE_TREE LTERM255_tree;
    pANTLR3_BASE_TREE Identifier256_tree;
    pANTLR3_BASE_TREE LTERM257_tree;
    pANTLR3_BASE_TREE char_literal258_tree;
    pANTLR3_BASE_TREE LTERM259_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    catchClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal252       = NULL;
    LTERM253       = NULL;
    char_literal254       = NULL;
    LTERM255       = NULL;
    Identifier256       = NULL;
    LTERM257       = NULL;
    char_literal258       = NULL;
    LTERM259       = NULL;
    statementBlock260.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal252_tree   = NULL;
    LTERM253_tree   = NULL;
    char_literal254_tree   = NULL;
    LTERM255_tree   = NULL;
    Identifier256_tree   = NULL;
    LTERM257_tree   = NULL;
    char_literal258_tree   = NULL;
    LTERM259_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:336:2: ( 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) )
        // .//Emerson.g:336:4: 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock
        {
            string_literal252 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_catchClause2558); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal252, NULL); }


            // .//Emerson.g:336:12: ( LTERM )*

            for (;;)
            {
                int alt129=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA129_0 = LA(1);
                    if ( (LA129_0 == LTERM) ) 
                    {
                        alt129=1;
                    }

                }
                switch (alt129) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM253 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2560); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM253, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop129;	/* break out of the loop */
            	    break;
                }
            }
            loop129: ; /* Jump out to here if this rule does not match */

            char_literal254 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_catchClause2563); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal254, NULL); }


            // .//Emerson.g:336:23: ( LTERM )*

            for (;;)
            {
                int alt130=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA130_0 = LA(1);
                    if ( (LA130_0 == LTERM) ) 
                    {
                        alt130=1;
                    }

                }
                switch (alt130) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM255 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2565); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM255, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop130;	/* break out of the loop */
            	    break;
                }
            }
            loop130: ; /* Jump out to here if this rule does not match */

            Identifier256 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause2568); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier256, NULL); }


            // .//Emerson.g:336:41: ( LTERM )*

            for (;;)
            {
                int alt131=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA131_0 = LA(1);
                    if ( (LA131_0 == LTERM) ) 
                    {
                        alt131=1;
                    }

                }
                switch (alt131) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM257 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2570); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM257, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop131;	/* break out of the loop */
            	    break;
                }
            }
            loop131: ; /* Jump out to here if this rule does not match */

            char_literal258 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_catchClause2573); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal258, NULL); }


            // .//Emerson.g:336:52: ( LTERM )*

            for (;;)
            {
                int alt132=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA132_0 = LA(1);
                    if ( (LA132_0 == LTERM) ) 
                    {
                        alt132=1;
                    }

                }
                switch (alt132) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM259 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2575); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM259, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop132;	/* break out of the loop */
            	    break;
                }
            }
            loop132: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause2578);
            statementBlock260=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock260.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 336:74: -> ^( CATCH Identifier statementBlock )
            	{
            	    // .//Emerson.g:336:77: ^( CATCH Identifier statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CATCH, (pANTLR3_UINT8)"CATCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, catchClause_StartIndex); }
    return retval;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//Emerson.g:339:1: finallyClause : 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) ;
 */
static EmersonParser_finallyClause_return
finallyClause(pEmersonParser ctx)
{   
    EmersonParser_finallyClause_return retval;
    ANTLR3_UINT32 finallyClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal261;
    pANTLR3_COMMON_TOKEN    LTERM262;
    EmersonParser_statementBlock_return statementBlock263;
    #undef	RETURN_TYPE_statementBlock263
    #define	RETURN_TYPE_statementBlock263 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal261_tree;
    pANTLR3_BASE_TREE LTERM262_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    finallyClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal261       = NULL;
    LTERM262       = NULL;
    statementBlock263.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal261_tree   = NULL;
    LTERM262_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:340:2: ( 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) )
        // .//Emerson.g:340:4: 'finally' ( LTERM )* statementBlock
        {
            string_literal261 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_finallyClause2600); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal261, NULL); }


            // .//Emerson.g:340:14: ( LTERM )*

            for (;;)
            {
                int alt133=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA133_0 = LA(1);
                    if ( (LA133_0 == LTERM) ) 
                    {
                        alt133=1;
                    }

                }
                switch (alt133) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM262 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_finallyClause2602); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefinallyClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM262, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop133;	/* break out of the loop */
            	    break;
                }
            }
            loop133: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause2605);
            statementBlock263=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock263.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 340:36: -> ^( FINALLY statementBlock )
            	{
            	    // .//Emerson.g:340:39: ^( FINALLY statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FINALLY, (pANTLR3_UINT8)"FINALLY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_154 != NULL) stream_154->free(stream_154);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, finallyClause_StartIndex); }
    return retval;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start msgSendStatement
 * .//Emerson.g:344:1: msgSendStatement : (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? ;
 */
static EmersonParser_msgSendStatement_return
msgSendStatement(pEmersonParser ctx)
{   
    EmersonParser_msgSendStatement_return retval;
    ANTLR3_UINT32 msgSendStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM264;
    pANTLR3_COMMON_TOKEN    string_literal265;
    pANTLR3_COMMON_TOKEN    LTERM266;
    pANTLR3_COMMON_TOKEN    char_literal267;
    pANTLR3_COMMON_TOKEN    string_literal268;
    EmersonParser_leftHandSideExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memberExpression_return memberExpression269;
    #undef	RETURN_TYPE_memberExpression269
    #define	RETURN_TYPE_memberExpression269 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM264_tree;
    pANTLR3_BASE_TREE string_literal265_tree;
    pANTLR3_BASE_TREE LTERM266_tree;
    pANTLR3_BASE_TREE char_literal267_tree;
    pANTLR3_BASE_TREE string_literal268_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgSendStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM264       = NULL;
    string_literal265       = NULL;
    LTERM266       = NULL;
    char_literal267       = NULL;
    string_literal268       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    memberExpression269.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM264_tree   = NULL;
    string_literal265_tree   = NULL;
    LTERM266_tree   = NULL;
    char_literal267_tree   = NULL;
    string_literal268_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:345:2: ( (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? )
        // .//Emerson.g:345:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
        {
            // .//Emerson.g:345:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) )
            // .//Emerson.g:345:5: e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' )
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2630);
                e1=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e1.tree, NULL); }

                // .//Emerson.g:345:32: ( LTERM )*

                for (;;)
                {
                    int alt134=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA134_0 = LA(1);
                        if ( (LA134_0 == LTERM) ) 
                        {
                            alt134=1;
                        }

                    }
                    switch (alt134) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM264 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2633); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM264, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop134;	/* break out of the loop */
                	    break;
                    }
                }
                loop134: ; /* Jump out to here if this rule does not match */

                string_literal265 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgSendStatement2636); 
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal265, NULL); }

                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2641);
                e2=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

                // .//Emerson.g:345:71: ( LTERM | ';' )
                {
                    int alt135=2;

                    {
                        int LA135_0 = LA(1);
                        if ( (LA135_0 == LTERM) ) 
                        {
                            alt135=1;
                        }
                        else if ( (LA135_0 == 133) ) 
                        {
                            alt135=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 135;
                            EXCEPTION->state        = 0;


                            goto rulemsgSendStatementEx;
                        }
                    }
                    switch (alt135) 
                    {
                	case 1:
                	    // .//Emerson.g:345:72: LTERM
                	    {
                	        LTERM266 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2644); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM266, NULL); }


                	    }
                	    break;
                	case 2:
                	    // .//Emerson.g:345:80: ';'
                	    {
                	        char_literal267 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_msgSendStatement2648); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal267, NULL); }


                	    }
                	    break;

                    }
                }

                 
                /* AST REWRITE
                 * elements          : e1, e2
                 * token labels      : 
                 * rule labels       : retval, e1, e2
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
                	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 345:85: -> ^( MESSAGE_SEND $e1 $e2)
                	{
                	    // .//Emerson.g:345:88: ^( MESSAGE_SEND $e1 $e2)
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_SEND, (pANTLR3_UINT8)"MESSAGE_SEND"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_e1 != NULL) stream_e1->free(stream_e1);
                	if (stream_e2 != NULL) stream_e2->free(stream_e2);


                }
            }


            // .//Emerson.g:345:114: ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
            {
                int alt136=2;
                {
                    int LA136_0 = LA(1);
                    if ( (LA136_0 == 155) ) 
                    {
                        alt136=1;
                    }
                }
                switch (alt136) 
                {
            	case 1:
            	    // .//Emerson.g:345:116: '->' memberExpression
            	    {
            	        string_literal268 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgSendStatement2667); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal268, NULL); }

            	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement2669);
            	        memberExpression269=memberExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression269.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : msgSendStatement, memberExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 345:138: -> ^( $msgSendStatement memberExpression )
            	        	{
            	        	    // .//Emerson.g:345:141: ^( $msgSendStatement memberExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSendStatementEx; /* Prevent compiler warnings */
    rulemsgSendStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, msgSendStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgSendStatement */

/** 
 * $ANTLR start msgRecvStatement
 * .//Emerson.g:352:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static EmersonParser_msgRecvStatement_return
msgRecvStatement(pEmersonParser ctx)
{   
    EmersonParser_msgRecvStatement_return retval;
    ANTLR3_UINT32 msgRecvStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM270;
    pANTLR3_COMMON_TOKEN    string_literal271;
    pANTLR3_COMMON_TOKEN    LTERM272;
    pANTLR3_COMMON_TOKEN    char_literal273;
    pANTLR3_COMMON_TOKEN    LTERM274;
    pANTLR3_COMMON_TOKEN    string_literal275;
    pANTLR3_COMMON_TOKEN    LTERM276;
    pANTLR3_COMMON_TOKEN    string_literal277;
    pANTLR3_COMMON_TOKEN    LTERM278;
    pANTLR3_COMMON_TOKEN    char_literal279;
    EmersonParser_memberExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_memberExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memberExpression_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM270_tree;
    pANTLR3_BASE_TREE string_literal271_tree;
    pANTLR3_BASE_TREE LTERM272_tree;
    pANTLR3_BASE_TREE char_literal273_tree;
    pANTLR3_BASE_TREE LTERM274_tree;
    pANTLR3_BASE_TREE string_literal275_tree;
    pANTLR3_BASE_TREE LTERM276_tree;
    pANTLR3_BASE_TREE string_literal277_tree;
    pANTLR3_BASE_TREE LTERM278_tree;
    pANTLR3_BASE_TREE char_literal279_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgRecvStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM270       = NULL;
    string_literal271       = NULL;
    LTERM272       = NULL;
    char_literal273       = NULL;
    LTERM274       = NULL;
    string_literal275       = NULL;
    LTERM276       = NULL;
    string_literal277       = NULL;
    LTERM278       = NULL;
    char_literal279       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM270_tree   = NULL;
    string_literal271_tree   = NULL;
    LTERM272_tree   = NULL;
    char_literal273_tree   = NULL;
    LTERM274_tree   = NULL;
    string_literal275_tree   = NULL;
    LTERM276_tree   = NULL;
    string_literal277_tree   = NULL;
    LTERM278_tree   = NULL;
    char_literal279_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:353:2: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) )
            
            ANTLR3_UINT32 alt142;

            alt142=2;

            alt142 = cdfa142.predict(ctx, RECOGNIZER, ISTREAM, &cdfa142);
            if  (HASEXCEPTION())
            {
                goto rulemsgRecvStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt142) 
            {
        	case 1:
        	    // .//Emerson.g:353:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2697);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//Emerson.g:353:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt137=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA137_0 = LA(1);
        	                if ( (LA137_0 == LTERM) ) 
        	                {
        	                    alt137=1;
        	                }

        	            }
        	            switch (alt137) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM270 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2699); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM270, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop137;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop137: ; /* Jump out to here if this rule does not match */

        	        string_literal271 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_msgRecvStatement2701); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal271, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2705);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:353:61: ( LTERM | ';' )
        	        {
        	            int alt138=2;

        	            {
        	                int LA138_0 = LA(1);
        	                if ( (LA138_0 == LTERM) ) 
        	                {
        	                    alt138=1;
        	                }
        	                else if ( (LA138_0 == 133) ) 
        	                {
        	                    alt138=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 138;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt138) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:353:62: LTERM
        	        	    {
        	        	        LTERM272 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2708); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM272, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:353:70: ';'
        	        	    {
        	        	        char_literal273 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_msgRecvStatement2712); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal273, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e1, e2
        	         * token labels      : 
        	         * rule labels       : retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 353:76: -> ^( MESSAGE_RECV $e1 $e2)
        	        	{
        	        	    // .//Emerson.g:353:79: ^( MESSAGE_RECV $e1 $e2)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:354:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2733);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//Emerson.g:354:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt139=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA139_0 = LA(1);
        	                if ( (LA139_0 == LTERM) ) 
        	                {
        	                    alt139=1;
        	                }

        	            }
        	            switch (alt139) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM274 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2735); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM274, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop139;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop139: ; /* Jump out to here if this rule does not match */

        	        string_literal275 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_msgRecvStatement2737); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal275, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2741);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:354:61: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt140=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA140_0 = LA(1);
        	                if ( (LA140_0 == LTERM) ) 
        	                {
        	                    alt140=1;
        	                }

        	            }
        	            switch (alt140) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM276 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2743); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM276, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop140;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop140: ; /* Jump out to here if this rule does not match */

        	        string_literal277 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_msgRecvStatement2746); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal277, NULL); }

        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2750);
        	        e3=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e3.tree, NULL); }

        	        // .//Emerson.g:354:93: ( LTERM | ';' )
        	        {
        	            int alt141=2;

        	            {
        	                int LA141_0 = LA(1);
        	                if ( (LA141_0 == LTERM) ) 
        	                {
        	                    alt141=1;
        	                }
        	                else if ( (LA141_0 == 133) ) 
        	                {
        	                    alt141=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 141;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt141) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:354:94: LTERM
        	        	    {
        	        	        LTERM278 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2753); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM278, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:354:102: ';'
        	        	    {
        	        	        char_literal279 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_msgRecvStatement2757); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal279, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e3, e1, e2
        	         * token labels      : 
        	         * rule labels       : e3, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 354:107: -> ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	{
        	        	    // .//Emerson.g:354:110: ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvStatementEx; /* Prevent compiler warnings */
    rulemsgRecvStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, msgRecvStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvStatement */

/** 
 * $ANTLR start expression
 * .//Emerson.g:358:1: expression : assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) ;
 */
static EmersonParser_expression_return
expression(pEmersonParser ctx)
{   
    EmersonParser_expression_return retval;
    ANTLR3_UINT32 expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM281;
    pANTLR3_COMMON_TOKEN    char_literal282;
    pANTLR3_COMMON_TOKEN    LTERM283;
    EmersonParser_assignmentExpression_return assignmentExpression280;
    #undef	RETURN_TYPE_assignmentExpression280
    #define	RETURN_TYPE_assignmentExpression280 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression284;
    #undef	RETURN_TYPE_assignmentExpression284
    #define	RETURN_TYPE_assignmentExpression284 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM281_tree;
    pANTLR3_BASE_TREE char_literal282_tree;
    pANTLR3_BASE_TREE LTERM283_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM281       = NULL;
    char_literal282       = NULL;
    LTERM283       = NULL;
    assignmentExpression280.tree = NULL;

    assignmentExpression284.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM281_tree   = NULL;
    char_literal282_tree   = NULL;
    LTERM283_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:359:2: ( assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) )
        // .//Emerson.g:359:4: assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2784);
            assignmentExpression280=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression280.tree, NULL); }

            // .//Emerson.g:359:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*

            for (;;)
            {
                int alt145=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA145_0 = LA(1);
                    if ( (LA145_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA145_1 = LA(2);
                            if ( (synpred163_Emerson(ctx)) ) 
                            {
                                alt145=1;
                            }

                        }
                    }
                    else if ( (LA145_0 == 130) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA145_4 = LA(2);
                            if ( (synpred163_Emerson(ctx)) ) 
                            {
                                alt145=1;
                            }

                        }
                    }

                }
                switch (alt145) 
                {
            	case 1:
            	    // .//Emerson.g:359:26: ( LTERM )* ',' ( LTERM )* assignmentExpression
            	    {

            	        // .//Emerson.g:359:26: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt143=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA143_0 = LA(1);
            	                if ( (LA143_0 == LTERM) ) 
            	                {
            	                    alt143=1;
            	                }

            	            }
            	            switch (alt143) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM281 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2787); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM281, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop143;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop143: ; /* Jump out to here if this rule does not match */

            	        char_literal282 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_expression2790); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal282, NULL); }


            	        // .//Emerson.g:359:37: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt144=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA144_0 = LA(1);
            	                if ( (LA144_0 == LTERM) ) 
            	                {
            	                    alt144=1;
            	                }

            	            }
            	            switch (alt144) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM283 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2792); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM283, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop144;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop144: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2795);
            	        assignmentExpression284=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression284.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop145;	/* break out of the loop */
            	    break;
                }
            }
            loop145: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 359:67: -> ^( EXPR_LIST ( assignmentExpression )+ )
            	{
            	    // .//Emerson.g:359:71: ^( EXPR_LIST ( assignmentExpression )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpression == NULL || !stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpression->hasNext(stream_assignmentExpression))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, expression_StartIndex); }
    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//Emerson.g:362:1: expressionNoIn : assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) ;
 */
static EmersonParser_expressionNoIn_return
expressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_expressionNoIn_return retval;
    ANTLR3_UINT32 expressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM286;
    pANTLR3_COMMON_TOKEN    char_literal287;
    pANTLR3_COMMON_TOKEN    LTERM288;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn285;
    #undef	RETURN_TYPE_assignmentExpressionNoIn285
    #define	RETURN_TYPE_assignmentExpressionNoIn285 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn289;
    #undef	RETURN_TYPE_assignmentExpressionNoIn289
    #define	RETURN_TYPE_assignmentExpressionNoIn289 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM286_tree;
    pANTLR3_BASE_TREE char_literal287_tree;
    pANTLR3_BASE_TREE LTERM288_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    expressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM286       = NULL;
    char_literal287       = NULL;
    LTERM288       = NULL;
    assignmentExpressionNoIn285.tree = NULL;

    assignmentExpressionNoIn289.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM286_tree   = NULL;
    char_literal287_tree   = NULL;
    LTERM288_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:363:2: ( assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) )
        // .//Emerson.g:363:4: assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2819);
            assignmentExpressionNoIn285=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn285.tree, NULL); }

            // .//Emerson.g:363:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*

            for (;;)
            {
                int alt148=2;
                alt148 = cdfa148.predict(ctx, RECOGNIZER, ISTREAM, &cdfa148);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt148) 
                {
            	case 1:
            	    // .//Emerson.g:363:30: ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:363:30: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt146=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA146_0 = LA(1);
            	                if ( (LA146_0 == LTERM) ) 
            	                {
            	                    alt146=1;
            	                }

            	            }
            	            switch (alt146) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM286 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2822); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM286, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop146;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop146: ; /* Jump out to here if this rule does not match */

            	        char_literal287 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_expressionNoIn2825); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal287, NULL); }


            	        // .//Emerson.g:363:41: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt147=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA147_0 = LA(1);
            	                if ( (LA147_0 == LTERM) ) 
            	                {
            	                    alt147=1;
            	                }

            	            }
            	            switch (alt147) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM288 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2827); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM288, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop147;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop147: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2830);
            	        assignmentExpressionNoIn289=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn289.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop148;	/* break out of the loop */
            	    break;
                }
            }
            loop148: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 363:75: -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	{
            	    // .//Emerson.g:363:78: ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpressionNoIn == NULL || !stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	        	}
            	        	stream_assignmentExpressionNoIn->reset(stream_assignmentExpressionNoIn);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, expressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//Emerson.g:367:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static EmersonParser_assignmentExpression_return
assignmentExpression(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpression_return retval;
    ANTLR3_UINT32 assignmentExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM292;
    pANTLR3_COMMON_TOKEN    LTERM294;
    EmersonParser_conditionalExpression_return conditionalExpression290;
    #undef	RETURN_TYPE_conditionalExpression290
    #define	RETURN_TYPE_conditionalExpression290 EmersonParser_conditionalExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression291;
    #undef	RETURN_TYPE_leftHandSideExpression291
    #define	RETURN_TYPE_leftHandSideExpression291 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator293;
    #undef	RETURN_TYPE_assignmentOperator293
    #define	RETURN_TYPE_assignmentOperator293 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpression_return assignmentExpression295;
    #undef	RETURN_TYPE_assignmentExpression295
    #define	RETURN_TYPE_assignmentExpression295 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM292_tree;
    pANTLR3_BASE_TREE LTERM294_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpression;
    /* Initialize rule variables
     */
    assignmentExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM292       = NULL;
    LTERM294       = NULL;
    conditionalExpression290.tree = NULL;

    leftHandSideExpression291.tree = NULL;

    assignmentOperator293.tree = NULL;

    assignmentExpression295.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM292_tree   = NULL;
    LTERM294_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_conditionalExpression   = NULL;
    #define CREATE_stream_conditionalExpression  if (stream_conditionalExpression == NULL) {stream_conditionalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:368:2: ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt151;

            alt151=2;

            alt151 = cdfa151.predict(ctx, RECOGNIZER, ISTREAM, &cdfa151);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt151) 
            {
        	case 1:
        	    // .//Emerson.g:368:4: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression2854);
        	        conditionalExpression290=conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpression; stream_conditionalExpression->add(stream_conditionalExpression, conditionalExpression290.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 368:26: -> ^( COND_EXPR conditionalExpression )
        	        	{
        	        	    // .//Emerson.g:368:29: ^( COND_EXPR conditionalExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR, (pANTLR3_UINT8)"COND_EXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpression == NULL ? NULL : stream_conditionalExpression->nextTree(stream_conditionalExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:369:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression2867);
        	        leftHandSideExpression291=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression291.tree, NULL); }

        	        // .//Emerson.g:369:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt149=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA149_0 = LA(1);
        	                if ( (LA149_0 == LTERM) ) 
        	                {
        	                    alt149=1;
        	                }

        	            }
        	            switch (alt149) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM292 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2869); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM292, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop149;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop149: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpression2872);
        	        assignmentOperator293=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator293.tree, NULL); }

        	        // .//Emerson.g:369:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt150=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA150_0 = LA(1);
        	                if ( (LA150_0 == LTERM) ) 
        	                {
        	                    alt150=1;
        	                }

        	            }
        	            switch (alt150) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM294 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2874); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM294, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop150;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop150: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression2877);
        	        assignmentExpression295=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression295.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, leftHandSideExpression, assignmentOperator
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 369:81: -> ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	{
        	        	    // .//Emerson.g:369:85: ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_conditionalExpression != NULL) stream_conditionalExpression->free(stream_conditionalExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, assignmentExpression_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//Emerson.g:372:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static EmersonParser_assignmentExpressionNoIn_return
assignmentExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpressionNoIn_return retval;
    ANTLR3_UINT32 assignmentExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM298;
    pANTLR3_COMMON_TOKEN    LTERM300;
    EmersonParser_conditionalExpressionNoIn_return conditionalExpressionNoIn296;
    #undef	RETURN_TYPE_conditionalExpressionNoIn296
    #define	RETURN_TYPE_conditionalExpressionNoIn296 EmersonParser_conditionalExpressionNoIn_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression297;
    #undef	RETURN_TYPE_leftHandSideExpression297
    #define	RETURN_TYPE_leftHandSideExpression297 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator299;
    #undef	RETURN_TYPE_assignmentOperator299
    #define	RETURN_TYPE_assignmentOperator299 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn301;
    #undef	RETURN_TYPE_assignmentExpressionNoIn301
    #define	RETURN_TYPE_assignmentExpressionNoIn301 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM298_tree;
    pANTLR3_BASE_TREE LTERM300_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpressionNoIn;
    /* Initialize rule variables
     */
    assignmentExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(51)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM298       = NULL;
    LTERM300       = NULL;
    conditionalExpressionNoIn296.tree = NULL;

    leftHandSideExpression297.tree = NULL;

    assignmentOperator299.tree = NULL;

    assignmentExpressionNoIn301.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM298_tree   = NULL;
    LTERM300_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_conditionalExpressionNoIn   = NULL;
    #define CREATE_stream_conditionalExpressionNoIn  if (stream_conditionalExpressionNoIn == NULL) {stream_conditionalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:373:2: ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt154;

            alt154=2;

            alt154 = cdfa154.predict(ctx, RECOGNIZER, ISTREAM, &cdfa154);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt154) 
            {
        	case 1:
        	    // .//Emerson.g:373:4: conditionalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2901);
        	        conditionalExpressionNoIn296=conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpressionNoIn; stream_conditionalExpressionNoIn->add(stream_conditionalExpressionNoIn, conditionalExpressionNoIn296.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 373:30: -> ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:373:33: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR_NOIN, (pANTLR3_UINT8)"COND_EXPR_NOIN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpressionNoIn == NULL ? NULL : stream_conditionalExpressionNoIn->nextTree(stream_conditionalExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:374:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2914);
        	        leftHandSideExpression297=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression297.tree, NULL); }

        	        // .//Emerson.g:374:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt152=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA152_0 = LA(1);
        	                if ( (LA152_0 == LTERM) ) 
        	                {
        	                    alt152=1;
        	                }

        	            }
        	            switch (alt152) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM298 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2916); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM298, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop152;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop152: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2919);
        	        assignmentOperator299=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator299.tree, NULL); }

        	        // .//Emerson.g:374:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt153=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA153_0 = LA(1);
        	                if ( (LA153_0 == LTERM) ) 
        	                {
        	                    alt153=1;
        	                }

        	            }
        	            switch (alt153) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM300 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2921); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM300, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop153;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop153: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2924);
        	        assignmentExpressionNoIn301=assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn301.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentOperator, leftHandSideExpression, assignmentExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 374:85: -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:374:89: ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_conditionalExpressionNoIn != NULL) stream_conditionalExpressionNoIn->free(stream_conditionalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(51, assignmentExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//Emerson.g:377:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static EmersonParser_leftHandSideExpression_return
leftHandSideExpression(pEmersonParser ctx)
{   
    EmersonParser_leftHandSideExpression_return retval;
    ANTLR3_UINT32 leftHandSideExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression302;
    #undef	RETURN_TYPE_callExpression302
    #define	RETURN_TYPE_callExpression302 EmersonParser_callExpression_return

    EmersonParser_newExpression_return newExpression303;
    #undef	RETURN_TYPE_newExpression303
    #define	RETURN_TYPE_newExpression303 EmersonParser_newExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    leftHandSideExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(52)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression302.tree = NULL;

    newExpression303.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:378:2: ( callExpression -> callExpression | newExpression -> newExpression )
            
            ANTLR3_UINT32 alt155;

            alt155=2;

            alt155 = cdfa155.predict(ctx, RECOGNIZER, ISTREAM, &cdfa155);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt155) 
            {
        	case 1:
        	    // .//Emerson.g:378:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression2949);
        	        callExpression302=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression302.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 378:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:379:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression2958);
        	        newExpression303=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression303.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 379:18: -> newExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(52, leftHandSideExpression_StartIndex); }
    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//Emerson.g:382:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static EmersonParser_newExpression_return
newExpression(pEmersonParser ctx)
{   
    EmersonParser_newExpression_return retval;
    ANTLR3_UINT32 newExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal305;
    pANTLR3_COMMON_TOKEN    LTERM306;
    EmersonParser_memberExpression_return memberExpression304;
    #undef	RETURN_TYPE_memberExpression304
    #define	RETURN_TYPE_memberExpression304 EmersonParser_memberExpression_return

    EmersonParser_newExpression_return newExpression307;
    #undef	RETURN_TYPE_newExpression307
    #define	RETURN_TYPE_newExpression307 EmersonParser_newExpression_return

    pANTLR3_BASE_TREE string_literal305_tree;
    pANTLR3_BASE_TREE LTERM306_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    newExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(53)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal305       = NULL;
    LTERM306       = NULL;
    memberExpression304.tree = NULL;

    newExpression307.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal305_tree   = NULL;
    LTERM306_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:383:2: ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt157;

            alt157=2;

            alt157 = cdfa157.predict(ctx, RECOGNIZER, ISTREAM, &cdfa157);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt157) 
            {
        	case 1:
        	    // .//Emerson.g:383:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression2974);
        	        memberExpression304=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression304.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 383:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:384:4: 'new' ( LTERM )* newExpression
        	    {
        	        string_literal305 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_newExpression2983); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal305, NULL); }


        	        // .//Emerson.g:384:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt156=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA156_0 = LA(1);
        	                if ( (LA156_0 == LTERM) ) 
        	                {
        	                    alt156=1;
        	                }

        	            }
        	            switch (alt156) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM306 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_newExpression2985); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenewExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM306, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop156;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop156: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression2988);
        	        newExpression307=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression307.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 384:31: -> ^( NEW newExpression )
        	        	{
        	        	    // .//Emerson.g:384:34: ^( NEW newExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(53, newExpression_StartIndex); }
    return retval;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start indexSuffix1
 * .//Emerson.g:388:1: indexSuffix1 : '[' ( LTERM )* expression ( LTERM )* ']' -> expression ;
 */
static EmersonParser_indexSuffix1_return
indexSuffix1(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix1_return retval;
    ANTLR3_UINT32 indexSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal308;
    pANTLR3_COMMON_TOKEN    LTERM309;
    pANTLR3_COMMON_TOKEN    LTERM311;
    pANTLR3_COMMON_TOKEN    char_literal312;
    EmersonParser_expression_return expression310;
    #undef	RETURN_TYPE_expression310
    #define	RETURN_TYPE_expression310 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal308_tree;
    pANTLR3_BASE_TREE LTERM309_tree;
    pANTLR3_BASE_TREE LTERM311_tree;
    pANTLR3_BASE_TREE char_literal312_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(54)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal308       = NULL;
    LTERM309       = NULL;
    LTERM311       = NULL;
    char_literal312       = NULL;
    expression310.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal308_tree   = NULL;
    LTERM309_tree   = NULL;
    LTERM311_tree   = NULL;
    char_literal312_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:389:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> expression )
        // .//Emerson.g:389:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal308 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_indexSuffix13010); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal308, NULL); }


            // .//Emerson.g:389:8: ( LTERM )*

            for (;;)
            {
                int alt158=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA158_0 = LA(1);
                    if ( (LA158_0 == LTERM) ) 
                    {
                        alt158=1;
                    }

                }
                switch (alt158) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM309 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13012); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM309, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop158;	/* break out of the loop */
            	    break;
                }
            }
            loop158: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix13015);
            expression310=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression310.tree, NULL); }

            // .//Emerson.g:389:26: ( LTERM )*

            for (;;)
            {
                int alt159=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA159_0 = LA(1);
                    if ( (LA159_0 == LTERM) ) 
                    {
                        alt159=1;
                    }

                }
                switch (alt159) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM311 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13017); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM311, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop159;	/* break out of the loop */
            	    break;
                }
            }
            loop159: ; /* Jump out to here if this rule does not match */

            char_literal312 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_indexSuffix13020); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal312, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 389:37: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(54, indexSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//Emerson.g:393:1: propertyReferenceSuffix1 : '.' ( LTERM )* Identifier -> Identifier ;
 */
static EmersonParser_propertyReferenceSuffix1_return
propertyReferenceSuffix1(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix1_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal313;
    pANTLR3_COMMON_TOKEN    LTERM314;
    pANTLR3_COMMON_TOKEN    Identifier315;

    pANTLR3_BASE_TREE char_literal313_tree;
    pANTLR3_BASE_TREE LTERM314_tree;
    pANTLR3_BASE_TREE Identifier315_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(55)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal313       = NULL;
    LTERM314       = NULL;
    Identifier315       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal313_tree   = NULL;
    LTERM314_tree   = NULL;
    Identifier315_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:394:2: ( '.' ( LTERM )* Identifier -> Identifier )
        // .//Emerson.g:394:4: '.' ( LTERM )* Identifier
        {
            char_literal313 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_propertyReferenceSuffix13037); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal313, NULL); }


            // .//Emerson.g:394:8: ( LTERM )*

            for (;;)
            {
                int alt160=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA160_0 = LA(1);
                    if ( (LA160_0 == LTERM) ) 
                    {
                        alt160=1;
                    }

                }
                switch (alt160) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM314 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix13039); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM314, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop160;	/* break out of the loop */
            	    break;
                }
            }
            loop160: ; /* Jump out to here if this rule does not match */

            Identifier315 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix13042); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier315, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 394:26: -> Identifier
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(55, propertyReferenceSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//Emerson.g:398:1: memberExpression : ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* );
 */
static EmersonParser_memberExpression_return
memberExpression(pEmersonParser ctx)
{   
    EmersonParser_memberExpression_return retval;
    ANTLR3_UINT32 memberExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM317;
    pANTLR3_COMMON_TOKEN    LTERM319;
    pANTLR3_COMMON_TOKEN    LTERM322;
    pANTLR3_COMMON_TOKEN    LTERM324;
    pANTLR3_COMMON_TOKEN    string_literal326;
    pANTLR3_COMMON_TOKEN    LTERM327;
    pANTLR3_COMMON_TOKEN    LTERM328;
    pANTLR3_COMMON_TOKEN    LTERM330;
    pANTLR3_COMMON_TOKEN    LTERM332;
    EmersonParser_memberExpression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr EmersonParser_memberExpression_return

    EmersonParser_primaryExpression_return primaryExpression316;
    #undef	RETURN_TYPE_primaryExpression316
    #define	RETURN_TYPE_primaryExpression316 EmersonParser_primaryExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1318;
    #undef	RETURN_TYPE_propertyReferenceSuffix1318
    #define	RETURN_TYPE_propertyReferenceSuffix1318 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1320;
    #undef	RETURN_TYPE_indexSuffix1320
    #define	RETURN_TYPE_indexSuffix1320 EmersonParser_indexSuffix1_return

    EmersonParser_functionExpression_return functionExpression321;
    #undef	RETURN_TYPE_functionExpression321
    #define	RETURN_TYPE_functionExpression321 EmersonParser_functionExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1323;
    #undef	RETURN_TYPE_propertyReferenceSuffix1323
    #define	RETURN_TYPE_propertyReferenceSuffix1323 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1325;
    #undef	RETURN_TYPE_indexSuffix1325
    #define	RETURN_TYPE_indexSuffix1325 EmersonParser_indexSuffix1_return

    EmersonParser_arguments_return arguments329;
    #undef	RETURN_TYPE_arguments329
    #define	RETURN_TYPE_arguments329 EmersonParser_arguments_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1331;
    #undef	RETURN_TYPE_propertyReferenceSuffix1331
    #define	RETURN_TYPE_propertyReferenceSuffix1331 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1333;
    #undef	RETURN_TYPE_indexSuffix1333
    #define	RETURN_TYPE_indexSuffix1333 EmersonParser_indexSuffix1_return

    pANTLR3_BASE_TREE LTERM317_tree;
    pANTLR3_BASE_TREE LTERM319_tree;
    pANTLR3_BASE_TREE LTERM322_tree;
    pANTLR3_BASE_TREE LTERM324_tree;
    pANTLR3_BASE_TREE string_literal326_tree;
    pANTLR3_BASE_TREE LTERM327_tree;
    pANTLR3_BASE_TREE LTERM328_tree;
    pANTLR3_BASE_TREE LTERM330_tree;
    pANTLR3_BASE_TREE LTERM332_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primaryExpression;
    /* Initialize rule variables
     */
    memberExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(56)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM317       = NULL;
    LTERM319       = NULL;
    LTERM322       = NULL;
    LTERM324       = NULL;
    string_literal326       = NULL;
    LTERM327       = NULL;
    LTERM328       = NULL;
    LTERM330       = NULL;
    LTERM332       = NULL;
    expr.tree = NULL;

    primaryExpression316.tree = NULL;

    propertyReferenceSuffix1318.tree = NULL;

    indexSuffix1320.tree = NULL;

    functionExpression321.tree = NULL;

    propertyReferenceSuffix1323.tree = NULL;

    indexSuffix1325.tree = NULL;

    arguments329.tree = NULL;

    propertyReferenceSuffix1331.tree = NULL;

    indexSuffix1333.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM317_tree   = NULL;
    LTERM319_tree   = NULL;
    LTERM322_tree   = NULL;
    LTERM324_tree   = NULL;
    string_literal326_tree   = NULL;
    LTERM327_tree   = NULL;
    LTERM328_tree   = NULL;
    LTERM330_tree   = NULL;
    LTERM332_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_functionExpression   = NULL;
    #define CREATE_stream_functionExpression  if (stream_functionExpression == NULL) {stream_functionExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }
    stream_primaryExpression   = NULL;
    #define CREATE_stream_primaryExpression  if (stream_primaryExpression == NULL) {stream_primaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primaryExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:399:2: ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* )
            
            ANTLR3_UINT32 alt172;

            alt172=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 128:
            case 131:
            case 158:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            	{
            		alt172=1;
            	}
                break;
            case 127:
            	{
            		alt172=2;
            	}
                break;
            case 157:
            	{
            		alt172=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 172;
                EXCEPTION->state        = 0;


                goto rulememberExpressionEx;
            }

            switch (alt172) 
            {
        	case 1:
        	    // .//Emerson.g:399:4: ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:399:4: ( primaryExpression -> primaryExpression )
        	        // .//Emerson.g:399:5: primaryExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression3059);
        	            primaryExpression316=primaryExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_primaryExpression; stream_primaryExpression->add(stream_primaryExpression, primaryExpression316.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : primaryExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 399:23: -> primaryExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primaryExpression == NULL ? NULL : stream_primaryExpression->nextTree(stream_primaryExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:399:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt163=3;
        	            alt163 = cdfa163.predict(ctx, RECOGNIZER, ISTREAM, &cdfa163);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt163) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:399:47: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:399:47: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt161=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA161_0 = LA(1);
        	        	                if ( (LA161_0 == LTERM) ) 
        	        	                {
        	        	                    alt161=1;
        	        	                }

        	        	            }
        	        	            switch (alt161) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM317 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3068); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM317, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop161;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop161: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3071);
        	        	        propertyReferenceSuffix1318=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1318.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 399:79: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:399:82: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:399:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:399:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt162=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA162_0 = LA(1);
        	        	                if ( (LA162_0 == LTERM) ) 
        	        	                {
        	        	                    alt162=1;
        	        	                }

        	        	            }
        	        	            switch (alt162) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM319 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3088); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM319, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop162;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop162: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3091);
        	        	        indexSuffix1320=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1320.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 399:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:399:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop163;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop163: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:400:4: ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:400:4: ( functionExpression -> functionExpression )
        	        // .//Emerson.g:400:5: functionExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression3110);
        	            functionExpression321=functionExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_functionExpression; stream_functionExpression->add(stream_functionExpression, functionExpression321.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : functionExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 400:24: -> functionExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionExpression == NULL ? NULL : stream_functionExpression->nextTree(stream_functionExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:400:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt166=3;
        	            alt166 = cdfa166.predict(ctx, RECOGNIZER, ISTREAM, &cdfa166);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt166) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:400:48: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:400:48: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt164=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA164_0 = LA(1);
        	        	                if ( (LA164_0 == LTERM) ) 
        	        	                {
        	        	                    alt164=1;
        	        	                }

        	        	            }
        	        	            switch (alt164) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM322 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3118); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM322, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop164;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop164: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3121);
        	        	        propertyReferenceSuffix1323=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1323.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : propertyReferenceSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 400:80: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:400:83: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:400:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:400:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt165=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA165_0 = LA(1);
        	        	                if ( (LA165_0 == LTERM) ) 
        	        	                {
        	        	                    alt165=1;
        	        	                }

        	        	            }
        	        	            switch (alt165) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM324 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3137); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM324, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop165;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop165: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3140);
        	        	        indexSuffix1325=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1325.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 400:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:400:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop166;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop166: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:401:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:401:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) )
        	        // .//Emerson.g:401:5: 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments
        	        {
        	            string_literal326 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_memberExpression3159); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal326, NULL); }


        	            // .//Emerson.g:401:11: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt167=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA167_0 = LA(1);
        	                    if ( (LA167_0 == LTERM) ) 
        	                    {
        	                        alt167=1;
        	                    }

        	                }
        	                switch (alt167) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM327 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3161); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM327, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop167;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop167: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression3166);
        	            expr=memberExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, expr.tree, NULL); }

        	            // .//Emerson.g:401:40: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt168=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA168_0 = LA(1);
        	                    if ( (LA168_0 == LTERM) ) 
        	                    {
        	                        alt168=1;
        	                    }

        	                }
        	                switch (alt168) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM328 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3168); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM328, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop168;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop168: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_arguments_in_memberExpression3171);
        	            arguments329=arguments(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments329.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : arguments, expr
        	             * token labels      : 
        	             * rule labels       : retval, expr
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 401:57: -> ^( NEW $expr arguments )
        	            	{
        	            	    // .//Emerson.g:401:60: ^( NEW $expr arguments )
        	            	    {
        	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	            	if (stream_expr != NULL) stream_expr->free(stream_expr);


        	            }
        	        }


        	        // .//Emerson.g:401:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt171=3;
        	            alt171 = cdfa171.predict(ctx, RECOGNIZER, ISTREAM, &cdfa171);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt171) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:401:85: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:401:85: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt169=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA169_0 = LA(1);
        	        	                if ( (LA169_0 == LTERM) ) 
        	        	                {
        	        	                    alt169=1;
        	        	                }

        	        	            }
        	        	            switch (alt169) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM330 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3186); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM330, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop169;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop169: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3189);
        	        	        propertyReferenceSuffix1331=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1331.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 401:117: -> ^( DOT $memberExpression)
        	        	        	{
        	        	        	    // .//Emerson.g:401:120: ^( DOT $memberExpression)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:401:147: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:401:147: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt170=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA170_0 = LA(1);
        	        	                if ( (LA170_0 == LTERM) ) 
        	        	                {
        	        	                    alt170=1;
        	        	                }

        	        	            }
        	        	            switch (alt170) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM332 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3202); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM332, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop170;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop170: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3205);
        	        	        indexSuffix1333=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1333.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 401:167: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:401:170: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop171;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop171: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_functionExpression != NULL) stream_functionExpression->free(stream_functionExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
        if (stream_primaryExpression != NULL) stream_primaryExpression->free(stream_primaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(56, memberExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//Emerson.g:404:1: memberExpressionSuffix : ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_memberExpressionSuffix_return
memberExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_memberExpressionSuffix_return retval;
    ANTLR3_UINT32 memberExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_indexSuffix_return indexSuffix334;
    #undef	RETURN_TYPE_indexSuffix334
    #define	RETURN_TYPE_indexSuffix334 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix335;
    #undef	RETURN_TYPE_propertyReferenceSuffix335
    #define	RETURN_TYPE_propertyReferenceSuffix335 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    memberExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(57)) )
    {
    	retval.start = 0;

        return retval; 
    }
    indexSuffix334.tree = NULL;

    propertyReferenceSuffix335.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:405:2: ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt173;

            alt173=2;


            {
                int LA173_0 = LA(1);
                if ( (LA173_0 == 158) ) 
                {
                    alt173=1;
                }
                else if ( (LA173_0 == 160) ) 
                {
                    alt173=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 173;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt173) 
            {
        	case 1:
        	    // .//Emerson.g:405:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix3240);
        	        indexSuffix334=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix334.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 405:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:406:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3250);
        	        propertyReferenceSuffix335=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix335.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 406:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(57, memberExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//Emerson.g:409:1: callExpression : ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* ;
 */
static EmersonParser_callExpression_return
callExpression(pEmersonParser ctx)
{   
    EmersonParser_callExpression_return retval;
    ANTLR3_UINT32 callExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM337;
    pANTLR3_COMMON_TOKEN    LTERM339;
    pANTLR3_COMMON_TOKEN    LTERM341;
    pANTLR3_COMMON_TOKEN    LTERM343;
    EmersonParser_memberExpression_return memberExpression336;
    #undef	RETURN_TYPE_memberExpression336
    #define	RETURN_TYPE_memberExpression336 EmersonParser_memberExpression_return

    EmersonParser_arguments_return arguments338;
    #undef	RETURN_TYPE_arguments338
    #define	RETURN_TYPE_arguments338 EmersonParser_arguments_return

    EmersonParser_arguments_return arguments340;
    #undef	RETURN_TYPE_arguments340
    #define	RETURN_TYPE_arguments340 EmersonParser_arguments_return

    EmersonParser_indexSuffix1_return indexSuffix1342;
    #undef	RETURN_TYPE_indexSuffix1342
    #define	RETURN_TYPE_indexSuffix1342 EmersonParser_indexSuffix1_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1344;
    #undef	RETURN_TYPE_propertyReferenceSuffix1344
    #define	RETURN_TYPE_propertyReferenceSuffix1344 EmersonParser_propertyReferenceSuffix1_return

    pANTLR3_BASE_TREE LTERM337_tree;
    pANTLR3_BASE_TREE LTERM339_tree;
    pANTLR3_BASE_TREE LTERM341_tree;
    pANTLR3_BASE_TREE LTERM343_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    /* Initialize rule variables
     */
    callExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(58)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM337       = NULL;
    LTERM339       = NULL;
    LTERM341       = NULL;
    LTERM343       = NULL;
    memberExpression336.tree = NULL;

    arguments338.tree = NULL;

    arguments340.tree = NULL;

    indexSuffix1342.tree = NULL;

    propertyReferenceSuffix1344.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM337_tree   = NULL;
    LTERM339_tree   = NULL;
    LTERM341_tree   = NULL;
    LTERM343_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:410:5: ( ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* )
        // .//Emerson.g:410:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
        {
            // .//Emerson.g:410:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) )
            // .//Emerson.g:410:8: memberExpression ( LTERM )* arguments
            {
                FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression3270);
                memberExpression336=memberExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression336.tree, NULL); }

                // .//Emerson.g:410:25: ( LTERM )*

                for (;;)
                {
                    int alt174=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA174_0 = LA(1);
                        if ( (LA174_0 == LTERM) ) 
                        {
                            alt174=1;
                        }

                    }
                    switch (alt174) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM337 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3272); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecallExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM337, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop174;	/* break out of the loop */
                	    break;
                    }
                }
                loop174: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_arguments_in_callExpression3275);
                arguments338=arguments(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments338.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : arguments, memberExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 410:42: -> ^( CALL memberExpression arguments )
                	{
                	    // .//Emerson.g:410:45: ^( CALL memberExpression arguments )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:410:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*

            for (;;)
            {
                int alt178=4;
                alt178 = cdfa178.predict(ctx, RECOGNIZER, ISTREAM, &cdfa178);
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt178) 
                {
            	case 1:
            	    // .//Emerson.g:410:82: ( LTERM )* arguments
            	    {

            	        // .//Emerson.g:410:82: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt175=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA175_0 = LA(1);
            	                if ( (LA175_0 == LTERM) ) 
            	                {
            	                    alt175=1;
            	                }

            	            }
            	            switch (alt175) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM339 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3289); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM339, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop175;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop175: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression3292);
            	        arguments340=arguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments340.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : arguments, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 410:99: -> ^( CALL $callExpression arguments )
            	        	{
            	        	    // .//Emerson.g:410:102: ^( CALL $callExpression arguments )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:410:138: ( LTERM )* indexSuffix1
            	    {

            	        // .//Emerson.g:410:138: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt176=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA176_0 = LA(1);
            	                if ( (LA176_0 == LTERM) ) 
            	                {
            	                    alt176=1;
            	                }

            	            }
            	            switch (alt176) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM341 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3307); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM341, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop176;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop176: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression3310);
            	        indexSuffix1342=indexSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1342.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : callExpression, indexSuffix1
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 410:158: -> ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	{
            	        	    // .//Emerson.g:410:161: ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // .//Emerson.g:410:207: ( LTERM )* propertyReferenceSuffix1
            	    {

            	        // .//Emerson.g:410:207: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt177=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA177_0 = LA(1);
            	                if ( (LA177_0 == LTERM) ) 
            	                {
            	                    alt177=1;
            	                }

            	            }
            	            switch (alt177) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM343 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3325); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM343, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop177;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop177: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression3328);
            	        propertyReferenceSuffix1344=propertyReferenceSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1344.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : propertyReferenceSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 410:239: -> ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	{
            	        	    // .//Emerson.g:410:242: ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop178;	/* break out of the loop */
            	    break;
                }
            }
            loop178: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(58, callExpression_StartIndex); }
    return retval;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//Emerson.g:413:1: callExpressionSuffix : ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_callExpressionSuffix_return
callExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_callExpressionSuffix_return retval;
    ANTLR3_UINT32 callExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_arguments_return arguments345;
    #undef	RETURN_TYPE_arguments345
    #define	RETURN_TYPE_arguments345 EmersonParser_arguments_return

    EmersonParser_indexSuffix_return indexSuffix346;
    #undef	RETURN_TYPE_indexSuffix346
    #define	RETURN_TYPE_indexSuffix346 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix347;
    #undef	RETURN_TYPE_propertyReferenceSuffix347
    #define	RETURN_TYPE_propertyReferenceSuffix347 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    callExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(59)) )
    {
    	retval.start = 0;

        return retval; 
    }
    arguments345.tree = NULL;

    indexSuffix346.tree = NULL;

    propertyReferenceSuffix347.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:414:2: ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt179;

            alt179=3;

            switch ( LA(1) ) 
            {
            case 128:
            	{
            		alt179=1;
            	}
                break;
            case 158:
            	{
            		alt179=2;
            	}
                break;
            case 160:
            	{
            		alt179=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 179;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt179) 
            {
        	case 1:
        	    // .//Emerson.g:414:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix3355);
        	        arguments345=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments345.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : arguments
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 414:14: -> arguments
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:415:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix3364);
        	        indexSuffix346=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix346.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 415:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:416:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3373);
        	        propertyReferenceSuffix347=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix347.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 416:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(59, callExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//Emerson.g:419:1: arguments : ( '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )? ) | '(' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ')' -> ^( ARGLIST assignmentExpression ( assignmentExpression )* ) );
 */
static EmersonParser_arguments_return
arguments(pEmersonParser ctx)
{   
    EmersonParser_arguments_return retval;
    ANTLR3_UINT32 arguments_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal348;
    pANTLR3_COMMON_TOKEN    LTERM349;
    pANTLR3_COMMON_TOKEN    LTERM351;
    pANTLR3_COMMON_TOKEN    char_literal352;
    pANTLR3_COMMON_TOKEN    char_literal353;
    pANTLR3_COMMON_TOKEN    LTERM354;
    pANTLR3_COMMON_TOKEN    char_literal355;
    pANTLR3_COMMON_TOKEN    LTERM356;
    pANTLR3_COMMON_TOKEN    LTERM357;
    pANTLR3_COMMON_TOKEN    char_literal358;
    EmersonParser_assignmentExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression350;
    #undef	RETURN_TYPE_assignmentExpression350
    #define	RETURN_TYPE_assignmentExpression350 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal348_tree;
    pANTLR3_BASE_TREE LTERM349_tree;
    pANTLR3_BASE_TREE LTERM351_tree;
    pANTLR3_BASE_TREE char_literal352_tree;
    pANTLR3_BASE_TREE char_literal353_tree;
    pANTLR3_BASE_TREE LTERM354_tree;
    pANTLR3_BASE_TREE char_literal355_tree;
    pANTLR3_BASE_TREE LTERM356_tree;
    pANTLR3_BASE_TREE LTERM357_tree;
    pANTLR3_BASE_TREE char_literal358_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arguments_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(60)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal348       = NULL;
    LTERM349       = NULL;
    LTERM351       = NULL;
    char_literal352       = NULL;
    char_literal353       = NULL;
    LTERM354       = NULL;
    char_literal355       = NULL;
    LTERM356       = NULL;
    LTERM357       = NULL;
    char_literal358       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    assignmentExpression350.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal348_tree   = NULL;
    LTERM349_tree   = NULL;
    LTERM351_tree   = NULL;
    char_literal352_tree   = NULL;
    char_literal353_tree   = NULL;
    LTERM354_tree   = NULL;
    char_literal355_tree   = NULL;
    LTERM356_tree   = NULL;
    LTERM357_tree   = NULL;
    char_literal358_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:420:9: ( '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )? ) | '(' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ')' -> ^( ARGLIST assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt187;

            alt187=2;


            {
                int LA187_0 = LA(1);
                if ( (LA187_0 == 128) ) 
                {

                    {
                        int LA187_1 = LA(2);
                        if ( (synpred208_Emerson(ctx)) ) 
                        {
                            alt187=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt187=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 187;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 187;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt187) 
            {
        	case 1:
        	    // .//Emerson.g:420:11: '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')'
        	    {
        	        char_literal348 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_arguments3395); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal348, NULL); }


        	        // .//Emerson.g:420:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt180=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA180_0 = LA(1);
        	                if ( (LA180_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA180_2 = LA(2);
        	                        if ( (synpred205_Emerson(ctx)) ) 
        	                        {
        	                            alt180=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt180) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM349 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3397); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM349, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop180;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop180: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:420:22: ( assignmentExpression )?
        	        {
        	            int alt181=2;
        	            {
        	                int LA181_0 = LA(1);
        	                if ( (((LA181_0 >= Identifier) && (LA181_0 <= NumericLiteral)) || ((LA181_0 >= 127) && (LA181_0 <= 128)) || LA181_0 == 131 || ((LA181_0 >= 157) && (LA181_0 <= 158)) || ((LA181_0 >= 190) && (LA181_0 <= 191)) || ((LA181_0 >= 195) && (LA181_0 <= 206))) ) 
        	                {
        	                    alt181=1;
        	                }
        	            }
        	            switch (alt181) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:420:23: assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3401);
        	        	        assignmentExpression350=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression350.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:420:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt182=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA182_0 = LA(1);
        	                if ( (LA182_0 == LTERM) ) 
        	                {
        	                    alt182=1;
        	                }

        	            }
        	            switch (alt182) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM351 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3405); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM351, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop182;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop182: ; /* Jump out to here if this rule does not match */

        	        char_literal352 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_arguments3408); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal352, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:57: -> ^( ARGLIST ( assignmentExpression )? )
        	        	{
        	        	    // .//Emerson.g:420:60: ^( ARGLIST ( assignmentExpression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        // .//Emerson.g:420:70: ( assignmentExpression )?
        	        	        {
        	        	        	if ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if ( stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:421:4: '(' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ')'
        	    {
        	        char_literal353 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_arguments3422); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal353, NULL); }


        	        // .//Emerson.g:421:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt183=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA183_0 = LA(1);
        	                if ( (LA183_0 == LTERM) ) 
        	                {
        	                    alt183=1;
        	                }

        	            }
        	            switch (alt183) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM354 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3424); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM354, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop183;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop183: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3429);
        	        e1=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e1.tree, NULL); }

        	        // .//Emerson.g:421:39: ( ',' ( LTERM )* e2= assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt185=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA185_0 = LA(1);
        	                if ( (LA185_0 == 130) ) 
        	                {
        	                    alt185=1;
        	                }

        	            }
        	            switch (alt185) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:421:40: ',' ( LTERM )* e2= assignmentExpression
        	        	    {
        	        	        char_literal355 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_arguments3432); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal355, NULL); }


        	        	        // .//Emerson.g:421:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt184=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA184_0 = LA(1);
        	        	                if ( (LA184_0 == LTERM) ) 
        	        	                {
        	        	                    alt184=1;
        	        	                }

        	        	            }
        	        	            switch (alt184) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM356 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3434); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleargumentsEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM356, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop184;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop184: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3439);
        	        	        e2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop185;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop185: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:421:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt186=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA186_0 = LA(1);
        	                if ( (LA186_0 == LTERM) ) 
        	                {
        	                    alt186=1;
        	                }

        	            }
        	            switch (alt186) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM357 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3443); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM357, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop186;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop186: ; /* Jump out to here if this rule does not match */

        	        char_literal358 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_arguments3446); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal358, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 421:88: -> ^( ARGLIST assignmentExpression ( assignmentExpression )* )
        	        	{
        	        	    // .//Emerson.g:421:91: ^( ARGLIST assignmentExpression ( assignmentExpression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
        	        	        // .//Emerson.g:421:122: ( assignmentExpression )*
        	        	        {
        	        	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(60, arguments_StartIndex); }
    return retval;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//Emerson.g:426:1: indexSuffix : '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) ;
 */
static EmersonParser_indexSuffix_return
indexSuffix(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix_return retval;
    ANTLR3_UINT32 indexSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal359;
    pANTLR3_COMMON_TOKEN    LTERM360;
    pANTLR3_COMMON_TOKEN    LTERM362;
    pANTLR3_COMMON_TOKEN    char_literal363;
    EmersonParser_expression_return expression361;
    #undef	RETURN_TYPE_expression361
    #define	RETURN_TYPE_expression361 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal359_tree;
    pANTLR3_BASE_TREE LTERM360_tree;
    pANTLR3_BASE_TREE LTERM362_tree;
    pANTLR3_BASE_TREE char_literal363_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(61)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal359       = NULL;
    LTERM360       = NULL;
    LTERM362       = NULL;
    char_literal363       = NULL;
    expression361.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal359_tree   = NULL;
    LTERM360_tree   = NULL;
    LTERM362_tree   = NULL;
    char_literal363_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:427:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) )
        // .//Emerson.g:427:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal359 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_indexSuffix3480); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal359, NULL); }


            // .//Emerson.g:427:8: ( LTERM )*

            for (;;)
            {
                int alt188=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA188_0 = LA(1);
                    if ( (LA188_0 == LTERM) ) 
                    {
                        alt188=1;
                    }

                }
                switch (alt188) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM360 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3482); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM360, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop188;	/* break out of the loop */
            	    break;
                }
            }
            loop188: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix3485);
            expression361=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression361.tree, NULL); }

            // .//Emerson.g:427:26: ( LTERM )*

            for (;;)
            {
                int alt189=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA189_0 = LA(1);
                    if ( (LA189_0 == LTERM) ) 
                    {
                        alt189=1;
                    }

                }
                switch (alt189) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM362 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3487); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM362, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop189;	/* break out of the loop */
            	    break;
                }
            }
            loop189: ; /* Jump out to here if this rule does not match */

            char_literal363 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_indexSuffix3490); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal363, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 427:37: -> ^( ARRAY_INDEX expression )
            	{
            	    // .//Emerson.g:427:40: ^( ARRAY_INDEX expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(61, indexSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//Emerson.g:430:1: propertyReferenceSuffix : '.' ( LTERM )* Identifier -> ^( DOT Identifier ) ;
 */
static EmersonParser_propertyReferenceSuffix_return
propertyReferenceSuffix(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal364;
    pANTLR3_COMMON_TOKEN    LTERM365;
    pANTLR3_COMMON_TOKEN    Identifier366;

    pANTLR3_BASE_TREE char_literal364_tree;
    pANTLR3_BASE_TREE LTERM365_tree;
    pANTLR3_BASE_TREE Identifier366_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(62)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal364       = NULL;
    LTERM365       = NULL;
    Identifier366       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal364_tree   = NULL;
    LTERM365_tree   = NULL;
    Identifier366_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:431:2: ( '.' ( LTERM )* Identifier -> ^( DOT Identifier ) )
        // .//Emerson.g:431:4: '.' ( LTERM )* Identifier
        {
            char_literal364 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_propertyReferenceSuffix3511); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal364, NULL); }


            // .//Emerson.g:431:8: ( LTERM )*

            for (;;)
            {
                int alt190=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA190_0 = LA(1);
                    if ( (LA190_0 == LTERM) ) 
                    {
                        alt190=1;
                    }

                }
                switch (alt190) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM365 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix3513); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM365, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop190;	/* break out of the loop */
            	    break;
                }
            }
            loop190: ; /* Jump out to here if this rule does not match */

            Identifier366 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix3516); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier366, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 431:26: -> ^( DOT Identifier )
            	{
            	    // .//Emerson.g:431:29: ^( DOT Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(62, propertyReferenceSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//Emerson.g:435:1: assignmentOperator : ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) );
 */
static EmersonParser_assignmentOperator_return
assignmentOperator(pEmersonParser ctx)
{   
    EmersonParser_assignmentOperator_return retval;
    ANTLR3_UINT32 assignmentOperator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal367;
    pANTLR3_COMMON_TOKEN    string_literal368;
    pANTLR3_COMMON_TOKEN    string_literal369;
    pANTLR3_COMMON_TOKEN    string_literal370;
    pANTLR3_COMMON_TOKEN    string_literal371;
    pANTLR3_COMMON_TOKEN    string_literal372;
    pANTLR3_COMMON_TOKEN    string_literal373;
    pANTLR3_COMMON_TOKEN    string_literal374;
    pANTLR3_COMMON_TOKEN    string_literal375;
    pANTLR3_COMMON_TOKEN    string_literal376;
    pANTLR3_COMMON_TOKEN    string_literal377;
    pANTLR3_COMMON_TOKEN    string_literal378;

    pANTLR3_BASE_TREE char_literal367_tree;
    pANTLR3_BASE_TREE string_literal368_tree;
    pANTLR3_BASE_TREE string_literal369_tree;
    pANTLR3_BASE_TREE string_literal370_tree;
    pANTLR3_BASE_TREE string_literal371_tree;
    pANTLR3_BASE_TREE string_literal372_tree;
    pANTLR3_BASE_TREE string_literal373_tree;
    pANTLR3_BASE_TREE string_literal374_tree;
    pANTLR3_BASE_TREE string_literal375_tree;
    pANTLR3_BASE_TREE string_literal376_tree;
    pANTLR3_BASE_TREE string_literal377_tree;
    pANTLR3_BASE_TREE string_literal378_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_163;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;

    /* Initialize rule variables
     */
    assignmentOperator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(63)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal367       = NULL;
    string_literal368       = NULL;
    string_literal369       = NULL;
    string_literal370       = NULL;
    string_literal371       = NULL;
    string_literal372       = NULL;
    string_literal373       = NULL;
    string_literal374       = NULL;
    string_literal375       = NULL;
    string_literal376       = NULL;
    string_literal377       = NULL;
    string_literal378       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal367_tree   = NULL;
    string_literal368_tree   = NULL;
    string_literal369_tree   = NULL;
    string_literal370_tree   = NULL;
    string_literal371_tree   = NULL;
    string_literal372_tree   = NULL;
    string_literal373_tree   = NULL;
    string_literal374_tree   = NULL;
    string_literal375_tree   = NULL;
    string_literal376_tree   = NULL;
    string_literal377_tree   = NULL;
    string_literal378_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_163   = NULL;
    #define CREATE_stream_163  if (stream_163 == NULL) {stream_163 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 163"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:436:2: ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) )
            
            ANTLR3_UINT32 alt191;

            alt191=12;

            switch ( LA(1) ) 
            {
            case 135:
            	{
            		alt191=1;
            	}
                break;
            case 161:
            	{
            		alt191=2;
            	}
                break;
            case 162:
            	{
            		alt191=3;
            	}
                break;
            case 163:
            	{
            		alt191=4;
            	}
                break;
            case 164:
            	{
            		alt191=5;
            	}
                break;
            case 165:
            	{
            		alt191=6;
            	}
                break;
            case 166:
            	{
            		alt191=7;
            	}
                break;
            case 167:
            	{
            		alt191=8;
            	}
                break;
            case 168:
            	{
            		alt191=9;
            	}
                break;
            case 169:
            	{
            		alt191=10;
            	}
                break;
            case 170:
            	{
            		alt191=11;
            	}
                break;
            case 171:
            	{
            		alt191=12;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 191;
                EXCEPTION->state        = 0;


                goto ruleassignmentOperatorEx;
            }

            switch (alt191) 
            {
        	case 1:
        	    // .//Emerson.g:436:4: '='
        	    {
        	        char_literal367 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_assignmentOperator3544); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, char_literal367, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:8: -> ^( ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:11: ^( ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:436:22: '*='
        	    {
        	        string_literal368 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_assignmentOperator3553); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal368, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:27: -> ^( MULT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:30: ^( MULT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT_ASSIGN, (pANTLR3_UINT8)"MULT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:436:46: '/='
        	    {
        	        string_literal369 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_assignmentOperator3562); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, string_literal369, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:51: -> ^( DIV_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:54: ^( DIV_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV_ASSIGN, (pANTLR3_UINT8)"DIV_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:436:70: '%='
        	    {
        	        string_literal370 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_assignmentOperator3572); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal370, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:75: -> ^( MOD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:78: ^( MOD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD_ASSIGN, (pANTLR3_UINT8)"MOD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:436:93: '+='
        	    {
        	        string_literal371 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_assignmentOperator3581); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal371, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:98: -> ^( ADD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:101: ^( ADD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_ASSIGN, (pANTLR3_UINT8)"ADD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:436:116: '-='
        	    {
        	        string_literal372 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_assignmentOperator3590); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, string_literal372, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:121: -> ^( SUB_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:124: ^( SUB_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB_ASSIGN, (pANTLR3_UINT8)"SUB_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:436:139: '<<='
        	    {
        	        string_literal373 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_assignmentOperator3599); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, string_literal373, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:145: -> ^( LEFT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:148: ^( LEFT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT_ASSIGN, (pANTLR3_UINT8)"LEFT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:436:170: '>>='
        	    {
        	        string_literal374 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_assignmentOperator3608); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, string_literal374, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:176: -> ^( RIGHT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:179: ^( RIGHT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT_ASSIGN, (pANTLR3_UINT8)"RIGHT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:436:202: '>>>='
        	    {
        	        string_literal375 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_assignmentOperator3617); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, string_literal375, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:209: -> ^( TRIPLE_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:212: ^( TRIPLE_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT_ASSIGN, (pANTLR3_UINT8)"TRIPLE_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:436:236: '&='
        	    {
        	        string_literal376 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_assignmentOperator3626); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, string_literal376, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:240: -> ^( AND_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:243: ^( AND_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND_ASSIGN, (pANTLR3_UINT8)"AND_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:436:258: '^='
        	    {
        	        string_literal377 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_assignmentOperator3634); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, string_literal377, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:262: -> ^( EXP_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:265: ^( EXP_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP_ASSIGN, (pANTLR3_UINT8)"EXP_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:436:281: '|='
        	    {
        	        string_literal378 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_assignmentOperator3643); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, string_literal378, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:286: -> ^( OR_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:436:289: ^( OR_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR_ASSIGN, (pANTLR3_UINT8)"OR_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_163 != NULL) stream_163->free(stream_163);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_167 != NULL) stream_167->free(stream_167);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(63, assignmentOperator_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//Emerson.g:439:1: conditionalExpression : ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpression_return
conditionalExpression(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpression_return retval;
    ANTLR3_UINT32 conditionalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM380;
    pANTLR3_COMMON_TOKEN    char_literal381;
    pANTLR3_COMMON_TOKEN    LTERM382;
    pANTLR3_COMMON_TOKEN    LTERM383;
    pANTLR3_COMMON_TOKEN    char_literal384;
    pANTLR3_COMMON_TOKEN    LTERM385;
    EmersonParser_assignmentExpression_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return

    EmersonParser_logicalORExpression_return logicalORExpression379;
    #undef	RETURN_TYPE_logicalORExpression379
    #define	RETURN_TYPE_logicalORExpression379 EmersonParser_logicalORExpression_return

    pANTLR3_BASE_TREE LTERM380_tree;
    pANTLR3_BASE_TREE char_literal381_tree;
    pANTLR3_BASE_TREE LTERM382_tree;
    pANTLR3_BASE_TREE LTERM383_tree;
    pANTLR3_BASE_TREE char_literal384_tree;
    pANTLR3_BASE_TREE LTERM385_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpression;
    /* Initialize rule variables
     */
    conditionalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(64)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM380       = NULL;
    char_literal381       = NULL;
    LTERM382       = NULL;
    LTERM383       = NULL;
    char_literal384       = NULL;
    LTERM385       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpression379.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM380_tree   = NULL;
    char_literal381_tree   = NULL;
    LTERM382_tree   = NULL;
    LTERM383_tree   = NULL;
    char_literal384_tree   = NULL;
    LTERM385_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_logicalORExpression   = NULL;
    #define CREATE_stream_logicalORExpression  if (stream_logicalORExpression == NULL) {stream_logicalORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:440:2: ( ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? )
        // .//Emerson.g:440:4: ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
        {
            // .//Emerson.g:440:4: ( logicalORExpression -> logicalORExpression )
            // .//Emerson.g:440:5: logicalORExpression
            {
                FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression3661);
                logicalORExpression379=logicalORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpression; stream_logicalORExpression->add(stream_logicalORExpression, logicalORExpression379.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 440:25: -> logicalORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpression == NULL ? NULL : stream_logicalORExpression->nextTree(stream_logicalORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:440:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
            {
                int alt196=2;
                alt196 = cdfa196.predict(ctx, RECOGNIZER, ISTREAM, &cdfa196);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt196) 
                {
            	case 1:
            	    // .//Emerson.g:440:50: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
            	    {

            	        // .//Emerson.g:440:50: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt192=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA192_0 = LA(1);
            	                if ( (LA192_0 == LTERM) ) 
            	                {
            	                    alt192=1;
            	                }

            	            }
            	            switch (alt192) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM380 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3669); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM380, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop192;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop192: ; /* Jump out to here if this rule does not match */

            	        char_literal381 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_conditionalExpression3672); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, char_literal381, NULL); }


            	        // .//Emerson.g:440:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt193=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA193_0 = LA(1);
            	                if ( (LA193_0 == LTERM) ) 
            	                {
            	                    alt193=1;
            	                }

            	            }
            	            switch (alt193) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM382 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3674); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM382, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop193;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop193: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3679);
            	        expr1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr1.tree, NULL); }

            	        // .//Emerson.g:440:95: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt194=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA194_0 = LA(1);
            	                if ( (LA194_0 == LTERM) ) 
            	                {
            	                    alt194=1;
            	                }

            	            }
            	            switch (alt194) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM383 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3681); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM383, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop194;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop194: ; /* Jump out to here if this rule does not match */

            	        char_literal384 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_conditionalExpression3684); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal384, NULL); }


            	        // .//Emerson.g:440:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt195=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA195_0 = LA(1);
            	                if ( (LA195_0 == LTERM) ) 
            	                {
            	                    alt195=1;
            	                }

            	            }
            	            switch (alt195) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM385 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3686); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM385, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop195;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop195: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3691);
            	        expr2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr2, conditionalExpression, expr1
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 440:140: -> ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:440:143: ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_logicalORExpression != NULL) stream_logicalORExpression->free(stream_logicalORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(64, conditionalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//Emerson.g:443:1: conditionalExpressionNoIn : ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpressionNoIn_return
conditionalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpressionNoIn_return retval;
    ANTLR3_UINT32 conditionalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM387;
    pANTLR3_COMMON_TOKEN    char_literal388;
    pANTLR3_COMMON_TOKEN    LTERM389;
    pANTLR3_COMMON_TOKEN    LTERM390;
    pANTLR3_COMMON_TOKEN    char_literal391;
    pANTLR3_COMMON_TOKEN    LTERM392;
    EmersonParser_assignmentExpressionNoIn_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_logicalORExpressionNoIn_return logicalORExpressionNoIn386;
    #undef	RETURN_TYPE_logicalORExpressionNoIn386
    #define	RETURN_TYPE_logicalORExpressionNoIn386 EmersonParser_logicalORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM387_tree;
    pANTLR3_BASE_TREE char_literal388_tree;
    pANTLR3_BASE_TREE LTERM389_tree;
    pANTLR3_BASE_TREE LTERM390_tree;
    pANTLR3_BASE_TREE char_literal391_tree;
    pANTLR3_BASE_TREE LTERM392_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpressionNoIn;
    /* Initialize rule variables
     */
    conditionalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(65)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM387       = NULL;
    char_literal388       = NULL;
    LTERM389       = NULL;
    LTERM390       = NULL;
    char_literal391       = NULL;
    LTERM392       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpressionNoIn386.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM387_tree   = NULL;
    char_literal388_tree   = NULL;
    LTERM389_tree   = NULL;
    LTERM390_tree   = NULL;
    char_literal391_tree   = NULL;
    LTERM392_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_logicalORExpressionNoIn   = NULL;
    #define CREATE_stream_logicalORExpressionNoIn  if (stream_logicalORExpressionNoIn == NULL) {stream_logicalORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:444:2: ( ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? )
        // .//Emerson.g:444:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
        {
            // .//Emerson.g:444:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn )
            // .//Emerson.g:444:5: logicalORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3722);
                logicalORExpressionNoIn386=logicalORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpressionNoIn; stream_logicalORExpressionNoIn->add(stream_logicalORExpressionNoIn, logicalORExpressionNoIn386.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 444:29: -> logicalORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpressionNoIn == NULL ? NULL : stream_logicalORExpressionNoIn->nextTree(stream_logicalORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:444:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
            {
                int alt201=2;
                alt201 = cdfa201.predict(ctx, RECOGNIZER, ISTREAM, &cdfa201);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt201) 
                {
            	case 1:
            	    // .//Emerson.g:444:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:444:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt197=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA197_0 = LA(1);
            	                if ( (LA197_0 == LTERM) ) 
            	                {
            	                    alt197=1;
            	                }

            	            }
            	            switch (alt197) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM387 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3729); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM387, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop197;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop197: ; /* Jump out to here if this rule does not match */

            	        char_literal388 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_conditionalExpressionNoIn3732); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, char_literal388, NULL); }


            	        // .//Emerson.g:444:68: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt198=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA198_0 = LA(1);
            	                if ( (LA198_0 == LTERM) ) 
            	                {
            	                    alt198=1;
            	                }

            	            }
            	            switch (alt198) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM389 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3734); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM389, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop198;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop198: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3739);
            	        expr1=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr1.tree, NULL); }

            	        // .//Emerson.g:444:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt199=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA199_0 = LA(1);
            	                if ( (LA199_0 == LTERM) ) 
            	                {
            	                    alt199=1;
            	                }

            	            }
            	            switch (alt199) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM390 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3741); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM390, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop199;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop199: ; /* Jump out to here if this rule does not match */

            	        char_literal391 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_conditionalExpressionNoIn3744); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal391, NULL); }


            	        // .//Emerson.g:444:117: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt200=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA200_0 = LA(1);
            	                if ( (LA200_0 == LTERM) ) 
            	                {
            	                    alt200=1;
            	                }

            	            }
            	            switch (alt200) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM392 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3746); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM392, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop200;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop200: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3751);
            	        expr2=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : conditionalExpressionNoIn, expr1, expr2
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 444:155: -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:444:158: ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_logicalORExpressionNoIn != NULL) stream_logicalORExpressionNoIn->free(stream_logicalORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(65, conditionalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start logicalORExpression
 * .//Emerson.g:448:1: logicalORExpression : ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* ;
 */
static EmersonParser_logicalORExpression_return
logicalORExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpression_return retval;
    ANTLR3_UINT32 logicalORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM394;
    pANTLR3_COMMON_TOKEN    string_literal395;
    pANTLR3_COMMON_TOKEN    LTERM396;
    EmersonParser_logicalANDExpression_return logicalANDExpression393;
    #undef	RETURN_TYPE_logicalANDExpression393
    #define	RETURN_TYPE_logicalANDExpression393 EmersonParser_logicalANDExpression_return

    EmersonParser_logicalANDExpression_return logicalANDExpression397;
    #undef	RETURN_TYPE_logicalANDExpression397
    #define	RETURN_TYPE_logicalANDExpression397 EmersonParser_logicalANDExpression_return

    pANTLR3_BASE_TREE LTERM394_tree;
    pANTLR3_BASE_TREE string_literal395_tree;
    pANTLR3_BASE_TREE LTERM396_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpression;
    /* Initialize rule variables
     */
    logicalORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(66)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM394       = NULL;
    string_literal395       = NULL;
    LTERM396       = NULL;
    logicalANDExpression393.tree = NULL;

    logicalANDExpression397.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM394_tree   = NULL;
    string_literal395_tree   = NULL;
    LTERM396_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_logicalANDExpression   = NULL;
    #define CREATE_stream_logicalANDExpression  if (stream_logicalANDExpression == NULL) {stream_logicalANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:449:2: ( ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* )
        // .//Emerson.g:449:4: ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
        {
            // .//Emerson.g:449:4: ( logicalANDExpression -> logicalANDExpression )
            // .//Emerson.g:449:5: logicalANDExpression
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3781);
                logicalANDExpression393=logicalANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression393.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 449:26: -> logicalANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:449:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*

            for (;;)
            {
                int alt204=2;
                alt204 = cdfa204.predict(ctx, RECOGNIZER, ISTREAM, &cdfa204);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt204) 
                {
            	case 1:
            	    // .//Emerson.g:449:51: ( LTERM )* '||' ( LTERM )* logicalANDExpression
            	    {

            	        // .//Emerson.g:449:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt202=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA202_0 = LA(1);
            	                if ( (LA202_0 == LTERM) ) 
            	                {
            	                    alt202=1;
            	                }

            	            }
            	            switch (alt202) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM394 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3788); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM394, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop202;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop202: ; /* Jump out to here if this rule does not match */

            	        string_literal395 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_logicalORExpression3791); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal395, NULL); }


            	        // .//Emerson.g:449:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt203=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA203_0 = LA(1);
            	                if ( (LA203_0 == LTERM) ) 
            	                {
            	                    alt203=1;
            	                }

            	            }
            	            switch (alt203) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM396 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3793); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM396, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop203;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop203: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3796);
            	        logicalANDExpression397=logicalANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression397.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, logicalORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 449:91: -> ^( OR $logicalORExpression logicalANDExpression )
            	        	{
            	        	    // .//Emerson.g:449:94: ^( OR $logicalORExpression logicalANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop204;	/* break out of the loop */
            	    break;
                }
            }
            loop204: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_logicalANDExpression != NULL) stream_logicalANDExpression->free(stream_logicalANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(66, logicalORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalANDExpression
 * .//Emerson.g:452:1: logicalANDExpression : ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* ;
 */
static EmersonParser_logicalANDExpression_return
logicalANDExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpression_return retval;
    ANTLR3_UINT32 logicalANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM399;
    pANTLR3_COMMON_TOKEN    string_literal400;
    pANTLR3_COMMON_TOKEN    LTERM401;
    EmersonParser_bitwiseORExpression_return bitwiseORExpression398;
    #undef	RETURN_TYPE_bitwiseORExpression398
    #define	RETURN_TYPE_bitwiseORExpression398 EmersonParser_bitwiseORExpression_return

    EmersonParser_bitwiseORExpression_return bitwiseORExpression402;
    #undef	RETURN_TYPE_bitwiseORExpression402
    #define	RETURN_TYPE_bitwiseORExpression402 EmersonParser_bitwiseORExpression_return

    pANTLR3_BASE_TREE LTERM399_tree;
    pANTLR3_BASE_TREE string_literal400_tree;
    pANTLR3_BASE_TREE LTERM401_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpression;
    /* Initialize rule variables
     */
    logicalANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(67)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM399       = NULL;
    string_literal400       = NULL;
    LTERM401       = NULL;
    bitwiseORExpression398.tree = NULL;

    bitwiseORExpression402.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM399_tree   = NULL;
    string_literal400_tree   = NULL;
    LTERM401_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_bitwiseORExpression   = NULL;
    #define CREATE_stream_bitwiseORExpression  if (stream_bitwiseORExpression == NULL) {stream_bitwiseORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:453:2: ( ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* )
        // .//Emerson.g:453:4: ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
        {
            // .//Emerson.g:453:4: ( bitwiseORExpression -> bitwiseORExpression )
            // .//Emerson.g:453:5: bitwiseORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3823);
                bitwiseORExpression398=bitwiseORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression398.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 453:25: -> bitwiseORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:453:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*

            for (;;)
            {
                int alt207=2;
                alt207 = cdfa207.predict(ctx, RECOGNIZER, ISTREAM, &cdfa207);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt207) 
                {
            	case 1:
            	    // .//Emerson.g:453:49: ( LTERM )* '&&' ( LTERM )* bitwiseORExpression
            	    {

            	        // .//Emerson.g:453:49: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt205=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA205_0 = LA(1);
            	                if ( (LA205_0 == LTERM) ) 
            	                {
            	                    alt205=1;
            	                }

            	            }
            	            switch (alt205) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM399 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3830); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM399, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop205;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop205: ; /* Jump out to here if this rule does not match */

            	        string_literal400 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_logicalANDExpression3833); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, string_literal400, NULL); }


            	        // .//Emerson.g:453:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt206=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA206_0 = LA(1);
            	                if ( (LA206_0 == LTERM) ) 
            	                {
            	                    alt206=1;
            	                }

            	            }
            	            switch (alt206) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM401 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3835); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM401, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop206;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop206: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3838);
            	        bitwiseORExpression402=bitwiseORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression402.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, logicalANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 453:89: -> ^( AND $logicalANDExpression bitwiseORExpression )
            	        	{
            	        	    // .//Emerson.g:453:92: ^( AND $logicalANDExpression bitwiseORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop207;	/* break out of the loop */
            	    break;
                }
            }
            loop207: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_bitwiseORExpression != NULL) stream_bitwiseORExpression->free(stream_bitwiseORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(67, logicalANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//Emerson.g:456:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* ;
 */
static EmersonParser_logicalORExpressionNoIn_return
logicalORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM404;
    pANTLR3_COMMON_TOKEN    string_literal405;
    pANTLR3_COMMON_TOKEN    LTERM406;
    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn403;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn403
    #define	RETURN_TYPE_logicalANDExpressionNoIn403 EmersonParser_logicalANDExpressionNoIn_return

    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn407;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn407
    #define	RETURN_TYPE_logicalANDExpressionNoIn407 EmersonParser_logicalANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM404_tree;
    pANTLR3_BASE_TREE string_literal405_tree;
    pANTLR3_BASE_TREE LTERM406_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpressionNoIn;
    /* Initialize rule variables
     */
    logicalORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(68)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM404       = NULL;
    string_literal405       = NULL;
    LTERM406       = NULL;
    logicalANDExpressionNoIn403.tree = NULL;

    logicalANDExpressionNoIn407.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM404_tree   = NULL;
    string_literal405_tree   = NULL;
    LTERM406_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_logicalANDExpressionNoIn   = NULL;
    #define CREATE_stream_logicalANDExpressionNoIn  if (stream_logicalANDExpressionNoIn == NULL) {stream_logicalANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:457:2: ( ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* )
        // .//Emerson.g:457:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
        {
            // .//Emerson.g:457:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn )
            // .//Emerson.g:457:5: logicalANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3866);
                logicalANDExpressionNoIn403=logicalANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn403.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 457:30: -> logicalANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:457:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*

            for (;;)
            {
                int alt210=2;
                alt210 = cdfa210.predict(ctx, RECOGNIZER, ISTREAM, &cdfa210);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt210) 
                {
            	case 1:
            	    // .//Emerson.g:457:59: ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn
            	    {

            	        // .//Emerson.g:457:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt208=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA208_0 = LA(1);
            	                if ( (LA208_0 == LTERM) ) 
            	                {
            	                    alt208=1;
            	                }

            	            }
            	            switch (alt208) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM404 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3873); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM404, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop208;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop208: ; /* Jump out to here if this rule does not match */

            	        string_literal405 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_logicalORExpressionNoIn3876); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal405, NULL); }


            	        // .//Emerson.g:457:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt209=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA209_0 = LA(1);
            	                if ( (LA209_0 == LTERM) ) 
            	                {
            	                    alt209=1;
            	                }

            	            }
            	            switch (alt209) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM406 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3878); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM406, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop209;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop209: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3881);
            	        logicalANDExpressionNoIn407=logicalANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn407.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, logicalORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 457:103: -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:457:106: ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop210;	/* break out of the loop */
            	    break;
                }
            }
            loop210: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_logicalANDExpressionNoIn != NULL) stream_logicalANDExpressionNoIn->free(stream_logicalANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(68, logicalORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//Emerson.g:461:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* ;
 */
static EmersonParser_logicalANDExpressionNoIn_return
logicalANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM409;
    pANTLR3_COMMON_TOKEN    string_literal410;
    pANTLR3_COMMON_TOKEN    LTERM411;
    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn408;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn408
    #define	RETURN_TYPE_bitwiseORExpressionNoIn408 EmersonParser_bitwiseORExpressionNoIn_return

    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn412;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn412
    #define	RETURN_TYPE_bitwiseORExpressionNoIn412 EmersonParser_bitwiseORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM409_tree;
    pANTLR3_BASE_TREE string_literal410_tree;
    pANTLR3_BASE_TREE LTERM411_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpressionNoIn;
    /* Initialize rule variables
     */
    logicalANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(69)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM409       = NULL;
    string_literal410       = NULL;
    LTERM411       = NULL;
    bitwiseORExpressionNoIn408.tree = NULL;

    bitwiseORExpressionNoIn412.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM409_tree   = NULL;
    string_literal410_tree   = NULL;
    LTERM411_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_bitwiseORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseORExpressionNoIn  if (stream_bitwiseORExpressionNoIn == NULL) {stream_bitwiseORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:462:2: ( ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* )
        // .//Emerson.g:462:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
        {
            // .//Emerson.g:462:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn )
            // .//Emerson.g:462:5: bitwiseORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3910);
                bitwiseORExpressionNoIn408=bitwiseORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn408.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 462:29: -> bitwiseORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:462:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*

            for (;;)
            {
                int alt213=2;
                alt213 = cdfa213.predict(ctx, RECOGNIZER, ISTREAM, &cdfa213);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt213) 
                {
            	case 1:
            	    // .//Emerson.g:462:58: ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn
            	    {

            	        // .//Emerson.g:462:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt211=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA211_0 = LA(1);
            	                if ( (LA211_0 == LTERM) ) 
            	                {
            	                    alt211=1;
            	                }

            	            }
            	            switch (alt211) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM409 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3918); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM409, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop211;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop211: ; /* Jump out to here if this rule does not match */

            	        string_literal410 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_logicalANDExpressionNoIn3921); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, string_literal410, NULL); }


            	        // .//Emerson.g:462:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt212=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA212_0 = LA(1);
            	                if ( (LA212_0 == LTERM) ) 
            	                {
            	                    alt212=1;
            	                }

            	            }
            	            switch (alt212) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM411 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3923); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM411, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop212;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop212: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3926);
            	        bitwiseORExpressionNoIn412=bitwiseORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn412.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, bitwiseORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 462:101: -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:462:104: ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop213;	/* break out of the loop */
            	    break;
                }
            }
            loop213: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_bitwiseORExpressionNoIn != NULL) stream_bitwiseORExpressionNoIn->free(stream_bitwiseORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(69, logicalANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//Emerson.g:465:1: bitwiseORExpression : ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* ;
 */
static EmersonParser_bitwiseORExpression_return
bitwiseORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpression_return retval;
    ANTLR3_UINT32 bitwiseORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM414;
    pANTLR3_COMMON_TOKEN    char_literal415;
    pANTLR3_COMMON_TOKEN    LTERM416;
    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression413;
    #undef	RETURN_TYPE_bitwiseXORExpression413
    #define	RETURN_TYPE_bitwiseXORExpression413 EmersonParser_bitwiseXORExpression_return

    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression417;
    #undef	RETURN_TYPE_bitwiseXORExpression417
    #define	RETURN_TYPE_bitwiseXORExpression417 EmersonParser_bitwiseXORExpression_return

    pANTLR3_BASE_TREE LTERM414_tree;
    pANTLR3_BASE_TREE char_literal415_tree;
    pANTLR3_BASE_TREE LTERM416_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpression;
    /* Initialize rule variables
     */
    bitwiseORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(70)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM414       = NULL;
    char_literal415       = NULL;
    LTERM416       = NULL;
    bitwiseXORExpression413.tree = NULL;

    bitwiseXORExpression417.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM414_tree   = NULL;
    char_literal415_tree   = NULL;
    LTERM416_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_bitwiseXORExpression   = NULL;
    #define CREATE_stream_bitwiseXORExpression  if (stream_bitwiseXORExpression == NULL) {stream_bitwiseXORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:466:2: ( ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* )
        // .//Emerson.g:466:4: ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
        {
            // .//Emerson.g:466:4: ( bitwiseXORExpression -> bitwiseXORExpression )
            // .//Emerson.g:466:5: bitwiseXORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3953);
                bitwiseXORExpression413=bitwiseXORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression413.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 466:26: -> bitwiseXORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:466:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*

            for (;;)
            {
                int alt216=2;
                alt216 = cdfa216.predict(ctx, RECOGNIZER, ISTREAM, &cdfa216);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt216) 
                {
            	case 1:
            	    // .//Emerson.g:466:52: ( LTERM )* '|' ( LTERM )* bitwiseXORExpression
            	    {

            	        // .//Emerson.g:466:52: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt214=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA214_0 = LA(1);
            	                if ( (LA214_0 == LTERM) ) 
            	                {
            	                    alt214=1;
            	                }

            	            }
            	            switch (alt214) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM414 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3961); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM414, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop214;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop214: ; /* Jump out to here if this rule does not match */

            	        char_literal415 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_bitwiseORExpression3964); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal415, NULL); }


            	        // .//Emerson.g:466:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt215=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA215_0 = LA(1);
            	                if ( (LA215_0 == LTERM) ) 
            	                {
            	                    alt215=1;
            	                }

            	            }
            	            switch (alt215) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM416 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3966); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM416, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop215;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop215: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3969);
            	        bitwiseXORExpression417=bitwiseXORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression417.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 466:91: -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	{
            	        	    // .//Emerson.g:466:94: ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop216;	/* break out of the loop */
            	    break;
                }
            }
            loop216: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_bitwiseXORExpression != NULL) stream_bitwiseXORExpression->free(stream_bitwiseXORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(70, bitwiseORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//Emerson.g:469:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseORExpressionNoIn_return
bitwiseORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM419;
    pANTLR3_COMMON_TOKEN    char_literal420;
    pANTLR3_COMMON_TOKEN    LTERM421;
    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn418;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn418
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn418 EmersonParser_bitwiseXORExpressionNoIn_return

    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn422;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn422
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn422 EmersonParser_bitwiseXORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM419_tree;
    pANTLR3_BASE_TREE char_literal420_tree;
    pANTLR3_BASE_TREE LTERM421_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(71)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM419       = NULL;
    char_literal420       = NULL;
    LTERM421       = NULL;
    bitwiseXORExpressionNoIn418.tree = NULL;

    bitwiseXORExpressionNoIn422.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM419_tree   = NULL;
    char_literal420_tree   = NULL;
    LTERM421_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_bitwiseXORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseXORExpressionNoIn  if (stream_bitwiseXORExpressionNoIn == NULL) {stream_bitwiseXORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:470:2: ( ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* )
        // .//Emerson.g:470:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
        {
            // .//Emerson.g:470:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn )
            // .//Emerson.g:470:5: bitwiseXORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3996);
                bitwiseXORExpressionNoIn418=bitwiseXORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn418.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 470:30: -> bitwiseXORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:470:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*

            for (;;)
            {
                int alt219=2;
                alt219 = cdfa219.predict(ctx, RECOGNIZER, ISTREAM, &cdfa219);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt219) 
                {
            	case 1:
            	    // .//Emerson.g:470:60: ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn
            	    {

            	        // .//Emerson.g:470:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt217=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA217_0 = LA(1);
            	                if ( (LA217_0 == LTERM) ) 
            	                {
            	                    alt217=1;
            	                }

            	            }
            	            switch (alt217) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM419 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4004); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM419, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop217;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop217: ; /* Jump out to here if this rule does not match */

            	        char_literal420 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_bitwiseORExpressionNoIn4007); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal420, NULL); }


            	        // .//Emerson.g:470:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt218=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA218_0 = LA(1);
            	                if ( (LA218_0 == LTERM) ) 
            	                {
            	                    alt218=1;
            	                }

            	            }
            	            switch (alt218) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM421 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4009); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM421, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop218;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop218: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4012);
            	        bitwiseXORExpressionNoIn422=bitwiseXORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn422.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 470:103: -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:470:106: ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop219;	/* break out of the loop */
            	    break;
                }
            }
            loop219: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_bitwiseXORExpressionNoIn != NULL) stream_bitwiseXORExpressionNoIn->free(stream_bitwiseXORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(71, bitwiseORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//Emerson.g:473:1: bitwiseXORExpression : ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* ;
 */
static EmersonParser_bitwiseXORExpression_return
bitwiseXORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpression_return retval;
    ANTLR3_UINT32 bitwiseXORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM424;
    pANTLR3_COMMON_TOKEN    char_literal425;
    pANTLR3_COMMON_TOKEN    LTERM426;
    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression423;
    #undef	RETURN_TYPE_bitwiseANDExpression423
    #define	RETURN_TYPE_bitwiseANDExpression423 EmersonParser_bitwiseANDExpression_return

    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression427;
    #undef	RETURN_TYPE_bitwiseANDExpression427
    #define	RETURN_TYPE_bitwiseANDExpression427 EmersonParser_bitwiseANDExpression_return

    pANTLR3_BASE_TREE LTERM424_tree;
    pANTLR3_BASE_TREE char_literal425_tree;
    pANTLR3_BASE_TREE LTERM426_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpression;
    /* Initialize rule variables
     */
    bitwiseXORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(72)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM424       = NULL;
    char_literal425       = NULL;
    LTERM426       = NULL;
    bitwiseANDExpression423.tree = NULL;

    bitwiseANDExpression427.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM424_tree   = NULL;
    char_literal425_tree   = NULL;
    LTERM426_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_bitwiseANDExpression   = NULL;
    #define CREATE_stream_bitwiseANDExpression  if (stream_bitwiseANDExpression == NULL) {stream_bitwiseANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:474:1: ( ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* )
        // .//Emerson.g:474:3: ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
        {
            // .//Emerson.g:474:3: ( bitwiseANDExpression -> bitwiseANDExpression )
            // .//Emerson.g:474:4: bitwiseANDExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4038);
                bitwiseANDExpression423=bitwiseANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression423.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 474:25: -> bitwiseANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:474:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*

            for (;;)
            {
                int alt222=2;
                alt222 = cdfa222.predict(ctx, RECOGNIZER, ISTREAM, &cdfa222);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt222) 
                {
            	case 1:
            	    // .//Emerson.g:474:51: ( LTERM )* '^' ( LTERM )* bitwiseANDExpression
            	    {

            	        // .//Emerson.g:474:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt220=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA220_0 = LA(1);
            	                if ( (LA220_0 == LTERM) ) 
            	                {
            	                    alt220=1;
            	                }

            	            }
            	            switch (alt220) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM424 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4046); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM424, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop220;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop220: ; /* Jump out to here if this rule does not match */

            	        char_literal425 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_bitwiseXORExpression4049); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal425, NULL); }


            	        // .//Emerson.g:474:62: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt221=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA221_0 = LA(1);
            	                if ( (LA221_0 == LTERM) ) 
            	                {
            	                    alt221=1;
            	                }

            	            }
            	            switch (alt221) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM426 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4051); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM426, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop221;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop221: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4054);
            	        bitwiseANDExpression427=bitwiseANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression427.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 474:90: -> ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	{
            	        	    // .//Emerson.g:474:93: ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop222;	/* break out of the loop */
            	    break;
                }
            }
            loop222: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_bitwiseANDExpression != NULL) stream_bitwiseANDExpression->free(stream_bitwiseANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(72, bitwiseXORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//Emerson.g:477:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseXORExpressionNoIn_return
bitwiseXORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseXORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM429;
    pANTLR3_COMMON_TOKEN    char_literal430;
    pANTLR3_COMMON_TOKEN    LTERM431;
    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn428;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn428
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn428 EmersonParser_bitwiseANDExpressionNoIn_return

    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn432;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn432
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn432 EmersonParser_bitwiseANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM429_tree;
    pANTLR3_BASE_TREE char_literal430_tree;
    pANTLR3_BASE_TREE LTERM431_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseXORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(73)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM429       = NULL;
    char_literal430       = NULL;
    LTERM431       = NULL;
    bitwiseANDExpressionNoIn428.tree = NULL;

    bitwiseANDExpressionNoIn432.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM429_tree   = NULL;
    char_literal430_tree   = NULL;
    LTERM431_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_bitwiseANDExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseANDExpressionNoIn  if (stream_bitwiseANDExpressionNoIn == NULL) {stream_bitwiseANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:478:2: ( ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* )
        // .//Emerson.g:478:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
        {
            // .//Emerson.g:478:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn )
            // .//Emerson.g:478:5: bitwiseANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4081);
                bitwiseANDExpressionNoIn428=bitwiseANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn428.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 478:30: -> bitwiseANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:478:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*

            for (;;)
            {
                int alt225=2;
                alt225 = cdfa225.predict(ctx, RECOGNIZER, ISTREAM, &cdfa225);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt225) 
                {
            	case 1:
            	    // .//Emerson.g:478:59: ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn
            	    {

            	        // .//Emerson.g:478:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt223=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA223_0 = LA(1);
            	                if ( (LA223_0 == LTERM) ) 
            	                {
            	                    alt223=1;
            	                }

            	            }
            	            switch (alt223) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM429 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4088); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM429, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop223;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop223: ; /* Jump out to here if this rule does not match */

            	        char_literal430 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_bitwiseXORExpressionNoIn4091); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal430, NULL); }


            	        // .//Emerson.g:478:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt224=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA224_0 = LA(1);
            	                if ( (LA224_0 == LTERM) ) 
            	                {
            	                    alt224=1;
            	                }

            	            }
            	            switch (alt224) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM431 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4093); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM431, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop224;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop224: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4096);
            	        bitwiseANDExpressionNoIn432=bitwiseANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn432.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpressionNoIn, bitwiseANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 478:102: -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:478:105: ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop225;	/* break out of the loop */
            	    break;
                }
            }
            loop225: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_bitwiseANDExpressionNoIn != NULL) stream_bitwiseANDExpressionNoIn->free(stream_bitwiseANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(73, bitwiseXORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//Emerson.g:481:1: bitwiseANDExpression : ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* ;
 */
static EmersonParser_bitwiseANDExpression_return
bitwiseANDExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpression_return retval;
    ANTLR3_UINT32 bitwiseANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM434;
    pANTLR3_COMMON_TOKEN    char_literal435;
    pANTLR3_COMMON_TOKEN    LTERM436;
    EmersonParser_equalityExpression_return equalityExpression433;
    #undef	RETURN_TYPE_equalityExpression433
    #define	RETURN_TYPE_equalityExpression433 EmersonParser_equalityExpression_return

    EmersonParser_equalityExpression_return equalityExpression437;
    #undef	RETURN_TYPE_equalityExpression437
    #define	RETURN_TYPE_equalityExpression437 EmersonParser_equalityExpression_return

    pANTLR3_BASE_TREE LTERM434_tree;
    pANTLR3_BASE_TREE char_literal435_tree;
    pANTLR3_BASE_TREE LTERM436_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpression;
    /* Initialize rule variables
     */
    bitwiseANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(74)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM434       = NULL;
    char_literal435       = NULL;
    LTERM436       = NULL;
    equalityExpression433.tree = NULL;

    equalityExpression437.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM434_tree   = NULL;
    char_literal435_tree   = NULL;
    LTERM436_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_equalityExpression   = NULL;
    #define CREATE_stream_equalityExpression  if (stream_equalityExpression == NULL) {stream_equalityExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:482:2: ( ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* )
        // .//Emerson.g:482:4: ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
        {
            // .//Emerson.g:482:4: ( equalityExpression -> equalityExpression )
            // .//Emerson.g:482:5: equalityExpression
            {
                FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4124);
                equalityExpression433=equalityExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression433.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 482:24: -> equalityExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:482:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*

            for (;;)
            {
                int alt228=2;
                alt228 = cdfa228.predict(ctx, RECOGNIZER, ISTREAM, &cdfa228);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt228) 
                {
            	case 1:
            	    // .//Emerson.g:482:48: ( LTERM )* '&' ( LTERM )* equalityExpression
            	    {

            	        // .//Emerson.g:482:48: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt226=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA226_0 = LA(1);
            	                if ( (LA226_0 == LTERM) ) 
            	                {
            	                    alt226=1;
            	                }

            	            }
            	            switch (alt226) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM434 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4132); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM434, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop226;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop226: ; /* Jump out to here if this rule does not match */

            	        char_literal435 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_bitwiseANDExpression4135); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, char_literal435, NULL); }


            	        // .//Emerson.g:482:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt227=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA227_0 = LA(1);
            	                if ( (LA227_0 == LTERM) ) 
            	                {
            	                    alt227=1;
            	                }

            	            }
            	            switch (alt227) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM436 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4137); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM436, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop227;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop227: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4140);
            	        equalityExpression437=equalityExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression437.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 482:85: -> ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	{
            	        	    // .//Emerson.g:482:88: ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop228;	/* break out of the loop */
            	    break;
                }
            }
            loop228: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_equalityExpression != NULL) stream_equalityExpression->free(stream_equalityExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(74, bitwiseANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//Emerson.g:485:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseANDExpressionNoIn_return
bitwiseANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM439;
    pANTLR3_COMMON_TOKEN    char_literal440;
    pANTLR3_COMMON_TOKEN    LTERM441;
    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn438;
    #undef	RETURN_TYPE_equalityExpressionNoIn438
    #define	RETURN_TYPE_equalityExpressionNoIn438 EmersonParser_equalityExpressionNoIn_return

    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn442;
    #undef	RETURN_TYPE_equalityExpressionNoIn442
    #define	RETURN_TYPE_equalityExpressionNoIn442 EmersonParser_equalityExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM439_tree;
    pANTLR3_BASE_TREE char_literal440_tree;
    pANTLR3_BASE_TREE LTERM441_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(75)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM439       = NULL;
    char_literal440       = NULL;
    LTERM441       = NULL;
    equalityExpressionNoIn438.tree = NULL;

    equalityExpressionNoIn442.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM439_tree   = NULL;
    char_literal440_tree   = NULL;
    LTERM441_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_equalityExpressionNoIn   = NULL;
    #define CREATE_stream_equalityExpressionNoIn  if (stream_equalityExpressionNoIn == NULL) {stream_equalityExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:486:2: ( ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* )
        // .//Emerson.g:486:4: ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
        {
            // .//Emerson.g:486:4: ( equalityExpressionNoIn -> equalityExpressionNoIn )
            // .//Emerson.g:486:5: equalityExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4168);
                equalityExpressionNoIn438=equalityExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn438.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 486:28: -> equalityExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:486:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*

            for (;;)
            {
                int alt231=2;
                alt231 = cdfa231.predict(ctx, RECOGNIZER, ISTREAM, &cdfa231);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt231) 
                {
            	case 1:
            	    // .//Emerson.g:486:56: ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn
            	    {

            	        // .//Emerson.g:486:56: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt229=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA229_0 = LA(1);
            	                if ( (LA229_0 == LTERM) ) 
            	                {
            	                    alt229=1;
            	                }

            	            }
            	            switch (alt229) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM439 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4176); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM439, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop229;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop229: ; /* Jump out to here if this rule does not match */

            	        char_literal440 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_bitwiseANDExpressionNoIn4179); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, char_literal440, NULL); }


            	        // .//Emerson.g:486:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt230=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA230_0 = LA(1);
            	                if ( (LA230_0 == LTERM) ) 
            	                {
            	                    alt230=1;
            	                }

            	            }
            	            switch (alt230) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM441 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4181); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM441, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop230;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop230: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4184);
            	        equalityExpressionNoIn442=equalityExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn442.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, equalityExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 486:97: -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:486:100: ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop231;	/* break out of the loop */
            	    break;
                }
            }
            loop231: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_equalityExpressionNoIn != NULL) stream_equalityExpressionNoIn->free(stream_equalityExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(75, bitwiseANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//Emerson.g:489:1: equalityExpression : ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* ;
 */
static EmersonParser_equalityExpression_return
equalityExpression(pEmersonParser ctx)
{   
    EmersonParser_equalityExpression_return retval;
    ANTLR3_UINT32 equalityExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM444;
    pANTLR3_COMMON_TOKEN    LTERM446;
    EmersonParser_relationalExpression_return relationalExpression443;
    #undef	RETURN_TYPE_relationalExpression443
    #define	RETURN_TYPE_relationalExpression443 EmersonParser_relationalExpression_return

    EmersonParser_equalityOps_return equalityOps445;
    #undef	RETURN_TYPE_equalityOps445
    #define	RETURN_TYPE_equalityOps445 EmersonParser_equalityOps_return

    EmersonParser_relationalExpression_return relationalExpression447;
    #undef	RETURN_TYPE_relationalExpression447
    #define	RETURN_TYPE_relationalExpression447 EmersonParser_relationalExpression_return

    pANTLR3_BASE_TREE LTERM444_tree;
    pANTLR3_BASE_TREE LTERM446_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    /* Initialize rule variables
     */
    equalityExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(76)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM444       = NULL;
    LTERM446       = NULL;
    relationalExpression443.tree = NULL;

    equalityOps445.tree = NULL;

    relationalExpression447.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM444_tree   = NULL;
    LTERM446_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalExpression   = NULL;
    #define CREATE_stream_relationalExpression  if (stream_relationalExpression == NULL) {stream_relationalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpression"); }
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:490:2: ( ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* )
        // .//Emerson.g:490:4: ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
        {
            // .//Emerson.g:490:4: ( relationalExpression -> relationalExpression )
            // .//Emerson.g:490:5: relationalExpression
            {
                FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4211);
                relationalExpression443=relationalExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression443.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 490:26: -> relationalExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:490:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*

            for (;;)
            {
                int alt234=2;
                alt234 = cdfa234.predict(ctx, RECOGNIZER, ISTREAM, &cdfa234);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt234) 
                {
            	case 1:
            	    // .//Emerson.g:490:51: ( LTERM )* equalityOps ( LTERM )* relationalExpression
            	    {

            	        // .//Emerson.g:490:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt232=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA232_0 = LA(1);
            	                if ( (LA232_0 == LTERM) ) 
            	                {
            	                    alt232=1;
            	                }

            	            }
            	            switch (alt232) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM444 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4218); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM444, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop232;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop232: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpression4221);
            	        equalityOps445=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps445.tree, NULL); }

            	        // .//Emerson.g:490:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt233=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA233_0 = LA(1);
            	                if ( (LA233_0 == LTERM) ) 
            	                {
            	                    alt233=1;
            	                }

            	            }
            	            switch (alt233) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM446 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4223); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM446, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop233;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop233: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4226);
            	        relationalExpression447=relationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression447.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpression, equalityExpression, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 490:98: -> ^( equalityOps $equalityExpression relationalExpression )
            	        	{
            	        	    // .//Emerson.g:490:101: ^( equalityOps $equalityExpression relationalExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop234;	/* break out of the loop */
            	    break;
                }
            }
            loop234: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalExpression != NULL) stream_relationalExpression->free(stream_relationalExpression);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(76, equalityExpression_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityOps
 * .//Emerson.g:493:1: equalityOps : ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) );
 */
static EmersonParser_equalityOps_return
equalityOps(pEmersonParser ctx)
{   
    EmersonParser_equalityOps_return retval;
    ANTLR3_UINT32 equalityOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal448;
    pANTLR3_COMMON_TOKEN    string_literal449;
    pANTLR3_COMMON_TOKEN    string_literal450;
    pANTLR3_COMMON_TOKEN    string_literal451;

    pANTLR3_BASE_TREE string_literal448_tree;
    pANTLR3_BASE_TREE string_literal449_tree;
    pANTLR3_BASE_TREE string_literal450_tree;
    pANTLR3_BASE_TREE string_literal451_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;

    /* Initialize rule variables
     */
    equalityOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(77)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal448       = NULL;
    string_literal449       = NULL;
    string_literal450       = NULL;
    string_literal451       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal448_tree   = NULL;
    string_literal449_tree   = NULL;
    string_literal450_tree   = NULL;
    string_literal451_tree   = NULL;

    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:494:1: ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) )
            
            ANTLR3_UINT32 alt235;

            alt235=4;

            switch ( LA(1) ) 
            {
            case 178:
            	{
            		alt235=1;
            	}
                break;
            case 179:
            	{
            		alt235=2;
            	}
                break;
            case 180:
            	{
            		alt235=3;
            	}
                break;
            case 181:
            	{
            		alt235=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 235;
                EXCEPTION->state        = 0;


                goto ruleequalityOpsEx;
            }

            switch (alt235) 
            {
        	case 1:
        	    // .//Emerson.g:494:4: '=='
        	    {
        	        string_literal448 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_equalityOps4251); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal448, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 494:9: -> ^( EQUALS )
        	        	{
        	        	    // .//Emerson.g:494:12: ^( EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:495:3: '!='
        	    {
        	        string_literal449 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_equalityOps4261); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal449, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 495:8: -> ^( NOT_EQUALS )
        	        	{
        	        	    // .//Emerson.g:495:11: ^( NOT_EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_EQUALS, (pANTLR3_UINT8)"NOT_EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:496:3: '==='
        	    {
        	        string_literal450 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_equalityOps4271); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal450, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 496:9: -> ^( IDENT )
        	        	{
        	        	    // .//Emerson.g:496:12: ^( IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENT, (pANTLR3_UINT8)"IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:497:3: '!=='
        	    {
        	        string_literal451 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_equalityOps4281); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, string_literal451, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 497:9: -> ^( NOT_IDENT )
        	        	{
        	        	    // .//Emerson.g:497:12: ^( NOT_IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_IDENT, (pANTLR3_UINT8)"NOT_IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityOpsEx; /* Prevent compiler warnings */
    ruleequalityOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_178 != NULL) stream_178->free(stream_178);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(77, equalityOps_StartIndex); }
    return retval;
}
/* $ANTLR end equalityOps */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//Emerson.g:500:1: equalityExpressionNoIn : ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* ;
 */
static EmersonParser_equalityExpressionNoIn_return
equalityExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_equalityExpressionNoIn_return retval;
    ANTLR3_UINT32 equalityExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM453;
    pANTLR3_COMMON_TOKEN    LTERM455;
    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn452;
    #undef	RETURN_TYPE_relationalExpressionNoIn452
    #define	RETURN_TYPE_relationalExpressionNoIn452 EmersonParser_relationalExpressionNoIn_return

    EmersonParser_equalityOps_return equalityOps454;
    #undef	RETURN_TYPE_equalityOps454
    #define	RETURN_TYPE_equalityOps454 EmersonParser_equalityOps_return

    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn456;
    #undef	RETURN_TYPE_relationalExpressionNoIn456
    #define	RETURN_TYPE_relationalExpressionNoIn456 EmersonParser_relationalExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM453_tree;
    pANTLR3_BASE_TREE LTERM455_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpressionNoIn;
    /* Initialize rule variables
     */
    equalityExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(78)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM453       = NULL;
    LTERM455       = NULL;
    relationalExpressionNoIn452.tree = NULL;

    equalityOps454.tree = NULL;

    relationalExpressionNoIn456.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM453_tree   = NULL;
    LTERM455_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }
    stream_relationalExpressionNoIn   = NULL;
    #define CREATE_stream_relationalExpressionNoIn  if (stream_relationalExpressionNoIn == NULL) {stream_relationalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:501:2: ( ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* )
        // .//Emerson.g:501:4: ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
        {
            // .//Emerson.g:501:4: ( relationalExpressionNoIn -> relationalExpressionNoIn )
            // .//Emerson.g:501:5: relationalExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4298);
                relationalExpressionNoIn452=relationalExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn452.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 501:30: -> relationalExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:501:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*

            for (;;)
            {
                int alt238=2;
                alt238 = cdfa238.predict(ctx, RECOGNIZER, ISTREAM, &cdfa238);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt238) 
                {
            	case 1:
            	    // .//Emerson.g:501:59: ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn
            	    {

            	        // .//Emerson.g:501:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt236=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA236_0 = LA(1);
            	                if ( (LA236_0 == LTERM) ) 
            	                {
            	                    alt236=1;
            	                }

            	            }
            	            switch (alt236) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM453 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4305); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM453, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop236;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop236: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpressionNoIn4308);
            	        equalityOps454=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps454.tree, NULL); }

            	        // .//Emerson.g:501:78: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt237=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA237_0 = LA(1);
            	                if ( (LA237_0 == LTERM) ) 
            	                {
            	                    alt237=1;
            	                }

            	            }
            	            switch (alt237) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM455 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4310); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM455, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop237;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop237: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4313);
            	        relationalExpressionNoIn456=relationalExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn456.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpressionNoIn, relationalExpressionNoIn, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 501:110: -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:501:113: ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop238;	/* break out of the loop */
            	    break;
                }
            }
            loop238: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
        if (stream_relationalExpressionNoIn != NULL) stream_relationalExpressionNoIn->free(stream_relationalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(78, equalityExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//Emerson.g:505:1: relationalOps : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) );
 */
static EmersonParser_relationalOps_return
relationalOps(pEmersonParser ctx)
{   
    EmersonParser_relationalOps_return retval;
    ANTLR3_UINT32 relationalOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal457;
    pANTLR3_COMMON_TOKEN    char_literal458;
    pANTLR3_COMMON_TOKEN    string_literal459;
    pANTLR3_COMMON_TOKEN    string_literal460;
    pANTLR3_COMMON_TOKEN    string_literal461;
    pANTLR3_COMMON_TOKEN    string_literal462;

    pANTLR3_BASE_TREE char_literal457_tree;
    pANTLR3_BASE_TREE char_literal458_tree;
    pANTLR3_BASE_TREE string_literal459_tree;
    pANTLR3_BASE_TREE string_literal460_tree;
    pANTLR3_BASE_TREE string_literal461_tree;
    pANTLR3_BASE_TREE string_literal462_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;

    /* Initialize rule variables
     */
    relationalOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(79)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal457       = NULL;
    char_literal458       = NULL;
    string_literal459       = NULL;
    string_literal460       = NULL;
    string_literal461       = NULL;
    string_literal462       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal457_tree   = NULL;
    char_literal458_tree   = NULL;
    string_literal459_tree   = NULL;
    string_literal460_tree   = NULL;
    string_literal461_tree   = NULL;
    string_literal462_tree   = NULL;

    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:506:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) )
            
            ANTLR3_UINT32 alt239;

            alt239=6;

            switch ( LA(1) ) 
            {
            case 182:
            	{
            		alt239=1;
            	}
                break;
            case 183:
            	{
            		alt239=2;
            	}
                break;
            case 184:
            	{
            		alt239=3;
            	}
                break;
            case 185:
            	{
            		alt239=4;
            	}
                break;
            case 186:
            	{
            		alt239=5;
            	}
                break;
            case 142:
            	{
            		alt239=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 239;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt239) 
            {
        	case 1:
        	    // .//Emerson.g:506:3: '<'
        	    {
        	        char_literal457 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_relationalOps4338); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal457, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 506:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:506:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:507:3: '>'
        	    {
        	        char_literal458 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_relationalOps4349); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal458, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 507:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:507:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:508:3: '<='
        	    {
        	        string_literal459 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_relationalOps4360); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal459, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 508:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:508:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:509:3: '>='
        	    {
        	        string_literal460 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_relationalOps4370); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal460, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 509:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:509:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:510:3: 'instanceof'
        	    {
        	        string_literal461 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_relationalOps4380); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, string_literal461, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 510:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:510:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:511:3: 'in'
        	    {
        	        string_literal462 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_relationalOps4390); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal462, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 511:16: -> ^( IN )
        	        	{
        	        	    // .//Emerson.g:511:19: ^( IN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IN, (pANTLR3_UINT8)"IN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_142 != NULL) stream_142->free(stream_142);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(79, relationalOps_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//Emerson.g:514:1: relationalExpression : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* ;
 */
static EmersonParser_relationalExpression_return
relationalExpression(pEmersonParser ctx)
{   
    EmersonParser_relationalExpression_return retval;
    ANTLR3_UINT32 relationalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM464;
    pANTLR3_COMMON_TOKEN    LTERM466;
    EmersonParser_shiftExpression_return shiftExpression463;
    #undef	RETURN_TYPE_shiftExpression463
    #define	RETURN_TYPE_shiftExpression463 EmersonParser_shiftExpression_return

    EmersonParser_relationalOps_return relationalOps465;
    #undef	RETURN_TYPE_relationalOps465
    #define	RETURN_TYPE_relationalOps465 EmersonParser_relationalOps_return

    EmersonParser_shiftExpression_return shiftExpression467;
    #undef	RETURN_TYPE_shiftExpression467
    #define	RETURN_TYPE_shiftExpression467 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM464_tree;
    pANTLR3_BASE_TREE LTERM466_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOps;
    /* Initialize rule variables
     */
    relationalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(80)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM464       = NULL;
    LTERM466       = NULL;
    shiftExpression463.tree = NULL;

    relationalOps465.tree = NULL;

    shiftExpression467.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM464_tree   = NULL;
    LTERM466_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }
    stream_relationalOps   = NULL;
    #define CREATE_stream_relationalOps  if (stream_relationalOps == NULL) {stream_relationalOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:515:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* )
        // .//Emerson.g:515:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
        {
            // .//Emerson.g:515:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:515:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4415);
                shiftExpression463=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression463.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 515:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:515:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*

            for (;;)
            {
                int alt242=2;
                alt242 = cdfa242.predict(ctx, RECOGNIZER, ISTREAM, &cdfa242);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt242) 
                {
            	case 1:
            	    // .//Emerson.g:515:42: ( LTERM )* relationalOps ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:515:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt240=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA240_0 = LA(1);
            	                if ( (LA240_0 == LTERM) ) 
            	                {
            	                    alt240=1;
            	                }

            	            }
            	            switch (alt240) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM464 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4423); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM464, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop240;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop240: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression4426);
            	        relationalOps465=relationalOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOps; stream_relationalOps->add(stream_relationalOps, relationalOps465.tree, NULL); }

            	        // .//Emerson.g:515:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt241=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA241_0 = LA(1);
            	                if ( (LA241_0 == LTERM) ) 
            	                {
            	                    alt241=1;
            	                }

            	            }
            	            switch (alt241) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM466 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4428); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM466, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop241;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop241: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4431);
            	        shiftExpression467=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression467.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : shiftExpression, relationalExpression, relationalOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 515:86: -> ^( relationalOps $relationalExpression shiftExpression )
            	        	{
            	        	    // .//Emerson.g:515:89: ^( relationalOps $relationalExpression shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOps == NULL ? NULL : stream_relationalOps->nextNode(stream_relationalOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop242;	/* break out of the loop */
            	    break;
                }
            }
            loop242: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
        if (stream_relationalOps != NULL) stream_relationalOps->free(stream_relationalOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(80, relationalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//Emerson.g:518:1: relationalOpsNoIn : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) );
 */
static EmersonParser_relationalOpsNoIn_return
relationalOpsNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalOpsNoIn_return retval;
    ANTLR3_UINT32 relationalOpsNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal468;
    pANTLR3_COMMON_TOKEN    char_literal469;
    pANTLR3_COMMON_TOKEN    string_literal470;
    pANTLR3_COMMON_TOKEN    string_literal471;
    pANTLR3_COMMON_TOKEN    string_literal472;

    pANTLR3_BASE_TREE char_literal468_tree;
    pANTLR3_BASE_TREE char_literal469_tree;
    pANTLR3_BASE_TREE string_literal470_tree;
    pANTLR3_BASE_TREE string_literal471_tree;
    pANTLR3_BASE_TREE string_literal472_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;

    /* Initialize rule variables
     */
    relationalOpsNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(81)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal468       = NULL;
    char_literal469       = NULL;
    string_literal470       = NULL;
    string_literal471       = NULL;
    string_literal472       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal468_tree   = NULL;
    char_literal469_tree   = NULL;
    string_literal470_tree   = NULL;
    string_literal471_tree   = NULL;
    string_literal472_tree   = NULL;

    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:519:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) )
            
            ANTLR3_UINT32 alt243;

            alt243=5;

            switch ( LA(1) ) 
            {
            case 182:
            	{
            		alt243=1;
            	}
                break;
            case 183:
            	{
            		alt243=2;
            	}
                break;
            case 184:
            	{
            		alt243=3;
            	}
                break;
            case 185:
            	{
            		alt243=4;
            	}
                break;
            case 186:
            	{
            		alt243=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 243;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt243) 
            {
        	case 1:
        	    // .//Emerson.g:519:3: '<'
        	    {
        	        char_literal468 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_relationalOpsNoIn4455); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal468, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 519:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:519:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:520:3: '>'
        	    {
        	        char_literal469 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_relationalOpsNoIn4466); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal469, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 520:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:520:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:521:3: '<='
        	    {
        	        string_literal470 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_relationalOpsNoIn4477); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal470, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 521:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:521:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:522:3: '>='
        	    {
        	        string_literal471 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_relationalOpsNoIn4487); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal471, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 522:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:522:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:523:3: 'instanceof'
        	    {
        	        string_literal472 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_relationalOpsNoIn4497); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, string_literal472, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 523:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:523:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_186 != NULL) stream_186->free(stream_186);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(81, relationalOpsNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//Emerson.g:526:1: relationalExpressionNoIn : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* ;
 */
static EmersonParser_relationalExpressionNoIn_return
relationalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalExpressionNoIn_return retval;
    ANTLR3_UINT32 relationalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM474;
    pANTLR3_COMMON_TOKEN    LTERM476;
    EmersonParser_shiftExpression_return shiftExpression473;
    #undef	RETURN_TYPE_shiftExpression473
    #define	RETURN_TYPE_shiftExpression473 EmersonParser_shiftExpression_return

    EmersonParser_relationalOpsNoIn_return relationalOpsNoIn475;
    #undef	RETURN_TYPE_relationalOpsNoIn475
    #define	RETURN_TYPE_relationalOpsNoIn475 EmersonParser_relationalOpsNoIn_return

    EmersonParser_shiftExpression_return shiftExpression477;
    #undef	RETURN_TYPE_shiftExpression477
    #define	RETURN_TYPE_shiftExpression477 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM474_tree;
    pANTLR3_BASE_TREE LTERM476_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOpsNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    /* Initialize rule variables
     */
    relationalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(82)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM474       = NULL;
    LTERM476       = NULL;
    shiftExpression473.tree = NULL;

    relationalOpsNoIn475.tree = NULL;

    shiftExpression477.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM474_tree   = NULL;
    LTERM476_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalOpsNoIn   = NULL;
    #define CREATE_stream_relationalOpsNoIn  if (stream_relationalOpsNoIn == NULL) {stream_relationalOpsNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOpsNoIn"); }
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:527:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* )
        // .//Emerson.g:527:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
        {
            // .//Emerson.g:527:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:527:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4514);
                shiftExpression473=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression473.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 527:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:527:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*

            for (;;)
            {
                int alt246=2;
                alt246 = cdfa246.predict(ctx, RECOGNIZER, ISTREAM, &cdfa246);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt246) 
                {
            	case 1:
            	    // .//Emerson.g:527:42: ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:527:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt244=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA244_0 = LA(1);
            	                if ( (LA244_0 == LTERM) ) 
            	                {
            	                    alt244=1;
            	                }

            	            }
            	            switch (alt244) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM474 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4522); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM474, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop244;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop244: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4525);
            	        relationalOpsNoIn475=relationalOpsNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOpsNoIn; stream_relationalOpsNoIn->add(stream_relationalOpsNoIn, relationalOpsNoIn475.tree, NULL); }

            	        // .//Emerson.g:527:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt245=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA245_0 = LA(1);
            	                if ( (LA245_0 == LTERM) ) 
            	                {
            	                    alt245=1;
            	                }

            	            }
            	            switch (alt245) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM476 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4527); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM476, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop245;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop245: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4530);
            	        shiftExpression477=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression477.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpressionNoIn, shiftExpression, relationalOpsNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 527:90: -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	{
            	        	    // .//Emerson.g:527:93: ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOpsNoIn == NULL ? NULL : stream_relationalOpsNoIn->nextNode(stream_relationalOpsNoIn), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop246;	/* break out of the loop */
            	    break;
                }
            }
            loop246: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalOpsNoIn != NULL) stream_relationalOpsNoIn->free(stream_relationalOpsNoIn);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(82, relationalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start shiftOps
 * .//Emerson.g:530:1: shiftOps : ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) );
 */
static EmersonParser_shiftOps_return
shiftOps(pEmersonParser ctx)
{   
    EmersonParser_shiftOps_return retval;
    ANTLR3_UINT32 shiftOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal478;
    pANTLR3_COMMON_TOKEN    string_literal479;
    pANTLR3_COMMON_TOKEN    string_literal480;

    pANTLR3_BASE_TREE string_literal478_tree;
    pANTLR3_BASE_TREE string_literal479_tree;
    pANTLR3_BASE_TREE string_literal480_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;

    /* Initialize rule variables
     */
    shiftOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(83)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal478       = NULL;
    string_literal479       = NULL;
    string_literal480       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal478_tree   = NULL;
    string_literal479_tree   = NULL;
    string_literal480_tree   = NULL;

    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:531:1: ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) )
            
            ANTLR3_UINT32 alt247;

            alt247=3;

            switch ( LA(1) ) 
            {
            case 187:
            	{
            		alt247=1;
            	}
                break;
            case 188:
            	{
            		alt247=2;
            	}
                break;
            case 189:
            	{
            		alt247=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 247;
                EXCEPTION->state        = 0;


                goto ruleshiftOpsEx;
            }

            switch (alt247) 
            {
        	case 1:
        	    // .//Emerson.g:531:2: '<<'
        	    {
        	        string_literal478 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_shiftOps4553); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, string_literal478, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 531:7: -> ^( LEFT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:531:10: ^( LEFT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT, (pANTLR3_UINT8)"LEFT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:532:3: '>>'
        	    {
        	        string_literal479 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_shiftOps4563); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, string_literal479, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 532:7: -> ^( RIGHT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:532:10: ^( RIGHT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT, (pANTLR3_UINT8)"RIGHT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:533:3: '>>>'
        	    {
        	        string_literal480 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_shiftOps4572); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, string_literal480, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 533:9: -> ^( TRIPLE_SHIFT )
        	        	{
        	        	    // .//Emerson.g:533:12: ^( TRIPLE_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT, (pANTLR3_UINT8)"TRIPLE_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftOpsEx; /* Prevent compiler warnings */
    ruleshiftOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_187 != NULL) stream_187->free(stream_187);
        if (stream_189 != NULL) stream_189->free(stream_189);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(83, shiftOps_StartIndex); }
    return retval;
}
/* $ANTLR end shiftOps */

/** 
 * $ANTLR start shiftExpression
 * .//Emerson.g:536:1: shiftExpression : ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* ;
 */
static EmersonParser_shiftExpression_return
shiftExpression(pEmersonParser ctx)
{   
    EmersonParser_shiftExpression_return retval;
    ANTLR3_UINT32 shiftExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM482;
    pANTLR3_COMMON_TOKEN    LTERM484;
    EmersonParser_additiveExpression_return additiveExpression481;
    #undef	RETURN_TYPE_additiveExpression481
    #define	RETURN_TYPE_additiveExpression481 EmersonParser_additiveExpression_return

    EmersonParser_shiftOps_return shiftOps483;
    #undef	RETURN_TYPE_shiftOps483
    #define	RETURN_TYPE_shiftOps483 EmersonParser_shiftOps_return

    EmersonParser_additiveExpression_return additiveExpression485;
    #undef	RETURN_TYPE_additiveExpression485
    #define	RETURN_TYPE_additiveExpression485 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM482_tree;
    pANTLR3_BASE_TREE LTERM484_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    /* Initialize rule variables
     */
    shiftExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(84)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM482       = NULL;
    LTERM484       = NULL;
    additiveExpression481.tree = NULL;

    shiftOps483.tree = NULL;

    additiveExpression485.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM482_tree   = NULL;
    LTERM484_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftOps   = NULL;
    #define CREATE_stream_shiftOps  if (stream_shiftOps == NULL) {stream_shiftOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftOps"); }
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:537:2: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* )
        // .//Emerson.g:537:4: ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
        {
            // .//Emerson.g:537:4: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:537:5: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4589);
                additiveExpression481=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression481.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 537:24: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:537:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*

            for (;;)
            {
                int alt250=2;
                alt250 = cdfa250.predict(ctx, RECOGNIZER, ISTREAM, &cdfa250);
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt250) 
                {
            	case 1:
            	    // .//Emerson.g:537:47: ( LTERM )* shiftOps ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:537:47: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt248=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA248_0 = LA(1);
            	                if ( (LA248_0 == LTERM) ) 
            	                {
            	                    alt248=1;
            	                }

            	            }
            	            switch (alt248) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM482 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4596); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM482, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop248;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop248: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftOps_in_shiftExpression4599);
            	        shiftOps483=shiftOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftOps; stream_shiftOps->add(stream_shiftOps, shiftOps483.tree, NULL); }

            	        // .//Emerson.g:537:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt249=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA249_0 = LA(1);
            	                if ( (LA249_0 == LTERM) ) 
            	                {
            	                    alt249=1;
            	                }

            	            }
            	            switch (alt249) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM484 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4601); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM484, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop249;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop249: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4604);
            	        additiveExpression485=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression485.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : shiftExpression, additiveExpression, shiftOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 537:89: -> ^( shiftOps $shiftExpression additiveExpression )
            	        	{
            	        	    // .//Emerson.g:537:92: ^( shiftOps $shiftExpression additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_shiftOps == NULL ? NULL : stream_shiftOps->nextNode(stream_shiftOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop250;	/* break out of the loop */
            	    break;
                }
            }
            loop250: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftExpressionEx; /* Prevent compiler warnings */
    ruleshiftExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftOps != NULL) stream_shiftOps->free(stream_shiftOps);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(84, shiftExpression_StartIndex); }
    return retval;
}
/* $ANTLR end shiftExpression */

/** 
 * $ANTLR start addOps
 * .//Emerson.g:541:1: addOps : ( '+' -> ^( ADD ) | '-' -> ^( SUB ) );
 */
static EmersonParser_addOps_return
addOps(pEmersonParser ctx)
{   
    EmersonParser_addOps_return retval;
    ANTLR3_UINT32 addOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal486;
    pANTLR3_COMMON_TOKEN    char_literal487;

    pANTLR3_BASE_TREE char_literal486_tree;
    pANTLR3_BASE_TREE char_literal487_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;

    /* Initialize rule variables
     */
    addOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(85)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal486       = NULL;
    char_literal487       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal486_tree   = NULL;
    char_literal487_tree   = NULL;

    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:542:1: ( '+' -> ^( ADD ) | '-' -> ^( SUB ) )
            
            ANTLR3_UINT32 alt251;

            alt251=2;


            {
                int LA251_0 = LA(1);
                if ( (LA251_0 == 190) ) 
                {
                    alt251=1;
                }
                else if ( (LA251_0 == 191) ) 
                {
                    alt251=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 251;
                    EXCEPTION->state        = 0;


                    goto ruleaddOpsEx;
                }
            }
            switch (alt251) 
            {
        	case 1:
        	    // .//Emerson.g:542:3: '+'
        	    {
        	        char_literal486 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_addOps4630); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal486, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 542:7: -> ^( ADD )
        	        	{
        	        	    // .//Emerson.g:542:10: ^( ADD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:543:3: '-'
        	    {
        	        char_literal487 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_addOps4640); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal487, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 543:7: -> ^( SUB )
        	        	{
        	        	    // .//Emerson.g:543:10: ^( SUB )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleaddOpsEx; /* Prevent compiler warnings */
    ruleaddOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(85, addOps_StartIndex); }
    return retval;
}
/* $ANTLR end addOps */

/** 
 * $ANTLR start additiveExpression
 * .//Emerson.g:547:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* ;
 */
static EmersonParser_additiveExpression_return
additiveExpression(pEmersonParser ctx)
{   
    EmersonParser_additiveExpression_return retval;
    ANTLR3_UINT32 additiveExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM489;
    pANTLR3_COMMON_TOKEN    LTERM491;
    EmersonParser_multiplicativeExpression_return multiplicativeExpression488;
    #undef	RETURN_TYPE_multiplicativeExpression488
    #define	RETURN_TYPE_multiplicativeExpression488 EmersonParser_multiplicativeExpression_return

    EmersonParser_addOps_return addOps490;
    #undef	RETURN_TYPE_addOps490
    #define	RETURN_TYPE_addOps490 EmersonParser_addOps_return

    EmersonParser_multiplicativeExpression_return multiplicativeExpression492;
    #undef	RETURN_TYPE_multiplicativeExpression492
    #define	RETURN_TYPE_multiplicativeExpression492 EmersonParser_multiplicativeExpression_return

    pANTLR3_BASE_TREE LTERM489_tree;
    pANTLR3_BASE_TREE LTERM491_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_addOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicativeExpression;
    /* Initialize rule variables
     */
    additiveExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(86)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM489       = NULL;
    LTERM491       = NULL;
    multiplicativeExpression488.tree = NULL;

    addOps490.tree = NULL;

    multiplicativeExpression492.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM489_tree   = NULL;
    LTERM491_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_addOps   = NULL;
    #define CREATE_stream_addOps  if (stream_addOps == NULL) {stream_addOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule addOps"); }
    stream_multiplicativeExpression   = NULL;
    #define CREATE_stream_multiplicativeExpression  if (stream_multiplicativeExpression == NULL) {stream_multiplicativeExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicativeExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:548:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* )
        // .//Emerson.g:548:4: ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
        {
            // .//Emerson.g:548:4: ( multiplicativeExpression -> multiplicativeExpression )
            // .//Emerson.g:548:5: multiplicativeExpression
            {
                FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4658);
                multiplicativeExpression488=multiplicativeExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression488.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : multiplicativeExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 548:30: -> multiplicativeExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:548:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*

            for (;;)
            {
                int alt254=2;
                alt254 = cdfa254.predict(ctx, RECOGNIZER, ISTREAM, &cdfa254);
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt254) 
                {
            	case 1:
            	    // .//Emerson.g:548:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
            	    {

            	        // .//Emerson.g:548:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt252=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA252_0 = LA(1);
            	                if ( (LA252_0 == LTERM) ) 
            	                {
            	                    alt252=1;
            	                }

            	            }
            	            switch (alt252) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM489 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4665); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM489, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop252;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop252: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_addOps_in_additiveExpression4668);
            	        addOps490=addOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_addOps; stream_addOps->add(stream_addOps, addOps490.tree, NULL); }

            	        // .//Emerson.g:548:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt253=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA253_0 = LA(1);
            	                if ( (LA253_0 == LTERM) ) 
            	                {
            	                    alt253=1;
            	                }

            	            }
            	            switch (alt253) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM491 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4670); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM491, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop253;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop253: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4673);
            	        multiplicativeExpression492=multiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression492.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : addOps, multiplicativeExpression, additiveExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 548:105: -> ^( addOps $additiveExpression multiplicativeExpression )
            	        	{
            	        	    // .//Emerson.g:548:108: ^( addOps $additiveExpression multiplicativeExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_addOps == NULL ? NULL : stream_addOps->nextNode(stream_addOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop254;	/* break out of the loop */
            	    break;
                }
            }
            loop254: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_addOps != NULL) stream_addOps->free(stream_addOps);
        if (stream_multiplicativeExpression != NULL) stream_multiplicativeExpression->free(stream_multiplicativeExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(86, additiveExpression_StartIndex); }
    return retval;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multOps
 * .//Emerson.g:551:1: multOps : ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) );
 */
static EmersonParser_multOps_return
multOps(pEmersonParser ctx)
{   
    EmersonParser_multOps_return retval;
    ANTLR3_UINT32 multOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal493;
    pANTLR3_COMMON_TOKEN    char_literal494;
    pANTLR3_COMMON_TOKEN    char_literal495;

    pANTLR3_BASE_TREE char_literal493_tree;
    pANTLR3_BASE_TREE char_literal494_tree;
    pANTLR3_BASE_TREE char_literal495_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    multOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(87)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal493       = NULL;
    char_literal494       = NULL;
    char_literal495       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal493_tree   = NULL;
    char_literal494_tree   = NULL;
    char_literal495_tree   = NULL;

    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:552:1: ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) )
            
            ANTLR3_UINT32 alt255;

            alt255=3;

            switch ( LA(1) ) 
            {
            case 192:
            	{
            		alt255=1;
            	}
                break;
            case 193:
            	{
            		alt255=2;
            	}
                break;
            case 194:
            	{
            		alt255=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 255;
                EXCEPTION->state        = 0;


                goto rulemultOpsEx;
            }

            switch (alt255) 
            {
        	case 1:
        	    // .//Emerson.g:552:3: '*'
        	    {
        	        char_literal493 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_multOps4698); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal493, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 552:7: -> ^( MULT )
        	        	{
        	        	    // .//Emerson.g:552:10: ^( MULT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT, (pANTLR3_UINT8)"MULT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:553:3: '/'
        	    {
        	        char_literal494 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_multOps4708); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal494, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 553:7: -> ^( DIV )
        	        	{
        	        	    // .//Emerson.g:553:10: ^( DIV )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:554:3: '%'
        	    {
        	        char_literal495 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_multOps4718); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal495, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 554:7: -> ^( MOD )
        	        	{
        	        	    // .//Emerson.g:554:10: ^( MOD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultOpsEx; /* Prevent compiler warnings */
    rulemultOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(87, multOps_StartIndex); }
    return retval;
}
/* $ANTLR end multOps */

/** 
 * $ANTLR start multiplicativeExpression
 * .//Emerson.g:557:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* ;
 */
static EmersonParser_multiplicativeExpression_return
multiplicativeExpression(pEmersonParser ctx)
{   
    EmersonParser_multiplicativeExpression_return retval;
    ANTLR3_UINT32 multiplicativeExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM497;
    pANTLR3_COMMON_TOKEN    LTERM499;
    EmersonParser_unaryExpression_return unaryExpression496;
    #undef	RETURN_TYPE_unaryExpression496
    #define	RETURN_TYPE_unaryExpression496 EmersonParser_unaryExpression_return

    EmersonParser_multOps_return multOps498;
    #undef	RETURN_TYPE_multOps498
    #define	RETURN_TYPE_multOps498 EmersonParser_multOps_return

    EmersonParser_unaryExpression_return unaryExpression500;
    #undef	RETURN_TYPE_unaryExpression500
    #define	RETURN_TYPE_unaryExpression500 EmersonParser_unaryExpression_return

    pANTLR3_BASE_TREE LTERM497_tree;
    pANTLR3_BASE_TREE LTERM499_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    /* Initialize rule variables
     */
    multiplicativeExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(88)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM497       = NULL;
    LTERM499       = NULL;
    unaryExpression496.tree = NULL;

    multOps498.tree = NULL;

    unaryExpression500.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM497_tree   = NULL;
    LTERM499_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_multOps   = NULL;
    #define CREATE_stream_multOps  if (stream_multOps == NULL) {stream_multOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multOps"); }
    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:558:2: ( ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* )
        // .//Emerson.g:558:4: ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
        {
            // .//Emerson.g:558:4: ( unaryExpression -> unaryExpression )
            // .//Emerson.g:558:5: unaryExpression
            {
                FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4735);
                unaryExpression496=unaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression496.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : unaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 558:22: -> unaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:558:42: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*

            for (;;)
            {
                int alt258=2;
                alt258 = cdfa258.predict(ctx, RECOGNIZER, ISTREAM, &cdfa258);
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt258) 
                {
            	case 1:
            	    // .//Emerson.g:558:43: ( LTERM )* multOps ( LTERM )* unaryExpression
            	    {

            	        // .//Emerson.g:558:43: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt256=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA256_0 = LA(1);
            	                if ( (LA256_0 == LTERM) ) 
            	                {
            	                    alt256=1;
            	                }

            	            }
            	            switch (alt256) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM497 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4744); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM497, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop256;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop256: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multOps_in_multiplicativeExpression4747);
            	        multOps498=multOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multOps; stream_multOps->add(stream_multOps, multOps498.tree, NULL); }

            	        // .//Emerson.g:558:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt257=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA257_0 = LA(1);
            	                if ( (LA257_0 == LTERM) ) 
            	                {
            	                    alt257=1;
            	                }

            	            }
            	            switch (alt257) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM499 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4749); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM499, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop257;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop257: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4752);
            	        unaryExpression500=unaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression500.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : multOps, multiplicativeExpression, unaryExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 558:81: -> ^( multOps $multiplicativeExpression unaryExpression )
            	        	{
            	        	    // .//Emerson.g:558:84: ^( multOps $multiplicativeExpression unaryExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_multOps == NULL ? NULL : stream_multOps->nextNode(stream_multOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop258;	/* break out of the loop */
            	    break;
                }
            }
            loop258: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_multOps != NULL) stream_multOps->free(stream_multOps);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(88, multiplicativeExpression_StartIndex); }
    return retval;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start postfixExpression
 * .//Emerson.g:562:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static EmersonParser_postfixExpression_return
postfixExpression(pEmersonParser ctx)
{   
    EmersonParser_postfixExpression_return retval;
    ANTLR3_UINT32 postfixExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal502;
    pANTLR3_COMMON_TOKEN    string_literal504;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression501;
    #undef	RETURN_TYPE_leftHandSideExpression501
    #define	RETURN_TYPE_leftHandSideExpression501 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression503;
    #undef	RETURN_TYPE_leftHandSideExpression503
    #define	RETURN_TYPE_leftHandSideExpression503 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression505;
    #undef	RETURN_TYPE_leftHandSideExpression505
    #define	RETURN_TYPE_leftHandSideExpression505 EmersonParser_leftHandSideExpression_return

    pANTLR3_BASE_TREE string_literal502_tree;
    pANTLR3_BASE_TREE string_literal504_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    postfixExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(89)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal502       = NULL;
    string_literal504       = NULL;
    leftHandSideExpression501.tree = NULL;

    leftHandSideExpression503.tree = NULL;

    leftHandSideExpression505.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal502_tree   = NULL;
    string_literal504_tree   = NULL;

    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:563:2: ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression )
            
            ANTLR3_UINT32 alt259;

            alt259=3;

            alt259 = cdfa259.predict(ctx, RECOGNIZER, ISTREAM, &cdfa259);
            if  (HASEXCEPTION())
            {
                goto rulepostfixExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt259) 
            {
        	case 1:
        	    // .//Emerson.g:563:4: leftHandSideExpression '--'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression4777);
        	        leftHandSideExpression501=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression501.tree, NULL); }
        	        string_literal502 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_postfixExpression4779); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal502, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 563:32: -> ^( MINUSMINUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:563:35: ^( MINUSMINUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:564:4: leftHandSideExpression '++'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression4793);
        	        leftHandSideExpression503=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression503.tree, NULL); }
        	        string_literal504 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_postfixExpression4795); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, string_literal504, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 564:32: -> ^( PLUSPLUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:564:35: ^( PLUSPLUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:565:3: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression4807);
        	        leftHandSideExpression505=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression505.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 565:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_196 != NULL) stream_196->free(stream_196);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(89, postfixExpression_StartIndex); }
    return retval;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start unaryOps
 * .//Emerson.g:570:1: unaryOps : ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) );
 */
static EmersonParser_unaryOps_return
unaryOps(pEmersonParser ctx)
{   
    EmersonParser_unaryOps_return retval;
    ANTLR3_UINT32 unaryOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal506;
    pANTLR3_COMMON_TOKEN    string_literal507;
    pANTLR3_COMMON_TOKEN    string_literal508;
    pANTLR3_COMMON_TOKEN    string_literal509;
    pANTLR3_COMMON_TOKEN    string_literal510;
    pANTLR3_COMMON_TOKEN    char_literal511;
    pANTLR3_COMMON_TOKEN    char_literal512;
    pANTLR3_COMMON_TOKEN    char_literal513;
    pANTLR3_COMMON_TOKEN    char_literal514;

    pANTLR3_BASE_TREE string_literal506_tree;
    pANTLR3_BASE_TREE string_literal507_tree;
    pANTLR3_BASE_TREE string_literal508_tree;
    pANTLR3_BASE_TREE string_literal509_tree;
    pANTLR3_BASE_TREE string_literal510_tree;
    pANTLR3_BASE_TREE char_literal511_tree;
    pANTLR3_BASE_TREE char_literal512_tree;
    pANTLR3_BASE_TREE char_literal513_tree;
    pANTLR3_BASE_TREE char_literal514_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_200;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_201;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;

    /* Initialize rule variables
     */
    unaryOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(90)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal506       = NULL;
    string_literal507       = NULL;
    string_literal508       = NULL;
    string_literal509       = NULL;
    string_literal510       = NULL;
    char_literal511       = NULL;
    char_literal512       = NULL;
    char_literal513       = NULL;
    char_literal514       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal506_tree   = NULL;
    string_literal507_tree   = NULL;
    string_literal508_tree   = NULL;
    string_literal509_tree   = NULL;
    string_literal510_tree   = NULL;
    char_literal511_tree   = NULL;
    char_literal512_tree   = NULL;
    char_literal513_tree   = NULL;
    char_literal514_tree   = NULL;

    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 
    stream_200   = NULL;
    #define CREATE_stream_200  if (stream_200 == NULL) {stream_200 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 200"); } 
    stream_201   = NULL;
    #define CREATE_stream_201  if (stream_201 == NULL) {stream_201 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 201"); } 
    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:571:1: ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) )
            
            ANTLR3_UINT32 alt260;

            alt260=9;

            switch ( LA(1) ) 
            {
            case 197:
            	{
            		alt260=1;
            	}
                break;
            case 198:
            	{
            		alt260=2;
            	}
                break;
            case 199:
            	{
            		alt260=3;
            	}
                break;
            case 196:
            	{
            		alt260=4;
            	}
                break;
            case 195:
            	{
            		alt260=5;
            	}
                break;
            case 190:
            	{
            		alt260=6;
            	}
                break;
            case 191:
            	{
            		alt260=7;
            	}
                break;
            case 200:
            	{
            		alt260=8;
            	}
                break;
            case 201:
            	{
            		alt260=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 260;
                EXCEPTION->state        = 0;


                goto ruleunaryOpsEx;
            }

            switch (alt260) 
            {
        	case 1:
        	    // .//Emerson.g:571:2: 'delete'
        	    {
        	        string_literal506 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_unaryOps4824); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, string_literal506, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 571:11: -> ^( DELETE )
        	        	{
        	        	    // .//Emerson.g:571:14: ^( DELETE )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELETE, (pANTLR3_UINT8)"DELETE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:572:3: 'void'
        	    {
        	        string_literal507 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_unaryOps4834); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, string_literal507, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 572:10: -> ^( VOID )
        	        	{
        	        	    // .//Emerson.g:572:13: ^( VOID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VOID, (pANTLR3_UINT8)"VOID"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:573:3: 'typeof'
        	    {
        	        string_literal508 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_unaryOps4844); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, string_literal508, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 573:12: -> ^( TYPEOF )
        	        	{
        	        	    // .//Emerson.g:573:15: ^( TYPEOF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TYPEOF, (pANTLR3_UINT8)"TYPEOF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:574:3: '++'
        	    {
        	        string_literal509 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_unaryOps4854); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, string_literal509, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 574:9: -> ^( PLUSPLUS )
        	        	{
        	        	    // .//Emerson.g:574:12: ^( PLUSPLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:575:3: '--'
        	    {
        	        string_literal510 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_unaryOps4865); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal510, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 575:9: -> ^( MINUSMINUS )
        	        	{
        	        	    // .//Emerson.g:575:12: ^( MINUSMINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:576:3: '+'
        	    {
        	        char_literal511 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_unaryOps4876); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal511, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 576:9: -> ^( UNARY_PLUS )
        	        	{
        	        	    // .//Emerson.g:576:12: ^( UNARY_PLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_PLUS, (pANTLR3_UINT8)"UNARY_PLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:577:3: '-'
        	    {
        	        char_literal512 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_unaryOps4888); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal512, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 577:9: -> ^( UNARY_MINUS )
        	        	{
        	        	    // .//Emerson.g:577:12: ^( UNARY_MINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_MINUS, (pANTLR3_UINT8)"UNARY_MINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:578:3: '~'
        	    {
        	        char_literal513 = (pANTLR3_COMMON_TOKEN) MATCHT(200, &FOLLOW_200_in_unaryOps4900); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_200; stream_200->add(stream_200, char_literal513, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 578:9: -> ^( COMPLEMENT )
        	        	{
        	        	    // .//Emerson.g:578:12: ^( COMPLEMENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMPLEMENT, (pANTLR3_UINT8)"COMPLEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:579:3: '!'
        	    {
        	        char_literal514 = (pANTLR3_COMMON_TOKEN) MATCHT(201, &FOLLOW_201_in_unaryOps4912); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_201; stream_201->add(stream_201, char_literal514, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 579:9: -> ^( NOT )
        	        	{
        	        	    // .//Emerson.g:579:12: ^( NOT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_199 != NULL) stream_199->free(stream_199);
        if (stream_200 != NULL) stream_200->free(stream_200);
        if (stream_201 != NULL) stream_201->free(stream_201);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_196 != NULL) stream_196->free(stream_196);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(90, unaryOps_StartIndex); }
    return retval;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//Emerson.g:583:1: unaryExpression : ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) );
 */
static EmersonParser_unaryExpression_return
unaryExpression(pEmersonParser ctx)
{   
    EmersonParser_unaryExpression_return retval;
    ANTLR3_UINT32 unaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_unaryExpression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e EmersonParser_unaryExpression_return

    EmersonParser_postfixExpression_return postfixExpression515;
    #undef	RETURN_TYPE_postfixExpression515
    #define	RETURN_TYPE_postfixExpression515 EmersonParser_postfixExpression_return

    EmersonParser_unaryOps_return unaryOps516;
    #undef	RETURN_TYPE_unaryOps516
    #define	RETURN_TYPE_unaryOps516 EmersonParser_unaryOps_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_postfixExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryOps;
    /* Initialize rule variables
     */
    unaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(91)) )
    {
    	retval.start = 0;

        return retval; 
    }
    e.tree = NULL;

    postfixExpression515.tree = NULL;

    unaryOps516.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }
    stream_postfixExpression   = NULL;
    #define CREATE_stream_postfixExpression  if (stream_postfixExpression == NULL) {stream_postfixExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule postfixExpression"); }
    stream_unaryOps   = NULL;
    #define CREATE_stream_unaryOps  if (stream_unaryOps == NULL) {stream_unaryOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryOps"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:584:2: ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) )
            
            ANTLR3_UINT32 alt261;

            alt261=2;


            {
                int LA261_0 = LA(1);
                if ( (((LA261_0 >= Identifier) && (LA261_0 <= NumericLiteral)) || ((LA261_0 >= 127) && (LA261_0 <= 128)) || LA261_0 == 131 || ((LA261_0 >= 157) && (LA261_0 <= 158)) || ((LA261_0 >= 202) && (LA261_0 <= 206))) ) 
                {
                    alt261=1;
                }
                else if ( (((LA261_0 >= 190) && (LA261_0 <= 191)) || ((LA261_0 >= 195) && (LA261_0 <= 201))) ) 
                {
                    alt261=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 261;
                    EXCEPTION->state        = 0;


                    goto ruleunaryExpressionEx;
                }
            }
            switch (alt261) 
            {
        	case 1:
        	    // .//Emerson.g:584:4: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression4931);
        	        postfixExpression515=postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_postfixExpression; stream_postfixExpression->add(stream_postfixExpression, postfixExpression515.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : postfixExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 584:22: -> postfixExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_postfixExpression == NULL ? NULL : stream_postfixExpression->nextTree(stream_postfixExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:585:4: unaryOps e= unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryOps_in_unaryExpression4940);
        	        unaryOps516=unaryOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryOps; stream_unaryOps->add(stream_unaryOps, unaryOps516.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression4944);
        	        e=unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : unaryOps, e
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 585:31: -> ^( unaryOps $e)
        	        	{
        	        	    // .//Emerson.g:585:34: ^( unaryOps $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_unaryOps == NULL ? NULL : stream_unaryOps->nextNode(stream_unaryOps), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
        if (stream_postfixExpression != NULL) stream_postfixExpression->free(stream_postfixExpression);
        if (stream_unaryOps != NULL) stream_unaryOps->free(stream_unaryOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(91, unaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start primaryExpression
 * .//Emerson.g:589:1: primaryExpression : ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static EmersonParser_primaryExpression_return
primaryExpression(pEmersonParser ctx)
{   
    EmersonParser_primaryExpression_return retval;
    ANTLR3_UINT32 primaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal517;
    pANTLR3_COMMON_TOKEN    Identifier518;
    pANTLR3_COMMON_TOKEN    char_literal523;
    pANTLR3_COMMON_TOKEN    LTERM524;
    pANTLR3_COMMON_TOKEN    LTERM526;
    pANTLR3_COMMON_TOKEN    char_literal527;
    EmersonParser_dollarExpression_return dollarExpression519;
    #undef	RETURN_TYPE_dollarExpression519
    #define	RETURN_TYPE_dollarExpression519 EmersonParser_dollarExpression_return

    EmersonParser_literal_return literal520;
    #undef	RETURN_TYPE_literal520
    #define	RETURN_TYPE_literal520 EmersonParser_literal_return

    EmersonParser_arrayLiteral_return arrayLiteral521;
    #undef	RETURN_TYPE_arrayLiteral521
    #define	RETURN_TYPE_arrayLiteral521 EmersonParser_arrayLiteral_return

    EmersonParser_objectLiteral_return objectLiteral522;
    #undef	RETURN_TYPE_objectLiteral522
    #define	RETURN_TYPE_objectLiteral522 EmersonParser_objectLiteral_return

    EmersonParser_expression_return expression525;
    #undef	RETURN_TYPE_expression525
    #define	RETURN_TYPE_expression525 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal517_tree;
    pANTLR3_BASE_TREE Identifier518_tree;
    pANTLR3_BASE_TREE char_literal523_tree;
    pANTLR3_BASE_TREE LTERM524_tree;
    pANTLR3_BASE_TREE LTERM526_tree;
    pANTLR3_BASE_TREE char_literal527_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    primaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(92)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal517       = NULL;
    Identifier518       = NULL;
    char_literal523       = NULL;
    LTERM524       = NULL;
    LTERM526       = NULL;
    char_literal527       = NULL;
    dollarExpression519.tree = NULL;

    literal520.tree = NULL;

    arrayLiteral521.tree = NULL;

    objectLiteral522.tree = NULL;

    expression525.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal517_tree   = NULL;
    Identifier518_tree   = NULL;
    char_literal523_tree   = NULL;
    LTERM524_tree   = NULL;
    LTERM526_tree   = NULL;
    char_literal527_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:590:2: ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) )
            
            ANTLR3_UINT32 alt264;

            alt264=7;

            switch ( LA(1) ) 
            {
            case 202:
            	{
            		alt264=1;
            	}
                break;
            case Identifier:
            	{
            		alt264=2;
            	}
                break;
            case 203:
            	{
            		alt264=3;
            	}
                break;
            case StringLiteral:
            case NumericLiteral:
            case 204:
            case 205:
            case 206:
            	{
            		alt264=4;
            	}
                break;
            case 158:
            	{
            		alt264=5;
            	}
                break;
            case 131:
            	{
            		alt264=6;
            	}
                break;
            case 128:
            	{
            		alt264=7;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 264;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt264) 
            {
        	case 1:
        	    // .//Emerson.g:590:4: 'this'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal517 = (pANTLR3_COMMON_TOKEN) MATCHT(202, &FOLLOW_202_in_primaryExpression4966); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal517_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal517));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal517_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:591:4: Identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Identifier518 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression4971); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Identifier518_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Identifier518));
        	        ADAPTOR->addChild(ADAPTOR, root_0, Identifier518_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:592:11: dollarExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression4983);
        	        dollarExpression519=dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, dollarExpression519.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:593:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression4988);
        	        literal520=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal520.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:594:4: arrayLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression4993);
        	        arrayLiteral521=arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arrayLiteral521.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:595:4: objectLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression4998);
        	        objectLiteral522=objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, objectLiteral522.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:596:4: '(' ( LTERM )* expression ( LTERM )* ')'
        	    {
        	        char_literal523 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_primaryExpression5003); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal523, NULL); }


        	        // .//Emerson.g:596:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt262=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA262_0 = LA(1);
        	                if ( (LA262_0 == LTERM) ) 
        	                {
        	                    alt262=1;
        	                }

        	            }
        	            switch (alt262) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM524 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5005); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM524, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop262;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop262: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression5008);
        	        expression525=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression525.tree, NULL); }

        	        // .//Emerson.g:596:26: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt263=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA263_0 = LA(1);
        	                if ( (LA263_0 == LTERM) ) 
        	                {
        	                    alt263=1;
        	                }

        	            }
        	            switch (alt263) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM526 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5010); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM526, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop263;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop263: ; /* Jump out to here if this rule does not match */

        	        char_literal527 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_primaryExpression5013); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal527, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 596:37: -> ^( PAREN expression )
        	        	{
        	        	    // .//Emerson.g:596:40: ^( PAREN expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAREN, (pANTLR3_UINT8)"PAREN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(92, primaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start dollarExpression
 * .//Emerson.g:599:1: dollarExpression : '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static EmersonParser_dollarExpression_return
dollarExpression(pEmersonParser ctx)
{   
    EmersonParser_dollarExpression_return retval;
    ANTLR3_UINT32 dollarExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal528;
    pANTLR3_COMMON_TOKEN    LTERM529;
    pANTLR3_COMMON_TOKEN    Identifier530;
    pANTLR3_COMMON_TOKEN    LTERM531;
    pANTLR3_COMMON_TOKEN    char_literal532;

    pANTLR3_BASE_TREE char_literal528_tree;
    pANTLR3_BASE_TREE LTERM529_tree;
    pANTLR3_BASE_TREE Identifier530_tree;
    pANTLR3_BASE_TREE LTERM531_tree;
    pANTLR3_BASE_TREE char_literal532_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_203;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    dollarExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(93)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal528       = NULL;
    LTERM529       = NULL;
    Identifier530       = NULL;
    LTERM531       = NULL;
    char_literal532       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal528_tree   = NULL;
    LTERM529_tree   = NULL;
    Identifier530_tree   = NULL;
    LTERM531_tree   = NULL;
    char_literal532_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_203   = NULL;
    #define CREATE_stream_203  if (stream_203 == NULL) {stream_203 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 203"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:600:9: ( '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) )
        // .//Emerson.g:600:11: '`' ( LTERM )* Identifier ( LTERM )* '`'
        {
            char_literal528 = (pANTLR3_COMMON_TOKEN) MATCHT(203, &FOLLOW_203_in_dollarExpression5041); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_203; stream_203->add(stream_203, char_literal528, NULL); }


            // .//Emerson.g:600:15: ( LTERM )*

            for (;;)
            {
                int alt265=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA265_0 = LA(1);
                    if ( (LA265_0 == LTERM) ) 
                    {
                        alt265=1;
                    }

                }
                switch (alt265) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM529 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression5043); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM529, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop265;	/* break out of the loop */
            	    break;
                }
            }
            loop265: ; /* Jump out to here if this rule does not match */

            Identifier530 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression5046); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier530, NULL); }


            // .//Emerson.g:600:33: ( LTERM )*

            for (;;)
            {
                int alt266=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA266_0 = LA(1);
                    if ( (LA266_0 == LTERM) ) 
                    {
                        alt266=1;
                    }

                }
                switch (alt266) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM531 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression5048); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM531, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop266;	/* break out of the loop */
            	    break;
                }
            }
            loop266: ; /* Jump out to here if this rule does not match */

            char_literal532 = (pANTLR3_COMMON_TOKEN) MATCHT(203, &FOLLOW_203_in_dollarExpression5051); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_203; stream_203->add(stream_203, char_literal532, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 600:44: -> ^( DOLLAR_EXPRESSION Identifier )
            	{
            	    // .//Emerson.g:600:47: ^( DOLLAR_EXPRESSION Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOLLAR_EXPRESSION, (pANTLR3_UINT8)"DOLLAR_EXPRESSION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_203 != NULL) stream_203->free(stream_203);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(93, dollarExpression_StartIndex); }
    return retval;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//Emerson.g:604:1: arrayLiteral : ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) );
 */
static EmersonParser_arrayLiteral_return
arrayLiteral(pEmersonParser ctx)
{   
    EmersonParser_arrayLiteral_return retval;
    ANTLR3_UINT32 arrayLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal533;
    pANTLR3_COMMON_TOKEN    LTERM534;
    pANTLR3_COMMON_TOKEN    LTERM536;
    pANTLR3_COMMON_TOKEN    char_literal537;
    pANTLR3_COMMON_TOKEN    char_literal538;
    pANTLR3_COMMON_TOKEN    LTERM539;
    pANTLR3_COMMON_TOKEN    char_literal540;
    pANTLR3_COMMON_TOKEN    LTERM541;
    pANTLR3_COMMON_TOKEN    LTERM542;
    pANTLR3_COMMON_TOKEN    char_literal543;
    EmersonParser_assignmentExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression535;
    #undef	RETURN_TYPE_assignmentExpression535
    #define	RETURN_TYPE_assignmentExpression535 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal533_tree;
    pANTLR3_BASE_TREE LTERM534_tree;
    pANTLR3_BASE_TREE LTERM536_tree;
    pANTLR3_BASE_TREE char_literal537_tree;
    pANTLR3_BASE_TREE char_literal538_tree;
    pANTLR3_BASE_TREE LTERM539_tree;
    pANTLR3_BASE_TREE char_literal540_tree;
    pANTLR3_BASE_TREE LTERM541_tree;
    pANTLR3_BASE_TREE LTERM542_tree;
    pANTLR3_BASE_TREE char_literal543_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arrayLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(94)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal533       = NULL;
    LTERM534       = NULL;
    LTERM536       = NULL;
    char_literal537       = NULL;
    char_literal538       = NULL;
    LTERM539       = NULL;
    char_literal540       = NULL;
    LTERM541       = NULL;
    LTERM542       = NULL;
    char_literal543       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    assignmentExpression535.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal533_tree   = NULL;
    LTERM534_tree   = NULL;
    LTERM536_tree   = NULL;
    char_literal537_tree   = NULL;
    char_literal538_tree   = NULL;
    LTERM539_tree   = NULL;
    char_literal540_tree   = NULL;
    LTERM541_tree   = NULL;
    LTERM542_tree   = NULL;
    char_literal543_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:605:3: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt274;

            alt274=2;


            {
                int LA274_0 = LA(1);
                if ( (LA274_0 == 158) ) 
                {

                    {
                        int LA274_1 = LA(2);
                        if ( (synpred329_Emerson(ctx)) ) 
                        {
                            alt274=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt274=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 274;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 274;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt274) 
            {
        	case 1:
        	    // .//Emerson.g:605:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
        	    {
        	        char_literal533 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_arrayLiteral5087); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal533, NULL); }


        	        // .//Emerson.g:605:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt267=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA267_0 = LA(1);
        	                if ( (LA267_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA267_2 = LA(2);
        	                        if ( (synpred326_Emerson(ctx)) ) 
        	                        {
        	                            alt267=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt267) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM534 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5089); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM534, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop267;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop267: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:605:16: ( assignmentExpression )?
        	        {
        	            int alt268=2;
        	            {
        	                int LA268_0 = LA(1);
        	                if ( (((LA268_0 >= Identifier) && (LA268_0 <= NumericLiteral)) || ((LA268_0 >= 127) && (LA268_0 <= 128)) || LA268_0 == 131 || ((LA268_0 >= 157) && (LA268_0 <= 158)) || ((LA268_0 >= 190) && (LA268_0 <= 191)) || ((LA268_0 >= 195) && (LA268_0 <= 206))) ) 
        	                {
        	                    alt268=1;
        	                }
        	            }
        	            switch (alt268) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:605:17: assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral5093);
        	        	        assignmentExpression535=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression535.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:605:40: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt269=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA269_0 = LA(1);
        	                if ( (LA269_0 == LTERM) ) 
        	                {
        	                    alt269=1;
        	                }

        	            }
        	            switch (alt269) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM536 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5097); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM536, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop269;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop269: ; /* Jump out to here if this rule does not match */

        	        char_literal537 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_arrayLiteral5100); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal537, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 605:51: -> ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	{
        	        	    // .//Emerson.g:605:54: ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        // .//Emerson.g:605:70: ( assignmentExpression )?
        	        	        {
        	        	        	if ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if ( stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:606:4: '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']'
        	    {
        	        char_literal538 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_arrayLiteral5114); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal538, NULL); }


        	        // .//Emerson.g:606:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt270=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA270_0 = LA(1);
        	                if ( (LA270_0 == LTERM) ) 
        	                {
        	                    alt270=1;
        	                }

        	            }
        	            switch (alt270) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM539 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5116); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM539, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop270;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop270: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral5121);
        	        e1=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e1.tree, NULL); }

        	        // .//Emerson.g:606:39: ( ',' ( LTERM )* e2= assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt272=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA272_0 = LA(1);
        	                if ( (LA272_0 == 130) ) 
        	                {
        	                    alt272=1;
        	                }

        	            }
        	            switch (alt272) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:606:40: ',' ( LTERM )* e2= assignmentExpression
        	        	    {
        	        	        char_literal540 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_arrayLiteral5124); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal540, NULL); }


        	        	        // .//Emerson.g:606:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt271=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA271_0 = LA(1);
        	        	                if ( (LA271_0 == LTERM) ) 
        	        	                {
        	        	                    alt271=1;
        	        	                }

        	        	            }
        	        	            switch (alt271) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM541 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5126); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulearrayLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM541, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop271;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop271: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral5131);
        	        	        e2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop272;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop272: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:606:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt273=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA273_0 = LA(1);
        	                if ( (LA273_0 == LTERM) ) 
        	                {
        	                    alt273=1;
        	                }

        	            }
        	            switch (alt273) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM542 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5135); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM542, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop273;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop273: ; /* Jump out to here if this rule does not match */

        	        char_literal543 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_arrayLiteral5138); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal543, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 606:88: -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	{
        	        	    // .//Emerson.g:606:91: ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
        	        	        // .//Emerson.g:606:128: ( assignmentExpression )*
        	        	        {
        	        	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(94, arrayLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//Emerson.g:610:1: objectLiteral : ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static EmersonParser_objectLiteral_return
objectLiteral(pEmersonParser ctx)
{   
    EmersonParser_objectLiteral_return retval;
    ANTLR3_UINT32 objectLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal544;
    pANTLR3_COMMON_TOKEN    LTERM545;
    pANTLR3_COMMON_TOKEN    LTERM547;
    pANTLR3_COMMON_TOKEN    char_literal548;
    pANTLR3_COMMON_TOKEN    char_literal549;
    pANTLR3_COMMON_TOKEN    LTERM550;
    pANTLR3_COMMON_TOKEN    char_literal551;
    pANTLR3_COMMON_TOKEN    LTERM552;
    pANTLR3_COMMON_TOKEN    LTERM553;
    pANTLR3_COMMON_TOKEN    char_literal554;
    EmersonParser_propertyNameAndValue_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return propertyNameAndValue546;
    #undef	RETURN_TYPE_propertyNameAndValue546
    #define	RETURN_TYPE_propertyNameAndValue546 EmersonParser_propertyNameAndValue_return

    pANTLR3_BASE_TREE char_literal544_tree;
    pANTLR3_BASE_TREE LTERM545_tree;
    pANTLR3_BASE_TREE LTERM547_tree;
    pANTLR3_BASE_TREE char_literal548_tree;
    pANTLR3_BASE_TREE char_literal549_tree;
    pANTLR3_BASE_TREE LTERM550_tree;
    pANTLR3_BASE_TREE char_literal551_tree;
    pANTLR3_BASE_TREE LTERM552_tree;
    pANTLR3_BASE_TREE LTERM553_tree;
    pANTLR3_BASE_TREE char_literal554_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyNameAndValue;
    /* Initialize rule variables
     */
    objectLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(95)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal544       = NULL;
    LTERM545       = NULL;
    LTERM547       = NULL;
    char_literal548       = NULL;
    char_literal549       = NULL;
    LTERM550       = NULL;
    char_literal551       = NULL;
    LTERM552       = NULL;
    LTERM553       = NULL;
    char_literal554       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    propertyNameAndValue546.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal544_tree   = NULL;
    LTERM545_tree   = NULL;
    LTERM547_tree   = NULL;
    char_literal548_tree   = NULL;
    char_literal549_tree   = NULL;
    LTERM550_tree   = NULL;
    char_literal551_tree   = NULL;
    LTERM552_tree   = NULL;
    LTERM553_tree   = NULL;
    char_literal554_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_propertyNameAndValue   = NULL;
    #define CREATE_stream_propertyNameAndValue  if (stream_propertyNameAndValue == NULL) {stream_propertyNameAndValue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyNameAndValue"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:611:3: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt282;

            alt282=2;


            {
                int LA282_0 = LA(1);
                if ( (LA282_0 == 131) ) 
                {

                    {
                        int LA282_1 = LA(2);
                        if ( (synpred337_Emerson(ctx)) ) 
                        {
                            alt282=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt282=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 282;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 282;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt282) 
            {
        	case 1:
        	    // .//Emerson.g:611:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
        	    {
        	        char_literal544 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_objectLiteral5169); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal544, NULL); }


        	        // .//Emerson.g:611:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt275=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA275_0 = LA(1);
        	                if ( (LA275_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA275_2 = LA(2);
        	                        if ( (synpred334_Emerson(ctx)) ) 
        	                        {
        	                            alt275=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt275) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM545 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5171); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM545, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop275;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop275: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:611:16: ( propertyNameAndValue )?
        	        {
        	            int alt276=2;
        	            {
        	                int LA276_0 = LA(1);
        	                if ( (((LA276_0 >= Identifier) && (LA276_0 <= NumericLiteral))) ) 
        	                {
        	                    alt276=1;
        	                }
        	            }
        	            switch (alt276) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: propertyNameAndValue
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5174);
        	        	        propertyNameAndValue546=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, propertyNameAndValue546.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:611:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt277=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA277_0 = LA(1);
        	                if ( (LA277_0 == LTERM) ) 
        	                {
        	                    alt277=1;
        	                }

        	            }
        	            switch (alt277) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM547 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5177); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM547, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop277;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop277: ; /* Jump out to here if this rule does not match */

        	        char_literal548 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_objectLiteral5180); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal548, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 611:49: -> ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	{
        	        	    // .//Emerson.g:611:52: ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        // .//Emerson.g:611:66: ( propertyNameAndValue )?
        	        	        {
        	        	        	if ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if ( stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:612:4: '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}'
        	    {
        	        char_literal549 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_objectLiteral5194); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal549, NULL); }


        	        // .//Emerson.g:612:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt278=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA278_0 = LA(1);
        	                if ( (LA278_0 == LTERM) ) 
        	                {
        	                    alt278=1;
        	                }

        	            }
        	            switch (alt278) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM550 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5196); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM550, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop278;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop278: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5201);
        	        p1=propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p1.tree, NULL); }

        	        // .//Emerson.g:612:39: ( ',' ( LTERM )* p2= propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt280=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA280_0 = LA(1);
        	                if ( (LA280_0 == 130) ) 
        	                {
        	                    alt280=1;
        	                }

        	            }
        	            switch (alt280) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:612:40: ',' ( LTERM )* p2= propertyNameAndValue
        	        	    {
        	        	        char_literal551 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_objectLiteral5204); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal551, NULL); }


        	        	        // .//Emerson.g:612:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt279=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA279_0 = LA(1);
        	        	                if ( (LA279_0 == LTERM) ) 
        	        	                {
        	        	                    alt279=1;
        	        	                }

        	        	            }
        	        	            switch (alt279) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM552 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5206); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleobjectLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM552, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop279;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop279: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5211);
        	        	        p2=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop280;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop280: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:612:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt281=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA281_0 = LA(1);
        	                if ( (LA281_0 == LTERM) ) 
        	                {
        	                    alt281=1;
        	                }

        	            }
        	            switch (alt281) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM553 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5215); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM553, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop281;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop281: ; /* Jump out to here if this rule does not match */

        	        char_literal554 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_objectLiteral5222); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal554, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue, propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 612:92: -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	{
        	        	    // .//Emerson.g:612:95: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));
        	        	        // .//Emerson.g:612:130: ( propertyNameAndValue )*
        	        	        {
        	        	        	while ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->free(stream_propertyNameAndValue);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(95, objectLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start propertyNameAndValue
 * .//Emerson.g:615:1: propertyNameAndValue : propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) ;
 */
static EmersonParser_propertyNameAndValue_return
propertyNameAndValue(pEmersonParser ctx)
{   
    EmersonParser_propertyNameAndValue_return retval;
    ANTLR3_UINT32 propertyNameAndValue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM556;
    pANTLR3_COMMON_TOKEN    char_literal557;
    pANTLR3_COMMON_TOKEN    LTERM558;
    EmersonParser_propertyName_return propertyName555;
    #undef	RETURN_TYPE_propertyName555
    #define	RETURN_TYPE_propertyName555 EmersonParser_propertyName_return

    EmersonParser_assignmentExpression_return assignmentExpression559;
    #undef	RETURN_TYPE_assignmentExpression559
    #define	RETURN_TYPE_assignmentExpression559 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM556_tree;
    pANTLR3_BASE_TREE char_literal557_tree;
    pANTLR3_BASE_TREE LTERM558_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    propertyNameAndValue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(96)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM556       = NULL;
    char_literal557       = NULL;
    LTERM558       = NULL;
    propertyName555.tree = NULL;

    assignmentExpression559.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM556_tree   = NULL;
    char_literal557_tree   = NULL;
    LTERM558_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:616:2: ( propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) )
        // .//Emerson.g:616:4: propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue5246);
            propertyName555=propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName555.tree, NULL); }

            // .//Emerson.g:616:17: ( LTERM )*

            for (;;)
            {
                int alt283=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA283_0 = LA(1);
                    if ( (LA283_0 == LTERM) ) 
                    {
                        alt283=1;
                    }

                }
                switch (alt283) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM556 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue5248); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM556, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop283;	/* break out of the loop */
            	    break;
                }
            }
            loop283: ; /* Jump out to here if this rule does not match */

            char_literal557 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_propertyNameAndValue5251); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal557, NULL); }


            // .//Emerson.g:616:28: ( LTERM )*

            for (;;)
            {
                int alt284=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA284_0 = LA(1);
                    if ( (LA284_0 == LTERM) ) 
                    {
                        alt284=1;
                    }

                }
                switch (alt284) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM558 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue5253); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM558, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop284;	/* break out of the loop */
            	    break;
                }
            }
            loop284: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_propertyNameAndValue5256);
            assignmentExpression559=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression559.tree, NULL); }

             
            /* AST REWRITE
             * elements          : propertyName, assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 616:56: -> ^( NAME_VALUE propertyName assignmentExpression )
            	{
            	    // .//Emerson.g:616:59: ^( NAME_VALUE propertyName assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE, (pANTLR3_UINT8)"NAME_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(96, propertyNameAndValue_StartIndex); }
    return retval;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start propertyName
 * .//Emerson.g:619:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static EmersonParser_propertyName_return
propertyName(pEmersonParser ctx)
{   
    EmersonParser_propertyName_return retval;
    ANTLR3_UINT32 propertyName_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set560;

    pANTLR3_BASE_TREE set560_tree;

    /* Initialize rule variables
     */
    propertyName_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(97)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set560       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set560_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:620:2: ( Identifier | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set560=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Identifier) && (LA(1) <= NumericLiteral)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set560)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_propertyName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_propertyName0);    goto rulepropertyNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(97, propertyName_StartIndex); }
    return retval;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//Emerson.g:626:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static EmersonParser_literal_return
literal(pEmersonParser ctx)
{   
    EmersonParser_literal_return retval;
    ANTLR3_UINT32 literal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set561;

    pANTLR3_BASE_TREE set561_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(98)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set561       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set561_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:627:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set561=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= StringLiteral) && (LA(1) <= NumericLiteral)) || ((LA(1) >= 204) && (LA(1) <= 206)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set561)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(98, literal_StartIndex); }
    return retval;
}
/* $ANTLR end literal */

// $ANTLR start synpred1_Emerson
static void synpred1_Emerson_fragment(pEmersonParser ctx ) 
{
	pANTLR3_COMMON_TOKEN    a;

	a       = NULL;

    // .//Emerson.g:132:5: (a= LTERM )
    // .//Emerson.g:132:5: a= LTERM
    {
        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_synpred1_Emerson793); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_EmersonEx; /* Prevent compiler warnings */
rulesynpred1_EmersonEx: ;

}
// $ANTLR end synpred1_Emerson

// $ANTLR start synpred3_Emerson
static void synpred3_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:136:19: ( LTERM )
    // .//Emerson.g:136:19: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred3_Emerson825); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred3_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred3_EmersonEx; /* Prevent compiler warnings */
rulesynpred3_EmersonEx: ;

}
// $ANTLR end synpred3_Emerson

// $ANTLR start synpred7_Emerson
static void synpred7_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:146:33: ( LTERM )
    // .//Emerson.g:146:33: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred7_Emerson882); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred7_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred7_EmersonEx; /* Prevent compiler warnings */
rulesynpred7_EmersonEx: ;

}
// $ANTLR end synpred7_Emerson

// $ANTLR start synpred10_Emerson
static void synpred10_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:150:15: ( LTERM )
    // .//Emerson.g:150:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred10_Emerson919); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred10_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred10_EmersonEx; /* Prevent compiler warnings */
rulesynpred10_EmersonEx: ;

}
// $ANTLR end synpred10_Emerson

// $ANTLR start synpred13_Emerson
static void synpred13_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:150:45: ( LTERM )
    // .//Emerson.g:150:45: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred13_Emerson930); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred13_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred13_EmersonEx; /* Prevent compiler warnings */
rulesynpred13_EmersonEx: ;

}
// $ANTLR end synpred13_Emerson

// $ANTLR start synpred21_Emerson
static void synpred21_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:159:8: ( LTERM )
    // .//Emerson.g:159:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred21_Emerson1021); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred21_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred21_EmersonEx; /* Prevent compiler warnings */
rulesynpred21_EmersonEx: ;

}
// $ANTLR end synpred21_Emerson

// $ANTLR start synpred23_Emerson
static void synpred23_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:164:4: ( noOpStatement )
    // .//Emerson.g:164:4: noOpStatement
    {
        FOLLOWPUSH(FOLLOW_noOpStatement_in_synpred23_Emerson1047);
        noOpStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred23_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred23_EmersonEx; /* Prevent compiler warnings */
rulesynpred23_EmersonEx: ;

}
// $ANTLR end synpred23_Emerson

// $ANTLR start synpred24_Emerson
static void synpred24_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:165:11: ( statementBlock )
    // .//Emerson.g:165:11: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred24_Emerson1059);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred24_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred24_EmersonEx; /* Prevent compiler warnings */
rulesynpred24_EmersonEx: ;

}
// $ANTLR end synpred24_Emerson

// $ANTLR start synpred26_Emerson
static void synpred26_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:167:4: ( emptyStatement )
    // .//Emerson.g:167:4: emptyStatement
    {
        FOLLOWPUSH(FOLLOW_emptyStatement_in_synpred26_Emerson1069);
        emptyStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_EmersonEx; /* Prevent compiler warnings */
rulesynpred26_EmersonEx: ;

}
// $ANTLR end synpred26_Emerson

// $ANTLR start synpred27_Emerson
static void synpred27_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:168:4: ( expressionStatement )
    // .//Emerson.g:168:4: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred27_Emerson1074);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred27_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred27_EmersonEx; /* Prevent compiler warnings */
rulesynpred27_EmersonEx: ;

}
// $ANTLR end synpred27_Emerson

// $ANTLR start synpred34_Emerson
static void synpred34_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:175:4: ( labelledStatement )
    // .//Emerson.g:175:4: labelledStatement
    {
        FOLLOWPUSH(FOLLOW_labelledStatement_in_synpred34_Emerson1109);
        labelledStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred34_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred34_EmersonEx; /* Prevent compiler warnings */
rulesynpred34_EmersonEx: ;

}
// $ANTLR end synpred34_Emerson

// $ANTLR start synpred39_Emerson
static void synpred39_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:180:4: ( msgSendStatement )
    // .//Emerson.g:180:4: msgSendStatement
    {
        FOLLOWPUSH(FOLLOW_msgSendStatement_in_synpred39_Emerson1141);
        msgSendStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred39_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred39_EmersonEx; /* Prevent compiler warnings */
rulesynpred39_EmersonEx: ;

}
// $ANTLR end synpred39_Emerson

// $ANTLR start synpred42_Emerson
static void synpred42_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:186:8: ( LTERM )
    // .//Emerson.g:186:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred42_Emerson1178); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred42_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred42_EmersonEx; /* Prevent compiler warnings */
rulesynpred42_EmersonEx: ;

}
// $ANTLR end synpred42_Emerson

// $ANTLR start synpred44_Emerson
static void synpred44_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:195:5: ( LTERM )
    // .//Emerson.g:195:5: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred44_Emerson1252); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred44_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred44_EmersonEx; /* Prevent compiler warnings */
rulesynpred44_EmersonEx: ;

}
// $ANTLR end synpred44_Emerson

// $ANTLR start synpred54_Emerson
static void synpred54_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:211:15: ( LTERM )
    // .//Emerson.g:211:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred54_Emerson1374); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred54_EmersonEx; /* Prevent compiler warnings */
rulesynpred54_EmersonEx: ;

}
// $ANTLR end synpred54_Emerson

// $ANTLR start synpred56_Emerson
static void synpred56_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:215:15: ( LTERM )
    // .//Emerson.g:215:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred56_Emerson1403); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred56_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred56_EmersonEx; /* Prevent compiler warnings */
rulesynpred56_EmersonEx: ;

}
// $ANTLR end synpred56_Emerson

// $ANTLR start synpred71_Emerson
static void synpred71_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_whenCheckedListSubsequent_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_whenCheckedListSubsequent_return

    // .//Emerson.g:250:29: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )
    // .//Emerson.g:250:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
    {
         MATCHT(130, &FOLLOW_130_in_synpred71_Emerson1655); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred71_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:250:33: ( LTERM )*

        for (;;)
        {
            int alt295=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA295_0 = LA(1);
                if ( (LA295_0 == LTERM) ) 
                {
                    alt295=1;
                }

            }
            switch (alt295) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred71_Emerson1657); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred71_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop295;	/* break out of the loop */
        	    break;
            }
        }
        loop295: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_synpred71_Emerson1662);
        s2=whenCheckedListSubsequent(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred71_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred71_EmersonEx; /* Prevent compiler warnings */
rulesynpred71_EmersonEx: ;

}
// $ANTLR end synpred71_Emerson

// $ANTLR start synpred75_Emerson
static void synpred75_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:255:52: ( LTERM )
    // .//Emerson.g:255:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred75_Emerson1712); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred75_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred75_EmersonEx; /* Prevent compiler warnings */
rulesynpred75_EmersonEx: ;

}
// $ANTLR end synpred75_Emerson

// $ANTLR start synpred77_Emerson
static void synpred77_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:255:87: ( LTERM )
    // .//Emerson.g:255:87: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred77_Emerson1725); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred77_EmersonEx; /* Prevent compiler warnings */
rulesynpred77_EmersonEx: ;

}
// $ANTLR end synpred77_Emerson

// $ANTLR start synpred78_Emerson
static void synpred78_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_statement_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_statement_return

    // .//Emerson.g:255:73: ( ( LTERM )* 'else' ( LTERM )* s2= statement )
    // .//Emerson.g:255:73: ( LTERM )* 'else' ( LTERM )* s2= statement
    {

        // .//Emerson.g:255:73: ( LTERM )*

        for (;;)
        {
            int alt296=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA296_0 = LA(1);
                if ( (LA296_0 == LTERM) ) 
                {
                    alt296=1;
                }

            }
            switch (alt296) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred78_Emerson1720); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred78_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop296;	/* break out of the loop */
        	    break;
            }
        }
        loop296: ; /* Jump out to here if this rule does not match */

         MATCHT(138, &FOLLOW_138_in_synpred78_Emerson1723); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:255:87: ( LTERM )*

        for (;;)
        {
            int alt297=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA297_0 = LA(1);
                if ( (LA297_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA297_2 = LA(2);
                        if ( (synpred77_Emerson(ctx)) ) 
                        {
                            alt297=1;
                        }

                    }
                }

            }
            switch (alt297) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred78_Emerson1725); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred78_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop297;	/* break out of the loop */
        	    break;
            }
        }
        loop297: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_statement_in_synpred78_Emerson1730);
        s2=statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred78_EmersonEx; /* Prevent compiler warnings */
rulesynpred78_EmersonEx: ;

}
// $ANTLR end synpred78_Emerson

// $ANTLR start synpred81_Emerson
static void synpred81_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:261:4: ( forStatement )
    // .//Emerson.g:261:4: forStatement
    {
        FOLLOWPUSH(FOLLOW_forStatement_in_synpred81_Emerson1772);
        forStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred81_EmersonEx; /* Prevent compiler warnings */
rulesynpred81_EmersonEx: ;

}
// $ANTLR end synpred81_Emerson

// $ANTLR start synpred82_Emerson
static void synpred82_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:266:9: ( LTERM )
    // .//Emerson.g:266:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred82_Emerson1791); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred82_EmersonEx; /* Prevent compiler warnings */
rulesynpred82_EmersonEx: ;

}
// $ANTLR end synpred82_Emerson

// $ANTLR start synpred89_Emerson
static void synpred89_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:270:52: ( LTERM )
    // .//Emerson.g:270:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred89_Emerson1858); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred89_EmersonEx; /* Prevent compiler warnings */
rulesynpred89_EmersonEx: ;

}
// $ANTLR end synpred89_Emerson

// $ANTLR start synpred100_Emerson
static void synpred100_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:274:149: ( LTERM )
    // .//Emerson.g:274:149: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred100_Emerson1936); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred100_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred100_EmersonEx; /* Prevent compiler warnings */
rulesynpred100_EmersonEx: ;

}
// $ANTLR end synpred100_Emerson

// $ANTLR start synpred108_Emerson
static void synpred108_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:283:99: ( LTERM )
    // .//Emerson.g:283:99: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred108_Emerson2045); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred108_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred108_EmersonEx; /* Prevent compiler warnings */
rulesynpred108_EmersonEx: ;

}
// $ANTLR end synpred108_Emerson

// $ANTLR start synpred120_Emerson
static void synpred120_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:304:51: ( LTERM )
    // .//Emerson.g:304:51: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred120_Emerson2217); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred120_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred120_EmersonEx; /* Prevent compiler warnings */
rulesynpred120_EmersonEx: ;

}
// $ANTLR end synpred120_Emerson

// $ANTLR start synpred122_Emerson
static void synpred122_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:308:26: ( LTERM )
    // .//Emerson.g:308:26: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred122_Emerson2248); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred122_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred122_EmersonEx; /* Prevent compiler warnings */
rulesynpred122_EmersonEx: ;

}
// $ANTLR end synpred122_Emerson

// $ANTLR start synpred136_Emerson
static void synpred136_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:320:40: ( LTERM )
    // .//Emerson.g:320:40: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred136_Emerson2398); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred136_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred136_EmersonEx; /* Prevent compiler warnings */
rulesynpred136_EmersonEx: ;

}
// $ANTLR end synpred136_Emerson

// $ANTLR start synpred139_Emerson
static void synpred139_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:324:25: ( LTERM )
    // .//Emerson.g:324:25: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred139_Emerson2433); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred139_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred139_EmersonEx; /* Prevent compiler warnings */
rulesynpred139_EmersonEx: ;

}
// $ANTLR end synpred139_Emerson

// $ANTLR start synpred157_Emerson
static void synpred157_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_memberExpression_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_memberExpression_return

	EmersonParser_leftHandSideExpression_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return




    // .//Emerson.g:353:4: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) )
    // .//Emerson.g:353:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred157_Emerson2697);
        e1=memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred157_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:353:24: ( LTERM )*

        for (;;)
        {
            int alt307=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA307_0 = LA(1);
                if ( (LA307_0 == LTERM) ) 
                {
                    alt307=1;
                }

            }
            switch (alt307) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred157_Emerson2699); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred157_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop307;	/* break out of the loop */
        	    break;
            }
        }
        loop307: ; /* Jump out to here if this rule does not match */

         MATCHT(156, &FOLLOW_156_in_synpred157_Emerson2701); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred157_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred157_Emerson2705);
        e2=leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred157_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        if ( LA(1) == LTERM || LA(1) == 133 )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred157_Emerson2707;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred157_Emerson2707);    goto rulesynpred157_EmersonEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred157_EmersonEx; /* Prevent compiler warnings */
rulesynpred157_EmersonEx: ;

}
// $ANTLR end synpred157_Emerson

// $ANTLR start synpred163_Emerson
static void synpred163_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:359:26: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )
    // .//Emerson.g:359:26: ( LTERM )* ',' ( LTERM )* assignmentExpression
    {

        // .//Emerson.g:359:26: ( LTERM )*

        for (;;)
        {
            int alt308=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA308_0 = LA(1);
                if ( (LA308_0 == LTERM) ) 
                {
                    alt308=1;
                }

            }
            switch (alt308) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred163_Emerson2787); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred163_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop308;	/* break out of the loop */
        	    break;
            }
        }
        loop308: ; /* Jump out to here if this rule does not match */

         MATCHT(130, &FOLLOW_130_in_synpred163_Emerson2790); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred163_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:359:37: ( LTERM )*

        for (;;)
        {
            int alt309=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA309_0 = LA(1);
                if ( (LA309_0 == LTERM) ) 
                {
                    alt309=1;
                }

            }
            switch (alt309) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred163_Emerson2792); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred163_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop309;	/* break out of the loop */
        	    break;
            }
        }
        loop309: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred163_Emerson2795);
        assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred163_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred163_EmersonEx; /* Prevent compiler warnings */
rulesynpred163_EmersonEx: ;

}
// $ANTLR end synpred163_Emerson

// $ANTLR start synpred167_Emerson
static void synpred167_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:368:4: ( conditionalExpression )
    // .//Emerson.g:368:4: conditionalExpression
    {
        FOLLOWPUSH(FOLLOW_conditionalExpression_in_synpred167_Emerson2854);
        conditionalExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred167_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred167_EmersonEx; /* Prevent compiler warnings */
rulesynpred167_EmersonEx: ;

}
// $ANTLR end synpred167_Emerson

// $ANTLR start synpred170_Emerson
static void synpred170_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:373:4: ( conditionalExpressionNoIn )
    // .//Emerson.g:373:4: conditionalExpressionNoIn
    {
        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_synpred170_Emerson2901);
        conditionalExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred170_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred170_EmersonEx; /* Prevent compiler warnings */
rulesynpred170_EmersonEx: ;

}
// $ANTLR end synpred170_Emerson

// $ANTLR start synpred173_Emerson
static void synpred173_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:378:4: ( callExpression )
    // .//Emerson.g:378:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred173_Emerson2949);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred173_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred173_EmersonEx; /* Prevent compiler warnings */
rulesynpred173_EmersonEx: ;

}
// $ANTLR end synpred173_Emerson

// $ANTLR start synpred174_Emerson
static void synpred174_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:383:4: ( memberExpression )
    // .//Emerson.g:383:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred174_Emerson2974);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred174_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred174_EmersonEx; /* Prevent compiler warnings */
rulesynpred174_EmersonEx: ;

}
// $ANTLR end synpred174_Emerson

// $ANTLR start synpred180_Emerson
static void synpred180_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:399:47: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:399:47: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:399:47: ( LTERM )*

        for (;;)
        {
            int alt312=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA312_0 = LA(1);
                if ( (LA312_0 == LTERM) ) 
                {
                    alt312=1;
                }

            }
            switch (alt312) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred180_Emerson3068); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred180_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop312;	/* break out of the loop */
        	    break;
            }
        }
        loop312: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3071);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred180_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred180_EmersonEx; /* Prevent compiler warnings */
rulesynpred180_EmersonEx: ;

}
// $ANTLR end synpred180_Emerson

// $ANTLR start synpred182_Emerson
static void synpred182_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:399:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:399:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:399:136: ( LTERM )*

        for (;;)
        {
            int alt313=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA313_0 = LA(1);
                if ( (LA313_0 == LTERM) ) 
                {
                    alt313=1;
                }

            }
            switch (alt313) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred182_Emerson3088); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred182_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop313;	/* break out of the loop */
        	    break;
            }
        }
        loop313: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred182_Emerson3091);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred182_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred182_EmersonEx; /* Prevent compiler warnings */
rulesynpred182_EmersonEx: ;

}
// $ANTLR end synpred182_Emerson

// $ANTLR start synpred185_Emerson
static void synpred185_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:400:48: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:400:48: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:400:48: ( LTERM )*

        for (;;)
        {
            int alt317=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA317_0 = LA(1);
                if ( (LA317_0 == LTERM) ) 
                {
                    alt317=1;
                }

            }
            switch (alt317) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred185_Emerson3118); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred185_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop317;	/* break out of the loop */
        	    break;
            }
        }
        loop317: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred185_Emerson3121);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred185_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred185_EmersonEx; /* Prevent compiler warnings */
rulesynpred185_EmersonEx: ;

}
// $ANTLR end synpred185_Emerson

// $ANTLR start synpred187_Emerson
static void synpred187_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:400:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:400:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:400:136: ( LTERM )*

        for (;;)
        {
            int alt318=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA318_0 = LA(1);
                if ( (LA318_0 == LTERM) ) 
                {
                    alt318=1;
                }

            }
            switch (alt318) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred187_Emerson3137); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred187_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop318;	/* break out of the loop */
        	    break;
            }
        }
        loop318: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred187_Emerson3140);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred187_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred187_EmersonEx; /* Prevent compiler warnings */
rulesynpred187_EmersonEx: ;

}
// $ANTLR end synpred187_Emerson

// $ANTLR start synpred192_Emerson
static void synpred192_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:401:85: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:401:85: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:401:85: ( LTERM )*

        for (;;)
        {
            int alt322=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA322_0 = LA(1);
                if ( (LA322_0 == LTERM) ) 
                {
                    alt322=1;
                }

            }
            switch (alt322) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred192_Emerson3186); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred192_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop322;	/* break out of the loop */
        	    break;
            }
        }
        loop322: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3189);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred192_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred192_EmersonEx; /* Prevent compiler warnings */
rulesynpred192_EmersonEx: ;

}
// $ANTLR end synpred192_Emerson

// $ANTLR start synpred194_Emerson
static void synpred194_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:401:147: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:401:147: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:401:147: ( LTERM )*

        for (;;)
        {
            int alt323=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA323_0 = LA(1);
                if ( (LA323_0 == LTERM) ) 
                {
                    alt323=1;
                }

            }
            switch (alt323) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred194_Emerson3202); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred194_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop323;	/* break out of the loop */
        	    break;
            }
        }
        loop323: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred194_Emerson3205);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred194_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred194_EmersonEx; /* Prevent compiler warnings */
rulesynpred194_EmersonEx: ;

}
// $ANTLR end synpred194_Emerson

// $ANTLR start synpred198_Emerson
static void synpred198_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:410:82: ( ( LTERM )* arguments )
    // .//Emerson.g:410:82: ( LTERM )* arguments
    {

        // .//Emerson.g:410:82: ( LTERM )*

        for (;;)
        {
            int alt324=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA324_0 = LA(1);
                if ( (LA324_0 == LTERM) ) 
                {
                    alt324=1;
                }

            }
            switch (alt324) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred198_Emerson3289); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred198_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop324;	/* break out of the loop */
        	    break;
            }
        }
        loop324: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_arguments_in_synpred198_Emerson3292);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred198_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred198_EmersonEx; /* Prevent compiler warnings */
rulesynpred198_EmersonEx: ;

}
// $ANTLR end synpred198_Emerson

// $ANTLR start synpred200_Emerson
static void synpred200_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:410:138: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:410:138: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:410:138: ( LTERM )*

        for (;;)
        {
            int alt325=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA325_0 = LA(1);
                if ( (LA325_0 == LTERM) ) 
                {
                    alt325=1;
                }

            }
            switch (alt325) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred200_Emerson3307); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred200_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop325;	/* break out of the loop */
        	    break;
            }
        }
        loop325: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred200_Emerson3310);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred200_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred200_EmersonEx; /* Prevent compiler warnings */
rulesynpred200_EmersonEx: ;

}
// $ANTLR end synpred200_Emerson

// $ANTLR start synpred202_Emerson
static void synpred202_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:410:207: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:410:207: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:410:207: ( LTERM )*

        for (;;)
        {
            int alt326=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA326_0 = LA(1);
                if ( (LA326_0 == LTERM) ) 
                {
                    alt326=1;
                }

            }
            switch (alt326) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred202_Emerson3325); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred202_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop326;	/* break out of the loop */
        	    break;
            }
        }
        loop326: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred202_Emerson3328);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred202_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred202_EmersonEx; /* Prevent compiler warnings */
rulesynpred202_EmersonEx: ;

}
// $ANTLR end synpred202_Emerson

// $ANTLR start synpred205_Emerson
static void synpred205_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:420:15: ( LTERM )
    // .//Emerson.g:420:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred205_Emerson3397); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred205_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred205_EmersonEx; /* Prevent compiler warnings */
rulesynpred205_EmersonEx: ;

}
// $ANTLR end synpred205_Emerson

// $ANTLR start synpred208_Emerson
static void synpred208_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:420:11: ( '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')' )
    // .//Emerson.g:420:11: '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')'
    {
         MATCHT(128, &FOLLOW_128_in_synpred208_Emerson3395); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred208_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:420:15: ( LTERM )*

        for (;;)
        {
            int alt327=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA327_0 = LA(1);
                if ( (LA327_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA327_2 = LA(2);
                        if ( (synpred205_Emerson(ctx)) ) 
                        {
                            alt327=1;
                        }

                    }
                }

            }
            switch (alt327) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred208_Emerson3397); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred208_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop327;	/* break out of the loop */
        	    break;
            }
        }
        loop327: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:420:22: ( assignmentExpression )?
        {
            int alt328=2;
            {
                int LA328_0 = LA(1);
                if ( (((LA328_0 >= Identifier) && (LA328_0 <= NumericLiteral)) || ((LA328_0 >= 127) && (LA328_0 <= 128)) || LA328_0 == 131 || ((LA328_0 >= 157) && (LA328_0 <= 158)) || ((LA328_0 >= 190) && (LA328_0 <= 191)) || ((LA328_0 >= 195) && (LA328_0 <= 206))) ) 
                {
                    alt328=1;
                }
            }
            switch (alt328) 
            {
        	case 1:
        	    // .//Emerson.g:420:23: assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred208_Emerson3401);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred208_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:420:46: ( LTERM )*

        for (;;)
        {
            int alt329=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA329_0 = LA(1);
                if ( (LA329_0 == LTERM) ) 
                {
                    alt329=1;
                }

            }
            switch (alt329) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred208_Emerson3405); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred208_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop329;	/* break out of the loop */
        	    break;
            }
        }
        loop329: ; /* Jump out to here if this rule does not match */

         MATCHT(129, &FOLLOW_129_in_synpred208_Emerson3408); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred208_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred208_EmersonEx; /* Prevent compiler warnings */
rulesynpred208_EmersonEx: ;

}
// $ANTLR end synpred208_Emerson

// $ANTLR start synpred299_Emerson
static void synpred299_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:548:59: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression )
    // .//Emerson.g:548:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
    {

        // .//Emerson.g:548:59: ( LTERM )*

        for (;;)
        {
            int alt369=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA369_0 = LA(1);
                if ( (LA369_0 == LTERM) ) 
                {
                    alt369=1;
                }

            }
            switch (alt369) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred299_Emerson4665); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred299_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop369;	/* break out of the loop */
        	    break;
            }
        }
        loop369: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_addOps_in_synpred299_Emerson4668);
        addOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred299_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:548:73: ( LTERM )*

        for (;;)
        {
            int alt370=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA370_0 = LA(1);
                if ( (LA370_0 == LTERM) ) 
                {
                    alt370=1;
                }

            }
            switch (alt370) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred299_Emerson4670); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred299_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop370;	/* break out of the loop */
        	    break;
            }
        }
        loop370: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_synpred299_Emerson4673);
        multiplicativeExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred299_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred299_EmersonEx; /* Prevent compiler warnings */
rulesynpred299_EmersonEx: ;

}
// $ANTLR end synpred299_Emerson

// $ANTLR start synpred305_Emerson
static void synpred305_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:563:4: ( leftHandSideExpression '--' )
    // .//Emerson.g:563:4: leftHandSideExpression '--'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred305_Emerson4777);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred305_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(195, &FOLLOW_195_in_synpred305_Emerson4779); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred305_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred305_EmersonEx; /* Prevent compiler warnings */
rulesynpred305_EmersonEx: ;

}
// $ANTLR end synpred305_Emerson

// $ANTLR start synpred306_Emerson
static void synpred306_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:564:4: ( leftHandSideExpression '++' )
    // .//Emerson.g:564:4: leftHandSideExpression '++'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred306_Emerson4793);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred306_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(196, &FOLLOW_196_in_synpred306_Emerson4795); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred306_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred306_EmersonEx; /* Prevent compiler warnings */
rulesynpred306_EmersonEx: ;

}
// $ANTLR end synpred306_Emerson

// $ANTLR start synpred326_Emerson
static void synpred326_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:605:9: ( LTERM )
    // .//Emerson.g:605:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred326_Emerson5089); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred326_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred326_EmersonEx; /* Prevent compiler warnings */
rulesynpred326_EmersonEx: ;

}
// $ANTLR end synpred326_Emerson

// $ANTLR start synpred329_Emerson
static void synpred329_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:605:5: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' )
    // .//Emerson.g:605:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
    {
         MATCHT(158, &FOLLOW_158_in_synpred329_Emerson5087); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred329_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:605:9: ( LTERM )*

        for (;;)
        {
            int alt373=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA373_0 = LA(1);
                if ( (LA373_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA373_2 = LA(2);
                        if ( (synpred326_Emerson(ctx)) ) 
                        {
                            alt373=1;
                        }

                    }
                }

            }
            switch (alt373) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred329_Emerson5089); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred329_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop373;	/* break out of the loop */
        	    break;
            }
        }
        loop373: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:605:16: ( assignmentExpression )?
        {
            int alt374=2;
            {
                int LA374_0 = LA(1);
                if ( (((LA374_0 >= Identifier) && (LA374_0 <= NumericLiteral)) || ((LA374_0 >= 127) && (LA374_0 <= 128)) || LA374_0 == 131 || ((LA374_0 >= 157) && (LA374_0 <= 158)) || ((LA374_0 >= 190) && (LA374_0 <= 191)) || ((LA374_0 >= 195) && (LA374_0 <= 206))) ) 
                {
                    alt374=1;
                }
            }
            switch (alt374) 
            {
        	case 1:
        	    // .//Emerson.g:605:17: assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred329_Emerson5093);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred329_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:605:40: ( LTERM )*

        for (;;)
        {
            int alt375=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA375_0 = LA(1);
                if ( (LA375_0 == LTERM) ) 
                {
                    alt375=1;
                }

            }
            switch (alt375) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred329_Emerson5097); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred329_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop375;	/* break out of the loop */
        	    break;
            }
        }
        loop375: ; /* Jump out to here if this rule does not match */

         MATCHT(159, &FOLLOW_159_in_synpred329_Emerson5100); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred329_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred329_EmersonEx; /* Prevent compiler warnings */
rulesynpred329_EmersonEx: ;

}
// $ANTLR end synpred329_Emerson

// $ANTLR start synpred334_Emerson
static void synpred334_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:611:9: ( LTERM )
    // .//Emerson.g:611:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred334_Emerson5171); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred334_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred334_EmersonEx; /* Prevent compiler warnings */
rulesynpred334_EmersonEx: ;

}
// $ANTLR end synpred334_Emerson

// $ANTLR start synpred337_Emerson
static void synpred337_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:611:5: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' )
    // .//Emerson.g:611:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
    {
         MATCHT(131, &FOLLOW_131_in_synpred337_Emerson5169); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred337_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:611:9: ( LTERM )*

        for (;;)
        {
            int alt377=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA377_0 = LA(1);
                if ( (LA377_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA377_2 = LA(2);
                        if ( (synpred334_Emerson(ctx)) ) 
                        {
                            alt377=1;
                        }

                    }
                }

            }
            switch (alt377) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred337_Emerson5171); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred337_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop377;	/* break out of the loop */
        	    break;
            }
        }
        loop377: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:611:16: ( propertyNameAndValue )?
        {
            int alt378=2;
            {
                int LA378_0 = LA(1);
                if ( (((LA378_0 >= Identifier) && (LA378_0 <= NumericLiteral))) ) 
                {
                    alt378=1;
                }
            }
            switch (alt378) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: propertyNameAndValue
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred337_Emerson5174);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred337_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:611:38: ( LTERM )*

        for (;;)
        {
            int alt379=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA379_0 = LA(1);
                if ( (LA379_0 == LTERM) ) 
                {
                    alt379=1;
                }

            }
            switch (alt379) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred337_Emerson5177); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred337_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop379;	/* break out of the loop */
        	    break;
            }
        }
        loop379: ; /* Jump out to here if this rule does not match */

         MATCHT(132, &FOLLOW_132_in_synpred337_Emerson5180); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred337_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred337_EmersonEx; /* Prevent compiler warnings */
rulesynpred337_EmersonEx: ;

}
// $ANTLR end synpred337_Emerson
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred26_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred7_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred7_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred157_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred157_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred299_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred299_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred326_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred326_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred1_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred42_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred42_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred306_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred306_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred89_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred89_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred305_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred305_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred27_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred27_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred334_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred334_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred136_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred136_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred108_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred108_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred139_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred139_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred187_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred187_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred329_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred329_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred174_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred174_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred39_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred39_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred180_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred180_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred120_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred120_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred34_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred34_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred75_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred75_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred122_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred122_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred81_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred81_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred56_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred56_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred21_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred21_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred167_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred167_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred200_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred200_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred173_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred173_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred163_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred163_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred54_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred54_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred205_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred205_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred44_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred44_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred192_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred192_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred71_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred71_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred208_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred208_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred100_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred100_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred3_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred3_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred10_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred10_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred77_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred77_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred337_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred337_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred198_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred198_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred23_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred23_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred13_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred13_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred170_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred170_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred185_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred185_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred82_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred82_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred202_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred202_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred182_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred182_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred78_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred78_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred24_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred24_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred194_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred194_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
