/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//Emerson.g
 *     -                            On : 2011-02-11 16:24:05
 *     -                for the parser : EmersonParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

  #include <stdlib.h>;
  #include <stdio.h>;
  #include "EmersonUtil.h";

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonParserTokenNames[200+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "LEFT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "RIGHT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "TRIPLE_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "LEFT_SHIFT",
        (pANTLR3_UINT8) "RIGHT_SHIFT",
        (pANTLR3_UINT8) "TRIPLE_SHIFT",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "EXPR_LIST",
        (pANTLR3_UINT8) "COND_EXPR",
        (pANTLR3_UINT8) "COND_EXPR_NOIN",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_SEND",
        (pANTLR3_UINT8) "MESSAGE_RECV",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'check'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'<-'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'<<='",
        (pANTLR3_UINT8) "'>>='",
        (pANTLR3_UINT8) "'>>>='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'>>>'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static EmersonParser_program_return	program    (pEmersonParser ctx);
static EmersonParser_sourceElements_return	sourceElements    (pEmersonParser ctx);
static EmersonParser_sourceElement_return	sourceElement    (pEmersonParser ctx);
static EmersonParser_functionDeclaration_return	functionDeclaration    (pEmersonParser ctx);
static EmersonParser_functionExpression_return	functionExpression    (pEmersonParser ctx);
static EmersonParser_formalParameterList_return	formalParameterList    (pEmersonParser ctx);
static EmersonParser_functionBody_return	functionBody    (pEmersonParser ctx);
static EmersonParser_statement_return	statement    (pEmersonParser ctx);
static EmersonParser_statementBlock_return	statementBlock    (pEmersonParser ctx);
static EmersonParser_statementList_return	statementList    (pEmersonParser ctx);
static EmersonParser_variableStatement_return	variableStatement    (pEmersonParser ctx);
static EmersonParser_variableDeclarationList_return	variableDeclarationList    (pEmersonParser ctx);
static EmersonParser_variableDeclarationListNoIn_return	variableDeclarationListNoIn    (pEmersonParser ctx);
static EmersonParser_variableDeclaration_return	variableDeclaration    (pEmersonParser ctx);
static EmersonParser_variableDeclarationNoIn_return	variableDeclarationNoIn    (pEmersonParser ctx);
static EmersonParser_initialiser_return	initialiser    (pEmersonParser ctx);
static EmersonParser_initialiserNoIn_return	initialiserNoIn    (pEmersonParser ctx);
static EmersonParser_emptyStatement_return	emptyStatement    (pEmersonParser ctx);
static EmersonParser_expressionStatement_return	expressionStatement    (pEmersonParser ctx);
static EmersonParser_whenStatement_return	whenStatement    (pEmersonParser ctx);
static EmersonParser_whenPred_return	whenPred    (pEmersonParser ctx);
static EmersonParser_whenCheckedList_return	whenCheckedList    (pEmersonParser ctx);
static EmersonParser_ifStatement_return	ifStatement    (pEmersonParser ctx);
static EmersonParser_iterationStatement_return	iterationStatement    (pEmersonParser ctx);
static EmersonParser_doWhileStatement_return	doWhileStatement    (pEmersonParser ctx);
static EmersonParser_whileStatement_return	whileStatement    (pEmersonParser ctx);
static EmersonParser_forStatement_return	forStatement    (pEmersonParser ctx);
static EmersonParser_forStatementInitialiserPart_return	forStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_forInStatement_return	forInStatement    (pEmersonParser ctx);
static EmersonParser_forInStatementInitialiserPart_return	forInStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_continueStatement_return	continueStatement    (pEmersonParser ctx);
static EmersonParser_breakStatement_return	breakStatement    (pEmersonParser ctx);
static EmersonParser_returnStatement_return	returnStatement    (pEmersonParser ctx);
static EmersonParser_withStatement_return	withStatement    (pEmersonParser ctx);
static EmersonParser_labelledStatement_return	labelledStatement    (pEmersonParser ctx);
static EmersonParser_switchStatement_return	switchStatement    (pEmersonParser ctx);
static EmersonParser_caseBlock_return	caseBlock    (pEmersonParser ctx);
static EmersonParser_caseClause_return	caseClause    (pEmersonParser ctx);
static EmersonParser_defaultClause_return	defaultClause    (pEmersonParser ctx);
static EmersonParser_throwStatement_return	throwStatement    (pEmersonParser ctx);
static EmersonParser_tryStatement_return	tryStatement    (pEmersonParser ctx);
static EmersonParser_catchClause_return	catchClause    (pEmersonParser ctx);
static EmersonParser_finallyClause_return	finallyClause    (pEmersonParser ctx);
static EmersonParser_msgSendStatement_return	msgSendStatement    (pEmersonParser ctx);
static EmersonParser_msgRecvStatement_return	msgRecvStatement    (pEmersonParser ctx);
static EmersonParser_expression_return	expression    (pEmersonParser ctx);
static EmersonParser_expressionNoIn_return	expressionNoIn    (pEmersonParser ctx);
static EmersonParser_assignmentExpression_return	assignmentExpression    (pEmersonParser ctx);
static EmersonParser_assignmentExpressionNoIn_return	assignmentExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_leftHandSideExpression_return	leftHandSideExpression    (pEmersonParser ctx);
static EmersonParser_newExpression_return	newExpression    (pEmersonParser ctx);
static EmersonParser_indexSuffix1_return	indexSuffix1    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix1_return	propertyReferenceSuffix1    (pEmersonParser ctx);
static EmersonParser_memberExpression_return	memberExpression    (pEmersonParser ctx);
static EmersonParser_memberExpressionSuffix_return	memberExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_callExpression_return	callExpression    (pEmersonParser ctx);
static EmersonParser_callExpressionSuffix_return	callExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_arguments_return	arguments    (pEmersonParser ctx);
static EmersonParser_indexSuffix_return	indexSuffix    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix_return	propertyReferenceSuffix    (pEmersonParser ctx);
static EmersonParser_assignmentOperator_return	assignmentOperator    (pEmersonParser ctx);
static EmersonParser_conditionalExpression_return	conditionalExpression    (pEmersonParser ctx);
static EmersonParser_conditionalExpressionNoIn_return	conditionalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalORExpression_return	logicalORExpression    (pEmersonParser ctx);
static EmersonParser_logicalANDExpression_return	logicalANDExpression    (pEmersonParser ctx);
static EmersonParser_logicalORExpressionNoIn_return	logicalORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalANDExpressionNoIn_return	logicalANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpression_return	bitwiseORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpressionNoIn_return	bitwiseORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpression_return	bitwiseXORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpressionNoIn_return	bitwiseXORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpression_return	bitwiseANDExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpressionNoIn_return	bitwiseANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_equalityExpression_return	equalityExpression    (pEmersonParser ctx);
static EmersonParser_equalityOps_return	equalityOps    (pEmersonParser ctx);
static EmersonParser_equalityExpressionNoIn_return	equalityExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_relationalOps_return	relationalOps    (pEmersonParser ctx);
static EmersonParser_relationalExpression_return	relationalExpression    (pEmersonParser ctx);
static EmersonParser_relationalOpsNoIn_return	relationalOpsNoIn    (pEmersonParser ctx);
static EmersonParser_relationalExpressionNoIn_return	relationalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_shiftOps_return	shiftOps    (pEmersonParser ctx);
static EmersonParser_shiftExpression_return	shiftExpression    (pEmersonParser ctx);
static EmersonParser_addOps_return	addOps    (pEmersonParser ctx);
static EmersonParser_additiveExpression_return	additiveExpression    (pEmersonParser ctx);
static EmersonParser_multOps_return	multOps    (pEmersonParser ctx);
static EmersonParser_multiplicativeExpression_return	multiplicativeExpression    (pEmersonParser ctx);
static EmersonParser_postfixExpression_return	postfixExpression    (pEmersonParser ctx);
static EmersonParser_unaryOps_return	unaryOps    (pEmersonParser ctx);
static EmersonParser_unaryExpression_return	unaryExpression    (pEmersonParser ctx);
static EmersonParser_primaryExpression_return	primaryExpression    (pEmersonParser ctx);
static EmersonParser_arrayLiteral_return	arrayLiteral    (pEmersonParser ctx);
static EmersonParser_objectLiteral_return	objectLiteral    (pEmersonParser ctx);
static EmersonParser_propertyNameAndValue_return	propertyNameAndValue    (pEmersonParser ctx);
static EmersonParser_propertyName_return	propertyName    (pEmersonParser ctx);
static EmersonParser_literal_return	literal    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred5_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred9_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred23_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred26_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred33_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred37_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred52_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred54_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred66_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred75_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred78_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred133_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred136_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred154_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred160_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred164_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred167_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred170_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred171_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred177_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred179_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred182_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred184_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred189_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred191_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred195_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred197_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred199_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred278_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred294_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred300_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred301_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred318_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred321_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred326_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred329_Emerson    (pEmersonParser ctx);
static void	EmersonParserFree(pEmersonParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//Emerson.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonParserNewSSD(instream, NULL);
}

/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonParser) ANTLR3_CALLOC(1, sizeof(EmersonParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our EmersonParser interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->statementBlock	= statementBlock;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->emptyStatement	= emptyStatement;
    ctx->expressionStatement	= expressionStatement;
    ctx->whenStatement	= whenStatement;
    ctx->whenPred	= whenPred;
    ctx->whenCheckedList	= whenCheckedList;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->labelledStatement	= labelledStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->msgSendStatement	= msgSendStatement;
    ctx->msgRecvStatement	= msgRecvStatement;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityOps	= equalityOps;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->shiftOps	= shiftOps;
    ctx->shiftExpression	= shiftExpression;
    ctx->addOps	= addOps;
    ctx->additiveExpression	= additiveExpression;
    ctx->multOps	= multOps;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred5_Emerson	= synpred5_Emerson;
    ctx->synpred9_Emerson	= synpred9_Emerson;
    ctx->synpred23_Emerson	= synpred23_Emerson;
    ctx->synpred26_Emerson	= synpred26_Emerson;
    ctx->synpred33_Emerson	= synpred33_Emerson;
    ctx->synpred37_Emerson	= synpred37_Emerson;
    ctx->synpred52_Emerson	= synpred52_Emerson;
    ctx->synpred54_Emerson	= synpred54_Emerson;
    ctx->synpred66_Emerson	= synpred66_Emerson;
    ctx->synpred75_Emerson	= synpred75_Emerson;
    ctx->synpred78_Emerson	= synpred78_Emerson;
    ctx->synpred133_Emerson	= synpred133_Emerson;
    ctx->synpred136_Emerson	= synpred136_Emerson;
    ctx->synpred154_Emerson	= synpred154_Emerson;
    ctx->synpred160_Emerson	= synpred160_Emerson;
    ctx->synpred164_Emerson	= synpred164_Emerson;
    ctx->synpred167_Emerson	= synpred167_Emerson;
    ctx->synpred170_Emerson	= synpred170_Emerson;
    ctx->synpred171_Emerson	= synpred171_Emerson;
    ctx->synpred177_Emerson	= synpred177_Emerson;
    ctx->synpred179_Emerson	= synpred179_Emerson;
    ctx->synpred182_Emerson	= synpred182_Emerson;
    ctx->synpred184_Emerson	= synpred184_Emerson;
    ctx->synpred189_Emerson	= synpred189_Emerson;
    ctx->synpred191_Emerson	= synpred191_Emerson;
    ctx->synpred195_Emerson	= synpred195_Emerson;
    ctx->synpred197_Emerson	= synpred197_Emerson;
    ctx->synpred199_Emerson	= synpred199_Emerson;
    ctx->synpred278_Emerson	= synpred278_Emerson;
    ctx->synpred294_Emerson	= synpred294_Emerson;
    ctx->synpred300_Emerson	= synpred300_Emerson;
    ctx->synpred301_Emerson	= synpred301_Emerson;
    ctx->synpred318_Emerson	= synpred318_Emerson;
    ctx->synpred321_Emerson	= synpred321_Emerson;
    ctx->synpred326_Emerson	= synpred326_Emerson;
    ctx->synpred329_Emerson	= synpred329_Emerson;
    ctx->free			= EmersonParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonParserFree(pEmersonParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program771  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program771_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program771	= { FOLLOW_LTERM_in_program771_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program774  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program774_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program774	= { FOLLOW_sourceElements_in_program774_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program776  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program776	= { FOLLOW_LTERM_in_program776_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_program779  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_program779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_program779	= { FOLLOW_EOF_in_program779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements800  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements800_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements800	= { FOLLOW_sourceElement_in_sourceElements800_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_sourceElements803  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_sourceElements803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_sourceElements803	= { FOLLOW_LTERM_in_sourceElements803_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements806  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements806	= { FOLLOW_sourceElement_in_sourceElements806_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement827  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement827	= { FOLLOW_functionDeclaration_in_sourceElement827_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement836  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement836	= { FOLLOW_statement_in_sourceElement836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_functionDeclaration853  */
static	ANTLR3_BITWORD FOLLOW_124_in_functionDeclaration853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_functionDeclaration853	= { FOLLOW_124_in_functionDeclaration853_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration855  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration855_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration855	= { FOLLOW_LTERM_in_functionDeclaration855_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration858  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration858	= { FOLLOW_Identifier_in_functionDeclaration858_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration860  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration860	= { FOLLOW_LTERM_in_functionDeclaration860_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration863  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration863	= { FOLLOW_formalParameterList_in_functionDeclaration863_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration865  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration865	= { FOLLOW_LTERM_in_functionDeclaration865_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration868  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration868	= { FOLLOW_functionBody_in_functionDeclaration868_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_functionExpression892  */
static	ANTLR3_BITWORD FOLLOW_124_in_functionExpression892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_functionExpression892	= { FOLLOW_124_in_functionExpression892_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression894  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression894	= { FOLLOW_LTERM_in_functionExpression894_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression897  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression897_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression897	= { FOLLOW_Identifier_in_functionExpression897_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression900  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression900	= { FOLLOW_LTERM_in_functionExpression900_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression903  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression903	= { FOLLOW_formalParameterList_in_functionExpression903_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression905  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression905	= { FOLLOW_LTERM_in_functionExpression905_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression908  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression908	= { FOLLOW_functionBody_in_functionExpression908_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_formalParameterList935  */
static	ANTLR3_BITWORD FOLLOW_125_in_formalParameterList935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_formalParameterList935	= { FOLLOW_125_in_formalParameterList935_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList938  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList938	= { FOLLOW_LTERM_in_formalParameterList938_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList943  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList943	= { FOLLOW_Identifier_in_formalParameterList943_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList946  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList946	= { FOLLOW_LTERM_in_formalParameterList946_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_formalParameterList949  */
static	ANTLR3_BITWORD FOLLOW_126_in_formalParameterList949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_formalParameterList949	= { FOLLOW_126_in_formalParameterList949_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList951  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList951	= { FOLLOW_LTERM_in_formalParameterList951_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList956  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList956	= { FOLLOW_Identifier_in_formalParameterList956_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList962  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList962	= { FOLLOW_LTERM_in_formalParameterList962_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_formalParameterList965  */
static	ANTLR3_BITWORD FOLLOW_127_in_formalParameterList965_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_formalParameterList965	= { FOLLOW_127_in_formalParameterList965_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_functionBody991  */
static	ANTLR3_BITWORD FOLLOW_128_in_functionBody991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_functionBody991	= { FOLLOW_128_in_functionBody991_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody993  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody993	= { FOLLOW_LTERM_in_functionBody993_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_functionBody996  */
static	ANTLR3_BITWORD FOLLOW_129_in_functionBody996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_functionBody996	= { FOLLOW_129_in_functionBody996_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_functionBody1007  */
static	ANTLR3_BITWORD FOLLOW_128_in_functionBody1007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_functionBody1007	= { FOLLOW_128_in_functionBody1007_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1009  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1009	= { FOLLOW_LTERM_in_functionBody1009_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody1013  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody1013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody1013	= { FOLLOW_sourceElements_in_functionBody1013_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1020  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1020	= { FOLLOW_LTERM_in_functionBody1020_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_functionBody1023  */
static	ANTLR3_BITWORD FOLLOW_129_in_functionBody1023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_functionBody1023	= { FOLLOW_129_in_functionBody1023_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement1035  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement1035	= { FOLLOW_statementBlock_in_statement1035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement1040  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement1040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement1040	= { FOLLOW_variableStatement_in_statement1040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_statement1045  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_statement1045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_statement1045	= { FOLLOW_emptyStatement_in_statement1045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement1050  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement1050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement1050	= { FOLLOW_expressionStatement_in_statement1050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement1055  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement1055_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement1055	= { FOLLOW_ifStatement_in_statement1055_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement1060  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement1060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement1060	= { FOLLOW_iterationStatement_in_statement1060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement1065  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement1065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement1065	= { FOLLOW_continueStatement_in_statement1065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement1070  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement1070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement1070	= { FOLLOW_breakStatement_in_statement1070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1075  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1075_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1075	= { FOLLOW_returnStatement_in_statement1075_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement1080  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement1080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement1080	= { FOLLOW_withStatement_in_statement1080_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_statement1085  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_statement1085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_statement1085	= { FOLLOW_labelledStatement_in_statement1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement1090  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement1090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement1090	= { FOLLOW_switchStatement_in_statement1090_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement1095  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement1095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement1095	= { FOLLOW_throwStatement_in_statement1095_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement1100  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement1100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement1100	= { FOLLOW_tryStatement_in_statement1100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_statement1105  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_statement1105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_statement1105	= { FOLLOW_msgSendStatement_in_statement1105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_statement1110  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_statement1110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_statement1110	= { FOLLOW_msgRecvStatement_in_statement1110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_statementBlock1122  */
static	ANTLR3_BITWORD FOLLOW_128_in_statementBlock1122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_statementBlock1122	= { FOLLOW_128_in_statementBlock1122_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1124  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1124	= { FOLLOW_LTERM_in_statementBlock1124_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_statementBlock1127  */
static	ANTLR3_BITWORD FOLLOW_129_in_statementBlock1127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_statementBlock1127	= { FOLLOW_129_in_statementBlock1127_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_statementBlock1132  */
static	ANTLR3_BITWORD FOLLOW_128_in_statementBlock1132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_statementBlock1132	= { FOLLOW_128_in_statementBlock1132_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1134  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1134	= { FOLLOW_LTERM_in_statementBlock1134_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock1138  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock1138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock1138	= { FOLLOW_statementList_in_statementBlock1138_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1143  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1143_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1143	= { FOLLOW_LTERM_in_statementBlock1143_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_statementBlock1146  */
static	ANTLR3_BITWORD FOLLOW_129_in_statementBlock1146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_statementBlock1146	= { FOLLOW_129_in_statementBlock1146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1159  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1159	= { FOLLOW_statement_in_statementList1159_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementList1162  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementList1162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementList1162	= { FOLLOW_LTERM_in_statementList1162_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1165  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1165	= { FOLLOW_statement_in_statementList1165_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_variableStatement1188  */
static	ANTLR3_BITWORD FOLLOW_130_in_variableStatement1188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_variableStatement1188	= { FOLLOW_130_in_variableStatement1188_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1190  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1190_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1190	= { FOLLOW_LTERM_in_variableStatement1190_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1193  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1193	= { FOLLOW_variableDeclarationList_in_variableStatement1193_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1196  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1196	= { FOLLOW_LTERM_in_variableStatement1196_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_variableStatement1200  */
static	ANTLR3_BITWORD FOLLOW_131_in_variableStatement1200_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_variableStatement1200	= { FOLLOW_131_in_variableStatement1200_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1222  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1222	= { FOLLOW_variableDeclaration_in_variableDeclarationList1222_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1225  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1225	= { FOLLOW_LTERM_in_variableDeclarationList1225_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_variableDeclarationList1228  */
static	ANTLR3_BITWORD FOLLOW_126_in_variableDeclarationList1228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_variableDeclarationList1228	= { FOLLOW_126_in_variableDeclarationList1228_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1230  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1230	= { FOLLOW_LTERM_in_variableDeclarationList1230_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1233  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1233	= { FOLLOW_variableDeclaration_in_variableDeclarationList1233_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1252  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1252	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1252_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1255  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1255	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1255_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_variableDeclarationListNoIn1258  */
static	ANTLR3_BITWORD FOLLOW_126_in_variableDeclarationListNoIn1258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_variableDeclarationListNoIn1258	= { FOLLOW_126_in_variableDeclarationListNoIn1258_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1260  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1260	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1260_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1263  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1263	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1263_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1282  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1282	= { FOLLOW_Identifier_in_variableDeclaration1282_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclaration1284  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclaration1284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclaration1284	= { FOLLOW_LTERM_in_variableDeclaration1284_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1287  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1287	= { FOLLOW_initialiser_in_variableDeclaration1287_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1311  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1311	= { FOLLOW_Identifier_in_variableDeclarationNoIn1311_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationNoIn1313  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationNoIn1313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationNoIn1313	= { FOLLOW_LTERM_in_variableDeclarationNoIn1313_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1316  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1316_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1316	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1316_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_initialiser1341  */
static	ANTLR3_BITWORD FOLLOW_132_in_initialiser1341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_initialiser1341	= { FOLLOW_132_in_initialiser1341_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiser1343  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiser1343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiser1343	= { FOLLOW_LTERM_in_initialiser1343_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_initialiser1346  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_initialiser1346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_initialiser1346	= { FOLLOW_assignmentExpression_in_initialiser1346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_initialiserNoIn1363  */
static	ANTLR3_BITWORD FOLLOW_132_in_initialiserNoIn1363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_initialiserNoIn1363	= { FOLLOW_132_in_initialiserNoIn1363_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiserNoIn1365  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiserNoIn1365_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiserNoIn1365	= { FOLLOW_LTERM_in_initialiserNoIn1365_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1368  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1368_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1368	= { FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1368_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_emptyStatement1384  */
static	ANTLR3_BITWORD FOLLOW_131_in_emptyStatement1384_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_emptyStatement1384	= { FOLLOW_131_in_emptyStatement1384_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1396  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1396	= { FOLLOW_expression_in_expressionStatement1396_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionStatement1399  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionStatement1399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionStatement1399	= { FOLLOW_LTERM_in_expressionStatement1399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_expressionStatement1403  */
static	ANTLR3_BITWORD FOLLOW_131_in_expressionStatement1403_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_expressionStatement1403	= { FOLLOW_131_in_expressionStatement1403_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_whenStatement1422  */
static	ANTLR3_BITWORD FOLLOW_133_in_whenStatement1422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_whenStatement1422	= { FOLLOW_133_in_whenStatement1422_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1424  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1424	= { FOLLOW_LTERM_in_whenStatement1424_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_whenStatement1427  */
static	ANTLR3_BITWORD FOLLOW_125_in_whenStatement1427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_whenStatement1427	= { FOLLOW_125_in_whenStatement1427_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1429  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1429	= { FOLLOW_LTERM_in_whenStatement1429_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenPred_in_whenStatement1432  */
static	ANTLR3_BITWORD FOLLOW_whenPred_in_whenStatement1432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_whenPred_in_whenStatement1432	= { FOLLOW_whenPred_in_whenStatement1432_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1434  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1434	= { FOLLOW_LTERM_in_whenStatement1434_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_whenStatement1437  */
static	ANTLR3_BITWORD FOLLOW_127_in_whenStatement1437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_whenStatement1437	= { FOLLOW_127_in_whenStatement1437_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1439  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1439	= { FOLLOW_LTERM_in_whenStatement1439_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_whenStatement1442  */
static	ANTLR3_BITWORD FOLLOW_134_in_whenStatement1442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_whenStatement1442	= { FOLLOW_134_in_whenStatement1442_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedList_in_whenStatement1444  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedList_in_whenStatement1444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedList_in_whenStatement1444	= { FOLLOW_whenCheckedList_in_whenStatement1444_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1446  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1446	= { FOLLOW_LTERM_in_whenStatement1446_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whenStatement1451  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whenStatement1451_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whenStatement1451	= { FOLLOW_statement_in_whenStatement1451_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenPred1485  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenPred1485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenPred1485	= { FOLLOW_expression_in_whenPred1485_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenPred1487  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenPred1487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenPred1487	= { FOLLOW_LTERM_in_whenPred1487_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_whenPred1490  */
static	ANTLR3_BITWORD FOLLOW_135_in_whenPred1490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_whenPred1490	= { FOLLOW_135_in_whenPred1490_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenPred1492  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenPred1492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenPred1492	= { FOLLOW_LTERM_in_whenPred1492_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenPred1497  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenPred1497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenPred1497	= { FOLLOW_expression_in_whenPred1497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedList1526  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedList1526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedList1526	= { FOLLOW_expression_in_whenCheckedList1526_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedList1528  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedList1528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedList1528	= { FOLLOW_LTERM_in_whenCheckedList1528_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_whenCheckedList1532  */
static	ANTLR3_BITWORD FOLLOW_126_in_whenCheckedList1532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_whenCheckedList1532	= { FOLLOW_126_in_whenCheckedList1532_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedList1534  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedList1534_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedList1534	= { FOLLOW_LTERM_in_whenCheckedList1534_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedList1537  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedList1537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedList1537	= { FOLLOW_expression_in_whenCheckedList1537_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_ifStatement1566  */
static	ANTLR3_BITWORD FOLLOW_136_in_ifStatement1566_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_ifStatement1566	= { FOLLOW_136_in_ifStatement1566_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1568  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1568	= { FOLLOW_LTERM_in_ifStatement1568_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_ifStatement1571  */
static	ANTLR3_BITWORD FOLLOW_125_in_ifStatement1571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_ifStatement1571	= { FOLLOW_125_in_ifStatement1571_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1573  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1573	= { FOLLOW_LTERM_in_ifStatement1573_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1576  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1576	= { FOLLOW_expression_in_ifStatement1576_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1578  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1578	= { FOLLOW_LTERM_in_ifStatement1578_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_ifStatement1581  */
static	ANTLR3_BITWORD FOLLOW_127_in_ifStatement1581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_ifStatement1581	= { FOLLOW_127_in_ifStatement1581_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1583  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1583	= { FOLLOW_LTERM_in_ifStatement1583_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1588  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1588	= { FOLLOW_statement_in_ifStatement1588_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1591  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1591	= { FOLLOW_LTERM_in_ifStatement1591_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_ifStatement1594  */
static	ANTLR3_BITWORD FOLLOW_137_in_ifStatement1594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_ifStatement1594	= { FOLLOW_137_in_ifStatement1594_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1596  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1596	= { FOLLOW_LTERM_in_ifStatement1596_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1601  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1601	= { FOLLOW_statement_in_ifStatement1601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1630  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1630	= { FOLLOW_doWhileStatement_in_iterationStatement1630_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1635  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1635_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1635	= { FOLLOW_whileStatement_in_iterationStatement1635_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1640  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1640_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1640	= { FOLLOW_forStatement_in_iterationStatement1640_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1645  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1645_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1645	= { FOLLOW_forInStatement_in_iterationStatement1645_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_doWhileStatement1657  */
static	ANTLR3_BITWORD FOLLOW_138_in_doWhileStatement1657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_doWhileStatement1657	= { FOLLOW_138_in_doWhileStatement1657_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1659  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1659_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1659	= { FOLLOW_LTERM_in_doWhileStatement1659_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1662  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1662	= { FOLLOW_statement_in_doWhileStatement1662_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1664  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1664	= { FOLLOW_LTERM_in_doWhileStatement1664_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_doWhileStatement1667  */
static	ANTLR3_BITWORD FOLLOW_139_in_doWhileStatement1667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_doWhileStatement1667	= { FOLLOW_139_in_doWhileStatement1667_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1669  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1669	= { FOLLOW_LTERM_in_doWhileStatement1669_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_doWhileStatement1672  */
static	ANTLR3_BITWORD FOLLOW_125_in_doWhileStatement1672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_doWhileStatement1672	= { FOLLOW_125_in_doWhileStatement1672_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1674  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1674	= { FOLLOW_expression_in_doWhileStatement1674_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_doWhileStatement1676  */
static	ANTLR3_BITWORD FOLLOW_127_in_doWhileStatement1676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_doWhileStatement1676	= { FOLLOW_127_in_doWhileStatement1676_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1679  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1679	= { FOLLOW_LTERM_in_doWhileStatement1679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_doWhileStatement1683  */
static	ANTLR3_BITWORD FOLLOW_131_in_doWhileStatement1683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_doWhileStatement1683	= { FOLLOW_131_in_doWhileStatement1683_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_whileStatement1709  */
static	ANTLR3_BITWORD FOLLOW_139_in_whileStatement1709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_whileStatement1709	= { FOLLOW_139_in_whileStatement1709_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1711  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1711_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1711	= { FOLLOW_LTERM_in_whileStatement1711_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_whileStatement1714  */
static	ANTLR3_BITWORD FOLLOW_125_in_whileStatement1714_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_whileStatement1714	= { FOLLOW_125_in_whileStatement1714_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1716  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1716	= { FOLLOW_LTERM_in_whileStatement1716_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1719  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1719	= { FOLLOW_expression_in_whileStatement1719_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1721  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1721	= { FOLLOW_LTERM_in_whileStatement1721_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_whileStatement1724  */
static	ANTLR3_BITWORD FOLLOW_127_in_whileStatement1724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_whileStatement1724	= { FOLLOW_127_in_whileStatement1724_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1726  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1726	= { FOLLOW_LTERM_in_whileStatement1726_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1729  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1729_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1729	= { FOLLOW_statement_in_whileStatement1729_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_forStatement1752  */
static	ANTLR3_BITWORD FOLLOW_140_in_forStatement1752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_forStatement1752	= { FOLLOW_140_in_forStatement1752_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1754  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1754	= { FOLLOW_LTERM_in_forStatement1754_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_forStatement1757  */
static	ANTLR3_BITWORD FOLLOW_125_in_forStatement1757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x300000003000000D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_forStatement1757	= { FOLLOW_125_in_forStatement1757_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1760  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000005), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1760	= { FOLLOW_LTERM_in_forStatement1760_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement1765  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement1765_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement1765	= { FOLLOW_forStatementInitialiserPart_in_forStatement1765_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1769  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1769	= { FOLLOW_LTERM_in_forStatement1769_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_forStatement1772  */
static	ANTLR3_BITWORD FOLLOW_131_in_forStatement1772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000009), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_forStatement1772	= { FOLLOW_131_in_forStatement1772_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1775  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1775_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1775	= { FOLLOW_LTERM_in_forStatement1775_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1780  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1780	= { FOLLOW_expression_in_forStatement1780_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1784  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1784_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1784	= { FOLLOW_LTERM_in_forStatement1784_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_forStatement1787  */
static	ANTLR3_BITWORD FOLLOW_131_in_forStatement1787_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xB000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_forStatement1787	= { FOLLOW_131_in_forStatement1787_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1790  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1790	= { FOLLOW_LTERM_in_forStatement1790_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1795  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1795	= { FOLLOW_expression_in_forStatement1795_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1799  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1799_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1799	= { FOLLOW_LTERM_in_forStatement1799_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_forStatement1802  */
static	ANTLR3_BITWORD FOLLOW_127_in_forStatement1802_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_forStatement1802	= { FOLLOW_127_in_forStatement1802_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1804  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1804	= { FOLLOW_LTERM_in_forStatement1804_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement1807  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement1807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement1807	= { FOLLOW_statement_in_forStatement1807_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart1856  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart1856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart1856	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart1856_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_forStatementInitialiserPart1861  */
static	ANTLR3_BITWORD FOLLOW_130_in_forStatementInitialiserPart1861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_forStatementInitialiserPart1861	= { FOLLOW_130_in_forStatementInitialiserPart1861_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatementInitialiserPart1863  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatementInitialiserPart1863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatementInitialiserPart1863	= { FOLLOW_LTERM_in_forStatementInitialiserPart1863_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1866  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1866	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1866_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_forInStatement1886  */
static	ANTLR3_BITWORD FOLLOW_140_in_forInStatement1886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_forInStatement1886	= { FOLLOW_140_in_forInStatement1886_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1888  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1888	= { FOLLOW_LTERM_in_forInStatement1888_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_forInStatement1891  */
static	ANTLR3_BITWORD FOLLOW_125_in_forInStatement1891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x0000000030000005), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_forInStatement1891	= { FOLLOW_125_in_forInStatement1891_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1893  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1893_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x0000000030000005), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1893	= { FOLLOW_LTERM_in_forInStatement1893_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement1896  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement1896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement1896	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement1896_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1898  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1898	= { FOLLOW_LTERM_in_forInStatement1898_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forInStatement1901  */
static	ANTLR3_BITWORD FOLLOW_141_in_forInStatement1901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forInStatement1901	= { FOLLOW_141_in_forInStatement1901_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1903  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1903	= { FOLLOW_LTERM_in_forInStatement1903_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement1906  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement1906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement1906	= { FOLLOW_expression_in_forInStatement1906_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1908  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1908	= { FOLLOW_LTERM_in_forInStatement1908_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_forInStatement1911  */
static	ANTLR3_BITWORD FOLLOW_127_in_forInStatement1911_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_forInStatement1911	= { FOLLOW_127_in_forInStatement1911_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1913  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1913	= { FOLLOW_LTERM_in_forInStatement1913_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement1916  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement1916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement1916	= { FOLLOW_statement_in_forInStatement1916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1940  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1940	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_forInStatementInitialiserPart1949  */
static	ANTLR3_BITWORD FOLLOW_130_in_forInStatementInitialiserPart1949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_forInStatementInitialiserPart1949	= { FOLLOW_130_in_forInStatementInitialiserPart1949_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatementInitialiserPart1951  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatementInitialiserPart1951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatementInitialiserPart1951	= { FOLLOW_LTERM_in_forInStatementInitialiserPart1951_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1954  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1954	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1954_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_continueStatement1973  */
static	ANTLR3_BITWORD FOLLOW_142_in_continueStatement1973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_continueStatement1973	= { FOLLOW_142_in_continueStatement1973_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement1975  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement1975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement1975	= { FOLLOW_Identifier_in_continueStatement1975_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_continueStatement1979  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_continueStatement1979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_continueStatement1979	= { FOLLOW_LTERM_in_continueStatement1979_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_continueStatement1983  */
static	ANTLR3_BITWORD FOLLOW_131_in_continueStatement1983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_continueStatement1983	= { FOLLOW_131_in_continueStatement1983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_breakStatement2005  */
static	ANTLR3_BITWORD FOLLOW_143_in_breakStatement2005_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_breakStatement2005	= { FOLLOW_143_in_breakStatement2005_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2007  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2007	= { FOLLOW_Identifier_in_breakStatement2007_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_breakStatement2011  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_breakStatement2011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_breakStatement2011	= { FOLLOW_LTERM_in_breakStatement2011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_breakStatement2015  */
static	ANTLR3_BITWORD FOLLOW_131_in_breakStatement2015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_breakStatement2015	= { FOLLOW_131_in_breakStatement2015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_returnStatement2036  */
static	ANTLR3_BITWORD FOLLOW_144_in_returnStatement2036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000009), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_returnStatement2036	= { FOLLOW_144_in_returnStatement2036_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2038  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2038	= { FOLLOW_expression_in_returnStatement2038_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_returnStatement2042  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_returnStatement2042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_returnStatement2042	= { FOLLOW_LTERM_in_returnStatement2042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_returnStatement2046  */
static	ANTLR3_BITWORD FOLLOW_131_in_returnStatement2046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_returnStatement2046	= { FOLLOW_131_in_returnStatement2046_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_withStatement2068  */
static	ANTLR3_BITWORD FOLLOW_145_in_withStatement2068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_withStatement2068	= { FOLLOW_145_in_withStatement2068_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2070  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2070	= { FOLLOW_LTERM_in_withStatement2070_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_withStatement2073  */
static	ANTLR3_BITWORD FOLLOW_125_in_withStatement2073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_withStatement2073	= { FOLLOW_125_in_withStatement2073_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2075  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2075_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2075	= { FOLLOW_LTERM_in_withStatement2075_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2078  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2078	= { FOLLOW_expression_in_withStatement2078_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2080  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2080	= { FOLLOW_LTERM_in_withStatement2080_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_withStatement2083  */
static	ANTLR3_BITWORD FOLLOW_127_in_withStatement2083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_withStatement2083	= { FOLLOW_127_in_withStatement2083_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2085  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2085	= { FOLLOW_LTERM_in_withStatement2085_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2088  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2088	= { FOLLOW_statement_in_withStatement2088_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_labelledStatement2109  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_labelledStatement2109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_labelledStatement2109	= { FOLLOW_Identifier_in_labelledStatement2109_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2111  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2111	= { FOLLOW_LTERM_in_labelledStatement2111_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_labelledStatement2114  */
static	ANTLR3_BITWORD FOLLOW_146_in_labelledStatement2114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_labelledStatement2114	= { FOLLOW_146_in_labelledStatement2114_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2116  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2116	= { FOLLOW_LTERM_in_labelledStatement2116_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labelledStatement2119  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labelledStatement2119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labelledStatement2119	= { FOLLOW_statement_in_labelledStatement2119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_switchStatement2142  */
static	ANTLR3_BITWORD FOLLOW_147_in_switchStatement2142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_switchStatement2142	= { FOLLOW_147_in_switchStatement2142_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2144  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2144	= { FOLLOW_LTERM_in_switchStatement2144_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_switchStatement2147  */
static	ANTLR3_BITWORD FOLLOW_125_in_switchStatement2147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_switchStatement2147	= { FOLLOW_125_in_switchStatement2147_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2149  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2149	= { FOLLOW_LTERM_in_switchStatement2149_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2152  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2152	= { FOLLOW_expression_in_switchStatement2152_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2154  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2154	= { FOLLOW_LTERM_in_switchStatement2154_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_switchStatement2157  */
static	ANTLR3_BITWORD FOLLOW_127_in_switchStatement2157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_switchStatement2157	= { FOLLOW_127_in_switchStatement2157_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2159  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2159	= { FOLLOW_LTERM_in_switchStatement2159_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2162  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2162	= { FOLLOW_caseBlock_in_switchStatement2162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_caseBlock2184  */
static	ANTLR3_BITWORD FOLLOW_128_in_caseBlock2184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000300002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_caseBlock2184	= { FOLLOW_128_in_caseBlock2184_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2187  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2187	= { FOLLOW_LTERM_in_caseBlock2187_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2192  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000300002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2192	= { FOLLOW_caseClause_in_caseBlock2192_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2197  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2197	= { FOLLOW_LTERM_in_caseBlock2197_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2200  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2200_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2200	= { FOLLOW_defaultClause_in_caseBlock2200_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2203  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2203	= { FOLLOW_LTERM_in_caseBlock2203_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2208  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2208	= { FOLLOW_caseClause_in_caseBlock2208_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2214  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2214	= { FOLLOW_LTERM_in_caseBlock2214_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_caseBlock2217  */
static	ANTLR3_BITWORD FOLLOW_129_in_caseBlock2217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_caseBlock2217	= { FOLLOW_129_in_caseBlock2217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_caseClause2254  */
static	ANTLR3_BITWORD FOLLOW_148_in_caseClause2254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_caseClause2254	= { FOLLOW_148_in_caseClause2254_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2256  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2256	= { FOLLOW_LTERM_in_caseClause2256_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause2259  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause2259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause2259	= { FOLLOW_expression_in_caseClause2259_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2261  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2261	= { FOLLOW_LTERM_in_caseClause2261_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_caseClause2264  */
static	ANTLR3_BITWORD FOLLOW_146_in_caseClause2264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_caseClause2264	= { FOLLOW_146_in_caseClause2264_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2266  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2266	= { FOLLOW_LTERM_in_caseClause2266_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2269  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2269	= { FOLLOW_statementList_in_caseClause2269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_defaultClause2294  */
static	ANTLR3_BITWORD FOLLOW_149_in_defaultClause2294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_defaultClause2294	= { FOLLOW_149_in_defaultClause2294_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2296  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2296	= { FOLLOW_LTERM_in_defaultClause2296_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_defaultClause2299  */
static	ANTLR3_BITWORD FOLLOW_146_in_defaultClause2299_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_defaultClause2299	= { FOLLOW_146_in_defaultClause2299_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2301  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2301	= { FOLLOW_LTERM_in_defaultClause2301_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause2304  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause2304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause2304	= { FOLLOW_statementList_in_defaultClause2304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_throwStatement2326  */
static	ANTLR3_BITWORD FOLLOW_150_in_throwStatement2326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_throwStatement2326	= { FOLLOW_150_in_throwStatement2326_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement2328  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement2328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement2328	= { FOLLOW_expression_in_throwStatement2328_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_throwStatement2331  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_throwStatement2331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_throwStatement2331	= { FOLLOW_LTERM_in_throwStatement2331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_throwStatement2335  */
static	ANTLR3_BITWORD FOLLOW_131_in_throwStatement2335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_throwStatement2335	= { FOLLOW_131_in_throwStatement2335_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_tryStatement2356  */
static	ANTLR3_BITWORD FOLLOW_151_in_tryStatement2356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_tryStatement2356	= { FOLLOW_151_in_tryStatement2356_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2358  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2358_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2358	= { FOLLOW_LTERM_in_tryStatement2358_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement2361  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement2361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement2361	= { FOLLOW_statementBlock_in_tryStatement2361_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2363  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2363	= { FOLLOW_LTERM_in_tryStatement2363_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2375  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2375	= { FOLLOW_finallyClause_in_tryStatement2375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchClause_in_tryStatement2387  */
static	ANTLR3_BITWORD FOLLOW_catchClause_in_tryStatement2387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_catchClause_in_tryStatement2387	= { FOLLOW_catchClause_in_tryStatement2387_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2390  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2390	= { FOLLOW_LTERM_in_tryStatement2390_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2393  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2393	= { FOLLOW_finallyClause_in_tryStatement2393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_catchClause2426  */
static	ANTLR3_BITWORD FOLLOW_152_in_catchClause2426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_catchClause2426	= { FOLLOW_152_in_catchClause2426_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2428  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2428	= { FOLLOW_LTERM_in_catchClause2428_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_catchClause2431  */
static	ANTLR3_BITWORD FOLLOW_125_in_catchClause2431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_catchClause2431	= { FOLLOW_125_in_catchClause2431_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2433  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2433	= { FOLLOW_LTERM_in_catchClause2433_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause2436  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause2436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause2436	= { FOLLOW_Identifier_in_catchClause2436_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2438  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2438	= { FOLLOW_LTERM_in_catchClause2438_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_catchClause2441  */
static	ANTLR3_BITWORD FOLLOW_127_in_catchClause2441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_catchClause2441	= { FOLLOW_127_in_catchClause2441_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2443  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2443_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2443	= { FOLLOW_LTERM_in_catchClause2443_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause2446  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause2446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause2446	= { FOLLOW_statementBlock_in_catchClause2446_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_finallyClause2468  */
static	ANTLR3_BITWORD FOLLOW_153_in_finallyClause2468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_finallyClause2468	= { FOLLOW_153_in_finallyClause2468_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_finallyClause2470  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_finallyClause2470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_finallyClause2470	= { FOLLOW_LTERM_in_finallyClause2470_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause2473  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause2473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause2473	= { FOLLOW_statementBlock_in_finallyClause2473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2498  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2498	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2498_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2501  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2501	= { FOLLOW_LTERM_in_msgSendStatement2501_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_msgSendStatement2504  */
static	ANTLR3_BITWORD FOLLOW_154_in_msgSendStatement2504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_msgSendStatement2504	= { FOLLOW_154_in_msgSendStatement2504_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2509  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2509	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2509_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2512  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2512	= { FOLLOW_LTERM_in_msgSendStatement2512_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_msgSendStatement2516  */
static	ANTLR3_BITWORD FOLLOW_131_in_msgSendStatement2516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_msgSendStatement2516	= { FOLLOW_131_in_msgSendStatement2516_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_msgSendStatement2535  */
static	ANTLR3_BITWORD FOLLOW_154_in_msgSendStatement2535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_msgSendStatement2535	= { FOLLOW_154_in_msgSendStatement2535_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement2537  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement2537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement2537	= { FOLLOW_memberExpression_in_msgSendStatement2537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2565  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2565	= { FOLLOW_memberExpression_in_msgRecvStatement2565_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2567  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2567	= { FOLLOW_LTERM_in_msgRecvStatement2567_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgRecvStatement2569  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgRecvStatement2569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgRecvStatement2569	= { FOLLOW_155_in_msgRecvStatement2569_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2573  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2573	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2573_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2576  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2576	= { FOLLOW_LTERM_in_msgRecvStatement2576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_msgRecvStatement2580  */
static	ANTLR3_BITWORD FOLLOW_131_in_msgRecvStatement2580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_msgRecvStatement2580	= { FOLLOW_131_in_msgRecvStatement2580_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2601  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2601	= { FOLLOW_memberExpression_in_msgRecvStatement2601_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2603  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2603_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2603	= { FOLLOW_LTERM_in_msgRecvStatement2603_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgRecvStatement2605  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgRecvStatement2605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgRecvStatement2605	= { FOLLOW_155_in_msgRecvStatement2605_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2609  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2609	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2609_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2611  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2611	= { FOLLOW_LTERM_in_msgRecvStatement2611_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgRecvStatement2614  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgRecvStatement2614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgRecvStatement2614	= { FOLLOW_155_in_msgRecvStatement2614_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2618  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2618	= { FOLLOW_memberExpression_in_msgRecvStatement2618_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2621  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2621	= { FOLLOW_LTERM_in_msgRecvStatement2621_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_msgRecvStatement2625  */
static	ANTLR3_BITWORD FOLLOW_131_in_msgRecvStatement2625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_msgRecvStatement2625	= { FOLLOW_131_in_msgRecvStatement2625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2652  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2652	= { FOLLOW_assignmentExpression_in_expression2652_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2655  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2655	= { FOLLOW_LTERM_in_expression2655_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_expression2658  */
static	ANTLR3_BITWORD FOLLOW_126_in_expression2658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_expression2658	= { FOLLOW_126_in_expression2658_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2660  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2660	= { FOLLOW_LTERM_in_expression2660_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2663  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2663_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2663	= { FOLLOW_assignmentExpression_in_expression2663_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2687  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2687	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2687_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2690  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2690_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2690	= { FOLLOW_LTERM_in_expressionNoIn2690_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_expressionNoIn2693  */
static	ANTLR3_BITWORD FOLLOW_126_in_expressionNoIn2693_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_expressionNoIn2693	= { FOLLOW_126_in_expressionNoIn2693_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2695  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2695_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2695	= { FOLLOW_LTERM_in_expressionNoIn2695_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2698  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2698_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2698	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2698_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression2722  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression2722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression2722	= { FOLLOW_conditionalExpression_in_assignmentExpression2722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression2735  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression2735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x000007FF00000010) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression2735	= { FOLLOW_leftHandSideExpression_in_assignmentExpression2735_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2737  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x000007FF00000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2737	= { FOLLOW_LTERM_in_assignmentExpression2737_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpression2740  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpression2740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpression2740	= { FOLLOW_assignmentOperator_in_assignmentExpression2740_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2742  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2742	= { FOLLOW_LTERM_in_assignmentExpression2742_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression2745  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression2745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression2745	= { FOLLOW_assignmentExpression_in_assignmentExpression2745_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2769  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2769	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2782  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2782_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x000007FF00000010) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2782	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2782_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2784  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2784_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x000007FF00000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2784	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2784_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2787  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2787_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2787	= { FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2787_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2789  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2789	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2789_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2792  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2792	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression2817  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression2817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression2817	= { FOLLOW_callExpression_in_leftHandSideExpression2817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression2826  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression2826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression2826	= { FOLLOW_newExpression_in_leftHandSideExpression2826_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression2842  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression2842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression2842	= { FOLLOW_memberExpression_in_newExpression2842_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_newExpression2851  */
static	ANTLR3_BITWORD FOLLOW_156_in_newExpression2851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_newExpression2851	= { FOLLOW_156_in_newExpression2851_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_newExpression2853  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_newExpression2853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_newExpression2853	= { FOLLOW_LTERM_in_newExpression2853_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression2856  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression2856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression2856	= { FOLLOW_newExpression_in_newExpression2856_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_indexSuffix12878  */
static	ANTLR3_BITWORD FOLLOW_157_in_indexSuffix12878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_indexSuffix12878	= { FOLLOW_157_in_indexSuffix12878_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix12880  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix12880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix12880	= { FOLLOW_LTERM_in_indexSuffix12880_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix12883  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix12883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix12883	= { FOLLOW_expression_in_indexSuffix12883_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix12885  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix12885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix12885	= { FOLLOW_LTERM_in_indexSuffix12885_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_indexSuffix12888  */
static	ANTLR3_BITWORD FOLLOW_158_in_indexSuffix12888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_indexSuffix12888	= { FOLLOW_158_in_indexSuffix12888_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_propertyReferenceSuffix12905  */
static	ANTLR3_BITWORD FOLLOW_159_in_propertyReferenceSuffix12905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_propertyReferenceSuffix12905	= { FOLLOW_159_in_propertyReferenceSuffix12905_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix12907  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix12907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix12907	= { FOLLOW_LTERM_in_propertyReferenceSuffix12907_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix12910  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix12910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix12910	= { FOLLOW_Identifier_in_propertyReferenceSuffix12910_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression2929  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression2929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression2929	= { FOLLOW_primaryExpression_in_memberExpression2929_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2938  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2938	= { FOLLOW_LTERM_in_memberExpression2938_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression2941  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression2941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression2941	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression2941_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2958  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2958	= { FOLLOW_LTERM_in_memberExpression2958_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression2961  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression2961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression2961	= { FOLLOW_indexSuffix1_in_memberExpression2961_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression2980  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression2980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression2980	= { FOLLOW_functionExpression_in_memberExpression2980_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2988  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2988	= { FOLLOW_LTERM_in_memberExpression2988_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression2991  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression2991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression2991	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression2991_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3008  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3008	= { FOLLOW_LTERM_in_memberExpression3008_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3011  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3011	= { FOLLOW_indexSuffix1_in_memberExpression3011_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_memberExpression3030  */
static	ANTLR3_BITWORD FOLLOW_156_in_memberExpression3030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_memberExpression3030	= { FOLLOW_156_in_memberExpression3030_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3032  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3032	= { FOLLOW_LTERM_in_memberExpression3032_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression3037  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression3037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression3037	= { FOLLOW_memberExpression_in_memberExpression3037_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3039  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3039	= { FOLLOW_LTERM_in_memberExpression3039_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression3042  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression3042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression3042	= { FOLLOW_arguments_in_memberExpression3042_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3057  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3057	= { FOLLOW_LTERM_in_memberExpression3057_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3060  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3060	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3060_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3073  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3073	= { FOLLOW_LTERM_in_memberExpression3073_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3076  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3076	= { FOLLOW_indexSuffix1_in_memberExpression3076_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix3105  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix3105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix3105	= { FOLLOW_indexSuffix_in_memberExpressionSuffix3105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3115  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3115	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3115_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression3135  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression3135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression3135	= { FOLLOW_memberExpression_in_callExpression3135_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3137  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3137	= { FOLLOW_LTERM_in_callExpression3137_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3140  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x2000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3140	= { FOLLOW_arguments_in_callExpression3140_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3154  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3154	= { FOLLOW_LTERM_in_callExpression3154_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3157  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x2000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3157	= { FOLLOW_arguments_in_callExpression3157_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3165  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3165	= { FOLLOW_LTERM_in_callExpression3165_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression3168  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression3168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x2000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression3168	= { FOLLOW_indexSuffix1_in_callExpression3168_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3183  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3183	= { FOLLOW_LTERM_in_callExpression3183_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression3186  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression3186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x2000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression3186	= { FOLLOW_propertyReferenceSuffix1_in_callExpression3186_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix3213  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix3213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix3213	= { FOLLOW_arguments_in_callExpressionSuffix3213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix3222  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix3222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix3222	= { FOLLOW_indexSuffix_in_callExpressionSuffix3222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3231  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3231	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_arguments3246  */
static	ANTLR3_BITWORD FOLLOW_125_in_arguments3246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xB000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_arguments3246	= { FOLLOW_125_in_arguments3246_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3249  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3249	= { FOLLOW_LTERM_in_arguments3249_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3253  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3253	= { FOLLOW_assignmentExpression_in_arguments3253_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3257  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3257	= { FOLLOW_LTERM_in_arguments3257_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_arguments3260  */
static	ANTLR3_BITWORD FOLLOW_126_in_arguments3260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_arguments3260	= { FOLLOW_126_in_arguments3260_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3262  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3262	= { FOLLOW_LTERM_in_arguments3262_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3265  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3265	= { FOLLOW_assignmentExpression_in_arguments3265_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3271  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3271	= { FOLLOW_LTERM_in_arguments3271_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_arguments3274  */
static	ANTLR3_BITWORD FOLLOW_127_in_arguments3274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_arguments3274	= { FOLLOW_127_in_arguments3274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_indexSuffix3297  */
static	ANTLR3_BITWORD FOLLOW_157_in_indexSuffix3297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_indexSuffix3297	= { FOLLOW_157_in_indexSuffix3297_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3299  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3299_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3299	= { FOLLOW_LTERM_in_indexSuffix3299_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix3302  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix3302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix3302	= { FOLLOW_expression_in_indexSuffix3302_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3304  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3304	= { FOLLOW_LTERM_in_indexSuffix3304_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_indexSuffix3307  */
static	ANTLR3_BITWORD FOLLOW_158_in_indexSuffix3307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_indexSuffix3307	= { FOLLOW_158_in_indexSuffix3307_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_propertyReferenceSuffix3328  */
static	ANTLR3_BITWORD FOLLOW_159_in_propertyReferenceSuffix3328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_propertyReferenceSuffix3328	= { FOLLOW_159_in_propertyReferenceSuffix3328_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix3330  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix3330_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix3330	= { FOLLOW_LTERM_in_propertyReferenceSuffix3330_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix3333  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix3333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix3333	= { FOLLOW_Identifier_in_propertyReferenceSuffix3333_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_assignmentOperator3353  */
static	ANTLR3_BITWORD FOLLOW_132_in_assignmentOperator3353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_assignmentOperator3353	= { FOLLOW_132_in_assignmentOperator3353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_assignmentOperator3362  */
static	ANTLR3_BITWORD FOLLOW_160_in_assignmentOperator3362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_assignmentOperator3362	= { FOLLOW_160_in_assignmentOperator3362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_assignmentOperator3371  */
static	ANTLR3_BITWORD FOLLOW_161_in_assignmentOperator3371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_assignmentOperator3371	= { FOLLOW_161_in_assignmentOperator3371_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_assignmentOperator3381  */
static	ANTLR3_BITWORD FOLLOW_162_in_assignmentOperator3381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_assignmentOperator3381	= { FOLLOW_162_in_assignmentOperator3381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_assignmentOperator3390  */
static	ANTLR3_BITWORD FOLLOW_163_in_assignmentOperator3390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_assignmentOperator3390	= { FOLLOW_163_in_assignmentOperator3390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_assignmentOperator3399  */
static	ANTLR3_BITWORD FOLLOW_164_in_assignmentOperator3399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_assignmentOperator3399	= { FOLLOW_164_in_assignmentOperator3399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_assignmentOperator3408  */
static	ANTLR3_BITWORD FOLLOW_165_in_assignmentOperator3408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_assignmentOperator3408	= { FOLLOW_165_in_assignmentOperator3408_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_assignmentOperator3417  */
static	ANTLR3_BITWORD FOLLOW_166_in_assignmentOperator3417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_assignmentOperator3417	= { FOLLOW_166_in_assignmentOperator3417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_assignmentOperator3426  */
static	ANTLR3_BITWORD FOLLOW_167_in_assignmentOperator3426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_assignmentOperator3426	= { FOLLOW_167_in_assignmentOperator3426_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_assignmentOperator3435  */
static	ANTLR3_BITWORD FOLLOW_168_in_assignmentOperator3435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_assignmentOperator3435	= { FOLLOW_168_in_assignmentOperator3435_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_assignmentOperator3443  */
static	ANTLR3_BITWORD FOLLOW_169_in_assignmentOperator3443_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_assignmentOperator3443	= { FOLLOW_169_in_assignmentOperator3443_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_assignmentOperator3452  */
static	ANTLR3_BITWORD FOLLOW_170_in_assignmentOperator3452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_assignmentOperator3452	= { FOLLOW_170_in_assignmentOperator3452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression3470  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression3470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression3470	= { FOLLOW_logicalORExpression_in_conditionalExpression3470_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3478  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3478	= { FOLLOW_LTERM_in_conditionalExpression3478_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_conditionalExpression3481  */
static	ANTLR3_BITWORD FOLLOW_171_in_conditionalExpression3481_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_conditionalExpression3481	= { FOLLOW_171_in_conditionalExpression3481_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3483  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3483	= { FOLLOW_LTERM_in_conditionalExpression3483_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3488  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3488	= { FOLLOW_assignmentExpression_in_conditionalExpression3488_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3490  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3490	= { FOLLOW_LTERM_in_conditionalExpression3490_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_conditionalExpression3493  */
static	ANTLR3_BITWORD FOLLOW_146_in_conditionalExpression3493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_conditionalExpression3493	= { FOLLOW_146_in_conditionalExpression3493_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3495  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3495	= { FOLLOW_LTERM_in_conditionalExpression3495_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3500  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3500	= { FOLLOW_assignmentExpression_in_conditionalExpression3500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3531  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3531	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3531_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3538  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3538	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3538_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_conditionalExpressionNoIn3541  */
static	ANTLR3_BITWORD FOLLOW_171_in_conditionalExpressionNoIn3541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_conditionalExpressionNoIn3541	= { FOLLOW_171_in_conditionalExpressionNoIn3541_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3543  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3543	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3543_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3548  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3548	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3548_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3550  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3550	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3550_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_conditionalExpressionNoIn3553  */
static	ANTLR3_BITWORD FOLLOW_146_in_conditionalExpressionNoIn3553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_conditionalExpressionNoIn3553	= { FOLLOW_146_in_conditionalExpressionNoIn3553_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3555  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3555	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3555_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3560  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3560	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3560_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3590  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3590	= { FOLLOW_logicalANDExpression_in_logicalORExpression3590_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3597  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3597	= { FOLLOW_LTERM_in_logicalORExpression3597_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_logicalORExpression3600  */
static	ANTLR3_BITWORD FOLLOW_172_in_logicalORExpression3600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_logicalORExpression3600	= { FOLLOW_172_in_logicalORExpression3600_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3602  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3602	= { FOLLOW_LTERM_in_logicalORExpression3602_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3605  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3605	= { FOLLOW_logicalANDExpression_in_logicalORExpression3605_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3632  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3632	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3632_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3639  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3639	= { FOLLOW_LTERM_in_logicalANDExpression3639_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_logicalANDExpression3642  */
static	ANTLR3_BITWORD FOLLOW_173_in_logicalANDExpression3642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_logicalANDExpression3642	= { FOLLOW_173_in_logicalANDExpression3642_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3644  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3644	= { FOLLOW_LTERM_in_logicalANDExpression3644_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3647  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3647	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3647_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3675  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3675	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3675_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3682  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3682	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3682_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_logicalORExpressionNoIn3685  */
static	ANTLR3_BITWORD FOLLOW_172_in_logicalORExpressionNoIn3685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_logicalORExpressionNoIn3685	= { FOLLOW_172_in_logicalORExpressionNoIn3685_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3687  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3687	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3687_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3690  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3690_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3690	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3690_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3719  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3719	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3719_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3727  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3727	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3727_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_logicalANDExpressionNoIn3730  */
static	ANTLR3_BITWORD FOLLOW_173_in_logicalANDExpressionNoIn3730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_logicalANDExpressionNoIn3730	= { FOLLOW_173_in_logicalANDExpressionNoIn3730_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3732  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3732_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3732	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3732_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3735  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3735	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3735_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3762  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3762	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3762_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3770  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3770_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3770	= { FOLLOW_LTERM_in_bitwiseORExpression3770_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_bitwiseORExpression3773  */
static	ANTLR3_BITWORD FOLLOW_174_in_bitwiseORExpression3773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_bitwiseORExpression3773	= { FOLLOW_174_in_bitwiseORExpression3773_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3775  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3775_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3775	= { FOLLOW_LTERM_in_bitwiseORExpression3775_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3778  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3778	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3778_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3805  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3805	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3805_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn3813  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn3813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn3813	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn3813_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_bitwiseORExpressionNoIn3816  */
static	ANTLR3_BITWORD FOLLOW_174_in_bitwiseORExpressionNoIn3816_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_bitwiseORExpressionNoIn3816	= { FOLLOW_174_in_bitwiseORExpressionNoIn3816_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn3818  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn3818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn3818	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn3818_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3821  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3821	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3821_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3847  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3847	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3847_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression3855  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression3855_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression3855	= { FOLLOW_LTERM_in_bitwiseXORExpression3855_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_bitwiseXORExpression3858  */
static	ANTLR3_BITWORD FOLLOW_175_in_bitwiseXORExpression3858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_bitwiseXORExpression3858	= { FOLLOW_175_in_bitwiseXORExpression3858_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression3860  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression3860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression3860	= { FOLLOW_LTERM_in_bitwiseXORExpression3860_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3863  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3863	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3863_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3890  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3890	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3890_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3897  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3897_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3897	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3897_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_bitwiseXORExpressionNoIn3900  */
static	ANTLR3_BITWORD FOLLOW_175_in_bitwiseXORExpressionNoIn3900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_bitwiseXORExpressionNoIn3900	= { FOLLOW_175_in_bitwiseXORExpressionNoIn3900_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3902  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3902	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3902_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3905  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3905	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3905_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression3933  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression3933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression3933	= { FOLLOW_equalityExpression_in_bitwiseANDExpression3933_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression3941  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression3941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression3941	= { FOLLOW_LTERM_in_bitwiseANDExpression3941_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_bitwiseANDExpression3944  */
static	ANTLR3_BITWORD FOLLOW_176_in_bitwiseANDExpression3944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_bitwiseANDExpression3944	= { FOLLOW_176_in_bitwiseANDExpression3944_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression3946  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression3946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression3946	= { FOLLOW_LTERM_in_bitwiseANDExpression3946_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression3949  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression3949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression3949	= { FOLLOW_equalityExpression_in_bitwiseANDExpression3949_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3977  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3977	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3977_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3985  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3985	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3985_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_bitwiseANDExpressionNoIn3988  */
static	ANTLR3_BITWORD FOLLOW_176_in_bitwiseANDExpressionNoIn3988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_bitwiseANDExpressionNoIn3988	= { FOLLOW_176_in_bitwiseANDExpressionNoIn3988_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3990  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3990	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3990_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3993  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3993	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3993_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4020  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4020	= { FOLLOW_relationalExpression_in_equalityExpression4020_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4027  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4027_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4027	= { FOLLOW_LTERM_in_equalityExpression4027_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpression4030  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpression4030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpression4030	= { FOLLOW_equalityOps_in_equalityExpression4030_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4032  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4032	= { FOLLOW_LTERM_in_equalityExpression4032_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4035  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4035	= { FOLLOW_relationalExpression_in_equalityExpression4035_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_equalityOps4060  */
static	ANTLR3_BITWORD FOLLOW_177_in_equalityOps4060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_equalityOps4060	= { FOLLOW_177_in_equalityOps4060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_equalityOps4070  */
static	ANTLR3_BITWORD FOLLOW_178_in_equalityOps4070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_equalityOps4070	= { FOLLOW_178_in_equalityOps4070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_equalityOps4080  */
static	ANTLR3_BITWORD FOLLOW_179_in_equalityOps4080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_equalityOps4080	= { FOLLOW_179_in_equalityOps4080_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_equalityOps4090  */
static	ANTLR3_BITWORD FOLLOW_180_in_equalityOps4090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_equalityOps4090	= { FOLLOW_180_in_equalityOps4090_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4107  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4107	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4107_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4114  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4114	= { FOLLOW_LTERM_in_equalityExpressionNoIn4114_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpressionNoIn4117  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpressionNoIn4117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpressionNoIn4117	= { FOLLOW_equalityOps_in_equalityExpressionNoIn4117_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4119  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4119	= { FOLLOW_LTERM_in_equalityExpressionNoIn4119_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4122  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4122	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4122_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_relationalOps4147  */
static	ANTLR3_BITWORD FOLLOW_135_in_relationalOps4147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_relationalOps4147	= { FOLLOW_135_in_relationalOps4147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_relationalOps4158  */
static	ANTLR3_BITWORD FOLLOW_181_in_relationalOps4158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_relationalOps4158	= { FOLLOW_181_in_relationalOps4158_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_relationalOps4169  */
static	ANTLR3_BITWORD FOLLOW_182_in_relationalOps4169_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_relationalOps4169	= { FOLLOW_182_in_relationalOps4169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_relationalOps4179  */
static	ANTLR3_BITWORD FOLLOW_183_in_relationalOps4179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_relationalOps4179	= { FOLLOW_183_in_relationalOps4179_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_relationalOps4189  */
static	ANTLR3_BITWORD FOLLOW_184_in_relationalOps4189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_relationalOps4189	= { FOLLOW_184_in_relationalOps4189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_relationalOps4199  */
static	ANTLR3_BITWORD FOLLOW_141_in_relationalOps4199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_relationalOps4199	= { FOLLOW_141_in_relationalOps4199_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4224  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x01E0000000002080) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4224	= { FOLLOW_shiftExpression_in_relationalExpression4224_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4232  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x01E0000000002080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4232	= { FOLLOW_LTERM_in_relationalExpression4232_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression4235  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression4235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression4235	= { FOLLOW_relationalOps_in_relationalExpression4235_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4237  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4237_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4237	= { FOLLOW_LTERM_in_relationalExpression4237_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4240  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x01E0000000002080) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4240	= { FOLLOW_shiftExpression_in_relationalExpression4240_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_relationalOpsNoIn4264  */
static	ANTLR3_BITWORD FOLLOW_135_in_relationalOpsNoIn4264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_relationalOpsNoIn4264	= { FOLLOW_135_in_relationalOpsNoIn4264_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_relationalOpsNoIn4275  */
static	ANTLR3_BITWORD FOLLOW_181_in_relationalOpsNoIn4275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_relationalOpsNoIn4275	= { FOLLOW_181_in_relationalOpsNoIn4275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_relationalOpsNoIn4286  */
static	ANTLR3_BITWORD FOLLOW_182_in_relationalOpsNoIn4286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_relationalOpsNoIn4286	= { FOLLOW_182_in_relationalOpsNoIn4286_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_relationalOpsNoIn4296  */
static	ANTLR3_BITWORD FOLLOW_183_in_relationalOpsNoIn4296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_relationalOpsNoIn4296	= { FOLLOW_183_in_relationalOpsNoIn4296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_relationalOpsNoIn4306  */
static	ANTLR3_BITWORD FOLLOW_184_in_relationalOpsNoIn4306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_relationalOpsNoIn4306	= { FOLLOW_184_in_relationalOpsNoIn4306_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4323  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x01E0000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4323	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4323_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4331  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x01E0000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4331	= { FOLLOW_LTERM_in_relationalExpressionNoIn4331_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4334  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4334	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4334_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4336  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4336	= { FOLLOW_LTERM_in_relationalExpressionNoIn4336_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4339  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x01E0000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4339	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4339_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_shiftOps4362  */
static	ANTLR3_BITWORD FOLLOW_185_in_shiftOps4362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_shiftOps4362	= { FOLLOW_185_in_shiftOps4362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_shiftOps4372  */
static	ANTLR3_BITWORD FOLLOW_186_in_shiftOps4372_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_shiftOps4372	= { FOLLOW_186_in_shiftOps4372_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_shiftOps4381  */
static	ANTLR3_BITWORD FOLLOW_187_in_shiftOps4381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_shiftOps4381	= { FOLLOW_187_in_shiftOps4381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4398  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4398	= { FOLLOW_additiveExpression_in_shiftExpression4398_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4405  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4405	= { FOLLOW_LTERM_in_shiftExpression4405_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftOps_in_shiftExpression4408  */
static	ANTLR3_BITWORD FOLLOW_shiftOps_in_shiftExpression4408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftOps_in_shiftExpression4408	= { FOLLOW_shiftOps_in_shiftExpression4408_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4410  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4410	= { FOLLOW_LTERM_in_shiftExpression4410_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4413  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4413	= { FOLLOW_additiveExpression_in_shiftExpression4413_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_addOps4439  */
static	ANTLR3_BITWORD FOLLOW_188_in_addOps4439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_addOps4439	= { FOLLOW_188_in_addOps4439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_addOps4449  */
static	ANTLR3_BITWORD FOLLOW_189_in_addOps4449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_addOps4449	= { FOLLOW_189_in_addOps4449_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4467  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x3000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4467	= { FOLLOW_multiplicativeExpression_in_additiveExpression4467_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4474  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x3000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4474	= { FOLLOW_LTERM_in_additiveExpression4474_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_additiveExpression4477  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_additiveExpression4477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_additiveExpression4477	= { FOLLOW_addOps_in_additiveExpression4477_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4479  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4479	= { FOLLOW_LTERM_in_additiveExpression4479_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4482  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x3000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4482	= { FOLLOW_multiplicativeExpression_in_additiveExpression4482_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_multOps4507  */
static	ANTLR3_BITWORD FOLLOW_190_in_multOps4507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_multOps4507	= { FOLLOW_190_in_multOps4507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_multOps4517  */
static	ANTLR3_BITWORD FOLLOW_191_in_multOps4517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_multOps4517	= { FOLLOW_191_in_multOps4517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_multOps4527  */
static	ANTLR3_BITWORD FOLLOW_192_in_multOps4527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_multOps4527	= { FOLLOW_192_in_multOps4527_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4544  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0xC000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4544	= { FOLLOW_unaryExpression_in_multiplicativeExpression4544_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4552  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0xC000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4552	= { FOLLOW_LTERM_in_multiplicativeExpression4552_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multOps_in_multiplicativeExpression4555  */
static	ANTLR3_BITWORD FOLLOW_multOps_in_multiplicativeExpression4555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_multOps_in_multiplicativeExpression4555	= { FOLLOW_multOps_in_multiplicativeExpression4555_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4557  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4557	= { FOLLOW_LTERM_in_multiplicativeExpression4557_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4560  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0xC000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4560	= { FOLLOW_unaryExpression_in_multiplicativeExpression4560_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression4585  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression4585_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000006) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression4585	= { FOLLOW_leftHandSideExpression_in_postfixExpression4585_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_postfixExpression4594  */
static	ANTLR3_BITWORD FOLLOW_193_in_postfixExpression4594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_postfixExpression4594	= { FOLLOW_193_in_postfixExpression4594_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_postfixExpression4607  */
static	ANTLR3_BITWORD FOLLOW_194_in_postfixExpression4607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_postfixExpression4607	= { FOLLOW_194_in_postfixExpression4607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_unaryOps4627  */
static	ANTLR3_BITWORD FOLLOW_195_in_unaryOps4627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_unaryOps4627	= { FOLLOW_195_in_unaryOps4627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_unaryOps4637  */
static	ANTLR3_BITWORD FOLLOW_196_in_unaryOps4637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_unaryOps4637	= { FOLLOW_196_in_unaryOps4637_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_unaryOps4647  */
static	ANTLR3_BITWORD FOLLOW_197_in_unaryOps4647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_unaryOps4647	= { FOLLOW_197_in_unaryOps4647_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_unaryOps4657  */
static	ANTLR3_BITWORD FOLLOW_194_in_unaryOps4657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_unaryOps4657	= { FOLLOW_194_in_unaryOps4657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_unaryOps4668  */
static	ANTLR3_BITWORD FOLLOW_193_in_unaryOps4668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_unaryOps4668	= { FOLLOW_193_in_unaryOps4668_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_unaryOps4679  */
static	ANTLR3_BITWORD FOLLOW_188_in_unaryOps4679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_unaryOps4679	= { FOLLOW_188_in_unaryOps4679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_unaryOps4691  */
static	ANTLR3_BITWORD FOLLOW_189_in_unaryOps4691_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_unaryOps4691	= { FOLLOW_189_in_unaryOps4691_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_unaryOps4703  */
static	ANTLR3_BITWORD FOLLOW_198_in_unaryOps4703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_unaryOps4703	= { FOLLOW_198_in_unaryOps4703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_unaryOps4715  */
static	ANTLR3_BITWORD FOLLOW_199_in_unaryOps4715_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_unaryOps4715	= { FOLLOW_199_in_unaryOps4715_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression4734  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression4734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression4734	= { FOLLOW_postfixExpression_in_unaryExpression4734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryOps_in_unaryExpression4747  */
static	ANTLR3_BITWORD FOLLOW_unaryOps_in_unaryExpression4747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryOps_in_unaryExpression4747	= { FOLLOW_unaryOps_in_unaryExpression4747_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression4751  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression4751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression4751	= { FOLLOW_unaryExpression_in_unaryExpression4751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_primaryExpression4773  */
static	ANTLR3_BITWORD FOLLOW_200_in_primaryExpression4773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_primaryExpression4773	= { FOLLOW_200_in_primaryExpression4773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression4778  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression4778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression4778	= { FOLLOW_Identifier_in_primaryExpression4778_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression4783  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression4783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression4783	= { FOLLOW_literal_in_primaryExpression4783_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression4788  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression4788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression4788	= { FOLLOW_arrayLiteral_in_primaryExpression4788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression4793  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression4793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression4793	= { FOLLOW_objectLiteral_in_primaryExpression4793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_primaryExpression4798  */
static	ANTLR3_BITWORD FOLLOW_125_in_primaryExpression4798_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_primaryExpression4798	= { FOLLOW_125_in_primaryExpression4798_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression4800  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression4800_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression4800	= { FOLLOW_LTERM_in_primaryExpression4800_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression4803  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression4803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression4803	= { FOLLOW_expression_in_primaryExpression4803_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression4805  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression4805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression4805	= { FOLLOW_LTERM_in_primaryExpression4805_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_primaryExpression4808  */
static	ANTLR3_BITWORD FOLLOW_127_in_primaryExpression4808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_primaryExpression4808	= { FOLLOW_127_in_primaryExpression4808_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_arrayLiteral4832  */
static	ANTLR3_BITWORD FOLLOW_157_in_arrayLiteral4832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000070000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_arrayLiteral4832	= { FOLLOW_157_in_arrayLiteral4832_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4834  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000070000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4834	= { FOLLOW_LTERM_in_arrayLiteral4834_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4838  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4838_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4838	= { FOLLOW_assignmentExpression_in_arrayLiteral4838_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4842  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4842	= { FOLLOW_LTERM_in_arrayLiteral4842_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_arrayLiteral4845  */
static	ANTLR3_BITWORD FOLLOW_158_in_arrayLiteral4845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_arrayLiteral4845	= { FOLLOW_158_in_arrayLiteral4845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_arrayLiteral4859  */
static	ANTLR3_BITWORD FOLLOW_157_in_arrayLiteral4859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_arrayLiteral4859	= { FOLLOW_157_in_arrayLiteral4859_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4861  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4861	= { FOLLOW_LTERM_in_arrayLiteral4861_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4866  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4866	= { FOLLOW_assignmentExpression_in_arrayLiteral4866_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_arrayLiteral4869  */
static	ANTLR3_BITWORD FOLLOW_126_in_arrayLiteral4869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_arrayLiteral4869	= { FOLLOW_126_in_arrayLiteral4869_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4871  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4871_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4871	= { FOLLOW_LTERM_in_arrayLiteral4871_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4876  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4876	= { FOLLOW_assignmentExpression_in_arrayLiteral4876_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4880  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4880	= { FOLLOW_LTERM_in_arrayLiteral4880_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_arrayLiteral4883  */
static	ANTLR3_BITWORD FOLLOW_158_in_arrayLiteral4883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_arrayLiteral4883	= { FOLLOW_158_in_arrayLiteral4883_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_objectLiteral4914  */
static	ANTLR3_BITWORD FOLLOW_128_in_objectLiteral4914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001E00000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_objectLiteral4914	= { FOLLOW_128_in_objectLiteral4914_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4916  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001E00000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4916	= { FOLLOW_LTERM_in_objectLiteral4916_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral4919  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral4919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral4919	= { FOLLOW_propertyNameAndValue_in_objectLiteral4919_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4922  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4922	= { FOLLOW_LTERM_in_objectLiteral4922_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_objectLiteral4925  */
static	ANTLR3_BITWORD FOLLOW_129_in_objectLiteral4925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_objectLiteral4925	= { FOLLOW_129_in_objectLiteral4925_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_objectLiteral4939  */
static	ANTLR3_BITWORD FOLLOW_128_in_objectLiteral4939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001E00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_objectLiteral4939	= { FOLLOW_128_in_objectLiteral4939_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4941  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001E00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4941	= { FOLLOW_LTERM_in_objectLiteral4941_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral4946  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral4946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral4946	= { FOLLOW_propertyNameAndValue_in_objectLiteral4946_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_objectLiteral4949  */
static	ANTLR3_BITWORD FOLLOW_126_in_objectLiteral4949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001E00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_objectLiteral4949	= { FOLLOW_126_in_objectLiteral4949_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4951  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001E00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4951	= { FOLLOW_LTERM_in_objectLiteral4951_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral4956  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral4956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral4956	= { FOLLOW_propertyNameAndValue_in_objectLiteral4956_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4960  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4960	= { FOLLOW_LTERM_in_objectLiteral4960_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_objectLiteral4967  */
static	ANTLR3_BITWORD FOLLOW_129_in_objectLiteral4967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_objectLiteral4967	= { FOLLOW_129_in_objectLiteral4967_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue4991  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue4991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue4991	= { FOLLOW_propertyName_in_propertyNameAndValue4991_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue4993  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue4993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue4993	= { FOLLOW_LTERM_in_propertyNameAndValue4993_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_propertyNameAndValue4996  */
static	ANTLR3_BITWORD FOLLOW_146_in_propertyNameAndValue4996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_propertyNameAndValue4996	= { FOLLOW_146_in_propertyNameAndValue4996_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue4998  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue4998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue4998	= { FOLLOW_LTERM_in_propertyNameAndValue4998_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_propertyNameAndValue5001  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_propertyNameAndValue5001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_propertyNameAndValue5001	= { FOLLOW_assignmentExpression_in_propertyNameAndValue5001_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_propertyName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_propertyName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_propertyName0	= { FOLLOW_set_in_propertyName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_synpred5_Emerson827  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_synpred5_Emerson827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_synpred5_Emerson827	= { FOLLOW_functionDeclaration_in_synpred5_Emerson827_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred9_Emerson894  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred9_Emerson894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred9_Emerson894	= { FOLLOW_LTERM_in_synpred9_Emerson894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred23_Emerson1035  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred23_Emerson1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred23_Emerson1035	= { FOLLOW_statementBlock_in_synpred23_Emerson1035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred26_Emerson1050  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred26_Emerson1050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred26_Emerson1050	= { FOLLOW_expressionStatement_in_synpred26_Emerson1050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_synpred33_Emerson1085  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_synpred33_Emerson1085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_synpred33_Emerson1085	= { FOLLOW_labelledStatement_in_synpred33_Emerson1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_synpred37_Emerson1105  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_synpred37_Emerson1105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_synpred37_Emerson1105	= { FOLLOW_msgSendStatement_in_synpred37_Emerson1105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred52_Emerson1284  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred52_Emerson1284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred52_Emerson1284	= { FOLLOW_LTERM_in_synpred52_Emerson1284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred54_Emerson1313  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred54_Emerson1313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred54_Emerson1313	= { FOLLOW_LTERM_in_synpred54_Emerson1313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred66_Emerson1528  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred66_Emerson1528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred66_Emerson1528	= { FOLLOW_LTERM_in_synpred66_Emerson1528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred75_Emerson1591  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred75_Emerson1591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred75_Emerson1591	= { FOLLOW_LTERM_in_synpred75_Emerson1591_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_synpred75_Emerson1594  */
static	ANTLR3_BITWORD FOLLOW_137_in_synpred75_Emerson1594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_synpred75_Emerson1594	= { FOLLOW_137_in_synpred75_Emerson1594_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred75_Emerson1596  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred75_Emerson1596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030CBDD0D), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred75_Emerson1596	= { FOLLOW_LTERM_in_synpred75_Emerson1596_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred75_Emerson1601  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred75_Emerson1601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred75_Emerson1601	= { FOLLOW_statement_in_synpred75_Emerson1601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_synpred78_Emerson1640  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_synpred78_Emerson1640_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_synpred78_Emerson1640	= { FOLLOW_forStatement_in_synpred78_Emerson1640_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred133_Emerson2266  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred133_Emerson2266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred133_Emerson2266	= { FOLLOW_LTERM_in_synpred133_Emerson2266_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred136_Emerson2301  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred136_Emerson2301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred136_Emerson2301	= { FOLLOW_LTERM_in_synpred136_Emerson2301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred154_Emerson2565  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred154_Emerson2565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred154_Emerson2565	= { FOLLOW_memberExpression_in_synpred154_Emerson2565_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred154_Emerson2567  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred154_Emerson2567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred154_Emerson2567	= { FOLLOW_LTERM_in_synpred154_Emerson2567_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_synpred154_Emerson2569  */
static	ANTLR3_BITWORD FOLLOW_155_in_synpred154_Emerson2569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001C00000000), ANTLR3_UINT64_LIT(0x0000000030000001), ANTLR3_UINT64_LIT(0x0000000000000F00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_synpred154_Emerson2569	= { FOLLOW_155_in_synpred154_Emerson2569_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred154_Emerson2573  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred154_Emerson2573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred154_Emerson2573	= { FOLLOW_leftHandSideExpression_in_synpred154_Emerson2573_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred154_Emerson2575  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred154_Emerson2575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred154_Emerson2575	= { FOLLOW_set_in_synpred154_Emerson2575_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred160_Emerson2655  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred160_Emerson2655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred160_Emerson2655	= { FOLLOW_LTERM_in_synpred160_Emerson2655_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_synpred160_Emerson2658  */
static	ANTLR3_BITWORD FOLLOW_126_in_synpred160_Emerson2658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_synpred160_Emerson2658	= { FOLLOW_126_in_synpred160_Emerson2658_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred160_Emerson2660  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred160_Emerson2660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred160_Emerson2660	= { FOLLOW_LTERM_in_synpred160_Emerson2660_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred160_Emerson2663  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred160_Emerson2663_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred160_Emerson2663	= { FOLLOW_assignmentExpression_in_synpred160_Emerson2663_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_synpred164_Emerson2722  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_synpred164_Emerson2722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_synpred164_Emerson2722	= { FOLLOW_conditionalExpression_in_synpred164_Emerson2722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_synpred167_Emerson2769  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_synpred167_Emerson2769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_synpred167_Emerson2769	= { FOLLOW_conditionalExpressionNoIn_in_synpred167_Emerson2769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred170_Emerson2817  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred170_Emerson2817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred170_Emerson2817	= { FOLLOW_callExpression_in_synpred170_Emerson2817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred171_Emerson2842  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred171_Emerson2842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred171_Emerson2842	= { FOLLOW_memberExpression_in_synpred171_Emerson2842_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred177_Emerson2938  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred177_Emerson2938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred177_Emerson2938	= { FOLLOW_LTERM_in_synpred177_Emerson2938_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred177_Emerson2941  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred177_Emerson2941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred177_Emerson2941	= { FOLLOW_propertyReferenceSuffix1_in_synpred177_Emerson2941_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred179_Emerson2958  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred179_Emerson2958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred179_Emerson2958	= { FOLLOW_LTERM_in_synpred179_Emerson2958_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred179_Emerson2961  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred179_Emerson2961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred179_Emerson2961	= { FOLLOW_indexSuffix1_in_synpred179_Emerson2961_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred182_Emerson2988  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred182_Emerson2988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred182_Emerson2988	= { FOLLOW_LTERM_in_synpred182_Emerson2988_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson2991  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson2991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson2991	= { FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson2991_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred184_Emerson3008  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred184_Emerson3008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred184_Emerson3008	= { FOLLOW_LTERM_in_synpred184_Emerson3008_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred184_Emerson3011  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred184_Emerson3011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred184_Emerson3011	= { FOLLOW_indexSuffix1_in_synpred184_Emerson3011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred189_Emerson3057  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred189_Emerson3057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred189_Emerson3057	= { FOLLOW_LTERM_in_synpred189_Emerson3057_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson3060  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson3060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson3060	= { FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson3060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred191_Emerson3073  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred191_Emerson3073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred191_Emerson3073	= { FOLLOW_LTERM_in_synpred191_Emerson3073_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred191_Emerson3076  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred191_Emerson3076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred191_Emerson3076	= { FOLLOW_indexSuffix1_in_synpred191_Emerson3076_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred195_Emerson3154  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred195_Emerson3154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred195_Emerson3154	= { FOLLOW_LTERM_in_synpred195_Emerson3154_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred195_Emerson3157  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred195_Emerson3157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred195_Emerson3157	= { FOLLOW_arguments_in_synpred195_Emerson3157_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred197_Emerson3165  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred197_Emerson3165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred197_Emerson3165	= { FOLLOW_LTERM_in_synpred197_Emerson3165_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred197_Emerson3168  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred197_Emerson3168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred197_Emerson3168	= { FOLLOW_indexSuffix1_in_synpred197_Emerson3168_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred199_Emerson3183  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred199_Emerson3183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred199_Emerson3183	= { FOLLOW_LTERM_in_synpred199_Emerson3183_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred199_Emerson3186  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred199_Emerson3186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred199_Emerson3186	= { FOLLOW_propertyReferenceSuffix1_in_synpred199_Emerson3186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred278_Emerson4232  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred278_Emerson4232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x01E0000000002080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred278_Emerson4232	= { FOLLOW_LTERM_in_synpred278_Emerson4232_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_synpred278_Emerson4235  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_synpred278_Emerson4235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_synpred278_Emerson4235	= { FOLLOW_relationalOps_in_synpred278_Emerson4235_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred278_Emerson4237  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred278_Emerson4237_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred278_Emerson4237	= { FOLLOW_LTERM_in_synpred278_Emerson4237_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_synpred278_Emerson4240  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_synpred278_Emerson4240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_synpred278_Emerson4240	= { FOLLOW_shiftExpression_in_synpred278_Emerson4240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred294_Emerson4474  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred294_Emerson4474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x3000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred294_Emerson4474	= { FOLLOW_LTERM_in_synpred294_Emerson4474_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_synpred294_Emerson4477  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_synpred294_Emerson4477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_synpred294_Emerson4477	= { FOLLOW_addOps_in_synpred294_Emerson4477_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred294_Emerson4479  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred294_Emerson4479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000030000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred294_Emerson4479	= { FOLLOW_LTERM_in_synpred294_Emerson4479_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_synpred294_Emerson4482  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_synpred294_Emerson4482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_synpred294_Emerson4482	= { FOLLOW_multiplicativeExpression_in_synpred294_Emerson4482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_synpred300_Emerson4594  */
static	ANTLR3_BITWORD FOLLOW_193_in_synpred300_Emerson4594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_synpred300_Emerson4594	= { FOLLOW_193_in_synpred300_Emerson4594_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_synpred301_Emerson4607  */
static	ANTLR3_BITWORD FOLLOW_194_in_synpred301_Emerson4607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_synpred301_Emerson4607	= { FOLLOW_194_in_synpred301_Emerson4607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred318_Emerson4834  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred318_Emerson4834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred318_Emerson4834	= { FOLLOW_LTERM_in_synpred318_Emerson4834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_synpred321_Emerson4832  */
static	ANTLR3_BITWORD FOLLOW_157_in_synpred321_Emerson4832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000070000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_synpred321_Emerson4832	= { FOLLOW_157_in_synpred321_Emerson4832_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred321_Emerson4834  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred321_Emerson4834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000001E00000000), ANTLR3_UINT64_LIT(0x3000000070000001), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred321_Emerson4834	= { FOLLOW_LTERM_in_synpred321_Emerson4834_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred321_Emerson4838  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred321_Emerson4838_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred321_Emerson4838	= { FOLLOW_assignmentExpression_in_synpred321_Emerson4838_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred321_Emerson4842  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred321_Emerson4842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred321_Emerson4842	= { FOLLOW_LTERM_in_synpred321_Emerson4842_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_synpred321_Emerson4845  */
static	ANTLR3_BITWORD FOLLOW_158_in_synpred321_Emerson4845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_synpred321_Emerson4845	= { FOLLOW_158_in_synpred321_Emerson4845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred326_Emerson4916  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred326_Emerson4916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred326_Emerson4916	= { FOLLOW_LTERM_in_synpred326_Emerson4916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_synpred329_Emerson4914  */
static	ANTLR3_BITWORD FOLLOW_128_in_synpred329_Emerson4914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001E00000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_synpred329_Emerson4914	= { FOLLOW_128_in_synpred329_Emerson4914_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred329_Emerson4916  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred329_Emerson4916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001E00000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred329_Emerson4916	= { FOLLOW_LTERM_in_synpred329_Emerson4916_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred329_Emerson4919  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred329_Emerson4919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred329_Emerson4919	= { FOLLOW_propertyNameAndValue_in_synpred329_Emerson4919_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred329_Emerson4922  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred329_Emerson4922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred329_Emerson4922	= { FOLLOW_LTERM_in_synpred329_Emerson4922_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_synpred329_Emerson4925  */
static	ANTLR3_BITWORD FOLLOW_129_in_synpred329_Emerson4925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_synpred329_Emerson4925	= { FOLLOW_129_in_synpred329_Emerson4925_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 134:18: ( ( LTERM )* sourceElement )*
 */
static const ANTLR3_INT32 dfa4_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa4_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa4_max[4] =
    {
	203, 203, -1, -1
    };
static const ANTLR3_INT32 dfa4_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa4_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa4_T_empty	    NULL

static const ANTLR3_INT32 dfa4_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, -1, -1, -1, 
	3, -1, 3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa4_transitions[] =
{
    dfa4_T0, dfa4_T0, dfa4_T_empty, dfa4_T_empty	
};


/* Declare tracking structure for Cyclic DFA 4
 */
static
ANTLR3_CYCLIC_DFA cdfa4
    =	{
	    4,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 134:18: ( ( LTERM )* sourceElement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa4_eot,	    /* EOT table			    */
	    dfa4_eof,	    /* EOF table			    */
	    dfa4_min,	    /* Minimum tokens for each state    */
	    dfa4_max,	    /* Maximum tokens for each state    */
	    dfa4_accept,	/* Accept table			    */
	    dfa4_special,	/* Special transition states	    */
	    dfa4_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 4
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    137:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static const ANTLR3_INT32 dfa5_eot[32] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[32] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[32] =
    {
	98, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_max[32] =
    {
	203, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_accept[32] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa5_special[32] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 2, -1, 2, 2, -1, -1, -1, -1, 
	2, -1, 2, 2, 2, -1, 2, 2, 2, 2, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa5_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T0, dfa5_T1, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty	
};

static ANTLR3_INT32 dfa5_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA5_1;

    	    ANTLR3_MARKER index5_1;


    		LA5_1 = LA(1);

    	 
    	    index5_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred5_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index5_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"137:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );";
    EXCEPTION->decisionNum  = 5;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"137:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );",	
	    (CDFA_SPECIAL_FUNC) dfa5_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    152:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?
 */
static const ANTLR3_INT32 dfa17_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa17_max[4] =
    {
	127, 127, -1, -1
    };
static const ANTLR3_INT32 dfa17_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa17_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa17_T_empty	    NULL

static const ANTLR3_INT32 dfa17_T0[] =
    {
	1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa17_transitions[] =
{
    dfa17_T0, dfa17_T0, dfa17_T_empty, dfa17_T_empty	
};


/* Declare tracking structure for Cyclic DFA 17
 */
static
ANTLR3_CYCLIC_DFA cdfa17
    =	{
	    17,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"152:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa17_eot,	    /* EOT table			    */
	    dfa17_eof,	    /* EOF table			    */
	    dfa17_min,	    /* Minimum tokens for each state    */
	    dfa17_max,	    /* Maximum tokens for each state    */
	    dfa17_accept,	/* Accept table			    */
	    dfa17_special,	/* Special transition states	    */
	    dfa17_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 17
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 152:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*
 */
static const ANTLR3_INT32 dfa16_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa16_max[4] =
    {
	127, 127, -1, -1
    };
static const ANTLR3_INT32 dfa16_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa16_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa16_T_empty	    NULL

static const ANTLR3_INT32 dfa16_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa16_transitions[] =
{
    dfa16_T0, dfa16_T0, dfa16_T_empty, dfa16_T_empty	
};


/* Declare tracking structure for Cyclic DFA 16
 */
static
ANTLR3_CYCLIC_DFA cdfa16
    =	{
	    16,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 152:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa16_eot,	    /* EOT table			    */
	    dfa16_eof,	    /* EOF table			    */
	    dfa16_min,	    /* Minimum tokens for each state    */
	    dfa16_max,	    /* Maximum tokens for each state    */
	    dfa16_accept,	/* Accept table			    */
	    dfa16_special,	/* Special transition states	    */
	    dfa16_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 16
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    155:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa22_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_min[5] =
    {
	128, 97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa22_max[5] =
    {
	128, 203, 203, -1, -1
    };
static const ANTLR3_INT32 dfa22_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa22_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa22_T_empty	    NULL

static const ANTLR3_INT32 dfa22_T0[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 4, 3, 3, -1, -1, -1, -1, 
	3, -1, 3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa22_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa22_transitions[] =
{
    dfa22_T1, dfa22_T0, dfa22_T0, dfa22_T_empty, dfa22_T_empty	
};


/* Declare tracking structure for Cyclic DFA 22
 */
static
ANTLR3_CYCLIC_DFA cdfa22
    =	{
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"155:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 22
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    161:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static const ANTLR3_INT32 dfa23_eot[35] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[35] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[35] =
    {
	98, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[35] =
    {
	203, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[35] =
    {
	-1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, 6, -1, -1, 7, 8, 9, 10, 12, 13, 14, 1, 15, 16, 11
    };
static const ANTLR3_INT32 dfa23_special[35] =
    {	
	-1, 0, -1, -1, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	5, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 1, -1, 2, 3, -1, -1, -1, -1, 
	20, -1, 21, 21, 21, -1, 24, 25, 26, 27, -1, 28, -1, -1, 29, 30, -1, -1, 
	-1, -1, 10, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 
	-1, -1, -1, 11, 11, 11, 11, 11, 11, 11, 4, 6, 6, 6
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T0, dfa23_T1, dfa23_T_empty, dfa23_T_empty, dfa23_T1, dfa23_T1, 
    dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty	
};

static ANTLR3_INT32 dfa23_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA23_1;

    	    ANTLR3_MARKER index23_1;


    		LA23_1 = LA(1);

    	 
    	    index23_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred23_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA23_4;

    	    ANTLR3_MARKER index23_4;


    		LA23_4 = LA(1);

    	 
    	    index23_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA23_5;

    	    ANTLR3_MARKER index23_5;


    		LA23_5 = LA(1);

    	 
    	    index23_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred33_Emerson(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA23_6;

    	    ANTLR3_MARKER index23_6;


    		LA23_6 = LA(1);

    	 
    	    index23_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA23_7;

    	    ANTLR3_MARKER index23_7;


    		LA23_7 = LA(1);

    	 
    	    index23_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA23_8;

    	    ANTLR3_MARKER index23_8;


    		LA23_8 = LA(1);

    	 
    	    index23_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA23_9;

    	    ANTLR3_MARKER index23_9;


    		LA23_9 = LA(1);

    	 
    	    index23_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA23_10;

    	    ANTLR3_MARKER index23_10;


    		LA23_10 = LA(1);

    	 
    	    index23_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"161:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement );";
    EXCEPTION->decisionNum  = 23;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"161:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa23_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 23
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    180:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa27_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_min[5] =
    {
	128, 97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa27_max[5] =
    {
	128, 203, 203, -1, -1
    };
static const ANTLR3_INT32 dfa27_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa27_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa27_T_empty	    NULL

static const ANTLR3_INT32 dfa27_T0[] =
    {
	1
    };static const ANTLR3_INT32 dfa27_T1[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 4, 3, 3, -1, -1, -1, -1, 
	3, -1, 3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa27_transitions[] =
{
    dfa27_T0, dfa27_T1, dfa27_T1, dfa27_T_empty, dfa27_T_empty	
};


/* Declare tracking structure for Cyclic DFA 27
 */
static
ANTLR3_CYCLIC_DFA cdfa27
    =	{
	    27,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"180:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa27_eot,	    /* EOT table			    */
	    dfa27_eof,	    /* EOF table			    */
	    dfa27_min,	    /* Minimum tokens for each state    */
	    dfa27_max,	    /* Maximum tokens for each state    */
	    dfa27_accept,	/* Accept table			    */
	    dfa27_special,	/* Special transition states	    */
	    dfa27_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 27
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 186:14: ( ( LTERM )* statement )*
 */
static const ANTLR3_INT32 dfa29_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa29_max[4] =
    {
	203, 203, -1, -1
    };
static const ANTLR3_INT32 dfa29_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa29_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa29_T_empty	    NULL

static const ANTLR3_INT32 dfa29_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, -1, -1, -1, 
	3, -1, 3, 3, 3, -1, 3, 3, 3, 3, -1, 3, 2, 2, 3, 3, -1, -1, -1, -1, 3, 3, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa29_transitions[] =
{
    dfa29_T0, dfa29_T0, dfa29_T_empty, dfa29_T_empty	
};


/* Declare tracking structure for Cyclic DFA 29
 */
static
ANTLR3_CYCLIC_DFA cdfa29
    =	{
	    29,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 186:14: ( ( LTERM )* statement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa29_eot,	    /* EOT table			    */
	    dfa29_eof,	    /* EOF table			    */
	    dfa29_min,	    /* Minimum tokens for each state    */
	    dfa29_max,	    /* Maximum tokens for each state    */
	    dfa29_accept,	/* Accept table			    */
	    dfa29_special,	/* Special transition states	    */
	    dfa29_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 29
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 194:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
 */
static const ANTLR3_INT32 dfa34_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa34_eof[5] =
    {
	-1, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa34_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa34_max[5] =
    {
	131, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa34_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa34_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa34_T_empty	    NULL

static const ANTLR3_INT32 dfa34_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, 2, 2, 2, 2, -1, -1, -1, -1, 
	2, 2, 2, 2, 2, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa34_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa34_transitions[] =
{
    dfa34_T1, dfa34_T0, dfa34_T_empty, dfa34_T_empty, dfa34_T0	
};


/* Declare tracking structure for Cyclic DFA 34
 */
static
ANTLR3_CYCLIC_DFA cdfa34
    =	{
	    34,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 194:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa34_eot,	    /* EOT table			    */
	    dfa34_eof,	    /* EOF table			    */
	    dfa34_min,	    /* Minimum tokens for each state    */
	    dfa34_max,	    /* Maximum tokens for each state    */
	    dfa34_accept,	/* Accept table			    */
	    dfa34_special,	/* Special transition states	    */
	    dfa34_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 34
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 198:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
 */
static const ANTLR3_INT32 dfa37_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa37_max[4] =
    {
	131, 131, -1, -1
    };
static const ANTLR3_INT32 dfa37_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa37_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa37_T_empty	    NULL

static const ANTLR3_INT32 dfa37_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa37_transitions[] =
{
    dfa37_T0, dfa37_T0, dfa37_T_empty, dfa37_T_empty	
};


/* Declare tracking structure for Cyclic DFA 37
 */
static
ANTLR3_CYCLIC_DFA cdfa37
    =	{
	    37,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 198:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa37_eot,	    /* EOT table			    */
	    dfa37_eof,	    /* EOF table			    */
	    dfa37_min,	    /* Minimum tokens for each state    */
	    dfa37_max,	    /* Maximum tokens for each state    */
	    dfa37_accept,	/* Accept table			    */
	    dfa37_special,	/* Special transition states	    */
	    dfa37_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 37
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    260:21: ( ( LTERM )* init= forStatementInitialiserPart )?
 */
static const ANTLR3_INT32 dfa73_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa73_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa73_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa73_max[4] =
    {
	203, 203, -1, -1
    };
static const ANTLR3_INT32 dfa73_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa73_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa73_T_empty	    NULL

static const ANTLR3_INT32 dfa73_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 2, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 
	-1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa73_transitions[] =
{
    dfa73_T0, dfa73_T0, dfa73_T_empty, dfa73_T_empty	
};


/* Declare tracking structure for Cyclic DFA 73
 */
static
ANTLR3_CYCLIC_DFA cdfa73
    =	{
	    73,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"260:21: ( ( LTERM )* init= forStatementInitialiserPart )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa73_eot,	    /* EOT table			    */
	    dfa73_eof,	    /* EOF table			    */
	    dfa73_min,	    /* Minimum tokens for each state    */
	    dfa73_max,	    /* Maximum tokens for each state    */
	    dfa73_accept,	/* Accept table			    */
	    dfa73_special,	/* Special transition states	    */
	    dfa73_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 73
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    260:75: ( ( LTERM )* cond= expression )?
 */
static const ANTLR3_INT32 dfa76_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa76_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa76_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa76_max[4] =
    {
	203, 203, -1, -1
    };
static const ANTLR3_INT32 dfa76_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa76_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa76_T_empty	    NULL

static const ANTLR3_INT32 dfa76_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 
	-1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa76_transitions[] =
{
    dfa76_T0, dfa76_T0, dfa76_T_empty, dfa76_T_empty	
};


/* Declare tracking structure for Cyclic DFA 76
 */
static
ANTLR3_CYCLIC_DFA cdfa76
    =	{
	    76,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"260:75: ( ( LTERM )* cond= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa76_eot,	    /* EOT table			    */
	    dfa76_eof,	    /* EOF table			    */
	    dfa76_min,	    /* Minimum tokens for each state    */
	    dfa76_max,	    /* Maximum tokens for each state    */
	    dfa76_accept,	/* Accept table			    */
	    dfa76_special,	/* Special transition states	    */
	    dfa76_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 76
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    260:112: ( ( LTERM )* iter= expression )?
 */
static const ANTLR3_INT32 dfa79_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa79_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa79_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa79_max[4] =
    {
	203, 203, -1, -1
    };
static const ANTLR3_INT32 dfa79_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa79_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa79_T_empty	    NULL

static const ANTLR3_INT32 dfa79_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 
	-1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa79_transitions[] =
{
    dfa79_T0, dfa79_T0, dfa79_T_empty, dfa79_T_empty	
};


/* Declare tracking structure for Cyclic DFA 79
 */
static
ANTLR3_CYCLIC_DFA cdfa79
    =	{
	    79,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"260:112: ( ( LTERM )* iter= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa79_eot,	    /* EOT table			    */
	    dfa79_eof,	    /* EOF table			    */
	    dfa79_min,	    /* Minimum tokens for each state    */
	    dfa79_max,	    /* Maximum tokens for each state    */
	    dfa79_accept,	/* Accept table			    */
	    dfa79_special,	/* Special transition states	    */
	    dfa79_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 79
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 302:8: ( ( LTERM )* case1= caseClause )*
 */
static const ANTLR3_INT32 dfa109_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa109_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa109_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa109_max[4] =
    {
	149, 149, -1, -1
    };
static const ANTLR3_INT32 dfa109_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa109_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa109_T_empty	    NULL

static const ANTLR3_INT32 dfa109_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa109_transitions[] =
{
    dfa109_T0, dfa109_T0, dfa109_T_empty, dfa109_T_empty	
};


/* Declare tracking structure for Cyclic DFA 109
 */
static
ANTLR3_CYCLIC_DFA cdfa109
    =	{
	    109,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 302:8: ( ( LTERM )* case1= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa109_eot,	    /* EOT table			    */
	    dfa109_eof,	    /* EOF table			    */
	    dfa109_min,	    /* Minimum tokens for each state    */
	    dfa109_max,	    /* Maximum tokens for each state    */
	    dfa109_accept,	/* Accept table			    */
	    dfa109_special,	/* Special transition states	    */
	    dfa109_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 109
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    302:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
 */
static const ANTLR3_INT32 dfa113_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa113_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa113_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa113_max[4] =
    {
	149, 149, -1, -1
    };
static const ANTLR3_INT32 dfa113_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa113_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa113_T_empty	    NULL

static const ANTLR3_INT32 dfa113_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa113_transitions[] =
{
    dfa113_T0, dfa113_T0, dfa113_T_empty, dfa113_T_empty	
};


/* Declare tracking structure for Cyclic DFA 113
 */
static
ANTLR3_CYCLIC_DFA cdfa113
    =	{
	    113,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"302:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa113_eot,	    /* EOT table			    */
	    dfa113_eof,	    /* EOF table			    */
	    dfa113_min,	    /* Minimum tokens for each state    */
	    dfa113_max,	    /* Maximum tokens for each state    */
	    dfa113_accept,	/* Accept table			    */
	    dfa113_special,	/* Special transition states	    */
	    dfa113_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 113
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 302:57: ( ( LTERM )* case2= caseClause )*
 */
static const ANTLR3_INT32 dfa112_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa112_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa112_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa112_max[4] =
    {
	148, 148, -1, -1
    };
static const ANTLR3_INT32 dfa112_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa112_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa112_T_empty	    NULL

static const ANTLR3_INT32 dfa112_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa112_transitions[] =
{
    dfa112_T0, dfa112_T0, dfa112_T_empty, dfa112_T_empty	
};


/* Declare tracking structure for Cyclic DFA 112
 */
static
ANTLR3_CYCLIC_DFA cdfa112
    =	{
	    112,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 302:57: ( ( LTERM )* case2= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa112_eot,	    /* EOT table			    */
	    dfa112_eof,	    /* EOF table			    */
	    dfa112_min,	    /* Minimum tokens for each state    */
	    dfa112_max,	    /* Maximum tokens for each state    */
	    dfa112_accept,	/* Accept table			    */
	    dfa112_special,	/* Special transition states	    */
	    dfa112_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 112
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    318:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
 */
static const ANTLR3_INT32 dfa126_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa126_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa126_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa126_max[4] =
    {
	203, 203, -1, -1
    };
static const ANTLR3_INT32 dfa126_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa126_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa126_T_empty	    NULL

static const ANTLR3_INT32 dfa126_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 
	3, 3, 3, 3, 3, -1, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, -1, 2, -1, -1, 3, 3, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa126_transitions[] =
{
    dfa126_T0, dfa126_T0, dfa126_T_empty, dfa126_T_empty	
};


/* Declare tracking structure for Cyclic DFA 126
 */
static
ANTLR3_CYCLIC_DFA cdfa126
    =	{
	    126,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"318:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa126_eot,	    /* EOT table			    */
	    dfa126_eof,	    /* EOF table			    */
	    dfa126_min,	    /* Minimum tokens for each state    */
	    dfa126_max,	    /* Maximum tokens for each state    */
	    dfa126_accept,	/* Accept table			    */
	    dfa126_special,	/* Special transition states	    */
	    dfa126_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 126
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    338:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static const ANTLR3_INT32 dfa141_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa141_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa141_min[11] =
    {
	98, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa141_max[11] =
    {
	203, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa141_accept[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa141_special[11] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa141_T_empty	    NULL

static const ANTLR3_INT32 dfa141_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa141_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa141_transitions[] =
{
    dfa141_T0, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, 
    dfa141_T1, dfa141_T1, dfa141_T_empty, dfa141_T_empty	
};

static ANTLR3_INT32 dfa141_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA141_1;

    	    ANTLR3_MARKER index141_1;


    		LA141_1 = LA(1);

    	 
    	    index141_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index141_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA141_2;

    	    ANTLR3_MARKER index141_2;


    		LA141_2 = LA(1);

    	 
    	    index141_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index141_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA141_3;

    	    ANTLR3_MARKER index141_3;


    		LA141_3 = LA(1);

    	 
    	    index141_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index141_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA141_4;

    	    ANTLR3_MARKER index141_4;


    		LA141_4 = LA(1);

    	 
    	    index141_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index141_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA141_5;

    	    ANTLR3_MARKER index141_5;


    		LA141_5 = LA(1);

    	 
    	    index141_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index141_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA141_6;

    	    ANTLR3_MARKER index141_6;


    		LA141_6 = LA(1);

    	 
    	    index141_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index141_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA141_7;

    	    ANTLR3_MARKER index141_7;


    		LA141_7 = LA(1);

    	 
    	    index141_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index141_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA141_8;

    	    ANTLR3_MARKER index141_8;


    		LA141_8 = LA(1);

    	 
    	    index141_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index141_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"338:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );";
    EXCEPTION->decisionNum  = 141;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 141
 */
static
ANTLR3_CYCLIC_DFA cdfa141
    =	{
	    141,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"338:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );",	
	    (CDFA_SPECIAL_FUNC) dfa141_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa141_eot,	    /* EOT table			    */
	    dfa141_eof,	    /* EOF table			    */
	    dfa141_min,	    /* Minimum tokens for each state    */
	    dfa141_max,	    /* Maximum tokens for each state    */
	    dfa141_accept,	/* Accept table			    */
	    dfa141_special,	/* Special transition states	    */
	    dfa141_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 141
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 345:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
 */
static const ANTLR3_INT32 dfa144_eot[39] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa144_eof[39] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa144_min[39] =
    {
	97, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa144_max[39] =
    {
	203, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa144_accept[39] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1
    };
static const ANTLR3_INT32 dfa144_special[39] =
    {	
	-1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa144_T_empty	    NULL

static const ANTLR3_INT32 dfa144_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 5, 2, 2, -1, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa144_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa144_transitions[] =
{
    dfa144_T0, dfa144_T1, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T1, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty	
};

static ANTLR3_INT32 dfa144_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA144_1;

    	    ANTLR3_MARKER index144_1;


    		LA144_1 = LA(1);

    	 
    	    index144_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 38;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index144_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA144_5;

    	    ANTLR3_MARKER index144_5;


    		LA144_5 = LA(1);

    	 
    	    index144_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 38;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index144_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 345:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*";
    EXCEPTION->decisionNum  = 144;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 144
 */
static
ANTLR3_CYCLIC_DFA cdfa144
    =	{
	    144,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 345:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*",	
	    (CDFA_SPECIAL_FUNC) dfa144_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa144_eot,	    /* EOT table			    */
	    dfa144_eof,	    /* EOF table			    */
	    dfa144_min,	    /* Minimum tokens for each state    */
	    dfa144_max,	    /* Maximum tokens for each state    */
	    dfa144_accept,	/* Accept table			    */
	    dfa144_special,	/* Special transition states	    */
	    dfa144_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 144
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 349:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
 */
static const ANTLR3_INT32 dfa147_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa147_max[4] =
    {
	131, 131, -1, -1
    };
static const ANTLR3_INT32 dfa147_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa147_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa147_T_empty	    NULL

static const ANTLR3_INT32 dfa147_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa147_transitions[] =
{
    dfa147_T0, dfa147_T0, dfa147_T_empty, dfa147_T_empty	
};


/* Declare tracking structure for Cyclic DFA 147
 */
static
ANTLR3_CYCLIC_DFA cdfa147
    =	{
	    147,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 349:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa147_eot,	    /* EOT table			    */
	    dfa147_eof,	    /* EOF table			    */
	    dfa147_min,	    /* Minimum tokens for each state    */
	    dfa147_max,	    /* Maximum tokens for each state    */
	    dfa147_accept,	/* Accept table			    */
	    dfa147_special,	/* Special transition states	    */
	    dfa147_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 147
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    353:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static const ANTLR3_INT32 dfa150_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa150_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa150_min[19] =
    {
	98, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa150_max[19] =
    {
	203, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa150_accept[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa150_special[19] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa150_T_empty	    NULL

static const ANTLR3_INT32 dfa150_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, -1, -1, 
	-1, 9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa150_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa150_transitions[] =
{
    dfa150_T0, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, 
    dfa150_T1, dfa150_T1, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, 
    dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, 
    dfa150_T_empty, dfa150_T_empty	
};

static ANTLR3_INT32 dfa150_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA150_1;

    	    ANTLR3_MARKER index150_1;


    		LA150_1 = LA(1);

    	 
    	    index150_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index150_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA150_2;

    	    ANTLR3_MARKER index150_2;


    		LA150_2 = LA(1);

    	 
    	    index150_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index150_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA150_3;

    	    ANTLR3_MARKER index150_3;


    		LA150_3 = LA(1);

    	 
    	    index150_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index150_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA150_4;

    	    ANTLR3_MARKER index150_4;


    		LA150_4 = LA(1);

    	 
    	    index150_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index150_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA150_5;

    	    ANTLR3_MARKER index150_5;


    		LA150_5 = LA(1);

    	 
    	    index150_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index150_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA150_6;

    	    ANTLR3_MARKER index150_6;


    		LA150_6 = LA(1);

    	 
    	    index150_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index150_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA150_7;

    	    ANTLR3_MARKER index150_7;


    		LA150_7 = LA(1);

    	 
    	    index150_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index150_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA150_8;

    	    ANTLR3_MARKER index150_8;


    		LA150_8 = LA(1);

    	 
    	    index150_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index150_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"353:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );";
    EXCEPTION->decisionNum  = 150;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 150
 */
static
ANTLR3_CYCLIC_DFA cdfa150
    =	{
	    150,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"353:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa150_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa150_eot,	    /* EOT table			    */
	    dfa150_eof,	    /* EOF table			    */
	    dfa150_min,	    /* Minimum tokens for each state    */
	    dfa150_max,	    /* Maximum tokens for each state    */
	    dfa150_accept,	/* Accept table			    */
	    dfa150_special,	/* Special transition states	    */
	    dfa150_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 150
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    358:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static const ANTLR3_INT32 dfa153_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa153_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa153_min[19] =
    {
	98, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_max[19] =
    {
	203, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_accept[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa153_special[19] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa153_T_empty	    NULL

static const ANTLR3_INT32 dfa153_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, -1, -1, 
	-1, 9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa153_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa153_transitions[] =
{
    dfa153_T0, dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T1, 
    dfa153_T1, dfa153_T1, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty	
};

static ANTLR3_INT32 dfa153_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA153_1;

    	    ANTLR3_MARKER index153_1;


    		LA153_1 = LA(1);

    	 
    	    index153_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA153_2;

    	    ANTLR3_MARKER index153_2;


    		LA153_2 = LA(1);

    	 
    	    index153_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA153_3;

    	    ANTLR3_MARKER index153_3;


    		LA153_3 = LA(1);

    	 
    	    index153_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA153_4;

    	    ANTLR3_MARKER index153_4;


    		LA153_4 = LA(1);

    	 
    	    index153_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA153_5;

    	    ANTLR3_MARKER index153_5;


    		LA153_5 = LA(1);

    	 
    	    index153_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA153_6;

    	    ANTLR3_MARKER index153_6;


    		LA153_6 = LA(1);

    	 
    	    index153_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA153_7;

    	    ANTLR3_MARKER index153_7;


    		LA153_7 = LA(1);

    	 
    	    index153_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA153_8;

    	    ANTLR3_MARKER index153_8;


    		LA153_8 = LA(1);

    	 
    	    index153_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"358:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );";
    EXCEPTION->decisionNum  = 153;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 153
 */
static
ANTLR3_CYCLIC_DFA cdfa153
    =	{
	    153,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"358:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );",	
	    (CDFA_SPECIAL_FUNC) dfa153_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa153_eot,	    /* EOT table			    */
	    dfa153_eof,	    /* EOF table			    */
	    dfa153_min,	    /* Minimum tokens for each state    */
	    dfa153_max,	    /* Maximum tokens for each state    */
	    dfa153_accept,	/* Accept table			    */
	    dfa153_special,	/* Special transition states	    */
	    dfa153_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 153
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    363:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static const ANTLR3_INT32 dfa154_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa154_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa154_min[11] =
    {
	98, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa154_max[11] =
    {
	203, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa154_accept[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa154_special[11] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa154_T_empty	    NULL

static const ANTLR3_INT32 dfa154_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa154_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa154_transitions[] =
{
    dfa154_T0, dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T1, 
    dfa154_T1, dfa154_T1, dfa154_T_empty, dfa154_T_empty	
};

static ANTLR3_INT32 dfa154_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA154_1;

    	    ANTLR3_MARKER index154_1;


    		LA154_1 = LA(1);

    	 
    	    index154_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index154_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA154_2;

    	    ANTLR3_MARKER index154_2;


    		LA154_2 = LA(1);

    	 
    	    index154_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index154_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA154_3;

    	    ANTLR3_MARKER index154_3;


    		LA154_3 = LA(1);

    	 
    	    index154_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index154_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA154_4;

    	    ANTLR3_MARKER index154_4;


    		LA154_4 = LA(1);

    	 
    	    index154_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index154_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA154_5;

    	    ANTLR3_MARKER index154_5;


    		LA154_5 = LA(1);

    	 
    	    index154_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index154_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA154_6;

    	    ANTLR3_MARKER index154_6;


    		LA154_6 = LA(1);

    	 
    	    index154_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index154_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA154_7;

    	    ANTLR3_MARKER index154_7;


    		LA154_7 = LA(1);

    	 
    	    index154_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index154_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA154_8;

    	    ANTLR3_MARKER index154_8;


    		LA154_8 = LA(1);

    	 
    	    index154_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index154_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"363:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );";
    EXCEPTION->decisionNum  = 154;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 154
 */
static
ANTLR3_CYCLIC_DFA cdfa154
    =	{
	    154,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"363:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa154_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa154_eot,	    /* EOT table			    */
	    dfa154_eof,	    /* EOF table			    */
	    dfa154_min,	    /* Minimum tokens for each state    */
	    dfa154_max,	    /* Maximum tokens for each state    */
	    dfa154_accept,	/* Accept table			    */
	    dfa154_special,	/* Special transition states	    */
	    dfa154_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 154
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    368:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa156_eot[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_eof[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_min[10] =
    {
	98, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa156_max[10] =
    {
	203, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa156_accept[10] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa156_special[10] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa156_T_empty	    NULL

static const ANTLR3_INT32 dfa156_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa156_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa156_transitions[] =
{
    dfa156_T0, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T1, dfa156_T_empty	
};

static ANTLR3_INT32 dfa156_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA156_8;

    	    ANTLR3_MARKER index156_8;


    		LA156_8 = LA(1);

    	 
    	    index156_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 9;
    	    }

    	 
    		SEEK(index156_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"368:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 156;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 156
 */
static
ANTLR3_CYCLIC_DFA cdfa156
    =	{
	    156,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"368:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa156_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa156_eot,	    /* EOT table			    */
	    dfa156_eof,	    /* EOF table			    */
	    dfa156_min,	    /* Minimum tokens for each state    */
	    dfa156_max,	    /* Maximum tokens for each state    */
	    dfa156_accept,	/* Accept table			    */
	    dfa156_special,	/* Special transition states	    */
	    dfa156_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 156
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 386:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa162_eot[79] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_eof[79] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_min[79] =
    {
	97, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_max[79] =
    {
	203, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_accept[79] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa162_special[79] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa162_T_empty	    NULL

static const ANTLR3_INT32 dfa162_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 77, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa162_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa162_transitions[] =
{
    dfa162_T0, dfa162_T1, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T1, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty	
};

static ANTLR3_INT32 dfa162_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA162_1;

    	    ANTLR3_MARKER index162_1;


    		LA162_1 = LA(1);

    	 
    	    index162_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred177_Emerson(ctx)) )
    	    {
    	        s = 77;
    	    }

    	    else if ( (synpred179_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index162_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA162_9;

    	    ANTLR3_MARKER index162_9;


    		LA162_9 = LA(1);

    	 
    	    index162_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred179_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index162_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 386:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 162;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 162
 */
static
ANTLR3_CYCLIC_DFA cdfa162
    =	{
	    162,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 386:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa162_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa162_eot,	    /* EOT table			    */
	    dfa162_eof,	    /* EOF table			    */
	    dfa162_min,	    /* Minimum tokens for each state    */
	    dfa162_max,	    /* Maximum tokens for each state    */
	    dfa162_accept,	/* Accept table			    */
	    dfa162_special,	/* Special transition states	    */
	    dfa162_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 162
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 387:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa165_eot[79] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_eof[79] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_min[79] =
    {
	97, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_max[79] =
    {
	203, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_accept[79] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa165_special[79] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa165_T_empty	    NULL

static const ANTLR3_INT32 dfa165_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 77, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa165_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa165_transitions[] =
{
    dfa165_T0, dfa165_T1, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T1, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty	
};

static ANTLR3_INT32 dfa165_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA165_1;

    	    ANTLR3_MARKER index165_1;


    		LA165_1 = LA(1);

    	 
    	    index165_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_Emerson(ctx)) )
    	    {
    	        s = 77;
    	    }

    	    else if ( (synpred184_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index165_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA165_9;

    	    ANTLR3_MARKER index165_9;


    		LA165_9 = LA(1);

    	 
    	    index165_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred184_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index165_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 387:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 165;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 165
 */
static
ANTLR3_CYCLIC_DFA cdfa165
    =	{
	    165,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 387:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa165_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa165_eot,	    /* EOT table			    */
	    dfa165_eof,	    /* EOF table			    */
	    dfa165_min,	    /* Minimum tokens for each state    */
	    dfa165_max,	    /* Maximum tokens for each state    */
	    dfa165_accept,	/* Accept table			    */
	    dfa165_special,	/* Special transition states	    */
	    dfa165_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 165
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 388:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa170_eot[79] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa170_eof[79] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa170_min[79] =
    {
	97, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa170_max[79] =
    {
	203, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa170_accept[79] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa170_special[79] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa170_T_empty	    NULL

static const ANTLR3_INT32 dfa170_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 77, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa170_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa170_transitions[] =
{
    dfa170_T0, dfa170_T1, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T1, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty	
};

static ANTLR3_INT32 dfa170_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA170_1;

    	    ANTLR3_MARKER index170_1;


    		LA170_1 = LA(1);

    	 
    	    index170_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred189_Emerson(ctx)) )
    	    {
    	        s = 77;
    	    }

    	    else if ( (synpred191_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index170_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA170_9;

    	    ANTLR3_MARKER index170_9;


    		LA170_9 = LA(1);

    	 
    	    index170_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred191_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index170_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 388:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 170;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 170
 */
static
ANTLR3_CYCLIC_DFA cdfa170
    =	{
	    170,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 388:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa170_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa170_eot,	    /* EOT table			    */
	    dfa170_eof,	    /* EOF table			    */
	    dfa170_min,	    /* Minimum tokens for each state    */
	    dfa170_max,	    /* Maximum tokens for each state    */
	    dfa170_accept,	/* Accept table			    */
	    dfa170_special,	/* Special transition states	    */
	    dfa170_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 170
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 397:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa177_eot[77] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa177_eof[77] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa177_min[77] =
    {
	97, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa177_max[77] =
    {
	203, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa177_accept[77] =
    {
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 3, 1, 2
    };
static const ANTLR3_INT32 dfa177_special[77] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa177_T_empty	    NULL

static const ANTLR3_INT32 dfa177_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 52, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, 2, 2, 2, 51, 
	2, 74, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa177_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa177_transitions[] =
{
    dfa177_T0, dfa177_T1, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T1, dfa177_T1, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty	
};

static ANTLR3_INT32 dfa177_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA177_1;

    	    ANTLR3_MARKER index177_1;


    		LA177_1 = LA(1);

    	 
    	    index177_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred195_Emerson(ctx)) )
    	    {
    	        s = 75;
    	    }

    	    else if ( (synpred197_Emerson(ctx)) )
    	    {
    	        s = 76;
    	    }

    	    else if ( (synpred199_Emerson(ctx)) )
    	    {
    	        s = 74;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index177_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA177_51;

    	    ANTLR3_MARKER index177_51;


    		LA177_51 = LA(1);

    	 
    	    index177_51 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred197_Emerson(ctx)) )
    	    {
    	        s = 76;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index177_51);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA177_52;

    	    ANTLR3_MARKER index177_52;


    		LA177_52 = LA(1);

    	 
    	    index177_52 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred195_Emerson(ctx)) )
    	    {
    	        s = 75;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index177_52);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 397:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*";
    EXCEPTION->decisionNum  = 177;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 177
 */
static
ANTLR3_CYCLIC_DFA cdfa177
    =	{
	    177,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 397:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa177_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa177_eot,	    /* EOT table			    */
	    dfa177_eof,	    /* EOF table			    */
	    dfa177_min,	    /* Minimum tokens for each state    */
	    dfa177_max,	    /* Maximum tokens for each state    */
	    dfa177_accept,	/* Accept table			    */
	    dfa177_special,	/* Special transition states	    */
	    dfa177_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 177
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    407:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?
 */
static const ANTLR3_INT32 dfa183_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa183_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa183_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa183_max[4] =
    {
	203, 203, -1, -1
    };
static const ANTLR3_INT32 dfa183_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa183_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa183_T_empty	    NULL

static const ANTLR3_INT32 dfa183_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 
	-1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa183_transitions[] =
{
    dfa183_T0, dfa183_T0, dfa183_T_empty, dfa183_T_empty	
};


/* Declare tracking structure for Cyclic DFA 183
 */
static
ANTLR3_CYCLIC_DFA cdfa183
    =	{
	    183,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"407:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa183_eot,	    /* EOT table			    */
	    dfa183_eof,	    /* EOF table			    */
	    dfa183_min,	    /* Minimum tokens for each state    */
	    dfa183_max,	    /* Maximum tokens for each state    */
	    dfa183_accept,	/* Accept table			    */
	    dfa183_special,	/* Special transition states	    */
	    dfa183_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 183
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 407:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
 */
static const ANTLR3_INT32 dfa182_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa182_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa182_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa182_max[4] =
    {
	127, 127, -1, -1
    };
static const ANTLR3_INT32 dfa182_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa182_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa182_T_empty	    NULL

static const ANTLR3_INT32 dfa182_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa182_transitions[] =
{
    dfa182_T0, dfa182_T0, dfa182_T_empty, dfa182_T_empty	
};


/* Declare tracking structure for Cyclic DFA 182
 */
static
ANTLR3_CYCLIC_DFA cdfa182
    =	{
	    182,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 407:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa182_eot,	    /* EOT table			    */
	    dfa182_eof,	    /* EOF table			    */
	    dfa182_min,	    /* Minimum tokens for each state    */
	    dfa182_max,	    /* Maximum tokens for each state    */
	    dfa182_accept,	/* Accept table			    */
	    dfa182_special,	/* Special transition states	    */
	    dfa182_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 182
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    424:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa193_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa193_eof[5] =
    {
	3, 3, -1, -1, 3
    };
static const ANTLR3_INT32 dfa193_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa193_max[5] =
    {
	203, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa193_accept[5] =
    {
	-1, -1, 1, 2, -1
    };
static const ANTLR3_INT32 dfa193_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa193_T_empty	    NULL

static const ANTLR3_INT32 dfa193_T0[] =
    {
	4, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
	3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, 3, 3, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa193_T1[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
	3, -1, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 
	3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa193_transitions[] =
{
    dfa193_T1, dfa193_T0, dfa193_T_empty, dfa193_T_empty, dfa193_T0	
};


/* Declare tracking structure for Cyclic DFA 193
 */
static
ANTLR3_CYCLIC_DFA cdfa193
    =	{
	    193,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"424:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa193_eot,	    /* EOT table			    */
	    dfa193_eof,	    /* EOF table			    */
	    dfa193_min,	    /* Minimum tokens for each state    */
	    dfa193_max,	    /* Maximum tokens for each state    */
	    dfa193_accept,	/* Accept table			    */
	    dfa193_special,	/* Special transition states	    */
	    dfa193_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 193
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    428:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa198_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa198_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa198_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa198_max[4] =
    {
	171, 171, -1, -1
    };
static const ANTLR3_INT32 dfa198_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa198_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa198_T_empty	    NULL

static const ANTLR3_INT32 dfa198_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa198_transitions[] =
{
    dfa198_T0, dfa198_T0, dfa198_T_empty, dfa198_T_empty	
};


/* Declare tracking structure for Cyclic DFA 198
 */
static
ANTLR3_CYCLIC_DFA cdfa198
    =	{
	    198,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"428:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa198_eot,	    /* EOT table			    */
	    dfa198_eof,	    /* EOF table			    */
	    dfa198_min,	    /* Minimum tokens for each state    */
	    dfa198_max,	    /* Maximum tokens for each state    */
	    dfa198_accept,	/* Accept table			    */
	    dfa198_special,	/* Special transition states	    */
	    dfa198_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 198
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 433:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
 */
static const ANTLR3_INT32 dfa201_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa201_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa201_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa201_max[5] =
    {
	203, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa201_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa201_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa201_T_empty	    NULL

static const ANTLR3_INT32 dfa201_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa201_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa201_transitions[] =
{
    dfa201_T1, dfa201_T0, dfa201_T_empty, dfa201_T_empty, dfa201_T0	
};


/* Declare tracking structure for Cyclic DFA 201
 */
static
ANTLR3_CYCLIC_DFA cdfa201
    =	{
	    201,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 433:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa201_eot,	    /* EOT table			    */
	    dfa201_eof,	    /* EOF table			    */
	    dfa201_min,	    /* Minimum tokens for each state    */
	    dfa201_max,	    /* Maximum tokens for each state    */
	    dfa201_accept,	/* Accept table			    */
	    dfa201_special,	/* Special transition states	    */
	    dfa201_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 201
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 437:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
 */
static const ANTLR3_INT32 dfa204_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa204_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa204_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa204_max[5] =
    {
	203, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa204_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa204_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa204_T_empty	    NULL

static const ANTLR3_INT32 dfa204_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa204_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa204_transitions[] =
{
    dfa204_T0, dfa204_T1, dfa204_T_empty, dfa204_T_empty, dfa204_T1	
};


/* Declare tracking structure for Cyclic DFA 204
 */
static
ANTLR3_CYCLIC_DFA cdfa204
    =	{
	    204,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 437:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa204_eot,	    /* EOT table			    */
	    dfa204_eof,	    /* EOF table			    */
	    dfa204_min,	    /* Minimum tokens for each state    */
	    dfa204_max,	    /* Maximum tokens for each state    */
	    dfa204_accept,	/* Accept table			    */
	    dfa204_special,	/* Special transition states	    */
	    dfa204_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 204
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 441:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa207_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa207_max[4] =
    {
	172, 172, -1, -1
    };
static const ANTLR3_INT32 dfa207_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa207_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa207_T_empty	    NULL

static const ANTLR3_INT32 dfa207_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa207_transitions[] =
{
    dfa207_T0, dfa207_T0, dfa207_T_empty, dfa207_T_empty	
};


/* Declare tracking structure for Cyclic DFA 207
 */
static
ANTLR3_CYCLIC_DFA cdfa207
    =	{
	    207,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 441:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa207_eot,	    /* EOT table			    */
	    dfa207_eof,	    /* EOF table			    */
	    dfa207_min,	    /* Minimum tokens for each state    */
	    dfa207_max,	    /* Maximum tokens for each state    */
	    dfa207_accept,	/* Accept table			    */
	    dfa207_special,	/* Special transition states	    */
	    dfa207_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 207
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 446:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa210_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa210_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa210_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa210_max[4] =
    {
	173, 173, -1, -1
    };
static const ANTLR3_INT32 dfa210_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa210_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa210_T_empty	    NULL

static const ANTLR3_INT32 dfa210_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa210_transitions[] =
{
    dfa210_T0, dfa210_T0, dfa210_T_empty, dfa210_T_empty	
};


/* Declare tracking structure for Cyclic DFA 210
 */
static
ANTLR3_CYCLIC_DFA cdfa210
    =	{
	    210,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 446:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa210_eot,	    /* EOT table			    */
	    dfa210_eof,	    /* EOF table			    */
	    dfa210_min,	    /* Minimum tokens for each state    */
	    dfa210_max,	    /* Maximum tokens for each state    */
	    dfa210_accept,	/* Accept table			    */
	    dfa210_special,	/* Special transition states	    */
	    dfa210_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 210
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 450:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
 */
static const ANTLR3_INT32 dfa213_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa213_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa213_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa213_max[5] =
    {
	203, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa213_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa213_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa213_T_empty	    NULL

static const ANTLR3_INT32 dfa213_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa213_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa213_transitions[] =
{
    dfa213_T1, dfa213_T0, dfa213_T_empty, dfa213_T_empty, dfa213_T0	
};


/* Declare tracking structure for Cyclic DFA 213
 */
static
ANTLR3_CYCLIC_DFA cdfa213
    =	{
	    213,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 450:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa213_eot,	    /* EOT table			    */
	    dfa213_eof,	    /* EOF table			    */
	    dfa213_min,	    /* Minimum tokens for each state    */
	    dfa213_max,	    /* Maximum tokens for each state    */
	    dfa213_accept,	/* Accept table			    */
	    dfa213_special,	/* Special transition states	    */
	    dfa213_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 213
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 454:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa216_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa216_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa216_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa216_max[4] =
    {
	174, 174, -1, -1
    };
static const ANTLR3_INT32 dfa216_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa216_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa216_T_empty	    NULL

static const ANTLR3_INT32 dfa216_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa216_transitions[] =
{
    dfa216_T0, dfa216_T0, dfa216_T_empty, dfa216_T_empty	
};


/* Declare tracking structure for Cyclic DFA 216
 */
static
ANTLR3_CYCLIC_DFA cdfa216
    =	{
	    216,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 454:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa216_eot,	    /* EOT table			    */
	    dfa216_eof,	    /* EOF table			    */
	    dfa216_min,	    /* Minimum tokens for each state    */
	    dfa216_max,	    /* Maximum tokens for each state    */
	    dfa216_accept,	/* Accept table			    */
	    dfa216_special,	/* Special transition states	    */
	    dfa216_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 216
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 458:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
 */
static const ANTLR3_INT32 dfa219_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa219_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa219_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa219_max[5] =
    {
	203, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa219_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa219_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa219_T_empty	    NULL

static const ANTLR3_INT32 dfa219_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa219_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa219_transitions[] =
{
    dfa219_T1, dfa219_T0, dfa219_T_empty, dfa219_T_empty, dfa219_T0	
};


/* Declare tracking structure for Cyclic DFA 219
 */
static
ANTLR3_CYCLIC_DFA cdfa219
    =	{
	    219,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 458:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa219_eot,	    /* EOT table			    */
	    dfa219_eof,	    /* EOF table			    */
	    dfa219_min,	    /* Minimum tokens for each state    */
	    dfa219_max,	    /* Maximum tokens for each state    */
	    dfa219_accept,	/* Accept table			    */
	    dfa219_special,	/* Special transition states	    */
	    dfa219_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 219
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 462:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa222_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa222_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa222_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa222_max[4] =
    {
	175, 175, -1, -1
    };
static const ANTLR3_INT32 dfa222_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa222_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa222_T_empty	    NULL

static const ANTLR3_INT32 dfa222_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa222_transitions[] =
{
    dfa222_T0, dfa222_T0, dfa222_T_empty, dfa222_T_empty	
};


/* Declare tracking structure for Cyclic DFA 222
 */
static
ANTLR3_CYCLIC_DFA cdfa222
    =	{
	    222,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 462:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa222_eot,	    /* EOT table			    */
	    dfa222_eof,	    /* EOF table			    */
	    dfa222_min,	    /* Minimum tokens for each state    */
	    dfa222_max,	    /* Maximum tokens for each state    */
	    dfa222_accept,	/* Accept table			    */
	    dfa222_special,	/* Special transition states	    */
	    dfa222_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 222
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 466:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
 */
static const ANTLR3_INT32 dfa225_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa225_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa225_max[5] =
    {
	203, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa225_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa225_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa225_T_empty	    NULL

static const ANTLR3_INT32 dfa225_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa225_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa225_transitions[] =
{
    dfa225_T1, dfa225_T0, dfa225_T_empty, dfa225_T_empty, dfa225_T0	
};


/* Declare tracking structure for Cyclic DFA 225
 */
static
ANTLR3_CYCLIC_DFA cdfa225
    =	{
	    225,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 466:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa225_eot,	    /* EOT table			    */
	    dfa225_eof,	    /* EOF table			    */
	    dfa225_min,	    /* Minimum tokens for each state    */
	    dfa225_max,	    /* Maximum tokens for each state    */
	    dfa225_accept,	/* Accept table			    */
	    dfa225_special,	/* Special transition states	    */
	    dfa225_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 225
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 470:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa228_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa228_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa228_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa228_max[4] =
    {
	176, 176, -1, -1
    };
static const ANTLR3_INT32 dfa228_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa228_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa228_T_empty	    NULL

static const ANTLR3_INT32 dfa228_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa228_transitions[] =
{
    dfa228_T0, dfa228_T0, dfa228_T_empty, dfa228_T_empty	
};


/* Declare tracking structure for Cyclic DFA 228
 */
static
ANTLR3_CYCLIC_DFA cdfa228
    =	{
	    228,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 470:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa228_eot,	    /* EOT table			    */
	    dfa228_eof,	    /* EOF table			    */
	    dfa228_min,	    /* Minimum tokens for each state    */
	    dfa228_max,	    /* Maximum tokens for each state    */
	    dfa228_accept,	/* Accept table			    */
	    dfa228_special,	/* Special transition states	    */
	    dfa228_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 228
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 474:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
 */
static const ANTLR3_INT32 dfa231_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa231_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa231_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa231_max[5] =
    {
	203, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa231_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa231_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa231_T_empty	    NULL

static const ANTLR3_INT32 dfa231_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 3, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa231_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa231_transitions[] =
{
    dfa231_T1, dfa231_T0, dfa231_T_empty, dfa231_T_empty, dfa231_T0	
};


/* Declare tracking structure for Cyclic DFA 231
 */
static
ANTLR3_CYCLIC_DFA cdfa231
    =	{
	    231,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 474:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa231_eot,	    /* EOT table			    */
	    dfa231_eof,	    /* EOF table			    */
	    dfa231_min,	    /* Minimum tokens for each state    */
	    dfa231_max,	    /* Maximum tokens for each state    */
	    dfa231_accept,	/* Accept table			    */
	    dfa231_special,	/* Special transition states	    */
	    dfa231_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 231
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 485:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa235_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa235_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa235_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa235_max[4] =
    {
	180, 180, -1, -1
    };
static const ANTLR3_INT32 dfa235_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa235_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa235_T_empty	    NULL

static const ANTLR3_INT32 dfa235_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 2, 2, 2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa235_transitions[] =
{
    dfa235_T0, dfa235_T0, dfa235_T_empty, dfa235_T_empty	
};


/* Declare tracking structure for Cyclic DFA 235
 */
static
ANTLR3_CYCLIC_DFA cdfa235
    =	{
	    235,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 485:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa235_eot,	    /* EOT table			    */
	    dfa235_eof,	    /* EOF table			    */
	    dfa235_min,	    /* Minimum tokens for each state    */
	    dfa235_max,	    /* Maximum tokens for each state    */
	    dfa235_accept,	/* Accept table			    */
	    dfa235_special,	/* Special transition states	    */
	    dfa235_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 235
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 499:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa239_eot[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa239_eof[54] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa239_min[54] =
    {
	97, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa239_max[54] =
    {
	203, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa239_accept[54] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa239_special[54] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa239_T_empty	    NULL

static const ANTLR3_INT32 dfa239_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 15, 
	2, -1, 2, 2, 2, 49, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 49, 49, 49, 49, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa239_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa239_transitions[] =
{
    dfa239_T0, dfa239_T1, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T1, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, 
    dfa239_T_empty, dfa239_T_empty, dfa239_T_empty, dfa239_T_empty	
};

static ANTLR3_INT32 dfa239_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA239_1;

    	    ANTLR3_MARKER index239_1;


    		LA239_1 = LA(1);

    	 
    	    index239_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred278_Emerson(ctx)) )
    	    {
    	        s = 49;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index239_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA239_15;

    	    ANTLR3_MARKER index239_15;


    		LA239_15 = LA(1);

    	 
    	    index239_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred278_Emerson(ctx)) )
    	    {
    	        s = 49;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index239_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 499:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*";
    EXCEPTION->decisionNum  = 239;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 239
 */
static
ANTLR3_CYCLIC_DFA cdfa239
    =	{
	    239,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 499:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa239_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa239_eot,	    /* EOT table			    */
	    dfa239_eof,	    /* EOF table			    */
	    dfa239_min,	    /* Minimum tokens for each state    */
	    dfa239_max,	    /* Maximum tokens for each state    */
	    dfa239_accept,	/* Accept table			    */
	    dfa239_special,	/* Special transition states	    */
	    dfa239_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 239
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 511:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa243_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa243_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa243_min[4] =
    {
	97, 97, -1, -1
    };
static const ANTLR3_INT32 dfa243_max[4] =
    {
	184, 184, -1, -1
    };
static const ANTLR3_INT32 dfa243_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa243_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa243_T_empty	    NULL

static const ANTLR3_INT32 dfa243_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, 3, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa243_transitions[] =
{
    dfa243_T0, dfa243_T0, dfa243_T_empty, dfa243_T_empty	
};


/* Declare tracking structure for Cyclic DFA 243
 */
static
ANTLR3_CYCLIC_DFA cdfa243
    =	{
	    243,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 511:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa243_eot,	    /* EOT table			    */
	    dfa243_eof,	    /* EOF table			    */
	    dfa243_min,	    /* Minimum tokens for each state    */
	    dfa243_max,	    /* Maximum tokens for each state    */
	    dfa243_accept,	/* Accept table			    */
	    dfa243_special,	/* Special transition states	    */
	    dfa243_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 243
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 521:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa247_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa247_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa247_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa247_max[5] =
    {
	203, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa247_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa247_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa247_T_empty	    NULL

static const ANTLR3_INT32 dfa247_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa247_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa247_transitions[] =
{
    dfa247_T1, dfa247_T0, dfa247_T_empty, dfa247_T_empty, dfa247_T0	
};


/* Declare tracking structure for Cyclic DFA 247
 */
static
ANTLR3_CYCLIC_DFA cdfa247
    =	{
	    247,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 521:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa247_eot,	    /* EOT table			    */
	    dfa247_eof,	    /* EOF table			    */
	    dfa247_min,	    /* Minimum tokens for each state    */
	    dfa247_max,	    /* Maximum tokens for each state    */
	    dfa247_accept,	/* Accept table			    */
	    dfa247_special,	/* Special transition states	    */
	    dfa247_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 247
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 532:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
 */
static const ANTLR3_INT32 dfa251_eot[58] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa251_eof[58] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa251_min[58] =
    {
	97, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa251_max[58] =
    {
	203, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa251_accept[58] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa251_special[58] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa251_T_empty	    NULL

static const ANTLR3_INT32 dfa251_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 39, 40, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa251_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa251_transitions[] =
{
    dfa251_T0, dfa251_T1, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T1, 
    dfa251_T1, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty	
};

static ANTLR3_INT32 dfa251_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA251_1;

    	    ANTLR3_MARKER index251_1;


    		LA251_1 = LA(1);

    	 
    	    index251_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred294_Emerson(ctx)) )
    	    {
    	        s = 57;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index251_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA251_39;

    	    ANTLR3_MARKER index251_39;


    		LA251_39 = LA(1);

    	 
    	    index251_39 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred294_Emerson(ctx)) )
    	    {
    	        s = 57;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index251_39);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA251_40;

    	    ANTLR3_MARKER index251_40;


    		LA251_40 = LA(1);

    	 
    	    index251_40 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred294_Emerson(ctx)) )
    	    {
    	        s = 57;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index251_40);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 532:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*";
    EXCEPTION->decisionNum  = 251;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 251
 */
static
ANTLR3_CYCLIC_DFA cdfa251
    =	{
	    251,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 532:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa251_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa251_eot,	    /* EOT table			    */
	    dfa251_eof,	    /* EOF table			    */
	    dfa251_min,	    /* Minimum tokens for each state    */
	    dfa251_max,	    /* Maximum tokens for each state    */
	    dfa251_accept,	/* Accept table			    */
	    dfa251_special,	/* Special transition states	    */
	    dfa251_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 251
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 542:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
 */
static const ANTLR3_INT32 dfa255_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa255_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa255_min[5] =
    {
	97, 97, -1, -1, 97
    };
static const ANTLR3_INT32 dfa255_max[5] =
    {
	203, 203, -1, -1, 203
    };
static const ANTLR3_INT32 dfa255_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa255_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa255_T_empty	    NULL

static const ANTLR3_INT32 dfa255_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2
    };static const ANTLR3_INT32 dfa255_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa255_transitions[] =
{
    dfa255_T1, dfa255_T0, dfa255_T_empty, dfa255_T_empty, dfa255_T0	
};


/* Declare tracking structure for Cyclic DFA 255
 */
static
ANTLR3_CYCLIC_DFA cdfa255
    =	{
	    255,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 542:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa255_eot,	    /* EOT table			    */
	    dfa255_eof,	    /* EOF table			    */
	    dfa255_min,	    /* Minimum tokens for each state    */
	    dfa255_max,	    /* Maximum tokens for each state    */
	    dfa255_accept,	/* Accept table			    */
	    dfa255_special,	/* Special transition states	    */
	    dfa255_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 255
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    547:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
 */
static const ANTLR3_INT32 dfa256_eot[62] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa256_eof[62] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa256_min[62] =
    {
	97, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa256_max[62] =
    {
	203, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa256_accept[62] =
    {
	-1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa256_special[62] =
    {	
	-1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa256_T_empty	    NULL

static const ANTLR3_INT32 dfa256_T0[] =
    {
	3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, 3, 
	3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 
	3, 3
    };static const ANTLR3_INT32 dfa256_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa256_transitions[] =
{
    dfa256_T0, dfa256_T1, dfa256_T1, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, dfa256_T_empty, 
    dfa256_T_empty	
};

static ANTLR3_INT32 dfa256_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA256_1;

    	    ANTLR3_MARKER index256_1;


    		LA256_1 = LA(1);

    	 
    	    index256_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred300_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 3;
    	    }

    	 
    		SEEK(index256_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA256_2;

    	    ANTLR3_MARKER index256_2;


    		LA256_2 = LA(1);

    	 
    	    index256_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 61;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 3;
    	    }

    	 
    		SEEK(index256_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"547:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?";
    EXCEPTION->decisionNum  = 256;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 256
 */
static
ANTLR3_CYCLIC_DFA cdfa256
    =	{
	    256,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"547:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?",	
	    (CDFA_SPECIAL_FUNC) dfa256_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa256_eot,	    /* EOT table			    */
	    dfa256_eof,	    /* EOF table			    */
	    dfa256_min,	    /* Minimum tokens for each state    */
	    dfa256_max,	    /* Maximum tokens for each state    */
	    dfa256_accept,	/* Accept table			    */
	    dfa256_special,	/* Special transition states	    */
	    dfa256_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 256
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//Emerson.g:128:1: program : (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) ;
 */
static EmersonParser_program_return
program(pEmersonParser ctx)
{   
    EmersonParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    LTERM2;
    pANTLR3_COMMON_TOKEN    EOF3;
    EmersonParser_sourceElements_return sourceElements1;
    #undef	RETURN_TYPE_sourceElements1
    #define	RETURN_TYPE_sourceElements1 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE LTERM2_tree;
    pANTLR3_BASE_TREE EOF3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        return retval; 
    }
    a       = NULL;
    LTERM2       = NULL;
    EOF3       = NULL;
    sourceElements1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    a_tree   = NULL;
    LTERM2_tree   = NULL;
    EOF3_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:129:2: ( (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) )
        // .//Emerson.g:129:4: (a= LTERM )* sourceElements ( LTERM )* EOF
        {

            // .//Emerson.g:129:5: (a= LTERM )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == LTERM) ) 
                    {
                        alt1=1;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: a= LTERM
            	    {
            	        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program771); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, a, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_sourceElements_in_program774);
            sourceElements1=sourceElements(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements1.tree, NULL); }

            // .//Emerson.g:129:28: ( LTERM )*

            for (;;)
            {
                int alt2=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (LA2_0 == LTERM) ) 
                    {
                        alt2=1;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM2 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program776); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM2, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */

            EOF3 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_program779); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF3, NULL); }


             
            /* AST REWRITE
             * elements          : sourceElements
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 129:39: -> ^( PROG sourceElements )
            	{
            	    // .//Emerson.g:129:42: ^( PROG sourceElements )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROG, (pANTLR3_UINT8)"PROG"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }
    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//Emerson.g:133:1: sourceElements : sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ ;
 */
static EmersonParser_sourceElements_return
sourceElements(pEmersonParser ctx)
{   
    EmersonParser_sourceElements_return retval;
    ANTLR3_UINT32 sourceElements_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM5;
    EmersonParser_sourceElement_return sourceElement4;
    #undef	RETURN_TYPE_sourceElement4
    #define	RETURN_TYPE_sourceElement4 EmersonParser_sourceElement_return

    EmersonParser_sourceElement_return sourceElement6;
    #undef	RETURN_TYPE_sourceElement6
    #define	RETURN_TYPE_sourceElement6 EmersonParser_sourceElement_return

    pANTLR3_BASE_TREE LTERM5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElement;
    /* Initialize rule variables
     */
    sourceElements_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM5       = NULL;
    sourceElement4.tree = NULL;

    sourceElement6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM5_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_sourceElement   = NULL;
    #define CREATE_stream_sourceElement  if (stream_sourceElement == NULL) {stream_sourceElement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:134:2: ( sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ )
        // .//Emerson.g:134:4: sourceElement ( ( LTERM )* sourceElement )*
        {
            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements800);
            sourceElement4=sourceElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceElementsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement4.tree, NULL); }

            // .//Emerson.g:134:18: ( ( LTERM )* sourceElement )*

            for (;;)
            {
                int alt4=2;
                alt4 = cdfa4.predict(ctx, RECOGNIZER, ISTREAM, &cdfa4);
                if  (HASEXCEPTION())
                {
                    goto rulesourceElementsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//Emerson.g:134:19: ( LTERM )* sourceElement
            	    {

            	        // .//Emerson.g:134:19: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt3=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA3_0 = LA(1);
            	                if ( (LA3_0 == LTERM) ) 
            	                {
            	                    alt3=1;
            	                }

            	            }
            	            switch (alt3) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM5 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_sourceElements803); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceElementsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM5, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop3;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop3: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements806);
            	        sourceElement6=sourceElement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceElementsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : sourceElement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 134:42: -> ( sourceElement )+
            	{
            	    if ((stream_sourceElement == NULL || !stream_sourceElement->hasNext(stream_sourceElement))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_sourceElement->hasNext(stream_sourceElement))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElement == NULL ? NULL : stream_sourceElement->nextTree(stream_sourceElement));

            	    	}
            	    	stream_sourceElement->reset(stream_sourceElement);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_sourceElement != NULL) stream_sourceElement->free(stream_sourceElement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, sourceElements_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//Emerson.g:137:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static EmersonParser_sourceElement_return
sourceElement(pEmersonParser ctx)
{   
    EmersonParser_sourceElement_return retval;
    ANTLR3_UINT32 sourceElement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_functionDeclaration_return functionDeclaration7;
    #undef	RETURN_TYPE_functionDeclaration7
    #define	RETURN_TYPE_functionDeclaration7 EmersonParser_functionDeclaration_return

    EmersonParser_statement_return statement8;
    #undef	RETURN_TYPE_statement8
    #define	RETURN_TYPE_statement8 EmersonParser_statement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionDeclaration;
    /* Initialize rule variables
     */
    sourceElement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        return retval; 
    }
    functionDeclaration7.tree = NULL;

    statement8.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_functionDeclaration   = NULL;
    #define CREATE_stream_functionDeclaration  if (stream_functionDeclaration == NULL) {stream_functionDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionDeclaration"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:138:2: ( functionDeclaration -> functionDeclaration | statement -> statement )
            
            ANTLR3_UINT32 alt5;

            alt5=2;

            alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
            if  (HASEXCEPTION())
            {
                goto rulesourceElementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt5) 
            {
        	case 1:
        	    // .//Emerson.g:138:4: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement827);
        	        functionDeclaration7=functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_functionDeclaration; stream_functionDeclaration->add(stream_functionDeclaration, functionDeclaration7.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : functionDeclaration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 138:24: -> functionDeclaration
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionDeclaration == NULL ? NULL : stream_functionDeclaration->nextTree(stream_functionDeclaration));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:139:4: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement836);
        	        statement8=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement8.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 139:14: -> statement
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_functionDeclaration != NULL) stream_functionDeclaration->free(stream_functionDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, sourceElement_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//Emerson.g:143:1: functionDeclaration : 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_DECL Identifier formalParameterList functionBody ) ;
 */
static EmersonParser_functionDeclaration_return
functionDeclaration(pEmersonParser ctx)
{   
    EmersonParser_functionDeclaration_return retval;
    ANTLR3_UINT32 functionDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal9;
    pANTLR3_COMMON_TOKEN    LTERM10;
    pANTLR3_COMMON_TOKEN    Identifier11;
    pANTLR3_COMMON_TOKEN    LTERM12;
    pANTLR3_COMMON_TOKEN    LTERM14;
    EmersonParser_formalParameterList_return formalParameterList13;
    #undef	RETURN_TYPE_formalParameterList13
    #define	RETURN_TYPE_formalParameterList13 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody15;
    #undef	RETURN_TYPE_functionBody15
    #define	RETURN_TYPE_functionBody15 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal9_tree;
    pANTLR3_BASE_TREE LTERM10_tree;
    pANTLR3_BASE_TREE Identifier11_tree;
    pANTLR3_BASE_TREE LTERM12_tree;
    pANTLR3_BASE_TREE LTERM14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal9       = NULL;
    LTERM10       = NULL;
    Identifier11       = NULL;
    LTERM12       = NULL;
    LTERM14       = NULL;
    formalParameterList13.tree = NULL;

    functionBody15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal9_tree   = NULL;
    LTERM10_tree   = NULL;
    Identifier11_tree   = NULL;
    LTERM12_tree   = NULL;
    LTERM14_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:144:2: ( 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_DECL Identifier formalParameterList functionBody ) )
        // .//Emerson.g:144:4: 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody
        {
            string_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_functionDeclaration853); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, string_literal9, NULL); }


            // .//Emerson.g:144:15: ( LTERM )*

            for (;;)
            {
                int alt6=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == LTERM) ) 
                    {
                        alt6=1;
                    }

                }
                switch (alt6) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM10 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration855); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM10, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */

            Identifier11 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration858); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier11, NULL); }


            // .//Emerson.g:144:33: ( LTERM )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == LTERM) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM12 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration860); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM12, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration863);
            formalParameterList13=formalParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList13.tree, NULL); }

            // .//Emerson.g:144:60: ( LTERM )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == LTERM) ) 
                    {
                        alt8=1;
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM14 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration865); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM14, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration868);
            functionBody15=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody15.tree, NULL); }

             
            /* AST REWRITE
             * elements          : formalParameterList, Identifier, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 144:80: -> ^( FUNC_DECL Identifier formalParameterList functionBody )
            	{
            	    // .//Emerson.g:144:83: ^( FUNC_DECL Identifier formalParameterList functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DECL, (pANTLR3_UINT8)"FUNC_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, functionDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//Emerson.g:147:1: functionExpression : 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody ) ;
 */
static EmersonParser_functionExpression_return
functionExpression(pEmersonParser ctx)
{   
    EmersonParser_functionExpression_return retval;
    ANTLR3_UINT32 functionExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal16;
    pANTLR3_COMMON_TOKEN    LTERM17;
    pANTLR3_COMMON_TOKEN    Identifier18;
    pANTLR3_COMMON_TOKEN    LTERM19;
    pANTLR3_COMMON_TOKEN    LTERM21;
    EmersonParser_formalParameterList_return formalParameterList20;
    #undef	RETURN_TYPE_formalParameterList20
    #define	RETURN_TYPE_formalParameterList20 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody22;
    #undef	RETURN_TYPE_functionBody22
    #define	RETURN_TYPE_functionBody22 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal16_tree;
    pANTLR3_BASE_TREE LTERM17_tree;
    pANTLR3_BASE_TREE Identifier18_tree;
    pANTLR3_BASE_TREE LTERM19_tree;
    pANTLR3_BASE_TREE LTERM21_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal16       = NULL;
    LTERM17       = NULL;
    Identifier18       = NULL;
    LTERM19       = NULL;
    LTERM21       = NULL;
    formalParameterList20.tree = NULL;

    functionBody22.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal16_tree   = NULL;
    LTERM17_tree   = NULL;
    Identifier18_tree   = NULL;
    LTERM19_tree   = NULL;
    LTERM21_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:148:2: ( 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody ) )
        // .//Emerson.g:148:4: 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody
        {
            string_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_functionExpression892); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, string_literal16, NULL); }


            // .//Emerson.g:148:15: ( LTERM )*

            for (;;)
            {
                int alt9=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA9_2 = LA(2);
                            if ( (synpred9_Emerson(ctx)) ) 
                            {
                                alt9=1;
                            }

                        }
                    }

                }
                switch (alt9) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM17 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression894); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM17, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:148:22: ( Identifier )?
            {
                int alt10=2;
                {
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == Identifier) ) 
                    {
                        alt10=1;
                    }
                }
                switch (alt10) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier18 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression897); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier18, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:148:34: ( LTERM )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == LTERM) ) 
                    {
                        alt11=1;
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM19 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression900); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM19, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression903);
            formalParameterList20=formalParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList20.tree, NULL); }

            // .//Emerson.g:148:61: ( LTERM )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == LTERM) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM21 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression905); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM21, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression908);
            functionBody22=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody22.tree, NULL); }

             
            /* AST REWRITE
             * elements          : formalParameterList, functionBody, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 148:81: -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody )
            	{
            	    // .//Emerson.g:148:84: ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_EXPR, (pANTLR3_UINT8)"FUNC_EXPR"), root_1));

            	        // .//Emerson.g:148:97: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, functionExpression_StartIndex); }
    return retval;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//Emerson.g:151:1: formalParameterList : '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')' -> ^( FUNC_PARAMS ( $i1)? ( $i2)* ) ;
 */
static EmersonParser_formalParameterList_return
formalParameterList(pEmersonParser ctx)
{   
    EmersonParser_formalParameterList_return retval;
    ANTLR3_UINT32 formalParameterList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    i1;
    pANTLR3_COMMON_TOKEN    i2;
    pANTLR3_COMMON_TOKEN    char_literal23;
    pANTLR3_COMMON_TOKEN    LTERM24;
    pANTLR3_COMMON_TOKEN    LTERM25;
    pANTLR3_COMMON_TOKEN    char_literal26;
    pANTLR3_COMMON_TOKEN    LTERM27;
    pANTLR3_COMMON_TOKEN    LTERM28;
    pANTLR3_COMMON_TOKEN    char_literal29;

    pANTLR3_BASE_TREE i1_tree;
    pANTLR3_BASE_TREE i2_tree;
    pANTLR3_BASE_TREE char_literal23_tree;
    pANTLR3_BASE_TREE LTERM24_tree;
    pANTLR3_BASE_TREE LTERM25_tree;
    pANTLR3_BASE_TREE char_literal26_tree;
    pANTLR3_BASE_TREE LTERM27_tree;
    pANTLR3_BASE_TREE LTERM28_tree;
    pANTLR3_BASE_TREE char_literal29_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    formalParameterList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        return retval; 
    }
    i1       = NULL;
    i2       = NULL;
    char_literal23       = NULL;
    LTERM24       = NULL;
    LTERM25       = NULL;
    char_literal26       = NULL;
    LTERM27       = NULL;
    LTERM28       = NULL;
    char_literal29       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    i1_tree   = NULL;
    i2_tree   = NULL;
    char_literal23_tree   = NULL;
    LTERM24_tree   = NULL;
    LTERM25_tree   = NULL;
    char_literal26_tree   = NULL;
    LTERM27_tree   = NULL;
    LTERM28_tree   = NULL;
    char_literal29_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:152:2: ( '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')' -> ^( FUNC_PARAMS ( $i1)? ( $i2)* ) )
        // .//Emerson.g:152:4: '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')'
        {
            char_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_formalParameterList935); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal23, NULL); }


            // .//Emerson.g:152:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?
            {
                int alt17=2;
                alt17 = cdfa17.predict(ctx, RECOGNIZER, ISTREAM, &cdfa17);
                if  (HASEXCEPTION())
                {
                    goto ruleformalParameterListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt17) 
                {
            	case 1:
            	    // .//Emerson.g:152:9: ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*
            	    {

            	        // .//Emerson.g:152:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt13=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA13_0 = LA(1);
            	                if ( (LA13_0 == LTERM) ) 
            	                {
            	                    alt13=1;
            	                }

            	            }
            	            switch (alt13) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM24 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList938); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM24, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop13;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop13: ; /* Jump out to here if this rule does not match */

            	        i1 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList943); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, i1, NULL); }


            	        // .//Emerson.g:152:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*

            	        for (;;)
            	        {
            	            int alt16=2;
            	            alt16 = cdfa16.predict(ctx, RECOGNIZER, ISTREAM, &cdfa16);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleformalParameterListEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt16) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:152:31: ( LTERM )* ',' ( LTERM )* i2= Identifier
            	        	    {

            	        	        // .//Emerson.g:152:31: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt14=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA14_0 = LA(1);
            	        	                if ( (LA14_0 == LTERM) ) 
            	        	                {
            	        	                    alt14=1;
            	        	                }

            	        	            }
            	        	            switch (alt14) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM25 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList946); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleformalParameterListEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM25, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop14;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop14: ; /* Jump out to here if this rule does not match */

            	        	        char_literal26 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_formalParameterList949); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal26, NULL); }


            	        	        // .//Emerson.g:152:42: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt15=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA15_0 = LA(1);
            	        	                if ( (LA15_0 == LTERM) ) 
            	        	                {
            	        	                    alt15=1;
            	        	                }

            	        	            }
            	        	            switch (alt15) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM27 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList951); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleformalParameterListEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM27, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop15;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop15: ; /* Jump out to here if this rule does not match */

            	        	        i2 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList956); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, i2, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop16;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop16: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:152:67: ( LTERM )*

            for (;;)
            {
                int alt18=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == LTERM) ) 
                    {
                        alt18=1;
                    }

                }
                switch (alt18) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM28 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList962); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM28, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */

            char_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_formalParameterList965); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal29, NULL); }


             
            /* AST REWRITE
             * elements          : i2, i1
             * token labels      : i2, i1
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i2;
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_i2=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i2", i2);
            	stream_i1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i1", i1);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 152:78: -> ^( FUNC_PARAMS ( $i1)? ( $i2)* )
            	{
            	    // .//Emerson.g:152:81: ^( FUNC_PARAMS ( $i1)? ( $i2)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_PARAMS, (pANTLR3_UINT8)"FUNC_PARAMS"), root_1));

            	        // .//Emerson.g:152:96: ( $i1)?
            	        {
            	        	if ( (stream_i1 != NULL && stream_i1->hasNext(stream_i1))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_i1 == NULL ? NULL : stream_i1->nextNode(stream_i1));

            	        	}
            	        	if ( stream_i1 != NULL) stream_i1->reset(stream_i1);

            	        }
            	        // .//Emerson.g:152:101: ( $i2)*
            	        {
            	        	while ( (stream_i2 != NULL && stream_i2->hasNext(stream_i2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_i2 == NULL ? NULL : stream_i2->nextNode(stream_i2));

            	        	}
            	        	if (stream_i2 != NULL) stream_i2->reset(stream_i2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_i2 != NULL) stream_i2->free(stream_i2); 
            	if (stream_i1 != NULL) stream_i1->free(stream_i1); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, formalParameterList_StartIndex); }
    return retval;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//Emerson.g:155:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static EmersonParser_functionBody_return
functionBody(pEmersonParser ctx)
{   
    EmersonParser_functionBody_return retval;
    ANTLR3_UINT32 functionBody_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal30;
    pANTLR3_COMMON_TOKEN    LTERM31;
    pANTLR3_COMMON_TOKEN    char_literal32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    LTERM34;
    pANTLR3_COMMON_TOKEN    LTERM36;
    pANTLR3_COMMON_TOKEN    char_literal37;
    EmersonParser_sourceElements_return sourceElements35;
    #undef	RETURN_TYPE_sourceElements35
    #define	RETURN_TYPE_sourceElements35 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE char_literal30_tree;
    pANTLR3_BASE_TREE LTERM31_tree;
    pANTLR3_BASE_TREE char_literal32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE LTERM34_tree;
    pANTLR3_BASE_TREE LTERM36_tree;
    pANTLR3_BASE_TREE char_literal37_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    functionBody_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal30       = NULL;
    LTERM31       = NULL;
    char_literal32       = NULL;
    char_literal33       = NULL;
    LTERM34       = NULL;
    LTERM36       = NULL;
    char_literal37       = NULL;
    sourceElements35.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal30_tree   = NULL;
    LTERM31_tree   = NULL;
    char_literal32_tree   = NULL;
    char_literal33_tree   = NULL;
    LTERM34_tree   = NULL;
    LTERM36_tree   = NULL;
    char_literal37_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:156:2: ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt22;

            alt22=2;

            alt22 = cdfa22.predict(ctx, RECOGNIZER, ISTREAM, &cdfa22);
            if  (HASEXCEPTION())
            {
                goto rulefunctionBodyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//Emerson.g:156:4: '{' ( LTERM )* '}'
        	    {
        	        char_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_functionBody991); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal30, NULL); }


        	        // .//Emerson.g:156:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt19=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA19_0 = LA(1);
        	                if ( (LA19_0 == LTERM) ) 
        	                {
        	                    alt19=1;
        	                }

        	            }
        	            switch (alt19) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM31 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody993); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM31, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop19;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop19: ; /* Jump out to here if this rule does not match */

        	        char_literal32 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_functionBody996); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal32, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 156:19: -> ^( EMPTY_FUNC_BODY )
        	        	{
        	        	    // .//Emerson.g:156:22: ^( EMPTY_FUNC_BODY )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_FUNC_BODY, (pANTLR3_UINT8)"EMPTY_FUNC_BODY"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:157:4: '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}'
        	    {
        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_functionBody1007); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal33, NULL); }


        	        // .//Emerson.g:157:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA20_0 = LA(1);
        	                if ( (LA20_0 == LTERM) ) 
        	                {
        	                    alt20=1;
        	                }

        	            }
        	            switch (alt20) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM34 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1009); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM34, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:157:15: ( sourceElements -> sourceElements )
        	        // .//Emerson.g:157:16: sourceElements
        	        {
        	            FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody1013);
        	            sourceElements35=sourceElements(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefunctionBodyEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements35.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sourceElements
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 157:31: -> sourceElements
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:157:50: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA21_0 = LA(1);
        	                if ( (LA21_0 == LTERM) ) 
        	                {
        	                    alt21=1;
        	                }

        	            }
        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM36 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1020); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM36, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	        char_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_functionBody1023); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal37, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, functionBody_StartIndex); }
    return retval;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//Emerson.g:161:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static EmersonParser_statement_return
statement(pEmersonParser ctx)
{   
    EmersonParser_statement_return retval;
    ANTLR3_UINT32 statement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_statementBlock_return statementBlock38;
    #undef	RETURN_TYPE_statementBlock38
    #define	RETURN_TYPE_statementBlock38 EmersonParser_statementBlock_return

    EmersonParser_variableStatement_return variableStatement39;
    #undef	RETURN_TYPE_variableStatement39
    #define	RETURN_TYPE_variableStatement39 EmersonParser_variableStatement_return

    EmersonParser_emptyStatement_return emptyStatement40;
    #undef	RETURN_TYPE_emptyStatement40
    #define	RETURN_TYPE_emptyStatement40 EmersonParser_emptyStatement_return

    EmersonParser_expressionStatement_return expressionStatement41;
    #undef	RETURN_TYPE_expressionStatement41
    #define	RETURN_TYPE_expressionStatement41 EmersonParser_expressionStatement_return

    EmersonParser_ifStatement_return ifStatement42;
    #undef	RETURN_TYPE_ifStatement42
    #define	RETURN_TYPE_ifStatement42 EmersonParser_ifStatement_return

    EmersonParser_iterationStatement_return iterationStatement43;
    #undef	RETURN_TYPE_iterationStatement43
    #define	RETURN_TYPE_iterationStatement43 EmersonParser_iterationStatement_return

    EmersonParser_continueStatement_return continueStatement44;
    #undef	RETURN_TYPE_continueStatement44
    #define	RETURN_TYPE_continueStatement44 EmersonParser_continueStatement_return

    EmersonParser_breakStatement_return breakStatement45;
    #undef	RETURN_TYPE_breakStatement45
    #define	RETURN_TYPE_breakStatement45 EmersonParser_breakStatement_return

    EmersonParser_returnStatement_return returnStatement46;
    #undef	RETURN_TYPE_returnStatement46
    #define	RETURN_TYPE_returnStatement46 EmersonParser_returnStatement_return

    EmersonParser_withStatement_return withStatement47;
    #undef	RETURN_TYPE_withStatement47
    #define	RETURN_TYPE_withStatement47 EmersonParser_withStatement_return

    EmersonParser_labelledStatement_return labelledStatement48;
    #undef	RETURN_TYPE_labelledStatement48
    #define	RETURN_TYPE_labelledStatement48 EmersonParser_labelledStatement_return

    EmersonParser_switchStatement_return switchStatement49;
    #undef	RETURN_TYPE_switchStatement49
    #define	RETURN_TYPE_switchStatement49 EmersonParser_switchStatement_return

    EmersonParser_throwStatement_return throwStatement50;
    #undef	RETURN_TYPE_throwStatement50
    #define	RETURN_TYPE_throwStatement50 EmersonParser_throwStatement_return

    EmersonParser_tryStatement_return tryStatement51;
    #undef	RETURN_TYPE_tryStatement51
    #define	RETURN_TYPE_tryStatement51 EmersonParser_tryStatement_return

    EmersonParser_msgSendStatement_return msgSendStatement52;
    #undef	RETURN_TYPE_msgSendStatement52
    #define	RETURN_TYPE_msgSendStatement52 EmersonParser_msgSendStatement_return

    EmersonParser_msgRecvStatement_return msgRecvStatement53;
    #undef	RETURN_TYPE_msgRecvStatement53
    #define	RETURN_TYPE_msgRecvStatement53 EmersonParser_msgRecvStatement_return


    /* Initialize rule variables
     */
    statement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        return retval; 
    }
    statementBlock38.tree = NULL;

    variableStatement39.tree = NULL;

    emptyStatement40.tree = NULL;

    expressionStatement41.tree = NULL;

    ifStatement42.tree = NULL;

    iterationStatement43.tree = NULL;

    continueStatement44.tree = NULL;

    breakStatement45.tree = NULL;

    returnStatement46.tree = NULL;

    withStatement47.tree = NULL;

    labelledStatement48.tree = NULL;

    switchStatement49.tree = NULL;

    throwStatement50.tree = NULL;

    tryStatement51.tree = NULL;

    msgSendStatement52.tree = NULL;

    msgRecvStatement53.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:162:2: ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement )
            
            ANTLR3_UINT32 alt23;

            alt23=16;

            alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//Emerson.g:162:4: statementBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement1035);
        	        statementBlock38=statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statementBlock38.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:163:4: variableStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement1040);
        	        variableStatement39=variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableStatement39.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:164:4: emptyStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_emptyStatement_in_statement1045);
        	        emptyStatement40=emptyStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, emptyStatement40.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:165:4: expressionStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement1050);
        	        expressionStatement41=expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionStatement41.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:166:4: ifStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement1055);
        	        ifStatement42=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStatement42.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:167:4: iterationStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement1060);
        	        iterationStatement43=iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iterationStatement43.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:168:4: continueStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement1065);
        	        continueStatement44=continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continueStatement44.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:169:4: breakStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement1070);
        	        breakStatement45=breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, breakStatement45.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:170:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1075);
        	        returnStatement46=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement46.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:171:4: withStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement1080);
        	        withStatement47=withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, withStatement47.tree);

        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:172:4: labelledStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_labelledStatement_in_statement1085);
        	        labelledStatement48=labelledStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, labelledStatement48.tree);

        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:173:4: switchStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement1090);
        	        switchStatement49=switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switchStatement49.tree);

        	    }
        	    break;
        	case 13:
        	    // .//Emerson.g:174:4: throwStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement1095);
        	        throwStatement50=throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throwStatement50.tree);

        	    }
        	    break;
        	case 14:
        	    // .//Emerson.g:175:4: tryStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement1100);
        	        tryStatement51=tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tryStatement51.tree);

        	    }
        	    break;
        	case 15:
        	    // .//Emerson.g:176:4: msgSendStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgSendStatement_in_statement1105);
        	        msgSendStatement52=msgSendStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgSendStatement52.tree);

        	    }
        	    break;
        	case 16:
        	    // .//Emerson.g:177:4: msgRecvStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_statement1110);
        	        msgRecvStatement53=msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgRecvStatement53.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, statement_StartIndex); }
    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start statementBlock
 * .//Emerson.g:180:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static EmersonParser_statementBlock_return
statementBlock(pEmersonParser ctx)
{   
    EmersonParser_statementBlock_return retval;
    ANTLR3_UINT32 statementBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal54;
    pANTLR3_COMMON_TOKEN    LTERM55;
    pANTLR3_COMMON_TOKEN    char_literal56;
    pANTLR3_COMMON_TOKEN    char_literal57;
    pANTLR3_COMMON_TOKEN    LTERM58;
    pANTLR3_COMMON_TOKEN    LTERM60;
    pANTLR3_COMMON_TOKEN    char_literal61;
    EmersonParser_statementList_return statementList59;
    #undef	RETURN_TYPE_statementList59
    #define	RETURN_TYPE_statementList59 EmersonParser_statementList_return

    pANTLR3_BASE_TREE char_literal54_tree;
    pANTLR3_BASE_TREE LTERM55_tree;
    pANTLR3_BASE_TREE char_literal56_tree;
    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_BASE_TREE LTERM58_tree;
    pANTLR3_BASE_TREE LTERM60_tree;
    pANTLR3_BASE_TREE char_literal61_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    statementBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal54       = NULL;
    LTERM55       = NULL;
    char_literal56       = NULL;
    char_literal57       = NULL;
    LTERM58       = NULL;
    LTERM60       = NULL;
    char_literal61       = NULL;
    statementList59.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal54_tree   = NULL;
    LTERM55_tree   = NULL;
    char_literal56_tree   = NULL;
    char_literal57_tree   = NULL;
    LTERM58_tree   = NULL;
    LTERM60_tree   = NULL;
    char_literal61_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:181:2: ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt27;

            alt27=2;

            alt27 = cdfa27.predict(ctx, RECOGNIZER, ISTREAM, &cdfa27);
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt27) 
            {
        	case 1:
        	    // .//Emerson.g:181:4: '{' ( LTERM )* '}'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal54 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_statementBlock1122); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal54_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal54));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal54_tree);
        	        }

        	        // .//Emerson.g:181:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt24=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA24_0 = LA(1);
        	                if ( (LA24_0 == LTERM) ) 
        	                {
        	                    alt24=1;
        	                }

        	            }
        	            switch (alt24) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM55 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1124); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        LTERM55_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LTERM55));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, LTERM55_tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop24;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop24: ; /* Jump out to here if this rule does not match */

        	        char_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_statementBlock1127); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal56_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal56));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal56_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:182:4: '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}'
        	    {
        	        char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_statementBlock1132); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal57, NULL); }


        	        // .//Emerson.g:182:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt25=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA25_0 = LA(1);
        	                if ( (LA25_0 == LTERM) ) 
        	                {
        	                    alt25=1;
        	                }

        	            }
        	            switch (alt25) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM58 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1134); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM58, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop25;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop25: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:182:15: ( statementList -> statementList )
        	        // .//Emerson.g:182:16: statementList
        	        {
        	            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock1138);
        	            statementList59=statementList(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList59.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : statementList
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 182:29: -> statementList
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:182:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA26_0 = LA(1);
        	                if ( (LA26_0 == LTERM) ) 
        	                {
        	                    alt26=1;
        	                }

        	            }
        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM60 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1143); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM60, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        char_literal61 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_statementBlock1146); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal61, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, statementBlock_StartIndex); }
    return retval;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start statementList
 * .//Emerson.g:185:1: statementList : statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) ;
 */
static EmersonParser_statementList_return
statementList(pEmersonParser ctx)
{   
    EmersonParser_statementList_return retval;
    ANTLR3_UINT32 statementList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM63;
    EmersonParser_statement_return statement62;
    #undef	RETURN_TYPE_statement62
    #define	RETURN_TYPE_statement62 EmersonParser_statement_return

    EmersonParser_statement_return statement64;
    #undef	RETURN_TYPE_statement64
    #define	RETURN_TYPE_statement64 EmersonParser_statement_return

    pANTLR3_BASE_TREE LTERM63_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    statementList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM63       = NULL;
    statement62.tree = NULL;

    statement64.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM63_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:186:2: ( statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) )
        // .//Emerson.g:186:4: statement ( ( LTERM )* statement )*
        {
            FOLLOWPUSH(FOLLOW_statement_in_statementList1159);
            statement62=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement62.tree, NULL); }

            // .//Emerson.g:186:14: ( ( LTERM )* statement )*

            for (;;)
            {
                int alt29=2;
                alt29 = cdfa29.predict(ctx, RECOGNIZER, ISTREAM, &cdfa29);
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt29) 
                {
            	case 1:
            	    // .//Emerson.g:186:15: ( LTERM )* statement
            	    {

            	        // .//Emerson.g:186:15: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt28=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA28_0 = LA(1);
            	                if ( (LA28_0 == LTERM) ) 
            	                {
            	                    alt28=1;
            	                }

            	            }
            	            switch (alt28) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM63 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementList1162); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulestatementListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM63, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop28;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop28: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_statementList1165);
            	        statement64=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement64.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 186:34: -> ^( SLIST ( statement )+ )
            	{
            	    // .//Emerson.g:186:37: ^( SLIST ( statement )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SLIST, (pANTLR3_UINT8)"SLIST"), root_1));

            	        if ((stream_statement == NULL || !stream_statement->hasNext(stream_statement))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_statement->hasNext(stream_statement))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	stream_statement->reset(stream_statement);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, statementList_StartIndex); }
    return retval;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//Emerson.g:189:1: variableStatement : 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) ;
 */
static EmersonParser_variableStatement_return
variableStatement(pEmersonParser ctx)
{   
    EmersonParser_variableStatement_return retval;
    ANTLR3_UINT32 variableStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal65;
    pANTLR3_COMMON_TOKEN    LTERM66;
    pANTLR3_COMMON_TOKEN    LTERM68;
    pANTLR3_COMMON_TOKEN    char_literal69;
    EmersonParser_variableDeclarationList_return variableDeclarationList67;
    #undef	RETURN_TYPE_variableDeclarationList67
    #define	RETURN_TYPE_variableDeclarationList67 EmersonParser_variableDeclarationList_return

    pANTLR3_BASE_TREE string_literal65_tree;
    pANTLR3_BASE_TREE LTERM66_tree;
    pANTLR3_BASE_TREE LTERM68_tree;
    pANTLR3_BASE_TREE char_literal69_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationList;
    /* Initialize rule variables
     */
    variableStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal65       = NULL;
    LTERM66       = NULL;
    LTERM68       = NULL;
    char_literal69       = NULL;
    variableDeclarationList67.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal65_tree   = NULL;
    LTERM66_tree   = NULL;
    LTERM68_tree   = NULL;
    char_literal69_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_variableDeclarationList   = NULL;
    #define CREATE_stream_variableDeclarationList  if (stream_variableDeclarationList == NULL) {stream_variableDeclarationList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:190:2: ( 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) )
        // .//Emerson.g:190:4: 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' )
        {
            string_literal65 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_variableStatement1188); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, string_literal65, NULL); }


            // .//Emerson.g:190:10: ( LTERM )*

            for (;;)
            {
                int alt30=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA30_0 = LA(1);
                    if ( (LA30_0 == LTERM) ) 
                    {
                        alt30=1;
                    }

                }
                switch (alt30) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM66 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1190); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM66, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1193);
            variableDeclarationList67=variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationList; stream_variableDeclarationList->add(stream_variableDeclarationList, variableDeclarationList67.tree, NULL); }

            // .//Emerson.g:190:41: ( LTERM | ';' )
            {
                int alt31=2;

                {
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == LTERM) ) 
                    {
                        alt31=1;
                    }
                    else if ( (LA31_0 == 131) ) 
                    {
                        alt31=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 31;
                        EXCEPTION->state        = 0;


                        goto rulevariableStatementEx;
                    }
                }
                switch (alt31) 
                {
            	case 1:
            	    // .//Emerson.g:190:42: LTERM
            	    {
            	        LTERM68 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1196); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM68, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:190:50: ';'
            	    {
            	        char_literal69 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_variableStatement1200); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal69, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : variableDeclarationList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 190:55: -> ^( VARLIST variableDeclarationList )
            	{
            	    // .//Emerson.g:190:58: ^( VARLIST variableDeclarationList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationList == NULL ? NULL : stream_variableDeclarationList->nextTree(stream_variableDeclarationList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_variableDeclarationList != NULL) stream_variableDeclarationList->free(stream_variableDeclarationList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, variableStatement_StartIndex); }
    return retval;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//Emerson.g:193:1: variableDeclarationList : variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ ;
 */
static EmersonParser_variableDeclarationList_return
variableDeclarationList(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationList_return retval;
    ANTLR3_UINT32 variableDeclarationList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM71;
    pANTLR3_COMMON_TOKEN    char_literal72;
    pANTLR3_COMMON_TOKEN    LTERM73;
    EmersonParser_variableDeclaration_return variableDeclaration70;
    #undef	RETURN_TYPE_variableDeclaration70
    #define	RETURN_TYPE_variableDeclaration70 EmersonParser_variableDeclaration_return

    EmersonParser_variableDeclaration_return variableDeclaration74;
    #undef	RETURN_TYPE_variableDeclaration74
    #define	RETURN_TYPE_variableDeclaration74 EmersonParser_variableDeclaration_return

    pANTLR3_BASE_TREE LTERM71_tree;
    pANTLR3_BASE_TREE char_literal72_tree;
    pANTLR3_BASE_TREE LTERM73_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclaration;
    /* Initialize rule variables
     */
    variableDeclarationList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM71       = NULL;
    char_literal72       = NULL;
    LTERM73       = NULL;
    variableDeclaration70.tree = NULL;

    variableDeclaration74.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM71_tree   = NULL;
    char_literal72_tree   = NULL;
    LTERM73_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_variableDeclaration   = NULL;
    #define CREATE_stream_variableDeclaration  if (stream_variableDeclaration == NULL) {stream_variableDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclaration"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:194:2: ( variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ )
        // .//Emerson.g:194:4: variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1222);
            variableDeclaration70=variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration70.tree, NULL); }

            // .//Emerson.g:194:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*

            for (;;)
            {
                int alt34=2;
                alt34 = cdfa34.predict(ctx, RECOGNIZER, ISTREAM, &cdfa34);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt34) 
                {
            	case 1:
            	    // .//Emerson.g:194:25: ( LTERM )* ',' ( LTERM )* variableDeclaration
            	    {

            	        // .//Emerson.g:194:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt32=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA32_0 = LA(1);
            	                if ( (LA32_0 == LTERM) ) 
            	                {
            	                    alt32=1;
            	                }

            	            }
            	            switch (alt32) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM71 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1225); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM71, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop32;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop32: ; /* Jump out to here if this rule does not match */

            	        char_literal72 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_variableDeclarationList1228); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal72, NULL); }


            	        // .//Emerson.g:194:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == LTERM) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM73 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1230); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM73, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1233);
            	        variableDeclaration74=variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration74.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclaration
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 194:65: -> ( variableDeclaration )+
            	{
            	    if ((stream_variableDeclaration == NULL || !stream_variableDeclaration->hasNext(stream_variableDeclaration))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclaration->hasNext(stream_variableDeclaration))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclaration == NULL ? NULL : stream_variableDeclaration->nextTree(stream_variableDeclaration));

            	    	}
            	    	stream_variableDeclaration->reset(stream_variableDeclaration);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_variableDeclaration != NULL) stream_variableDeclaration->free(stream_variableDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, variableDeclarationList_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//Emerson.g:197:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ ;
 */
static EmersonParser_variableDeclarationListNoIn_return
variableDeclarationListNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationListNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationListNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM76;
    pANTLR3_COMMON_TOKEN    char_literal77;
    pANTLR3_COMMON_TOKEN    LTERM78;
    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn75;
    #undef	RETURN_TYPE_variableDeclarationNoIn75
    #define	RETURN_TYPE_variableDeclarationNoIn75 EmersonParser_variableDeclarationNoIn_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn79;
    #undef	RETURN_TYPE_variableDeclarationNoIn79
    #define	RETURN_TYPE_variableDeclarationNoIn79 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE LTERM76_tree;
    pANTLR3_BASE_TREE char_literal77_tree;
    pANTLR3_BASE_TREE LTERM78_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    variableDeclarationListNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM76       = NULL;
    char_literal77       = NULL;
    LTERM78       = NULL;
    variableDeclarationNoIn75.tree = NULL;

    variableDeclarationNoIn79.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM76_tree   = NULL;
    char_literal77_tree   = NULL;
    LTERM78_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:198:2: ( variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ )
        // .//Emerson.g:198:4: variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1252);
            variableDeclarationNoIn75=variableDeclarationNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn75.tree, NULL); }

            // .//Emerson.g:198:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*

            for (;;)
            {
                int alt37=2;
                alt37 = cdfa37.predict(ctx, RECOGNIZER, ISTREAM, &cdfa37);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt37) 
                {
            	case 1:
            	    // .//Emerson.g:198:29: ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn
            	    {

            	        // .//Emerson.g:198:29: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt35=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA35_0 = LA(1);
            	                if ( (LA35_0 == LTERM) ) 
            	                {
            	                    alt35=1;
            	                }

            	            }
            	            switch (alt35) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM76 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1255); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM76, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop35;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop35: ; /* Jump out to here if this rule does not match */

            	        char_literal77 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_variableDeclarationListNoIn1258); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal77, NULL); }


            	        // .//Emerson.g:198:40: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt36=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA36_0 = LA(1);
            	                if ( (LA36_0 == LTERM) ) 
            	                {
            	                    alt36=1;
            	                }

            	            }
            	            switch (alt36) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM78 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1260); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM78, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1263);
            	        variableDeclarationNoIn79=variableDeclarationNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn79.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclarationNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 198:73: -> ( variableDeclarationNoIn )+
            	{
            	    if ((stream_variableDeclarationNoIn == NULL || !stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

            	    	}
            	    	stream_variableDeclarationNoIn->reset(stream_variableDeclarationNoIn);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, variableDeclarationListNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//Emerson.g:201:1: variableDeclaration : Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) ;
 */
static EmersonParser_variableDeclaration_return
variableDeclaration(pEmersonParser ctx)
{   
    EmersonParser_variableDeclaration_return retval;
    ANTLR3_UINT32 variableDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier80;
    pANTLR3_COMMON_TOKEN    LTERM81;
    EmersonParser_initialiser_return initialiser82;
    #undef	RETURN_TYPE_initialiser82
    #define	RETURN_TYPE_initialiser82 EmersonParser_initialiser_return

    pANTLR3_BASE_TREE Identifier80_tree;
    pANTLR3_BASE_TREE LTERM81_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiser;
    /* Initialize rule variables
     */
    variableDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier80       = NULL;
    LTERM81       = NULL;
    initialiser82.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier80_tree   = NULL;
    LTERM81_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiser   = NULL;
    #define CREATE_stream_initialiser  if (stream_initialiser == NULL) {stream_initialiser = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiser"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:202:2: ( Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) )
        // .//Emerson.g:202:4: Identifier ( LTERM )* ( initialiser )?
        {
            Identifier80 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1282); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier80, NULL); }


            // .//Emerson.g:202:15: ( LTERM )*

            for (;;)
            {
                int alt38=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA38_0 = LA(1);
                    if ( (LA38_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA38_2 = LA(2);
                            if ( (synpred52_Emerson(ctx)) ) 
                            {
                                alt38=1;
                            }

                        }
                    }

                }
                switch (alt38) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM81 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclaration1284); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM81, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:202:22: ( initialiser )?
            {
                int alt39=2;
                {
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == 132) ) 
                    {
                        alt39=1;
                    }
                }
                switch (alt39) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiser
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1287);
            	        initialiser82=initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiser; stream_initialiser->add(stream_initialiser, initialiser82.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier, initialiser
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 202:35: -> ^( VAR Identifier ( initialiser )? )
            	{
            	    // .//Emerson.g:202:38: ^( VAR Identifier ( initialiser )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:202:55: ( initialiser )?
            	        {
            	        	if ( (stream_initialiser != NULL && stream_initialiser->hasNext(stream_initialiser))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiser == NULL ? NULL : stream_initialiser->nextTree(stream_initialiser));

            	        	}
            	        	if ( stream_initialiser != NULL) stream_initialiser->reset(stream_initialiser);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiser != NULL) stream_initialiser->free(stream_initialiser);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, variableDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//Emerson.g:205:1: variableDeclarationNoIn : Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static EmersonParser_variableDeclarationNoIn_return
variableDeclarationNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier83;
    pANTLR3_COMMON_TOKEN    LTERM84;
    EmersonParser_initialiserNoIn_return initialiserNoIn85;
    #undef	RETURN_TYPE_initialiserNoIn85
    #define	RETURN_TYPE_initialiserNoIn85 EmersonParser_initialiserNoIn_return

    pANTLR3_BASE_TREE Identifier83_tree;
    pANTLR3_BASE_TREE LTERM84_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiserNoIn;
    /* Initialize rule variables
     */
    variableDeclarationNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier83       = NULL;
    LTERM84       = NULL;
    initialiserNoIn85.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier83_tree   = NULL;
    LTERM84_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiserNoIn   = NULL;
    #define CREATE_stream_initialiserNoIn  if (stream_initialiserNoIn == NULL) {stream_initialiserNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiserNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:206:2: ( Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//Emerson.g:206:4: Identifier ( LTERM )* ( initialiserNoIn )?
        {
            Identifier83 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1311); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier83, NULL); }


            // .//Emerson.g:206:15: ( LTERM )*

            for (;;)
            {
                int alt40=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA40_2 = LA(2);
                            if ( (synpred54_Emerson(ctx)) ) 
                            {
                                alt40=1;
                            }

                        }
                    }

                }
                switch (alt40) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM84 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationNoIn1313); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM84, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:206:22: ( initialiserNoIn )?
            {
                int alt41=2;
                {
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == 132) ) 
                    {
                        alt41=1;
                    }
                }
                switch (alt41) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiserNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1316);
            	        initialiserNoIn85=initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiserNoIn; stream_initialiserNoIn->add(stream_initialiserNoIn, initialiserNoIn85.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier, initialiserNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 206:39: -> ^( VAR Identifier ( initialiserNoIn )? )
            	{
            	    // .//Emerson.g:206:43: ^( VAR Identifier ( initialiserNoIn )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:206:60: ( initialiserNoIn )?
            	        {
            	        	if ( (stream_initialiserNoIn != NULL && stream_initialiserNoIn->hasNext(stream_initialiserNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiserNoIn == NULL ? NULL : stream_initialiserNoIn->nextTree(stream_initialiserNoIn));

            	        	}
            	        	if ( stream_initialiserNoIn != NULL) stream_initialiserNoIn->reset(stream_initialiserNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiserNoIn != NULL) stream_initialiserNoIn->free(stream_initialiserNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, variableDeclarationNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//Emerson.g:209:1: initialiser : '=' ( LTERM )* assignmentExpression -> assignmentExpression ;
 */
static EmersonParser_initialiser_return
initialiser(pEmersonParser ctx)
{   
    EmersonParser_initialiser_return retval;
    ANTLR3_UINT32 initialiser_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal86;
    pANTLR3_COMMON_TOKEN    LTERM87;
    EmersonParser_assignmentExpression_return assignmentExpression88;
    #undef	RETURN_TYPE_assignmentExpression88
    #define	RETURN_TYPE_assignmentExpression88 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal86_tree;
    pANTLR3_BASE_TREE LTERM87_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    initialiser_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal86       = NULL;
    LTERM87       = NULL;
    assignmentExpression88.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal86_tree   = NULL;
    LTERM87_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:210:2: ( '=' ( LTERM )* assignmentExpression -> assignmentExpression )
        // .//Emerson.g:210:4: '=' ( LTERM )* assignmentExpression
        {
            char_literal86 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_initialiser1341); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal86, NULL); }


            // .//Emerson.g:210:8: ( LTERM )*

            for (;;)
            {
                int alt42=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA42_0 = LA(1);
                    if ( (LA42_0 == LTERM) ) 
                    {
                        alt42=1;
                    }

                }
                switch (alt42) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM87 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiser1343); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM87, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_initialiser1346);
            assignmentExpression88=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression88.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 210:36: -> assignmentExpression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, initialiser_StartIndex); }
    return retval;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//Emerson.g:213:1: initialiserNoIn : '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn ;
 */
static EmersonParser_initialiserNoIn_return
initialiserNoIn(pEmersonParser ctx)
{   
    EmersonParser_initialiserNoIn_return retval;
    ANTLR3_UINT32 initialiserNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal89;
    pANTLR3_COMMON_TOKEN    LTERM90;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn91;
    #undef	RETURN_TYPE_assignmentExpressionNoIn91
    #define	RETURN_TYPE_assignmentExpressionNoIn91 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE char_literal89_tree;
    pANTLR3_BASE_TREE LTERM90_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    initialiserNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal89       = NULL;
    LTERM90       = NULL;
    assignmentExpressionNoIn91.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal89_tree   = NULL;
    LTERM90_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:214:2: ( '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn )
        // .//Emerson.g:214:4: '=' ( LTERM )* assignmentExpressionNoIn
        {
            char_literal89 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_initialiserNoIn1363); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal89, NULL); }


            // .//Emerson.g:214:8: ( LTERM )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (LA43_0 == LTERM) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM90 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiserNoIn1365); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM90, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1368);
            assignmentExpressionNoIn91=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn91.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 214:40: -> assignmentExpressionNoIn
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, initialiserNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start emptyStatement
 * .//Emerson.g:217:1: emptyStatement : ';' ;
 */
static EmersonParser_emptyStatement_return
emptyStatement(pEmersonParser ctx)
{   
    EmersonParser_emptyStatement_return retval;
    ANTLR3_UINT32 emptyStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal92;

    pANTLR3_BASE_TREE char_literal92_tree;

    /* Initialize rule variables
     */
    emptyStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal92       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal92_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:218:2: ( ';' )
        // .//Emerson.g:218:4: ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_emptyStatement1384); 
            if  (HASEXCEPTION())
            {
                goto ruleemptyStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal92_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal92));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal92_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleemptyStatementEx; /* Prevent compiler warnings */
    ruleemptyStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, emptyStatement_StartIndex); }
    return retval;
}
/* $ANTLR end emptyStatement */

/** 
 * $ANTLR start expressionStatement
 * .//Emerson.g:221:1: expressionStatement : expression ( LTERM | ';' ) -> expression ;
 */
static EmersonParser_expressionStatement_return
expressionStatement(pEmersonParser ctx)
{   
    EmersonParser_expressionStatement_return retval;
    ANTLR3_UINT32 expressionStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM94;
    pANTLR3_COMMON_TOKEN    char_literal95;
    EmersonParser_expression_return expression93;
    #undef	RETURN_TYPE_expression93
    #define	RETURN_TYPE_expression93 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM94_tree;
    pANTLR3_BASE_TREE char_literal95_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expressionStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM94       = NULL;
    char_literal95       = NULL;
    expression93.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM94_tree   = NULL;
    char_literal95_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:222:2: ( expression ( LTERM | ';' ) -> expression )
        // .//Emerson.g:222:4: expression ( LTERM | ';' )
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1396);
            expression93=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression93.tree, NULL); }

            // .//Emerson.g:222:15: ( LTERM | ';' )
            {
                int alt44=2;

                {
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == LTERM) ) 
                    {
                        alt44=1;
                    }
                    else if ( (LA44_0 == 131) ) 
                    {
                        alt44=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 44;
                        EXCEPTION->state        = 0;


                        goto ruleexpressionStatementEx;
                    }
                }
                switch (alt44) 
                {
            	case 1:
            	    // .//Emerson.g:222:16: LTERM
            	    {
            	        LTERM94 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionStatement1399); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM94, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:222:24: ';'
            	    {
            	        char_literal95 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_expressionStatement1403); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal95, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 222:29: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, expressionStatement_StartIndex); }
    return retval;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start whenStatement
 * .//Emerson.g:225:1: whenStatement : 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* 'check' whenCheckedList ( LTERM )* s1= statement -> ^( WHEN whenPred whenCheckedList $s1) ;
 */
static EmersonParser_whenStatement_return
whenStatement(pEmersonParser ctx)
{   
    EmersonParser_whenStatement_return retval;
    ANTLR3_UINT32 whenStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal96;
    pANTLR3_COMMON_TOKEN    LTERM97;
    pANTLR3_COMMON_TOKEN    char_literal98;
    pANTLR3_COMMON_TOKEN    LTERM99;
    pANTLR3_COMMON_TOKEN    LTERM101;
    pANTLR3_COMMON_TOKEN    char_literal102;
    pANTLR3_COMMON_TOKEN    LTERM103;
    pANTLR3_COMMON_TOKEN    string_literal104;
    pANTLR3_COMMON_TOKEN    LTERM106;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_whenPred_return whenPred100;
    #undef	RETURN_TYPE_whenPred100
    #define	RETURN_TYPE_whenPred100 EmersonParser_whenPred_return

    EmersonParser_whenCheckedList_return whenCheckedList105;
    #undef	RETURN_TYPE_whenCheckedList105
    #define	RETURN_TYPE_whenCheckedList105 EmersonParser_whenCheckedList_return

    pANTLR3_BASE_TREE string_literal96_tree;
    pANTLR3_BASE_TREE LTERM97_tree;
    pANTLR3_BASE_TREE char_literal98_tree;
    pANTLR3_BASE_TREE LTERM99_tree;
    pANTLR3_BASE_TREE LTERM101_tree;
    pANTLR3_BASE_TREE char_literal102_tree;
    pANTLR3_BASE_TREE LTERM103_tree;
    pANTLR3_BASE_TREE string_literal104_tree;
    pANTLR3_BASE_TREE LTERM106_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenPred;
    /* Initialize rule variables
     */
    whenStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal96       = NULL;
    LTERM97       = NULL;
    char_literal98       = NULL;
    LTERM99       = NULL;
    LTERM101       = NULL;
    char_literal102       = NULL;
    LTERM103       = NULL;
    string_literal104       = NULL;
    LTERM106       = NULL;
    s1.tree = NULL;

    whenPred100.tree = NULL;

    whenCheckedList105.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal96_tree   = NULL;
    LTERM97_tree   = NULL;
    char_literal98_tree   = NULL;
    LTERM99_tree   = NULL;
    LTERM101_tree   = NULL;
    char_literal102_tree   = NULL;
    LTERM103_tree   = NULL;
    string_literal104_tree   = NULL;
    LTERM106_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_whenCheckedList   = NULL;
    #define CREATE_stream_whenCheckedList  if (stream_whenCheckedList == NULL) {stream_whenCheckedList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedList"); }
    stream_whenPred   = NULL;
    #define CREATE_stream_whenPred  if (stream_whenPred == NULL) {stream_whenPred = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenPred"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:226:5: ( 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* 'check' whenCheckedList ( LTERM )* s1= statement -> ^( WHEN whenPred whenCheckedList $s1) )
        // .//Emerson.g:226:7: 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* 'check' whenCheckedList ( LTERM )* s1= statement
        {
            string_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_whenStatement1422); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, string_literal96, NULL); }


            // .//Emerson.g:226:14: ( LTERM )*

            for (;;)
            {
                int alt45=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == LTERM) ) 
                    {
                        alt45=1;
                    }

                }
                switch (alt45) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM97 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1424); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM97, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop45;	/* break out of the loop */
            	    break;
                }
            }
            loop45: ; /* Jump out to here if this rule does not match */

            char_literal98 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_whenStatement1427); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal98, NULL); }


            // .//Emerson.g:226:25: ( LTERM )*

            for (;;)
            {
                int alt46=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == LTERM) ) 
                    {
                        alt46=1;
                    }

                }
                switch (alt46) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM99 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1429); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM99, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop46;	/* break out of the loop */
            	    break;
                }
            }
            loop46: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_whenPred_in_whenStatement1432);
            whenPred100=whenPred(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_whenPred; stream_whenPred->add(stream_whenPred, whenPred100.tree, NULL); }

            // .//Emerson.g:226:41: ( LTERM )*

            for (;;)
            {
                int alt47=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA47_0 = LA(1);
                    if ( (LA47_0 == LTERM) ) 
                    {
                        alt47=1;
                    }

                }
                switch (alt47) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM101 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1434); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM101, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */

            char_literal102 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_whenStatement1437); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal102, NULL); }


            // .//Emerson.g:226:52: ( LTERM )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == LTERM) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM103 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1439); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM103, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */

            string_literal104 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_whenStatement1442); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, string_literal104, NULL); }

            FOLLOWPUSH(FOLLOW_whenCheckedList_in_whenStatement1444);
            whenCheckedList105=whenCheckedList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedList; stream_whenCheckedList->add(stream_whenCheckedList, whenCheckedList105.tree, NULL); }

            // .//Emerson.g:226:83: ( LTERM )*

            for (;;)
            {
                int alt49=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA49_0 = LA(1);
                    if ( (LA49_0 == LTERM) ) 
                    {
                        alt49=1;
                    }

                }
                switch (alt49) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM106 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1446); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM106, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whenStatement1451);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

             
            /* AST REWRITE
             * elements          : s1, whenPred, whenCheckedList
             * token labels      : 
             * rule labels       : retval, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 226:103: -> ^( WHEN whenPred whenCheckedList $s1)
            	{
            	    // .//Emerson.g:226:106: ^( WHEN whenPred whenCheckedList $s1)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN, (pANTLR3_UINT8)"WHEN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_whenPred == NULL ? NULL : stream_whenPred->nextTree(stream_whenPred));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_whenCheckedList == NULL ? NULL : stream_whenCheckedList->nextTree(stream_whenCheckedList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenStatementEx; /* Prevent compiler warnings */
    rulewhenStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_whenCheckedList != NULL) stream_whenCheckedList->free(stream_whenCheckedList);
        if (stream_whenPred != NULL) stream_whenPred->free(stream_whenPred);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, whenStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whenStatement */

/** 
 * $ANTLR start whenPred
 * .//Emerson.g:231:1: whenPred : s1= expression ( LTERM )* '<' ( LTERM )* s2= expression -> ^( WHEN_PRED $s1 $s2) ;
 */
static EmersonParser_whenPred_return
whenPred(pEmersonParser ctx)
{   
    EmersonParser_whenPred_return retval;
    ANTLR3_UINT32 whenPred_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM107;
    pANTLR3_COMMON_TOKEN    char_literal108;
    pANTLR3_COMMON_TOKEN    LTERM109;
    EmersonParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_expression_return

    EmersonParser_expression_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM107_tree;
    pANTLR3_BASE_TREE char_literal108_tree;
    pANTLR3_BASE_TREE LTERM109_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    whenPred_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM107       = NULL;
    char_literal108       = NULL;
    LTERM109       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM107_tree   = NULL;
    char_literal108_tree   = NULL;
    LTERM109_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:232:5: (s1= expression ( LTERM )* '<' ( LTERM )* s2= expression -> ^( WHEN_PRED $s1 $s2) )
        // .//Emerson.g:232:7: s1= expression ( LTERM )* '<' ( LTERM )* s2= expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenPred1485);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//Emerson.g:232:21: ( LTERM )*

            for (;;)
            {
                int alt50=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA50_0 = LA(1);
                    if ( (LA50_0 == LTERM) ) 
                    {
                        alt50=1;
                    }

                }
                switch (alt50) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM107 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenPred1487); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenPredEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM107, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop50;	/* break out of the loop */
            	    break;
                }
            }
            loop50: ; /* Jump out to here if this rule does not match */

            char_literal108 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_whenPred1490); 
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, char_literal108, NULL); }


            // .//Emerson.g:232:32: ( LTERM )*

            for (;;)
            {
                int alt51=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA51_0 = LA(1);
                    if ( (LA51_0 == LTERM) ) 
                    {
                        alt51=1;
                    }

                }
                switch (alt51) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM109 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenPred1492); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenPredEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM109, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop51;	/* break out of the loop */
            	    break;
                }
            }
            loop51: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whenPred1497);
            s2=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s2.tree, NULL); }

             
            /* AST REWRITE
             * elements          : s1, s2
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 232:53: -> ^( WHEN_PRED $s1 $s2)
            	{
            	    // .//Emerson.g:232:56: ^( WHEN_PRED $s1 $s2)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_PRED, (pANTLR3_UINT8)"WHEN_PRED"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenPredEx; /* Prevent compiler warnings */
    rulewhenPredEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, whenPred_StartIndex); }
    return retval;
}
/* $ANTLR end whenPred */

/** 
 * $ANTLR start whenCheckedList
 * .//Emerson.g:235:1: whenCheckedList : expression ( LTERM )* ( ',' ( LTERM )* expression )* -> ^( WHEN_CHECKED_LIST ( expression )+ ) ;
 */
static EmersonParser_whenCheckedList_return
whenCheckedList(pEmersonParser ctx)
{   
    EmersonParser_whenCheckedList_return retval;
    ANTLR3_UINT32 whenCheckedList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM111;
    pANTLR3_COMMON_TOKEN    char_literal112;
    pANTLR3_COMMON_TOKEN    LTERM113;
    EmersonParser_expression_return expression110;
    #undef	RETURN_TYPE_expression110
    #define	RETURN_TYPE_expression110 EmersonParser_expression_return

    EmersonParser_expression_return expression114;
    #undef	RETURN_TYPE_expression114
    #define	RETURN_TYPE_expression114 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM111_tree;
    pANTLR3_BASE_TREE char_literal112_tree;
    pANTLR3_BASE_TREE LTERM113_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    whenCheckedList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM111       = NULL;
    char_literal112       = NULL;
    LTERM113       = NULL;
    expression110.tree = NULL;

    expression114.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM111_tree   = NULL;
    char_literal112_tree   = NULL;
    LTERM113_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:236:5: ( expression ( LTERM )* ( ',' ( LTERM )* expression )* -> ^( WHEN_CHECKED_LIST ( expression )+ ) )
        // .//Emerson.g:236:7: expression ( LTERM )* ( ',' ( LTERM )* expression )*
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedList1526);
            expression110=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression110.tree, NULL); }

            // .//Emerson.g:236:18: ( LTERM )*

            for (;;)
            {
                int alt52=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA52_0 = LA(1);
                    if ( (LA52_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA52_2 = LA(2);
                            if ( (synpred66_Emerson(ctx)) ) 
                            {
                                alt52=1;
                            }

                        }
                    }

                }
                switch (alt52) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM111 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedList1528); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM111, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop52;	/* break out of the loop */
            	    break;
                }
            }
            loop52: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:236:25: ( ',' ( LTERM )* expression )*

            for (;;)
            {
                int alt54=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA54_0 = LA(1);
                    if ( (LA54_0 == 126) ) 
                    {
                        alt54=1;
                    }

                }
                switch (alt54) 
                {
            	case 1:
            	    // .//Emerson.g:236:26: ',' ( LTERM )* expression
            	    {
            	        char_literal112 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_whenCheckedList1532); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal112, NULL); }


            	        // .//Emerson.g:236:30: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt53=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA53_0 = LA(1);
            	                if ( (LA53_0 == LTERM) ) 
            	                {
            	                    alt53=1;
            	                }

            	            }
            	            switch (alt53) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM113 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedList1534); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhenCheckedListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM113, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop53;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop53: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_whenCheckedList1537);
            	        expression114=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression114.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop54;	/* break out of the loop */
            	    break;
                }
            }
            loop54: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 236:50: -> ^( WHEN_CHECKED_LIST ( expression )+ )
            	{
            	    // .//Emerson.g:236:53: ^( WHEN_CHECKED_LIST ( expression )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_CHECKED_LIST, (pANTLR3_UINT8)"WHEN_CHECKED_LIST"), root_1));

            	        if ((stream_expression == NULL || !stream_expression->hasNext(stream_expression))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_expression->hasNext(stream_expression))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	stream_expression->reset(stream_expression);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListEx; /* Prevent compiler warnings */
    rulewhenCheckedListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, whenCheckedList_StartIndex); }
    return retval;
}
/* $ANTLR end whenCheckedList */

/** 
 * $ANTLR start ifStatement
 * .//Emerson.g:240:1: ifStatement : 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) ;
 */
static EmersonParser_ifStatement_return
ifStatement(pEmersonParser ctx)
{   
    EmersonParser_ifStatement_return retval;
    ANTLR3_UINT32 ifStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal115;
    pANTLR3_COMMON_TOKEN    LTERM116;
    pANTLR3_COMMON_TOKEN    char_literal117;
    pANTLR3_COMMON_TOKEN    LTERM118;
    pANTLR3_COMMON_TOKEN    LTERM120;
    pANTLR3_COMMON_TOKEN    char_literal121;
    pANTLR3_COMMON_TOKEN    LTERM122;
    pANTLR3_COMMON_TOKEN    LTERM123;
    pANTLR3_COMMON_TOKEN    string_literal124;
    pANTLR3_COMMON_TOKEN    LTERM125;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_statement_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_statement_return

    EmersonParser_expression_return expression119;
    #undef	RETURN_TYPE_expression119
    #define	RETURN_TYPE_expression119 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal115_tree;
    pANTLR3_BASE_TREE LTERM116_tree;
    pANTLR3_BASE_TREE char_literal117_tree;
    pANTLR3_BASE_TREE LTERM118_tree;
    pANTLR3_BASE_TREE LTERM120_tree;
    pANTLR3_BASE_TREE char_literal121_tree;
    pANTLR3_BASE_TREE LTERM122_tree;
    pANTLR3_BASE_TREE LTERM123_tree;
    pANTLR3_BASE_TREE string_literal124_tree;
    pANTLR3_BASE_TREE LTERM125_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    ifStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal115       = NULL;
    LTERM116       = NULL;
    char_literal117       = NULL;
    LTERM118       = NULL;
    LTERM120       = NULL;
    char_literal121       = NULL;
    LTERM122       = NULL;
    LTERM123       = NULL;
    string_literal124       = NULL;
    LTERM125       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expression119.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal115_tree   = NULL;
    LTERM116_tree   = NULL;
    char_literal117_tree   = NULL;
    LTERM118_tree   = NULL;
    LTERM120_tree   = NULL;
    char_literal121_tree   = NULL;
    LTERM122_tree   = NULL;
    LTERM123_tree   = NULL;
    string_literal124_tree   = NULL;
    LTERM125_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:241:5: ( 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) )
        // .//Emerson.g:241:7: 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
        {
            string_literal115 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_ifStatement1566); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, string_literal115, NULL); }


            // .//Emerson.g:241:12: ( LTERM )*

            for (;;)
            {
                int alt55=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA55_0 = LA(1);
                    if ( (LA55_0 == LTERM) ) 
                    {
                        alt55=1;
                    }

                }
                switch (alt55) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM116 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1568); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM116, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */

            char_literal117 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_ifStatement1571); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal117, NULL); }


            // .//Emerson.g:241:23: ( LTERM )*

            for (;;)
            {
                int alt56=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA56_0 = LA(1);
                    if ( (LA56_0 == LTERM) ) 
                    {
                        alt56=1;
                    }

                }
                switch (alt56) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM118 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1573); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM118, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1576);
            expression119=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression119.tree, NULL); }

            // .//Emerson.g:241:41: ( LTERM )*

            for (;;)
            {
                int alt57=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA57_0 = LA(1);
                    if ( (LA57_0 == LTERM) ) 
                    {
                        alt57=1;
                    }

                }
                switch (alt57) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM120 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1578); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM120, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop57;	/* break out of the loop */
            	    break;
                }
            }
            loop57: ; /* Jump out to here if this rule does not match */

            char_literal121 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_ifStatement1581); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal121, NULL); }


            // .//Emerson.g:241:52: ( LTERM )*

            for (;;)
            {
                int alt58=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA58_0 = LA(1);
                    if ( (LA58_0 == LTERM) ) 
                    {
                        alt58=1;
                    }

                }
                switch (alt58) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM122 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1583); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM122, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop58;	/* break out of the loop */
            	    break;
                }
            }
            loop58: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1588);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

            // .//Emerson.g:241:72: ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
            {
                int alt61=2;
                {
                    int LA61_0 = LA(1);
                    if ( (LA61_0 == LTERM) ) 
                    {
                        {
                            int LA61_1 = LA(2);
                            if ( (synpred75_Emerson(ctx)) ) 
                            {
                                alt61=1;
                            }
                        }
                    }
                    else if ( (LA61_0 == 137) ) 
                    {
                        {
                            int LA61_2 = LA(2);
                            if ( (synpred75_Emerson(ctx)) ) 
                            {
                                alt61=1;
                            }
                        }
                    }
                }
                switch (alt61) 
                {
            	case 1:
            	    // .//Emerson.g:241:73: ( LTERM )* 'else' ( LTERM )* s2= statement
            	    {

            	        // .//Emerson.g:241:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt59=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA59_0 = LA(1);
            	                if ( (LA59_0 == LTERM) ) 
            	                {
            	                    alt59=1;
            	                }

            	            }
            	            switch (alt59) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM123 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1591); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM123, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop59;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop59: ; /* Jump out to here if this rule does not match */

            	        string_literal124 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_ifStatement1594); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, string_literal124, NULL); }


            	        // .//Emerson.g:241:87: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt60=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA60_0 = LA(1);
            	                if ( (LA60_0 == LTERM) ) 
            	                {
            	                    alt60=1;
            	                }

            	            }
            	            switch (alt60) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM125 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1596); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM125, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop60;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop60: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1601);
            	        s2=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s1, s2, expression
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 241:109: -> ^( IF expression $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:241:112: ^( IF expression $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:241:132: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, ifStatement_StartIndex); }
    return retval;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//Emerson.g:244:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static EmersonParser_iterationStatement_return
iterationStatement(pEmersonParser ctx)
{   
    EmersonParser_iterationStatement_return retval;
    ANTLR3_UINT32 iterationStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_doWhileStatement_return doWhileStatement126;
    #undef	RETURN_TYPE_doWhileStatement126
    #define	RETURN_TYPE_doWhileStatement126 EmersonParser_doWhileStatement_return

    EmersonParser_whileStatement_return whileStatement127;
    #undef	RETURN_TYPE_whileStatement127
    #define	RETURN_TYPE_whileStatement127 EmersonParser_whileStatement_return

    EmersonParser_forStatement_return forStatement128;
    #undef	RETURN_TYPE_forStatement128
    #define	RETURN_TYPE_forStatement128 EmersonParser_forStatement_return

    EmersonParser_forInStatement_return forInStatement129;
    #undef	RETURN_TYPE_forInStatement129
    #define	RETURN_TYPE_forInStatement129 EmersonParser_forInStatement_return


    /* Initialize rule variables
     */
    iterationStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        return retval; 
    }
    doWhileStatement126.tree = NULL;

    whileStatement127.tree = NULL;

    forStatement128.tree = NULL;

    forInStatement129.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:245:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt62;

            alt62=4;

            switch ( LA(1) ) 
            {
            case 138:
            	{
            		alt62=1;
            	}
                break;
            case 139:
            	{
            		alt62=2;
            	}
                break;
            case 140:
            	{

            		{
            		    int LA62_3 = LA(2);
            		    if ( (synpred78_Emerson(ctx)) ) 
            		    {
            		        alt62=3;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt62=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 62;
            		        EXCEPTION->state        = 3;


            		        goto ruleiterationStatementEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 62;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt62) 
            {
        	case 1:
        	    // .//Emerson.g:245:4: doWhileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1630);
        	        doWhileStatement126=doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, doWhileStatement126.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:246:4: whileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1635);
        	        whileStatement127=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStatement127.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:247:4: forStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1640);
        	        forStatement128=forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forStatement128.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:248:4: forInStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1645);
        	        forInStatement129=forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forInStatement129.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, iterationStatement_StartIndex); }
    return retval;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//Emerson.g:251:1: doWhileStatement : 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) ;
 */
static EmersonParser_doWhileStatement_return
doWhileStatement(pEmersonParser ctx)
{   
    EmersonParser_doWhileStatement_return retval;
    ANTLR3_UINT32 doWhileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal130;
    pANTLR3_COMMON_TOKEN    LTERM131;
    pANTLR3_COMMON_TOKEN    LTERM133;
    pANTLR3_COMMON_TOKEN    string_literal134;
    pANTLR3_COMMON_TOKEN    LTERM135;
    pANTLR3_COMMON_TOKEN    char_literal136;
    pANTLR3_COMMON_TOKEN    char_literal138;
    pANTLR3_COMMON_TOKEN    LTERM139;
    pANTLR3_COMMON_TOKEN    char_literal140;
    EmersonParser_statement_return statement132;
    #undef	RETURN_TYPE_statement132
    #define	RETURN_TYPE_statement132 EmersonParser_statement_return

    EmersonParser_expression_return expression137;
    #undef	RETURN_TYPE_expression137
    #define	RETURN_TYPE_expression137 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal130_tree;
    pANTLR3_BASE_TREE LTERM131_tree;
    pANTLR3_BASE_TREE LTERM133_tree;
    pANTLR3_BASE_TREE string_literal134_tree;
    pANTLR3_BASE_TREE LTERM135_tree;
    pANTLR3_BASE_TREE char_literal136_tree;
    pANTLR3_BASE_TREE char_literal138_tree;
    pANTLR3_BASE_TREE LTERM139_tree;
    pANTLR3_BASE_TREE char_literal140_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    doWhileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal130       = NULL;
    LTERM131       = NULL;
    LTERM133       = NULL;
    string_literal134       = NULL;
    LTERM135       = NULL;
    char_literal136       = NULL;
    char_literal138       = NULL;
    LTERM139       = NULL;
    char_literal140       = NULL;
    statement132.tree = NULL;

    expression137.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal130_tree   = NULL;
    LTERM131_tree   = NULL;
    LTERM133_tree   = NULL;
    string_literal134_tree   = NULL;
    LTERM135_tree   = NULL;
    char_literal136_tree   = NULL;
    char_literal138_tree   = NULL;
    LTERM139_tree   = NULL;
    char_literal140_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:252:2: ( 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) )
        // .//Emerson.g:252:4: 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' )
        {
            string_literal130 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_doWhileStatement1657); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, string_literal130, NULL); }


            // .//Emerson.g:252:9: ( LTERM )*

            for (;;)
            {
                int alt63=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA63_0 = LA(1);
                    if ( (LA63_0 == LTERM) ) 
                    {
                        alt63=1;
                    }

                }
                switch (alt63) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM131 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1659); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM131, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop63;	/* break out of the loop */
            	    break;
                }
            }
            loop63: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1662);
            statement132=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement132.tree, NULL); }

            // .//Emerson.g:252:26: ( LTERM )*

            for (;;)
            {
                int alt64=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA64_0 = LA(1);
                    if ( (LA64_0 == LTERM) ) 
                    {
                        alt64=1;
                    }

                }
                switch (alt64) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM133 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1664); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM133, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop64;	/* break out of the loop */
            	    break;
                }
            }
            loop64: ; /* Jump out to here if this rule does not match */

            string_literal134 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_doWhileStatement1667); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, string_literal134, NULL); }


            // .//Emerson.g:252:41: ( LTERM )*

            for (;;)
            {
                int alt65=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA65_0 = LA(1);
                    if ( (LA65_0 == LTERM) ) 
                    {
                        alt65=1;
                    }

                }
                switch (alt65) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM135 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1669); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM135, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop65;	/* break out of the loop */
            	    break;
                }
            }
            loop65: ; /* Jump out to here if this rule does not match */

            char_literal136 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_doWhileStatement1672); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal136, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1674);
            expression137=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression137.tree, NULL); }
            char_literal138 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_doWhileStatement1676); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal138, NULL); }


            // .//Emerson.g:252:67: ( LTERM | ';' )
            {
                int alt66=2;

                {
                    int LA66_0 = LA(1);
                    if ( (LA66_0 == LTERM) ) 
                    {
                        alt66=1;
                    }
                    else if ( (LA66_0 == 131) ) 
                    {
                        alt66=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 66;
                        EXCEPTION->state        = 0;


                        goto ruledoWhileStatementEx;
                    }
                }
                switch (alt66) 
                {
            	case 1:
            	    // .//Emerson.g:252:68: LTERM
            	    {
            	        LTERM139 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1679); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM139, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:252:76: ';'
            	    {
            	        char_literal140 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_doWhileStatement1683); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal140, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 252:81: -> ^( DO statement expression )
            	{
            	    // .//Emerson.g:252:84: ^( DO statement expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO, (pANTLR3_UINT8)"DO"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, doWhileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//Emerson.g:255:1: whileStatement : 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) ;
 */
static EmersonParser_whileStatement_return
whileStatement(pEmersonParser ctx)
{   
    EmersonParser_whileStatement_return retval;
    ANTLR3_UINT32 whileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal141;
    pANTLR3_COMMON_TOKEN    LTERM142;
    pANTLR3_COMMON_TOKEN    char_literal143;
    pANTLR3_COMMON_TOKEN    LTERM144;
    pANTLR3_COMMON_TOKEN    LTERM146;
    pANTLR3_COMMON_TOKEN    char_literal147;
    pANTLR3_COMMON_TOKEN    LTERM148;
    EmersonParser_expression_return expression145;
    #undef	RETURN_TYPE_expression145
    #define	RETURN_TYPE_expression145 EmersonParser_expression_return

    EmersonParser_statement_return statement149;
    #undef	RETURN_TYPE_statement149
    #define	RETURN_TYPE_statement149 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal141_tree;
    pANTLR3_BASE_TREE LTERM142_tree;
    pANTLR3_BASE_TREE char_literal143_tree;
    pANTLR3_BASE_TREE LTERM144_tree;
    pANTLR3_BASE_TREE LTERM146_tree;
    pANTLR3_BASE_TREE char_literal147_tree;
    pANTLR3_BASE_TREE LTERM148_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal141       = NULL;
    LTERM142       = NULL;
    char_literal143       = NULL;
    LTERM144       = NULL;
    LTERM146       = NULL;
    char_literal147       = NULL;
    LTERM148       = NULL;
    expression145.tree = NULL;

    statement149.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal141_tree   = NULL;
    LTERM142_tree   = NULL;
    char_literal143_tree   = NULL;
    LTERM144_tree   = NULL;
    LTERM146_tree   = NULL;
    char_literal147_tree   = NULL;
    LTERM148_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:256:2: ( 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) )
        // .//Emerson.g:256:4: 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal141 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_whileStatement1709); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, string_literal141, NULL); }


            // .//Emerson.g:256:12: ( LTERM )*

            for (;;)
            {
                int alt67=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA67_0 = LA(1);
                    if ( (LA67_0 == LTERM) ) 
                    {
                        alt67=1;
                    }

                }
                switch (alt67) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM142 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1711); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM142, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop67;	/* break out of the loop */
            	    break;
                }
            }
            loop67: ; /* Jump out to here if this rule does not match */

            char_literal143 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_whileStatement1714); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal143, NULL); }


            // .//Emerson.g:256:23: ( LTERM )*

            for (;;)
            {
                int alt68=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA68_0 = LA(1);
                    if ( (LA68_0 == LTERM) ) 
                    {
                        alt68=1;
                    }

                }
                switch (alt68) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM144 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1716); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM144, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop68;	/* break out of the loop */
            	    break;
                }
            }
            loop68: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1719);
            expression145=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression145.tree, NULL); }

            // .//Emerson.g:256:41: ( LTERM )*

            for (;;)
            {
                int alt69=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA69_0 = LA(1);
                    if ( (LA69_0 == LTERM) ) 
                    {
                        alt69=1;
                    }

                }
                switch (alt69) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM146 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1721); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM146, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop69;	/* break out of the loop */
            	    break;
                }
            }
            loop69: ; /* Jump out to here if this rule does not match */

            char_literal147 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_whileStatement1724); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal147, NULL); }


            // .//Emerson.g:256:52: ( LTERM )*

            for (;;)
            {
                int alt70=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA70_0 = LA(1);
                    if ( (LA70_0 == LTERM) ) 
                    {
                        alt70=1;
                    }

                }
                switch (alt70) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM148 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1726); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM148, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop70;	/* break out of the loop */
            	    break;
                }
            }
            loop70: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1729);
            statement149=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement149.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 256:69: -> ^( WHILE expression statement )
            	{
            	    // .//Emerson.g:256:72: ^( WHILE expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE, (pANTLR3_UINT8)"WHILE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, whileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//Emerson.g:259:1: forStatement : 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) ;
 */
static EmersonParser_forStatement_return
forStatement(pEmersonParser ctx)
{   
    EmersonParser_forStatement_return retval;
    ANTLR3_UINT32 forStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal150;
    pANTLR3_COMMON_TOKEN    LTERM151;
    pANTLR3_COMMON_TOKEN    char_literal152;
    pANTLR3_COMMON_TOKEN    LTERM153;
    pANTLR3_COMMON_TOKEN    LTERM154;
    pANTLR3_COMMON_TOKEN    char_literal155;
    pANTLR3_COMMON_TOKEN    LTERM156;
    pANTLR3_COMMON_TOKEN    LTERM157;
    pANTLR3_COMMON_TOKEN    char_literal158;
    pANTLR3_COMMON_TOKEN    LTERM159;
    pANTLR3_COMMON_TOKEN    LTERM160;
    pANTLR3_COMMON_TOKEN    char_literal161;
    pANTLR3_COMMON_TOKEN    LTERM162;
    EmersonParser_forStatementInitialiserPart_return init;
    #undef	RETURN_TYPE_init
    #define	RETURN_TYPE_init EmersonParser_forStatementInitialiserPart_return

    EmersonParser_expression_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond EmersonParser_expression_return

    EmersonParser_expression_return iter;
    #undef	RETURN_TYPE_iter
    #define	RETURN_TYPE_iter EmersonParser_expression_return

    EmersonParser_statement_return statement163;
    #undef	RETURN_TYPE_statement163
    #define	RETURN_TYPE_statement163 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal150_tree;
    pANTLR3_BASE_TREE LTERM151_tree;
    pANTLR3_BASE_TREE char_literal152_tree;
    pANTLR3_BASE_TREE LTERM153_tree;
    pANTLR3_BASE_TREE LTERM154_tree;
    pANTLR3_BASE_TREE char_literal155_tree;
    pANTLR3_BASE_TREE LTERM156_tree;
    pANTLR3_BASE_TREE LTERM157_tree;
    pANTLR3_BASE_TREE char_literal158_tree;
    pANTLR3_BASE_TREE LTERM159_tree;
    pANTLR3_BASE_TREE LTERM160_tree;
    pANTLR3_BASE_TREE char_literal161_tree;
    pANTLR3_BASE_TREE LTERM162_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forStatementInitialiserPart;
    /* Initialize rule variables
     */
    forStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal150       = NULL;
    LTERM151       = NULL;
    char_literal152       = NULL;
    LTERM153       = NULL;
    LTERM154       = NULL;
    char_literal155       = NULL;
    LTERM156       = NULL;
    LTERM157       = NULL;
    char_literal158       = NULL;
    LTERM159       = NULL;
    LTERM160       = NULL;
    char_literal161       = NULL;
    LTERM162       = NULL;
    init.tree = NULL;

    cond.tree = NULL;

    iter.tree = NULL;

    statement163.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal150_tree   = NULL;
    LTERM151_tree   = NULL;
    char_literal152_tree   = NULL;
    LTERM153_tree   = NULL;
    LTERM154_tree   = NULL;
    char_literal155_tree   = NULL;
    LTERM156_tree   = NULL;
    LTERM157_tree   = NULL;
    char_literal158_tree   = NULL;
    LTERM159_tree   = NULL;
    LTERM160_tree   = NULL;
    char_literal161_tree   = NULL;
    LTERM162_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forStatementInitialiserPart   = NULL;
    #define CREATE_stream_forStatementInitialiserPart  if (stream_forStatementInitialiserPart == NULL) {stream_forStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:260:2: ( 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) )
        // .//Emerson.g:260:4: 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal150 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_forStatement1752); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, string_literal150, NULL); }


            // .//Emerson.g:260:10: ( LTERM )*

            for (;;)
            {
                int alt71=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA71_0 = LA(1);
                    if ( (LA71_0 == LTERM) ) 
                    {
                        alt71=1;
                    }

                }
                switch (alt71) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM151 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1754); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM151, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop71;	/* break out of the loop */
            	    break;
                }
            }
            loop71: ; /* Jump out to here if this rule does not match */

            char_literal152 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_forStatement1757); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal152, NULL); }


            // .//Emerson.g:260:21: ( ( LTERM )* init= forStatementInitialiserPart )?
            {
                int alt73=2;
                alt73 = cdfa73.predict(ctx, RECOGNIZER, ISTREAM, &cdfa73);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt73) 
                {
            	case 1:
            	    // .//Emerson.g:260:22: ( LTERM )* init= forStatementInitialiserPart
            	    {

            	        // .//Emerson.g:260:22: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt72=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA72_0 = LA(1);
            	                if ( (LA72_0 == LTERM) ) 
            	                {
            	                    alt72=1;
            	                }

            	            }
            	            switch (alt72) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM153 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1760); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM153, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop72;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop72: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement1765);
            	        init=forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_forStatementInitialiserPart; stream_forStatementInitialiserPart->add(stream_forStatementInitialiserPart, init.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:260:64: ( LTERM )*

            for (;;)
            {
                int alt74=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA74_0 = LA(1);
                    if ( (LA74_0 == LTERM) ) 
                    {
                        alt74=1;
                    }

                }
                switch (alt74) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM154 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1769); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM154, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop74;	/* break out of the loop */
            	    break;
                }
            }
            loop74: ; /* Jump out to here if this rule does not match */

            char_literal155 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_forStatement1772); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal155, NULL); }


            // .//Emerson.g:260:75: ( ( LTERM )* cond= expression )?
            {
                int alt76=2;
                alt76 = cdfa76.predict(ctx, RECOGNIZER, ISTREAM, &cdfa76);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt76) 
                {
            	case 1:
            	    // .//Emerson.g:260:76: ( LTERM )* cond= expression
            	    {

            	        // .//Emerson.g:260:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt75=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA75_0 = LA(1);
            	                if ( (LA75_0 == LTERM) ) 
            	                {
            	                    alt75=1;
            	                }

            	            }
            	            switch (alt75) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM156 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1775); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM156, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop75;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop75: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1780);
            	        cond=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, cond.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:260:101: ( LTERM )*

            for (;;)
            {
                int alt77=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA77_0 = LA(1);
                    if ( (LA77_0 == LTERM) ) 
                    {
                        alt77=1;
                    }

                }
                switch (alt77) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM157 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1784); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM157, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */

            char_literal158 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_forStatement1787); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal158, NULL); }


            // .//Emerson.g:260:112: ( ( LTERM )* iter= expression )?
            {
                int alt79=2;
                alt79 = cdfa79.predict(ctx, RECOGNIZER, ISTREAM, &cdfa79);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt79) 
                {
            	case 1:
            	    // .//Emerson.g:260:113: ( LTERM )* iter= expression
            	    {

            	        // .//Emerson.g:260:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt78=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA78_0 = LA(1);
            	                if ( (LA78_0 == LTERM) ) 
            	                {
            	                    alt78=1;
            	                }

            	            }
            	            switch (alt78) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM159 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1790); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM159, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop78;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop78: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1795);
            	        iter=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, iter.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:260:138: ( LTERM )*

            for (;;)
            {
                int alt80=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA80_0 = LA(1);
                    if ( (LA80_0 == LTERM) ) 
                    {
                        alt80=1;
                    }

                }
                switch (alt80) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM160 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1799); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM160, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop80;	/* break out of the loop */
            	    break;
                }
            }
            loop80: ; /* Jump out to here if this rule does not match */

            char_literal161 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_forStatement1802); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal161, NULL); }


            // .//Emerson.g:260:149: ( LTERM )*

            for (;;)
            {
                int alt81=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA81_0 = LA(1);
                    if ( (LA81_0 == LTERM) ) 
                    {
                        alt81=1;
                    }

                }
                switch (alt81) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM162 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1804); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM162, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop81;	/* break out of the loop */
            	    break;
                }
            }
            loop81: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forStatement1807);
            statement163=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement163.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, cond, iter, init
             * token labels      : 
             * rule labels       : retval, init, iter, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_iter;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_init=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token init", init.tree != NULL ? init.tree : NULL);
            	stream_iter=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token iter", iter.tree != NULL ? iter.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 260:166: -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	{
            	    // .//Emerson.g:260:170: ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR"), root_1));

            	        // .//Emerson.g:260:176: ( ^( FORINIT $init) )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		// .//Emerson.g:260:176: ^( FORINIT $init)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORINIT, (pANTLR3_UINT8)"FORINIT"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }
            	        // .//Emerson.g:260:196: ( ^( FORCOND $cond) )?
            	        {
            	        	if ( (stream_cond != NULL && stream_cond->hasNext(stream_cond))  )
            	        	{
            	        		// .//Emerson.g:260:196: ^( FORCOND $cond)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORCOND, (pANTLR3_UINT8)"FORCOND"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_cond != NULL) stream_cond->reset(stream_cond);

            	        }
            	        // .//Emerson.g:260:215: ( ^( FORITER $iter) )?
            	        {
            	        	if ( (stream_iter != NULL && stream_iter->hasNext(stream_iter))  )
            	        	{
            	        		// .//Emerson.g:260:215: ^( FORITER $iter)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORITER, (pANTLR3_UINT8)"FORITER"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_iter == NULL ? NULL : stream_iter->nextTree(stream_iter));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_iter != NULL) stream_iter->reset(stream_iter);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_init != NULL) stream_init->free(stream_init);
            	if (stream_iter != NULL) stream_iter->free(stream_iter);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forStatementInitialiserPart != NULL) stream_forStatementInitialiserPart->free(stream_forStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, forStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//Emerson.g:263:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) );
 */
static EmersonParser_forStatementInitialiserPart_return
forStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal165;
    pANTLR3_COMMON_TOKEN    LTERM166;
    EmersonParser_expressionNoIn_return expressionNoIn164;
    #undef	RETURN_TYPE_expressionNoIn164
    #define	RETURN_TYPE_expressionNoIn164 EmersonParser_expressionNoIn_return

    EmersonParser_variableDeclarationListNoIn_return variableDeclarationListNoIn167;
    #undef	RETURN_TYPE_variableDeclarationListNoIn167
    #define	RETURN_TYPE_variableDeclarationListNoIn167 EmersonParser_variableDeclarationListNoIn_return

    pANTLR3_BASE_TREE string_literal165_tree;
    pANTLR3_BASE_TREE LTERM166_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationListNoIn;
    /* Initialize rule variables
     */
    forStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal165       = NULL;
    LTERM166       = NULL;
    expressionNoIn164.tree = NULL;

    variableDeclarationListNoIn167.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal165_tree   = NULL;
    LTERM166_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_variableDeclarationListNoIn   = NULL;
    #define CREATE_stream_variableDeclarationListNoIn  if (stream_variableDeclarationListNoIn == NULL) {stream_variableDeclarationListNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationListNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:264:2: ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt83;

            alt83=2;


            {
                int LA83_0 = LA(1);
                if ( (((LA83_0 >= Identifier) && (LA83_0 <= NumericLiteral)) || ((LA83_0 >= 124) && (LA83_0 <= 125)) || LA83_0 == 128 || ((LA83_0 >= 156) && (LA83_0 <= 157)) || ((LA83_0 >= 188) && (LA83_0 <= 189)) || ((LA83_0 >= 193) && (LA83_0 <= 203))) ) 
                {
                    alt83=1;
                }
                else if ( (LA83_0 == 130) ) 
                {
                    alt83=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 83;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt83) 
            {
        	case 1:
        	    // .//Emerson.g:264:4: expressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart1856);
        	        expressionNoIn164=expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionNoIn164.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:265:4: 'var' ( LTERM )* variableDeclarationListNoIn
        	    {
        	        string_literal165 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_forStatementInitialiserPart1861); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, string_literal165, NULL); }


        	        // .//Emerson.g:265:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt82=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA82_0 = LA(1);
        	                if ( (LA82_0 == LTERM) ) 
        	                {
        	                    alt82=1;
        	                }

        	            }
        	            switch (alt82) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM166 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatementInitialiserPart1863); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM166, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop82;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop82: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1866);
        	        variableDeclarationListNoIn167=variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationListNoIn; stream_variableDeclarationListNoIn->add(stream_variableDeclarationListNoIn, variableDeclarationListNoIn167.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationListNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 265:45: -> ^( VARLIST variableDeclarationListNoIn )
        	        	{
        	        	    // .//Emerson.g:265:48: ^( VARLIST variableDeclarationListNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationListNoIn == NULL ? NULL : stream_variableDeclarationListNoIn->nextTree(stream_variableDeclarationListNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_variableDeclarationListNoIn != NULL) stream_variableDeclarationListNoIn->free(stream_variableDeclarationListNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, forStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//Emerson.g:268:1: forInStatement : 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static EmersonParser_forInStatement_return
forInStatement(pEmersonParser ctx)
{   
    EmersonParser_forInStatement_return retval;
    ANTLR3_UINT32 forInStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal168;
    pANTLR3_COMMON_TOKEN    LTERM169;
    pANTLR3_COMMON_TOKEN    char_literal170;
    pANTLR3_COMMON_TOKEN    LTERM171;
    pANTLR3_COMMON_TOKEN    LTERM173;
    pANTLR3_COMMON_TOKEN    string_literal174;
    pANTLR3_COMMON_TOKEN    LTERM175;
    pANTLR3_COMMON_TOKEN    LTERM177;
    pANTLR3_COMMON_TOKEN    char_literal178;
    pANTLR3_COMMON_TOKEN    LTERM179;
    EmersonParser_forInStatementInitialiserPart_return forInStatementInitialiserPart172;
    #undef	RETURN_TYPE_forInStatementInitialiserPart172
    #define	RETURN_TYPE_forInStatementInitialiserPart172 EmersonParser_forInStatementInitialiserPart_return

    EmersonParser_expression_return expression176;
    #undef	RETURN_TYPE_expression176
    #define	RETURN_TYPE_expression176 EmersonParser_expression_return

    EmersonParser_statement_return statement180;
    #undef	RETURN_TYPE_statement180
    #define	RETURN_TYPE_statement180 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal168_tree;
    pANTLR3_BASE_TREE LTERM169_tree;
    pANTLR3_BASE_TREE char_literal170_tree;
    pANTLR3_BASE_TREE LTERM171_tree;
    pANTLR3_BASE_TREE LTERM173_tree;
    pANTLR3_BASE_TREE string_literal174_tree;
    pANTLR3_BASE_TREE LTERM175_tree;
    pANTLR3_BASE_TREE LTERM177_tree;
    pANTLR3_BASE_TREE char_literal178_tree;
    pANTLR3_BASE_TREE LTERM179_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forInStatementInitialiserPart;
    /* Initialize rule variables
     */
    forInStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal168       = NULL;
    LTERM169       = NULL;
    char_literal170       = NULL;
    LTERM171       = NULL;
    LTERM173       = NULL;
    string_literal174       = NULL;
    LTERM175       = NULL;
    LTERM177       = NULL;
    char_literal178       = NULL;
    LTERM179       = NULL;
    forInStatementInitialiserPart172.tree = NULL;

    expression176.tree = NULL;

    statement180.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal168_tree   = NULL;
    LTERM169_tree   = NULL;
    char_literal170_tree   = NULL;
    LTERM171_tree   = NULL;
    LTERM173_tree   = NULL;
    string_literal174_tree   = NULL;
    LTERM175_tree   = NULL;
    LTERM177_tree   = NULL;
    char_literal178_tree   = NULL;
    LTERM179_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forInStatementInitialiserPart   = NULL;
    #define CREATE_stream_forInStatementInitialiserPart  if (stream_forInStatementInitialiserPart == NULL) {stream_forInStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forInStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:269:2: ( 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//Emerson.g:269:4: 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal168 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_forInStatement1886); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, string_literal168, NULL); }


            // .//Emerson.g:269:10: ( LTERM )*

            for (;;)
            {
                int alt84=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA84_0 = LA(1);
                    if ( (LA84_0 == LTERM) ) 
                    {
                        alt84=1;
                    }

                }
                switch (alt84) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM169 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1888); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM169, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop84;	/* break out of the loop */
            	    break;
                }
            }
            loop84: ; /* Jump out to here if this rule does not match */

            char_literal170 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_forInStatement1891); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal170, NULL); }


            // .//Emerson.g:269:21: ( LTERM )*

            for (;;)
            {
                int alt85=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA85_0 = LA(1);
                    if ( (LA85_0 == LTERM) ) 
                    {
                        alt85=1;
                    }

                }
                switch (alt85) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM171 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1893); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM171, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop85;	/* break out of the loop */
            	    break;
                }
            }
            loop85: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement1896);
            forInStatementInitialiserPart172=forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_forInStatementInitialiserPart; stream_forInStatementInitialiserPart->add(stream_forInStatementInitialiserPart, forInStatementInitialiserPart172.tree, NULL); }

            // .//Emerson.g:269:58: ( LTERM )*

            for (;;)
            {
                int alt86=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA86_0 = LA(1);
                    if ( (LA86_0 == LTERM) ) 
                    {
                        alt86=1;
                    }

                }
                switch (alt86) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM173 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1898); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM173, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop86;	/* break out of the loop */
            	    break;
                }
            }
            loop86: ; /* Jump out to here if this rule does not match */

            string_literal174 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forInStatement1901); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal174, NULL); }


            // .//Emerson.g:269:70: ( LTERM )*

            for (;;)
            {
                int alt87=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA87_0 = LA(1);
                    if ( (LA87_0 == LTERM) ) 
                    {
                        alt87=1;
                    }

                }
                switch (alt87) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM175 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1903); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM175, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop87;	/* break out of the loop */
            	    break;
                }
            }
            loop87: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_forInStatement1906);
            expression176=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression176.tree, NULL); }

            // .//Emerson.g:269:88: ( LTERM )*

            for (;;)
            {
                int alt88=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA88_0 = LA(1);
                    if ( (LA88_0 == LTERM) ) 
                    {
                        alt88=1;
                    }

                }
                switch (alt88) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM177 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1908); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM177, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop88;	/* break out of the loop */
            	    break;
                }
            }
            loop88: ; /* Jump out to here if this rule does not match */

            char_literal178 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_forInStatement1911); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal178, NULL); }


            // .//Emerson.g:269:99: ( LTERM )*

            for (;;)
            {
                int alt89=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA89_0 = LA(1);
                    if ( (LA89_0 == LTERM) ) 
                    {
                        alt89=1;
                    }

                }
                switch (alt89) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM179 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1913); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM179, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop89;	/* break out of the loop */
            	    break;
                }
            }
            loop89: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forInStatement1916);
            statement180=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement180.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement, forInStatementInitialiserPart
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 269:116: -> ^( FORIN forInStatementInitialiserPart expression statement )
            	{
            	    // .//Emerson.g:269:119: ^( FORIN forInStatementInitialiserPart expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORIN, (pANTLR3_UINT8)"FORIN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_forInStatementInitialiserPart == NULL ? NULL : stream_forInStatementInitialiserPart->nextTree(stream_forInStatementInitialiserPart));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forInStatementInitialiserPart != NULL) stream_forInStatementInitialiserPart->free(stream_forInStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, forInStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//Emerson.g:272:1: forInStatementInitialiserPart : ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) );
 */
static EmersonParser_forInStatementInitialiserPart_return
forInStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forInStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forInStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal182;
    pANTLR3_COMMON_TOKEN    LTERM183;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression181;
    #undef	RETURN_TYPE_leftHandSideExpression181
    #define	RETURN_TYPE_leftHandSideExpression181 EmersonParser_leftHandSideExpression_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn184;
    #undef	RETURN_TYPE_variableDeclarationNoIn184
    #define	RETURN_TYPE_variableDeclarationNoIn184 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE string_literal182_tree;
    pANTLR3_BASE_TREE LTERM183_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    forInStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal182       = NULL;
    LTERM183       = NULL;
    leftHandSideExpression181.tree = NULL;

    variableDeclarationNoIn184.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal182_tree   = NULL;
    LTERM183_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:273:2: ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt91;

            alt91=2;


            {
                int LA91_0 = LA(1);
                if ( (((LA91_0 >= Identifier) && (LA91_0 <= NumericLiteral)) || ((LA91_0 >= 124) && (LA91_0 <= 125)) || LA91_0 == 128 || ((LA91_0 >= 156) && (LA91_0 <= 157)) || ((LA91_0 >= 200) && (LA91_0 <= 203))) ) 
                {
                    alt91=1;
                }
                else if ( (LA91_0 == 130) ) 
                {
                    alt91=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 91;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt91) 
            {
        	case 1:
        	    // .//Emerson.g:273:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1940);
        	        leftHandSideExpression181=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression181.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 273:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:274:4: 'var' ( LTERM )* variableDeclarationNoIn
        	    {
        	        string_literal182 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_forInStatementInitialiserPart1949); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, string_literal182, NULL); }


        	        // .//Emerson.g:274:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt90=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA90_0 = LA(1);
        	                if ( (LA90_0 == LTERM) ) 
        	                {
        	                    alt90=1;
        	                }

        	            }
        	            switch (alt90) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM183 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatementInitialiserPart1951); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforInStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM183, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop90;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop90: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1954);
        	        variableDeclarationNoIn184=variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn184.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 274:41: -> ^( VAR variableDeclarationNoIn )
        	        	{
        	        	    // .//Emerson.g:274:44: ^( VAR variableDeclarationNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, forInStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//Emerson.g:277:1: continueStatement : 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) ;
 */
static EmersonParser_continueStatement_return
continueStatement(pEmersonParser ctx)
{   
    EmersonParser_continueStatement_return retval;
    ANTLR3_UINT32 continueStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal185;
    pANTLR3_COMMON_TOKEN    Identifier186;
    pANTLR3_COMMON_TOKEN    LTERM187;
    pANTLR3_COMMON_TOKEN    char_literal188;

    pANTLR3_BASE_TREE string_literal185_tree;
    pANTLR3_BASE_TREE Identifier186_tree;
    pANTLR3_BASE_TREE LTERM187_tree;
    pANTLR3_BASE_TREE char_literal188_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;

    /* Initialize rule variables
     */
    continueStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal185       = NULL;
    Identifier186       = NULL;
    LTERM187       = NULL;
    char_literal188       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal185_tree   = NULL;
    Identifier186_tree   = NULL;
    LTERM187_tree   = NULL;
    char_literal188_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:278:2: ( 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) )
        // .//Emerson.g:278:4: 'continue' ( Identifier )? ( LTERM | ';' )
        {
            string_literal185 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_continueStatement1973); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal185, NULL); }


            // .//Emerson.g:278:15: ( Identifier )?
            {
                int alt92=2;
                {
                    int LA92_0 = LA(1);
                    if ( (LA92_0 == Identifier) ) 
                    {
                        alt92=1;
                    }
                }
                switch (alt92) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier186 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement1975); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier186, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:278:27: ( LTERM | ';' )
            {
                int alt93=2;

                {
                    int LA93_0 = LA(1);
                    if ( (LA93_0 == LTERM) ) 
                    {
                        alt93=1;
                    }
                    else if ( (LA93_0 == 131) ) 
                    {
                        alt93=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 93;
                        EXCEPTION->state        = 0;


                        goto rulecontinueStatementEx;
                    }
                }
                switch (alt93) 
                {
            	case 1:
            	    // .//Emerson.g:278:28: LTERM
            	    {
            	        LTERM187 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_continueStatement1979); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM187, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:278:36: ';'
            	    {
            	        char_literal188 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_continueStatement1983); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal188, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 278:42: -> ^( CONTINUE ( Identifier )? )
            	{
            	    // .//Emerson.g:278:45: ^( CONTINUE ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE, (pANTLR3_UINT8)"CONTINUE"), root_1));

            	        // .//Emerson.g:278:56: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_142 != NULL) stream_142->free(stream_142);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, continueStatement_StartIndex); }
    return retval;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//Emerson.g:281:1: breakStatement : 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) ;
 */
static EmersonParser_breakStatement_return
breakStatement(pEmersonParser ctx)
{   
    EmersonParser_breakStatement_return retval;
    ANTLR3_UINT32 breakStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal189;
    pANTLR3_COMMON_TOKEN    Identifier190;
    pANTLR3_COMMON_TOKEN    LTERM191;
    pANTLR3_COMMON_TOKEN    char_literal192;

    pANTLR3_BASE_TREE string_literal189_tree;
    pANTLR3_BASE_TREE Identifier190_tree;
    pANTLR3_BASE_TREE LTERM191_tree;
    pANTLR3_BASE_TREE char_literal192_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;

    /* Initialize rule variables
     */
    breakStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal189       = NULL;
    Identifier190       = NULL;
    LTERM191       = NULL;
    char_literal192       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal189_tree   = NULL;
    Identifier190_tree   = NULL;
    LTERM191_tree   = NULL;
    char_literal192_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:282:2: ( 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) )
        // .//Emerson.g:282:4: 'break' ( Identifier )? ( LTERM | ';' )
        {
            string_literal189 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_breakStatement2005); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, string_literal189, NULL); }


            // .//Emerson.g:282:12: ( Identifier )?
            {
                int alt94=2;
                {
                    int LA94_0 = LA(1);
                    if ( (LA94_0 == Identifier) ) 
                    {
                        alt94=1;
                    }
                }
                switch (alt94) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier190 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2007); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier190, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:282:24: ( LTERM | ';' )
            {
                int alt95=2;

                {
                    int LA95_0 = LA(1);
                    if ( (LA95_0 == LTERM) ) 
                    {
                        alt95=1;
                    }
                    else if ( (LA95_0 == 131) ) 
                    {
                        alt95=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 95;
                        EXCEPTION->state        = 0;


                        goto rulebreakStatementEx;
                    }
                }
                switch (alt95) 
                {
            	case 1:
            	    // .//Emerson.g:282:25: LTERM
            	    {
            	        LTERM191 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_breakStatement2011); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM191, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:282:33: ';'
            	    {
            	        char_literal192 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_breakStatement2015); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal192, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 282:38: -> ^( BREAK ( Identifier )? )
            	{
            	    // .//Emerson.g:282:41: ^( BREAK ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK, (pANTLR3_UINT8)"BREAK"), root_1));

            	        // .//Emerson.g:282:49: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_131 != NULL) stream_131->free(stream_131);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, breakStatement_StartIndex); }
    return retval;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//Emerson.g:285:1: returnStatement : 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) ;
 */
static EmersonParser_returnStatement_return
returnStatement(pEmersonParser ctx)
{   
    EmersonParser_returnStatement_return retval;
    ANTLR3_UINT32 returnStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal193;
    pANTLR3_COMMON_TOKEN    LTERM195;
    pANTLR3_COMMON_TOKEN    char_literal196;
    EmersonParser_expression_return expression194;
    #undef	RETURN_TYPE_expression194
    #define	RETURN_TYPE_expression194 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal193_tree;
    pANTLR3_BASE_TREE LTERM195_tree;
    pANTLR3_BASE_TREE char_literal196_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    returnStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal193       = NULL;
    LTERM195       = NULL;
    char_literal196       = NULL;
    expression194.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal193_tree   = NULL;
    LTERM195_tree   = NULL;
    char_literal196_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:286:2: ( 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) )
        // .//Emerson.g:286:4: 'return' ( expression )? ( LTERM | ';' )
        {
            string_literal193 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_returnStatement2036); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, string_literal193, NULL); }


            // .//Emerson.g:286:13: ( expression )?
            {
                int alt96=2;
                {
                    int LA96_0 = LA(1);
                    if ( (((LA96_0 >= Identifier) && (LA96_0 <= NumericLiteral)) || ((LA96_0 >= 124) && (LA96_0 <= 125)) || LA96_0 == 128 || ((LA96_0 >= 156) && (LA96_0 <= 157)) || ((LA96_0 >= 188) && (LA96_0 <= 189)) || ((LA96_0 >= 193) && (LA96_0 <= 203))) ) 
                    {
                        alt96=1;
                    }
                }
                switch (alt96) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2038);
            	        expression194=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression194.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:286:25: ( LTERM | ';' )
            {
                int alt97=2;

                {
                    int LA97_0 = LA(1);
                    if ( (LA97_0 == LTERM) ) 
                    {
                        alt97=1;
                    }
                    else if ( (LA97_0 == 131) ) 
                    {
                        alt97=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 97;
                        EXCEPTION->state        = 0;


                        goto rulereturnStatementEx;
                    }
                }
                switch (alt97) 
                {
            	case 1:
            	    // .//Emerson.g:286:26: LTERM
            	    {
            	        LTERM195 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_returnStatement2042); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM195, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:286:34: ';'
            	    {
            	        char_literal196 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_returnStatement2046); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal196, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 286:39: -> ^( RETURN ( expression )? )
            	{
            	    // .//Emerson.g:286:42: ^( RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        // .//Emerson.g:286:51: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, returnStatement_StartIndex); }
    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//Emerson.g:289:1: withStatement : 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) ;
 */
static EmersonParser_withStatement_return
withStatement(pEmersonParser ctx)
{   
    EmersonParser_withStatement_return retval;
    ANTLR3_UINT32 withStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal197;
    pANTLR3_COMMON_TOKEN    LTERM198;
    pANTLR3_COMMON_TOKEN    char_literal199;
    pANTLR3_COMMON_TOKEN    LTERM200;
    pANTLR3_COMMON_TOKEN    LTERM202;
    pANTLR3_COMMON_TOKEN    char_literal203;
    pANTLR3_COMMON_TOKEN    LTERM204;
    EmersonParser_expression_return expression201;
    #undef	RETURN_TYPE_expression201
    #define	RETURN_TYPE_expression201 EmersonParser_expression_return

    EmersonParser_statement_return statement205;
    #undef	RETURN_TYPE_statement205
    #define	RETURN_TYPE_statement205 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal197_tree;
    pANTLR3_BASE_TREE LTERM198_tree;
    pANTLR3_BASE_TREE char_literal199_tree;
    pANTLR3_BASE_TREE LTERM200_tree;
    pANTLR3_BASE_TREE LTERM202_tree;
    pANTLR3_BASE_TREE char_literal203_tree;
    pANTLR3_BASE_TREE LTERM204_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    withStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal197       = NULL;
    LTERM198       = NULL;
    char_literal199       = NULL;
    LTERM200       = NULL;
    LTERM202       = NULL;
    char_literal203       = NULL;
    LTERM204       = NULL;
    expression201.tree = NULL;

    statement205.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal197_tree   = NULL;
    LTERM198_tree   = NULL;
    char_literal199_tree   = NULL;
    LTERM200_tree   = NULL;
    LTERM202_tree   = NULL;
    char_literal203_tree   = NULL;
    LTERM204_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:290:2: ( 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) )
        // .//Emerson.g:290:4: 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal197 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_withStatement2068); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, string_literal197, NULL); }


            // .//Emerson.g:290:11: ( LTERM )*

            for (;;)
            {
                int alt98=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA98_0 = LA(1);
                    if ( (LA98_0 == LTERM) ) 
                    {
                        alt98=1;
                    }

                }
                switch (alt98) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM198 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2070); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM198, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop98;	/* break out of the loop */
            	    break;
                }
            }
            loop98: ; /* Jump out to here if this rule does not match */

            char_literal199 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_withStatement2073); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal199, NULL); }


            // .//Emerson.g:290:22: ( LTERM )*

            for (;;)
            {
                int alt99=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA99_0 = LA(1);
                    if ( (LA99_0 == LTERM) ) 
                    {
                        alt99=1;
                    }

                }
                switch (alt99) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM200 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2075); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM200, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop99;	/* break out of the loop */
            	    break;
                }
            }
            loop99: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_withStatement2078);
            expression201=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression201.tree, NULL); }

            // .//Emerson.g:290:40: ( LTERM )*

            for (;;)
            {
                int alt100=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA100_0 = LA(1);
                    if ( (LA100_0 == LTERM) ) 
                    {
                        alt100=1;
                    }

                }
                switch (alt100) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM202 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2080); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM202, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop100;	/* break out of the loop */
            	    break;
                }
            }
            loop100: ; /* Jump out to here if this rule does not match */

            char_literal203 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_withStatement2083); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal203, NULL); }


            // .//Emerson.g:290:51: ( LTERM )*

            for (;;)
            {
                int alt101=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA101_0 = LA(1);
                    if ( (LA101_0 == LTERM) ) 
                    {
                        alt101=1;
                    }

                }
                switch (alt101) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM204 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2085); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM204, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop101;	/* break out of the loop */
            	    break;
                }
            }
            loop101: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_withStatement2088);
            statement205=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement205.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 290:68: -> ^( WITH expression statement )
            	{
            	    // .//Emerson.g:290:71: ^( WITH expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WITH, (pANTLR3_UINT8)"WITH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, withStatement_StartIndex); }
    return retval;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start labelledStatement
 * .//Emerson.g:293:1: labelledStatement : Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) ;
 */
static EmersonParser_labelledStatement_return
labelledStatement(pEmersonParser ctx)
{   
    EmersonParser_labelledStatement_return retval;
    ANTLR3_UINT32 labelledStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier206;
    pANTLR3_COMMON_TOKEN    LTERM207;
    pANTLR3_COMMON_TOKEN    char_literal208;
    pANTLR3_COMMON_TOKEN    LTERM209;
    EmersonParser_statement_return statement210;
    #undef	RETURN_TYPE_statement210
    #define	RETURN_TYPE_statement210 EmersonParser_statement_return

    pANTLR3_BASE_TREE Identifier206_tree;
    pANTLR3_BASE_TREE LTERM207_tree;
    pANTLR3_BASE_TREE char_literal208_tree;
    pANTLR3_BASE_TREE LTERM209_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    labelledStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier206       = NULL;
    LTERM207       = NULL;
    char_literal208       = NULL;
    LTERM209       = NULL;
    statement210.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier206_tree   = NULL;
    LTERM207_tree   = NULL;
    char_literal208_tree   = NULL;
    LTERM209_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:294:2: ( Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) )
        // .//Emerson.g:294:4: Identifier ( LTERM )* ':' ( LTERM )* statement
        {
            Identifier206 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_labelledStatement2109); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier206, NULL); }


            // .//Emerson.g:294:15: ( LTERM )*

            for (;;)
            {
                int alt102=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA102_0 = LA(1);
                    if ( (LA102_0 == LTERM) ) 
                    {
                        alt102=1;
                    }

                }
                switch (alt102) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM207 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2111); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM207, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop102;	/* break out of the loop */
            	    break;
                }
            }
            loop102: ; /* Jump out to here if this rule does not match */

            char_literal208 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_labelledStatement2114); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal208, NULL); }


            // .//Emerson.g:294:26: ( LTERM )*

            for (;;)
            {
                int alt103=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA103_0 = LA(1);
                    if ( (LA103_0 == LTERM) ) 
                    {
                        alt103=1;
                    }

                }
                switch (alt103) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM209 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2116); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM209, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop103;	/* break out of the loop */
            	    break;
                }
            }
            loop103: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_labelledStatement2119);
            statement210=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement210.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 294:43: -> ^( LABEL Identifier statement )
            	{
            	    // .//Emerson.g:294:46: ^( LABEL Identifier statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LABEL, (pANTLR3_UINT8)"LABEL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelabelledStatementEx; /* Prevent compiler warnings */
    rulelabelledStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, labelledStatement_StartIndex); }
    return retval;
}
/* $ANTLR end labelledStatement */

/** 
 * $ANTLR start switchStatement
 * .//Emerson.g:297:1: switchStatement : 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) ;
 */
static EmersonParser_switchStatement_return
switchStatement(pEmersonParser ctx)
{   
    EmersonParser_switchStatement_return retval;
    ANTLR3_UINT32 switchStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal211;
    pANTLR3_COMMON_TOKEN    LTERM212;
    pANTLR3_COMMON_TOKEN    char_literal213;
    pANTLR3_COMMON_TOKEN    LTERM214;
    pANTLR3_COMMON_TOKEN    LTERM216;
    pANTLR3_COMMON_TOKEN    char_literal217;
    pANTLR3_COMMON_TOKEN    LTERM218;
    EmersonParser_expression_return expression215;
    #undef	RETURN_TYPE_expression215
    #define	RETURN_TYPE_expression215 EmersonParser_expression_return

    EmersonParser_caseBlock_return caseBlock219;
    #undef	RETURN_TYPE_caseBlock219
    #define	RETURN_TYPE_caseBlock219 EmersonParser_caseBlock_return

    pANTLR3_BASE_TREE string_literal211_tree;
    pANTLR3_BASE_TREE LTERM212_tree;
    pANTLR3_BASE_TREE char_literal213_tree;
    pANTLR3_BASE_TREE LTERM214_tree;
    pANTLR3_BASE_TREE LTERM216_tree;
    pANTLR3_BASE_TREE char_literal217_tree;
    pANTLR3_BASE_TREE LTERM218_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseBlock;
    /* Initialize rule variables
     */
    switchStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal211       = NULL;
    LTERM212       = NULL;
    char_literal213       = NULL;
    LTERM214       = NULL;
    LTERM216       = NULL;
    char_literal217       = NULL;
    LTERM218       = NULL;
    expression215.tree = NULL;

    caseBlock219.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal211_tree   = NULL;
    LTERM212_tree   = NULL;
    char_literal213_tree   = NULL;
    LTERM214_tree   = NULL;
    LTERM216_tree   = NULL;
    char_literal217_tree   = NULL;
    LTERM218_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_caseBlock   = NULL;
    #define CREATE_stream_caseBlock  if (stream_caseBlock == NULL) {stream_caseBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:298:2: ( 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) )
        // .//Emerson.g:298:4: 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock
        {
            string_literal211 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_switchStatement2142); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, string_literal211, NULL); }


            // .//Emerson.g:298:13: ( LTERM )*

            for (;;)
            {
                int alt104=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA104_0 = LA(1);
                    if ( (LA104_0 == LTERM) ) 
                    {
                        alt104=1;
                    }

                }
                switch (alt104) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM212 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2144); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM212, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop104;	/* break out of the loop */
            	    break;
                }
            }
            loop104: ; /* Jump out to here if this rule does not match */

            char_literal213 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_switchStatement2147); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal213, NULL); }


            // .//Emerson.g:298:24: ( LTERM )*

            for (;;)
            {
                int alt105=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA105_0 = LA(1);
                    if ( (LA105_0 == LTERM) ) 
                    {
                        alt105=1;
                    }

                }
                switch (alt105) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM214 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2149); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM214, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop105;	/* break out of the loop */
            	    break;
                }
            }
            loop105: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2152);
            expression215=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression215.tree, NULL); }

            // .//Emerson.g:298:42: ( LTERM )*

            for (;;)
            {
                int alt106=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA106_0 = LA(1);
                    if ( (LA106_0 == LTERM) ) 
                    {
                        alt106=1;
                    }

                }
                switch (alt106) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM216 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2154); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM216, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */

            char_literal217 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_switchStatement2157); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal217, NULL); }


            // .//Emerson.g:298:53: ( LTERM )*

            for (;;)
            {
                int alt107=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA107_0 = LA(1);
                    if ( (LA107_0 == LTERM) ) 
                    {
                        alt107=1;
                    }

                }
                switch (alt107) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM218 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2159); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM218, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop107;	/* break out of the loop */
            	    break;
                }
            }
            loop107: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2162);
            caseBlock219=caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_caseBlock; stream_caseBlock->add(stream_caseBlock, caseBlock219.tree, NULL); }

             
            /* AST REWRITE
             * elements          : caseBlock, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 298:70: -> ^( SWITCH expression caseBlock )
            	{
            	    // .//Emerson.g:298:73: ^( SWITCH expression caseBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH, (pANTLR3_UINT8)"SWITCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_caseBlock == NULL ? NULL : stream_caseBlock->nextTree(stream_caseBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_caseBlock != NULL) stream_caseBlock->free(stream_caseBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, switchStatement_StartIndex); }
    return retval;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//Emerson.g:301:1: caseBlock : '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? ;
 */
static EmersonParser_caseBlock_return
caseBlock(pEmersonParser ctx)
{   
    EmersonParser_caseBlock_return retval;
    ANTLR3_UINT32 caseBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal220;
    pANTLR3_COMMON_TOKEN    LTERM221;
    pANTLR3_COMMON_TOKEN    LTERM222;
    pANTLR3_COMMON_TOKEN    LTERM224;
    pANTLR3_COMMON_TOKEN    LTERM225;
    pANTLR3_COMMON_TOKEN    char_literal226;
    EmersonParser_caseClause_return case1;
    #undef	RETURN_TYPE_case1
    #define	RETURN_TYPE_case1 EmersonParser_caseClause_return

    EmersonParser_caseClause_return case2;
    #undef	RETURN_TYPE_case2
    #define	RETURN_TYPE_case2 EmersonParser_caseClause_return

    EmersonParser_defaultClause_return defaultClause223;
    #undef	RETURN_TYPE_defaultClause223
    #define	RETURN_TYPE_defaultClause223 EmersonParser_defaultClause_return

    pANTLR3_BASE_TREE char_literal220_tree;
    pANTLR3_BASE_TREE LTERM221_tree;
    pANTLR3_BASE_TREE LTERM222_tree;
    pANTLR3_BASE_TREE LTERM224_tree;
    pANTLR3_BASE_TREE LTERM225_tree;
    pANTLR3_BASE_TREE char_literal226_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal220       = NULL;
    LTERM221       = NULL;
    LTERM222       = NULL;
    LTERM224       = NULL;
    LTERM225       = NULL;
    char_literal226       = NULL;
    case1.tree = NULL;

    case2.tree = NULL;

    defaultClause223.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal220_tree   = NULL;
    LTERM221_tree   = NULL;
    LTERM222_tree   = NULL;
    LTERM224_tree   = NULL;
    LTERM225_tree   = NULL;
    char_literal226_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:302:2: ( '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? )
        // .//Emerson.g:302:4: '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}'
        {
            char_literal220 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_caseBlock2184); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal220, NULL); }


            // .//Emerson.g:302:8: ( ( LTERM )* case1= caseClause )*

            for (;;)
            {
                int alt109=2;
                alt109 = cdfa109.predict(ctx, RECOGNIZER, ISTREAM, &cdfa109);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt109) 
                {
            	case 1:
            	    // .//Emerson.g:302:9: ( LTERM )* case1= caseClause
            	    {

            	        // .//Emerson.g:302:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt108=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA108_0 = LA(1);
            	                if ( (LA108_0 == LTERM) ) 
            	                {
            	                    alt108=1;
            	                }

            	            }
            	            switch (alt108) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM221 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2187); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM221, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop108;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop108: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2192);
            	        case1=caseClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case1.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop109;	/* break out of the loop */
            	    break;
                }
            }
            loop109: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:302:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
            {
                int alt113=2;
                alt113 = cdfa113.predict(ctx, RECOGNIZER, ISTREAM, &cdfa113);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt113) 
                {
            	case 1:
            	    // .//Emerson.g:302:36: ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )*
            	    {

            	        // .//Emerson.g:302:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt110=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA110_0 = LA(1);
            	                if ( (LA110_0 == LTERM) ) 
            	                {
            	                    alt110=1;
            	                }

            	            }
            	            switch (alt110) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM222 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2197); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM222, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop110;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop110: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2200);
            	        defaultClause223=defaultClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, defaultClause223.tree, NULL); }

            	        // .//Emerson.g:302:57: ( ( LTERM )* case2= caseClause )*

            	        for (;;)
            	        {
            	            int alt112=2;
            	            alt112 = cdfa112.predict(ctx, RECOGNIZER, ISTREAM, &cdfa112);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulecaseBlockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt112) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:302:58: ( LTERM )* case2= caseClause
            	        	    {

            	        	        // .//Emerson.g:302:58: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt111=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA111_0 = LA(1);
            	        	                if ( (LA111_0 == LTERM) ) 
            	        	                {
            	        	                    alt111=1;
            	        	                }

            	        	            }
            	        	            switch (alt111) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM224 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2203); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulecaseBlockEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM224, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop111;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop111: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2208);
            	        	        case2=caseClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case2.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop112;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop112: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:302:86: ( LTERM )*

            for (;;)
            {
                int alt114=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA114_0 = LA(1);
                    if ( (LA114_0 == LTERM) ) 
                    {
                        alt114=1;
                    }

                }
                switch (alt114) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM225 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2214); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM225, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop114;	/* break out of the loop */
            	    break;
                }
            }
            loop114: ; /* Jump out to here if this rule does not match */

            char_literal226 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_caseBlock2217); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal226, NULL); }


             
            /* AST REWRITE
             * elements          : case1, case2, defaultClause
             * token labels      : 
             * rule labels       : case2, retval, case1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case1;

            	stream_case2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case2", case2.tree != NULL ? case2.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_case1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case1", case1.tree != NULL ? case1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 302:97: -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )?
            	{
            	    // .//Emerson.g:302:101: ( ^( $case1) )*
            	    {
            	    	while ( (stream_case1 != NULL && stream_case1->hasNext(stream_case1))  )
            	    	{
            	    		// .//Emerson.g:302:101: ^( $case1)
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case1 == NULL ? NULL : stream_case1->nextNode(stream_case1), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_case1 != NULL) stream_case1->reset(stream_case1);

            	    }
            	    // .//Emerson.g:302:112: ( ( ^( defaultClause ) )* )?
            	    {
            	    	if ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    	{
            	    		// .//Emerson.g:302:113: ( ^( defaultClause ) )*
            	    		{
            	    			while ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    			{
            	    				// .//Emerson.g:302:113: ^( defaultClause )
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_defaultClause == NULL ? NULL : stream_defaultClause->nextNode(stream_defaultClause), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    		}

            	    	}
            	    	if ( stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    }
            	    // .//Emerson.g:302:133: ( ( ^( $case2) )* )?
            	    {
            	    	if ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    	{
            	    		// .//Emerson.g:302:134: ( ^( $case2) )*
            	    		{
            	    			while ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    			{
            	    				// .//Emerson.g:302:134: ^( $case2)
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case2 == NULL ? NULL : stream_case2->nextNode(stream_case2), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    		}

            	    	}
            	    	if ( stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_case2 != NULL) stream_case2->free(stream_case2);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_case1 != NULL) stream_case1->free(stream_case1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, caseBlock_StartIndex); }
    return retval;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//Emerson.g:305:1: caseClause : 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) ;
 */
static EmersonParser_caseClause_return
caseClause(pEmersonParser ctx)
{   
    EmersonParser_caseClause_return retval;
    ANTLR3_UINT32 caseClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal227;
    pANTLR3_COMMON_TOKEN    LTERM228;
    pANTLR3_COMMON_TOKEN    LTERM230;
    pANTLR3_COMMON_TOKEN    char_literal231;
    pANTLR3_COMMON_TOKEN    LTERM232;
    EmersonParser_expression_return expression229;
    #undef	RETURN_TYPE_expression229
    #define	RETURN_TYPE_expression229 EmersonParser_expression_return

    EmersonParser_statementList_return statementList233;
    #undef	RETURN_TYPE_statementList233
    #define	RETURN_TYPE_statementList233 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal227_tree;
    pANTLR3_BASE_TREE LTERM228_tree;
    pANTLR3_BASE_TREE LTERM230_tree;
    pANTLR3_BASE_TREE char_literal231_tree;
    pANTLR3_BASE_TREE LTERM232_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    caseClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal227       = NULL;
    LTERM228       = NULL;
    LTERM230       = NULL;
    char_literal231       = NULL;
    LTERM232       = NULL;
    expression229.tree = NULL;

    statementList233.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal227_tree   = NULL;
    LTERM228_tree   = NULL;
    LTERM230_tree   = NULL;
    char_literal231_tree   = NULL;
    LTERM232_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:306:2: ( 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) )
        // .//Emerson.g:306:4: 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal227 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_caseClause2254); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal227, NULL); }


            // .//Emerson.g:306:11: ( LTERM )*

            for (;;)
            {
                int alt115=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA115_0 = LA(1);
                    if ( (LA115_0 == LTERM) ) 
                    {
                        alt115=1;
                    }

                }
                switch (alt115) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM228 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2256); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM228, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop115;	/* break out of the loop */
            	    break;
                }
            }
            loop115: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_caseClause2259);
            expression229=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression229.tree, NULL); }

            // .//Emerson.g:306:29: ( LTERM )*

            for (;;)
            {
                int alt116=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA116_0 = LA(1);
                    if ( (LA116_0 == LTERM) ) 
                    {
                        alt116=1;
                    }

                }
                switch (alt116) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM230 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2261); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM230, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop116;	/* break out of the loop */
            	    break;
                }
            }
            loop116: ; /* Jump out to here if this rule does not match */

            char_literal231 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_caseClause2264); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal231, NULL); }


            // .//Emerson.g:306:40: ( LTERM )*

            for (;;)
            {
                int alt117=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA117_0 = LA(1);
                    if ( (LA117_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA117_2 = LA(2);
                            if ( (synpred133_Emerson(ctx)) ) 
                            {
                                alt117=1;
                            }

                        }
                    }

                }
                switch (alt117) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM232 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2266); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM232, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop117;	/* break out of the loop */
            	    break;
                }
            }
            loop117: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:306:47: ( statementList )?
            {
                int alt118=2;
                {
                    int LA118_0 = LA(1);
                    if ( (((LA118_0 >= Identifier) && (LA118_0 <= NumericLiteral)) || ((LA118_0 >= 124) && (LA118_0 <= 125)) || LA118_0 == 128 || ((LA118_0 >= 130) && (LA118_0 <= 131)) || LA118_0 == 136 || ((LA118_0 >= 138) && (LA118_0 <= 140)) || ((LA118_0 >= 142) && (LA118_0 <= 145)) || LA118_0 == 147 || ((LA118_0 >= 150) && (LA118_0 <= 151)) || ((LA118_0 >= 156) && (LA118_0 <= 157)) || ((LA118_0 >= 188) && (LA118_0 <= 189)) || ((LA118_0 >= 193) && (LA118_0 <= 203))) ) 
                    {
                        alt118=1;
                    }
                }
                switch (alt118) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2269);
            	        statementList233=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList233.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 306:62: -> ^( CASE expression ( statementList )? )
            	{
            	    // .//Emerson.g:306:65: ^( CASE expression ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        // .//Emerson.g:306:84: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, caseClause_StartIndex); }
    return retval;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//Emerson.g:309:1: defaultClause : 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) ;
 */
static EmersonParser_defaultClause_return
defaultClause(pEmersonParser ctx)
{   
    EmersonParser_defaultClause_return retval;
    ANTLR3_UINT32 defaultClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal234;
    pANTLR3_COMMON_TOKEN    LTERM235;
    pANTLR3_COMMON_TOKEN    char_literal236;
    pANTLR3_COMMON_TOKEN    LTERM237;
    EmersonParser_statementList_return statementList238;
    #undef	RETURN_TYPE_statementList238
    #define	RETURN_TYPE_statementList238 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal234_tree;
    pANTLR3_BASE_TREE LTERM235_tree;
    pANTLR3_BASE_TREE char_literal236_tree;
    pANTLR3_BASE_TREE LTERM237_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    defaultClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal234       = NULL;
    LTERM235       = NULL;
    char_literal236       = NULL;
    LTERM237       = NULL;
    statementList238.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal234_tree   = NULL;
    LTERM235_tree   = NULL;
    char_literal236_tree   = NULL;
    LTERM237_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:310:2: ( 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) )
        // .//Emerson.g:310:4: 'default' ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal234 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_defaultClause2294); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal234, NULL); }


            // .//Emerson.g:310:14: ( LTERM )*

            for (;;)
            {
                int alt119=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA119_0 = LA(1);
                    if ( (LA119_0 == LTERM) ) 
                    {
                        alt119=1;
                    }

                }
                switch (alt119) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM235 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2296); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM235, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop119;	/* break out of the loop */
            	    break;
                }
            }
            loop119: ; /* Jump out to here if this rule does not match */

            char_literal236 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_defaultClause2299); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal236, NULL); }


            // .//Emerson.g:310:25: ( LTERM )*

            for (;;)
            {
                int alt120=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA120_0 = LA(1);
                    if ( (LA120_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA120_2 = LA(2);
                            if ( (synpred136_Emerson(ctx)) ) 
                            {
                                alt120=1;
                            }

                        }
                    }

                }
                switch (alt120) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM237 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2301); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM237, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop120;	/* break out of the loop */
            	    break;
                }
            }
            loop120: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:310:32: ( statementList )?
            {
                int alt121=2;
                {
                    int LA121_0 = LA(1);
                    if ( (((LA121_0 >= Identifier) && (LA121_0 <= NumericLiteral)) || ((LA121_0 >= 124) && (LA121_0 <= 125)) || LA121_0 == 128 || ((LA121_0 >= 130) && (LA121_0 <= 131)) || LA121_0 == 136 || ((LA121_0 >= 138) && (LA121_0 <= 140)) || ((LA121_0 >= 142) && (LA121_0 <= 145)) || LA121_0 == 147 || ((LA121_0 >= 150) && (LA121_0 <= 151)) || ((LA121_0 >= 156) && (LA121_0 <= 157)) || ((LA121_0 >= 188) && (LA121_0 <= 189)) || ((LA121_0 >= 193) && (LA121_0 <= 203))) ) 
                    {
                        alt121=1;
                    }
                }
                switch (alt121) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause2304);
            	        statementList238=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList238.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 310:47: -> ^( DEFAULT ( statementList )? )
            	{
            	    // .//Emerson.g:310:50: ^( DEFAULT ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"), root_1));

            	        // .//Emerson.g:310:60: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, defaultClause_StartIndex); }
    return retval;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start throwStatement
 * .//Emerson.g:313:1: throwStatement : 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) ;
 */
static EmersonParser_throwStatement_return
throwStatement(pEmersonParser ctx)
{   
    EmersonParser_throwStatement_return retval;
    ANTLR3_UINT32 throwStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal239;
    pANTLR3_COMMON_TOKEN    LTERM241;
    pANTLR3_COMMON_TOKEN    char_literal242;
    EmersonParser_expression_return expression240;
    #undef	RETURN_TYPE_expression240
    #define	RETURN_TYPE_expression240 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal239_tree;
    pANTLR3_BASE_TREE LTERM241_tree;
    pANTLR3_BASE_TREE char_literal242_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    throwStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal239       = NULL;
    LTERM241       = NULL;
    char_literal242       = NULL;
    expression240.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal239_tree   = NULL;
    LTERM241_tree   = NULL;
    char_literal242_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:314:2: ( 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) )
        // .//Emerson.g:314:4: 'throw' expression ( LTERM | ';' )
        {
            string_literal239 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_throwStatement2326); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal239, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_throwStatement2328);
            expression240=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression240.tree, NULL); }

            // .//Emerson.g:314:23: ( LTERM | ';' )
            {
                int alt122=2;

                {
                    int LA122_0 = LA(1);
                    if ( (LA122_0 == LTERM) ) 
                    {
                        alt122=1;
                    }
                    else if ( (LA122_0 == 131) ) 
                    {
                        alt122=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 122;
                        EXCEPTION->state        = 0;


                        goto rulethrowStatementEx;
                    }
                }
                switch (alt122) 
                {
            	case 1:
            	    // .//Emerson.g:314:24: LTERM
            	    {
            	        LTERM241 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_throwStatement2331); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM241, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:314:32: ';'
            	    {
            	        char_literal242 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_throwStatement2335); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal242, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 314:37: -> ^( THROW expression )
            	{
            	    // .//Emerson.g:314:40: ^( THROW expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THROW, (pANTLR3_UINT8)"THROW"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, throwStatement_StartIndex); }
    return retval;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//Emerson.g:317:1: tryStatement : ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) ;
 */
static EmersonParser_tryStatement_return
tryStatement(pEmersonParser ctx)
{   
    EmersonParser_tryStatement_return retval;
    ANTLR3_UINT32 tryStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal243;
    pANTLR3_COMMON_TOKEN    LTERM244;
    pANTLR3_COMMON_TOKEN    LTERM246;
    pANTLR3_COMMON_TOKEN    LTERM249;
    EmersonParser_statementBlock_return statementBlock245;
    #undef	RETURN_TYPE_statementBlock245
    #define	RETURN_TYPE_statementBlock245 EmersonParser_statementBlock_return

    EmersonParser_finallyClause_return finallyClause247;
    #undef	RETURN_TYPE_finallyClause247
    #define	RETURN_TYPE_finallyClause247 EmersonParser_finallyClause_return

    EmersonParser_catchClause_return catchClause248;
    #undef	RETURN_TYPE_catchClause248
    #define	RETURN_TYPE_catchClause248 EmersonParser_catchClause_return

    EmersonParser_finallyClause_return finallyClause250;
    #undef	RETURN_TYPE_finallyClause250
    #define	RETURN_TYPE_finallyClause250 EmersonParser_finallyClause_return

    pANTLR3_BASE_TREE string_literal243_tree;
    pANTLR3_BASE_TREE LTERM244_tree;
    pANTLR3_BASE_TREE LTERM246_tree;
    pANTLR3_BASE_TREE LTERM249_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_finallyClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    tryStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal243       = NULL;
    LTERM244       = NULL;
    LTERM246       = NULL;
    LTERM249       = NULL;
    statementBlock245.tree = NULL;

    finallyClause247.tree = NULL;

    catchClause248.tree = NULL;

    finallyClause250.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal243_tree   = NULL;
    LTERM244_tree   = NULL;
    LTERM246_tree   = NULL;
    LTERM249_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_finallyClause   = NULL;
    #define CREATE_stream_finallyClause  if (stream_finallyClause == NULL) {stream_finallyClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule finallyClause"); }
    stream_catchClause   = NULL;
    #define CREATE_stream_catchClause  if (stream_catchClause == NULL) {stream_catchClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchClause"); }
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:318:2: ( ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) )
        // .//Emerson.g:318:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
        {
            // .//Emerson.g:318:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) )
            // .//Emerson.g:318:5: 'try' ( LTERM )* statementBlock ( LTERM )*
            {
                string_literal243 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_tryStatement2356); 
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal243, NULL); }


                // .//Emerson.g:318:11: ( LTERM )*

                for (;;)
                {
                    int alt123=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA123_0 = LA(1);
                        if ( (LA123_0 == LTERM) ) 
                        {
                            alt123=1;
                        }

                    }
                    switch (alt123) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM244 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2358); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM244, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop123;	/* break out of the loop */
                	    break;
                    }
                }
                loop123: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement2361);
                statementBlock245=statementBlock(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock245.tree, NULL); }

                // .//Emerson.g:318:33: ( LTERM )*

                for (;;)
                {
                    int alt124=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA124_0 = LA(1);
                        if ( (LA124_0 == LTERM) ) 
                        {
                            alt124=1;
                        }

                    }
                    switch (alt124) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM246 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2363); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM246, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop124;	/* break out of the loop */
                	    break;
                    }
                }
                loop124: ; /* Jump out to here if this rule does not match */


                 
                /* AST REWRITE
                 * elements          : statementBlock
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 318:40: -> ^( TRY statementBlock )
                	{
                	    // .//Emerson.g:318:43: ^( TRY statementBlock )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRY, (pANTLR3_UINT8)"TRY"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:318:65: ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
            {
                int alt127=2;

                {
                    int LA127_0 = LA(1);
                    if ( (LA127_0 == 153) ) 
                    {
                        alt127=1;
                    }
                    else if ( (LA127_0 == 152) ) 
                    {
                        alt127=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 127;
                        EXCEPTION->state        = 0;


                        goto ruletryStatementEx;
                    }
                }
                switch (alt127) 
                {
            	case 1:
            	    // .//Emerson.g:318:66: finallyClause
            	    {
            	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2375);
            	        finallyClause247=finallyClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause247.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : finallyClause, tryStatement
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 318:80: -> ^( $tryStatement finallyClause )
            	        	{
            	        	    // .//Emerson.g:318:83: ^( $tryStatement finallyClause )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:318:115: catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	    {
            	        FOLLOWPUSH(FOLLOW_catchClause_in_tryStatement2387);
            	        catchClause248=catchClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_catchClause; stream_catchClause->add(stream_catchClause, catchClause248.tree, NULL); }

            	        // .//Emerson.g:318:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	        {
            	            int alt126=2;
            	            alt126 = cdfa126.predict(ctx, RECOGNIZER, ISTREAM, &cdfa126);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruletryStatementEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt126) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:318:128: ( LTERM )* finallyClause
            	        	    {

            	        	        // .//Emerson.g:318:128: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt125=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA125_0 = LA(1);
            	        	                if ( (LA125_0 == LTERM) ) 
            	        	                {
            	        	                    alt125=1;
            	        	                }

            	        	            }
            	        	            switch (alt125) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM249 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2390); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruletryStatementEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM249, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop125;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop125: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2393);
            	        	        finallyClause250=finallyClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletryStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause250.tree, NULL); }

            	        	         
            	        	        /* AST REWRITE
            	        	         * elements          : catchClause, finallyClause, tryStatement
            	        	         * token labels      : 
            	        	         * rule labels       : retval
            	        	         * token list labels : 
            	        	         * rule list labels  : 
            	        	         */
            	        	        if ( BACKTRACKING==0 ) 
            	        	        {
            	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	retval.tree    = root_0;
            	        	        	// 318:149: -> ^( $tryStatement catchClause finallyClause )
            	        	        	{
            	        	        	    // .//Emerson.g:318:152: ^( $tryStatement catchClause finallyClause )
            	        	        	    {
            	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_catchClause == NULL ? NULL : stream_catchClause->nextTree(stream_catchClause));
            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.tree = root_0; // set result root
            	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        	        }
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_finallyClause != NULL) stream_finallyClause->free(stream_finallyClause);
        if (stream_catchClause != NULL) stream_catchClause->free(stream_catchClause);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, tryStatement_StartIndex); }
    return retval;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchClause
 * .//Emerson.g:321:1: catchClause : 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) ;
 */
static EmersonParser_catchClause_return
catchClause(pEmersonParser ctx)
{   
    EmersonParser_catchClause_return retval;
    ANTLR3_UINT32 catchClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal251;
    pANTLR3_COMMON_TOKEN    LTERM252;
    pANTLR3_COMMON_TOKEN    char_literal253;
    pANTLR3_COMMON_TOKEN    LTERM254;
    pANTLR3_COMMON_TOKEN    Identifier255;
    pANTLR3_COMMON_TOKEN    LTERM256;
    pANTLR3_COMMON_TOKEN    char_literal257;
    pANTLR3_COMMON_TOKEN    LTERM258;
    EmersonParser_statementBlock_return statementBlock259;
    #undef	RETURN_TYPE_statementBlock259
    #define	RETURN_TYPE_statementBlock259 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal251_tree;
    pANTLR3_BASE_TREE LTERM252_tree;
    pANTLR3_BASE_TREE char_literal253_tree;
    pANTLR3_BASE_TREE LTERM254_tree;
    pANTLR3_BASE_TREE Identifier255_tree;
    pANTLR3_BASE_TREE LTERM256_tree;
    pANTLR3_BASE_TREE char_literal257_tree;
    pANTLR3_BASE_TREE LTERM258_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    catchClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal251       = NULL;
    LTERM252       = NULL;
    char_literal253       = NULL;
    LTERM254       = NULL;
    Identifier255       = NULL;
    LTERM256       = NULL;
    char_literal257       = NULL;
    LTERM258       = NULL;
    statementBlock259.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal251_tree   = NULL;
    LTERM252_tree   = NULL;
    char_literal253_tree   = NULL;
    LTERM254_tree   = NULL;
    Identifier255_tree   = NULL;
    LTERM256_tree   = NULL;
    char_literal257_tree   = NULL;
    LTERM258_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:322:2: ( 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) )
        // .//Emerson.g:322:4: 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock
        {
            string_literal251 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_catchClause2426); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, string_literal251, NULL); }


            // .//Emerson.g:322:12: ( LTERM )*

            for (;;)
            {
                int alt128=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA128_0 = LA(1);
                    if ( (LA128_0 == LTERM) ) 
                    {
                        alt128=1;
                    }

                }
                switch (alt128) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM252 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2428); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM252, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop128;	/* break out of the loop */
            	    break;
                }
            }
            loop128: ; /* Jump out to here if this rule does not match */

            char_literal253 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_catchClause2431); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal253, NULL); }


            // .//Emerson.g:322:23: ( LTERM )*

            for (;;)
            {
                int alt129=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA129_0 = LA(1);
                    if ( (LA129_0 == LTERM) ) 
                    {
                        alt129=1;
                    }

                }
                switch (alt129) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM254 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2433); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM254, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop129;	/* break out of the loop */
            	    break;
                }
            }
            loop129: ; /* Jump out to here if this rule does not match */

            Identifier255 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause2436); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier255, NULL); }


            // .//Emerson.g:322:41: ( LTERM )*

            for (;;)
            {
                int alt130=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA130_0 = LA(1);
                    if ( (LA130_0 == LTERM) ) 
                    {
                        alt130=1;
                    }

                }
                switch (alt130) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM256 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2438); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM256, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop130;	/* break out of the loop */
            	    break;
                }
            }
            loop130: ; /* Jump out to here if this rule does not match */

            char_literal257 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_catchClause2441); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal257, NULL); }


            // .//Emerson.g:322:52: ( LTERM )*

            for (;;)
            {
                int alt131=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA131_0 = LA(1);
                    if ( (LA131_0 == LTERM) ) 
                    {
                        alt131=1;
                    }

                }
                switch (alt131) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM258 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2443); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM258, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop131;	/* break out of the loop */
            	    break;
                }
            }
            loop131: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause2446);
            statementBlock259=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock259.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 322:74: -> ^( CATCH Identifier statementBlock )
            	{
            	    // .//Emerson.g:322:77: ^( CATCH Identifier statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CATCH, (pANTLR3_UINT8)"CATCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, catchClause_StartIndex); }
    return retval;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//Emerson.g:325:1: finallyClause : 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) ;
 */
static EmersonParser_finallyClause_return
finallyClause(pEmersonParser ctx)
{   
    EmersonParser_finallyClause_return retval;
    ANTLR3_UINT32 finallyClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal260;
    pANTLR3_COMMON_TOKEN    LTERM261;
    EmersonParser_statementBlock_return statementBlock262;
    #undef	RETURN_TYPE_statementBlock262
    #define	RETURN_TYPE_statementBlock262 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal260_tree;
    pANTLR3_BASE_TREE LTERM261_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    finallyClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal260       = NULL;
    LTERM261       = NULL;
    statementBlock262.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal260_tree   = NULL;
    LTERM261_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:326:2: ( 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) )
        // .//Emerson.g:326:4: 'finally' ( LTERM )* statementBlock
        {
            string_literal260 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_finallyClause2468); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal260, NULL); }


            // .//Emerson.g:326:14: ( LTERM )*

            for (;;)
            {
                int alt132=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA132_0 = LA(1);
                    if ( (LA132_0 == LTERM) ) 
                    {
                        alt132=1;
                    }

                }
                switch (alt132) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM261 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_finallyClause2470); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefinallyClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM261, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop132;	/* break out of the loop */
            	    break;
                }
            }
            loop132: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause2473);
            statementBlock262=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock262.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 326:36: -> ^( FINALLY statementBlock )
            	{
            	    // .//Emerson.g:326:39: ^( FINALLY statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FINALLY, (pANTLR3_UINT8)"FINALLY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, finallyClause_StartIndex); }
    return retval;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start msgSendStatement
 * .//Emerson.g:330:1: msgSendStatement : (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? ;
 */
static EmersonParser_msgSendStatement_return
msgSendStatement(pEmersonParser ctx)
{   
    EmersonParser_msgSendStatement_return retval;
    ANTLR3_UINT32 msgSendStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM263;
    pANTLR3_COMMON_TOKEN    string_literal264;
    pANTLR3_COMMON_TOKEN    LTERM265;
    pANTLR3_COMMON_TOKEN    char_literal266;
    pANTLR3_COMMON_TOKEN    string_literal267;
    EmersonParser_leftHandSideExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memberExpression_return memberExpression268;
    #undef	RETURN_TYPE_memberExpression268
    #define	RETURN_TYPE_memberExpression268 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM263_tree;
    pANTLR3_BASE_TREE string_literal264_tree;
    pANTLR3_BASE_TREE LTERM265_tree;
    pANTLR3_BASE_TREE char_literal266_tree;
    pANTLR3_BASE_TREE string_literal267_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgSendStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM263       = NULL;
    string_literal264       = NULL;
    LTERM265       = NULL;
    char_literal266       = NULL;
    string_literal267       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    memberExpression268.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM263_tree   = NULL;
    string_literal264_tree   = NULL;
    LTERM265_tree   = NULL;
    char_literal266_tree   = NULL;
    string_literal267_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:331:2: ( (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? )
        // .//Emerson.g:331:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
        {
            // .//Emerson.g:331:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) )
            // .//Emerson.g:331:5: e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' )
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2498);
                e1=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e1.tree, NULL); }

                // .//Emerson.g:331:32: ( LTERM )*

                for (;;)
                {
                    int alt133=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA133_0 = LA(1);
                        if ( (LA133_0 == LTERM) ) 
                        {
                            alt133=1;
                        }

                    }
                    switch (alt133) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM263 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2501); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM263, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop133;	/* break out of the loop */
                	    break;
                    }
                }
                loop133: ; /* Jump out to here if this rule does not match */

                string_literal264 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_msgSendStatement2504); 
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal264, NULL); }

                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2509);
                e2=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

                // .//Emerson.g:331:71: ( LTERM | ';' )
                {
                    int alt134=2;

                    {
                        int LA134_0 = LA(1);
                        if ( (LA134_0 == LTERM) ) 
                        {
                            alt134=1;
                        }
                        else if ( (LA134_0 == 131) ) 
                        {
                            alt134=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 134;
                            EXCEPTION->state        = 0;


                            goto rulemsgSendStatementEx;
                        }
                    }
                    switch (alt134) 
                    {
                	case 1:
                	    // .//Emerson.g:331:72: LTERM
                	    {
                	        LTERM265 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2512); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM265, NULL); }


                	    }
                	    break;
                	case 2:
                	    // .//Emerson.g:331:80: ';'
                	    {
                	        char_literal266 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_msgSendStatement2516); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal266, NULL); }


                	    }
                	    break;

                    }
                }

                 
                /* AST REWRITE
                 * elements          : e2, e1
                 * token labels      : 
                 * rule labels       : retval, e1, e2
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
                	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 331:85: -> ^( MESSAGE_SEND $e1 $e2)
                	{
                	    // .//Emerson.g:331:88: ^( MESSAGE_SEND $e1 $e2)
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_SEND, (pANTLR3_UINT8)"MESSAGE_SEND"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_e1 != NULL) stream_e1->free(stream_e1);
                	if (stream_e2 != NULL) stream_e2->free(stream_e2);


                }
            }


            // .//Emerson.g:331:114: ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
            {
                int alt135=2;
                {
                    int LA135_0 = LA(1);
                    if ( (LA135_0 == 154) ) 
                    {
                        alt135=1;
                    }
                }
                switch (alt135) 
                {
            	case 1:
            	    // .//Emerson.g:331:116: '->' memberExpression
            	    {
            	        string_literal267 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_msgSendStatement2535); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal267, NULL); }

            	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement2537);
            	        memberExpression268=memberExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression268.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : msgSendStatement, memberExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 331:138: -> ^( $msgSendStatement memberExpression )
            	        	{
            	        	    // .//Emerson.g:331:141: ^( $msgSendStatement memberExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSendStatementEx; /* Prevent compiler warnings */
    rulemsgSendStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_154 != NULL) stream_154->free(stream_154);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, msgSendStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgSendStatement */

/** 
 * $ANTLR start msgRecvStatement
 * .//Emerson.g:338:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static EmersonParser_msgRecvStatement_return
msgRecvStatement(pEmersonParser ctx)
{   
    EmersonParser_msgRecvStatement_return retval;
    ANTLR3_UINT32 msgRecvStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM269;
    pANTLR3_COMMON_TOKEN    string_literal270;
    pANTLR3_COMMON_TOKEN    LTERM271;
    pANTLR3_COMMON_TOKEN    char_literal272;
    pANTLR3_COMMON_TOKEN    LTERM273;
    pANTLR3_COMMON_TOKEN    string_literal274;
    pANTLR3_COMMON_TOKEN    LTERM275;
    pANTLR3_COMMON_TOKEN    string_literal276;
    pANTLR3_COMMON_TOKEN    LTERM277;
    pANTLR3_COMMON_TOKEN    char_literal278;
    EmersonParser_memberExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_memberExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memberExpression_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM269_tree;
    pANTLR3_BASE_TREE string_literal270_tree;
    pANTLR3_BASE_TREE LTERM271_tree;
    pANTLR3_BASE_TREE char_literal272_tree;
    pANTLR3_BASE_TREE LTERM273_tree;
    pANTLR3_BASE_TREE string_literal274_tree;
    pANTLR3_BASE_TREE LTERM275_tree;
    pANTLR3_BASE_TREE string_literal276_tree;
    pANTLR3_BASE_TREE LTERM277_tree;
    pANTLR3_BASE_TREE char_literal278_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgRecvStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM269       = NULL;
    string_literal270       = NULL;
    LTERM271       = NULL;
    char_literal272       = NULL;
    LTERM273       = NULL;
    string_literal274       = NULL;
    LTERM275       = NULL;
    string_literal276       = NULL;
    LTERM277       = NULL;
    char_literal278       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM269_tree   = NULL;
    string_literal270_tree   = NULL;
    LTERM271_tree   = NULL;
    char_literal272_tree   = NULL;
    LTERM273_tree   = NULL;
    string_literal274_tree   = NULL;
    LTERM275_tree   = NULL;
    string_literal276_tree   = NULL;
    LTERM277_tree   = NULL;
    char_literal278_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:339:2: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) )
            
            ANTLR3_UINT32 alt141;

            alt141=2;

            alt141 = cdfa141.predict(ctx, RECOGNIZER, ISTREAM, &cdfa141);
            if  (HASEXCEPTION())
            {
                goto rulemsgRecvStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt141) 
            {
        	case 1:
        	    // .//Emerson.g:339:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2565);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//Emerson.g:339:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt136=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA136_0 = LA(1);
        	                if ( (LA136_0 == LTERM) ) 
        	                {
        	                    alt136=1;
        	                }

        	            }
        	            switch (alt136) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM269 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2567); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM269, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop136;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop136: ; /* Jump out to here if this rule does not match */

        	        string_literal270 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgRecvStatement2569); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal270, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2573);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:339:61: ( LTERM | ';' )
        	        {
        	            int alt137=2;

        	            {
        	                int LA137_0 = LA(1);
        	                if ( (LA137_0 == LTERM) ) 
        	                {
        	                    alt137=1;
        	                }
        	                else if ( (LA137_0 == 131) ) 
        	                {
        	                    alt137=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 137;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt137) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:339:62: LTERM
        	        	    {
        	        	        LTERM271 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2576); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM271, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:339:70: ';'
        	        	    {
        	        	        char_literal272 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_msgRecvStatement2580); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal272, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e2, e1
        	         * token labels      : 
        	         * rule labels       : retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 339:76: -> ^( MESSAGE_RECV $e1 $e2)
        	        	{
        	        	    // .//Emerson.g:339:79: ^( MESSAGE_RECV $e1 $e2)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:340:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2601);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//Emerson.g:340:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt138=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA138_0 = LA(1);
        	                if ( (LA138_0 == LTERM) ) 
        	                {
        	                    alt138=1;
        	                }

        	            }
        	            switch (alt138) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM273 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2603); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM273, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop138;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop138: ; /* Jump out to here if this rule does not match */

        	        string_literal274 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgRecvStatement2605); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal274, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2609);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:340:61: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt139=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA139_0 = LA(1);
        	                if ( (LA139_0 == LTERM) ) 
        	                {
        	                    alt139=1;
        	                }

        	            }
        	            switch (alt139) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM275 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2611); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM275, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop139;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop139: ; /* Jump out to here if this rule does not match */

        	        string_literal276 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgRecvStatement2614); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal276, NULL); }

        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2618);
        	        e3=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e3.tree, NULL); }

        	        // .//Emerson.g:340:93: ( LTERM | ';' )
        	        {
        	            int alt140=2;

        	            {
        	                int LA140_0 = LA(1);
        	                if ( (LA140_0 == LTERM) ) 
        	                {
        	                    alt140=1;
        	                }
        	                else if ( (LA140_0 == 131) ) 
        	                {
        	                    alt140=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 140;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt140) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:340:94: LTERM
        	        	    {
        	        	        LTERM277 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2621); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM277, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:340:102: ';'
        	        	    {
        	        	        char_literal278 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_msgRecvStatement2625); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal278, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e2, e3, e1
        	         * token labels      : 
        	         * rule labels       : e3, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 340:107: -> ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	{
        	        	    // .//Emerson.g:340:110: ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvStatementEx; /* Prevent compiler warnings */
    rulemsgRecvStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, msgRecvStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvStatement */

/** 
 * $ANTLR start expression
 * .//Emerson.g:344:1: expression : assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) ;
 */
static EmersonParser_expression_return
expression(pEmersonParser ctx)
{   
    EmersonParser_expression_return retval;
    ANTLR3_UINT32 expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM280;
    pANTLR3_COMMON_TOKEN    char_literal281;
    pANTLR3_COMMON_TOKEN    LTERM282;
    EmersonParser_assignmentExpression_return assignmentExpression279;
    #undef	RETURN_TYPE_assignmentExpression279
    #define	RETURN_TYPE_assignmentExpression279 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression283;
    #undef	RETURN_TYPE_assignmentExpression283
    #define	RETURN_TYPE_assignmentExpression283 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM280_tree;
    pANTLR3_BASE_TREE char_literal281_tree;
    pANTLR3_BASE_TREE LTERM282_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM280       = NULL;
    char_literal281       = NULL;
    LTERM282       = NULL;
    assignmentExpression279.tree = NULL;

    assignmentExpression283.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM280_tree   = NULL;
    char_literal281_tree   = NULL;
    LTERM282_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:345:2: ( assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) )
        // .//Emerson.g:345:4: assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2652);
            assignmentExpression279=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression279.tree, NULL); }

            // .//Emerson.g:345:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*

            for (;;)
            {
                int alt144=2;
                alt144 = cdfa144.predict(ctx, RECOGNIZER, ISTREAM, &cdfa144);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt144) 
                {
            	case 1:
            	    // .//Emerson.g:345:26: ( LTERM )* ',' ( LTERM )* assignmentExpression
            	    {

            	        // .//Emerson.g:345:26: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt142=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA142_0 = LA(1);
            	                if ( (LA142_0 == LTERM) ) 
            	                {
            	                    alt142=1;
            	                }

            	            }
            	            switch (alt142) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM280 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2655); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM280, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop142;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop142: ; /* Jump out to here if this rule does not match */

            	        char_literal281 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_expression2658); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal281, NULL); }


            	        // .//Emerson.g:345:37: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt143=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA143_0 = LA(1);
            	                if ( (LA143_0 == LTERM) ) 
            	                {
            	                    alt143=1;
            	                }

            	            }
            	            switch (alt143) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM282 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2660); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM282, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop143;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop143: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2663);
            	        assignmentExpression283=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression283.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop144;	/* break out of the loop */
            	    break;
                }
            }
            loop144: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 345:67: -> ^( EXPR_LIST ( assignmentExpression )+ )
            	{
            	    // .//Emerson.g:345:71: ^( EXPR_LIST ( assignmentExpression )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpression == NULL || !stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpression->hasNext(stream_assignmentExpression))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, expression_StartIndex); }
    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//Emerson.g:348:1: expressionNoIn : assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) ;
 */
static EmersonParser_expressionNoIn_return
expressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_expressionNoIn_return retval;
    ANTLR3_UINT32 expressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM285;
    pANTLR3_COMMON_TOKEN    char_literal286;
    pANTLR3_COMMON_TOKEN    LTERM287;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn284;
    #undef	RETURN_TYPE_assignmentExpressionNoIn284
    #define	RETURN_TYPE_assignmentExpressionNoIn284 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn288;
    #undef	RETURN_TYPE_assignmentExpressionNoIn288
    #define	RETURN_TYPE_assignmentExpressionNoIn288 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM285_tree;
    pANTLR3_BASE_TREE char_literal286_tree;
    pANTLR3_BASE_TREE LTERM287_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    expressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM285       = NULL;
    char_literal286       = NULL;
    LTERM287       = NULL;
    assignmentExpressionNoIn284.tree = NULL;

    assignmentExpressionNoIn288.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM285_tree   = NULL;
    char_literal286_tree   = NULL;
    LTERM287_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:349:2: ( assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) )
        // .//Emerson.g:349:4: assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2687);
            assignmentExpressionNoIn284=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn284.tree, NULL); }

            // .//Emerson.g:349:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*

            for (;;)
            {
                int alt147=2;
                alt147 = cdfa147.predict(ctx, RECOGNIZER, ISTREAM, &cdfa147);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt147) 
                {
            	case 1:
            	    // .//Emerson.g:349:30: ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:349:30: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt145=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA145_0 = LA(1);
            	                if ( (LA145_0 == LTERM) ) 
            	                {
            	                    alt145=1;
            	                }

            	            }
            	            switch (alt145) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM285 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2690); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM285, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop145;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop145: ; /* Jump out to here if this rule does not match */

            	        char_literal286 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_expressionNoIn2693); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal286, NULL); }


            	        // .//Emerson.g:349:41: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt146=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA146_0 = LA(1);
            	                if ( (LA146_0 == LTERM) ) 
            	                {
            	                    alt146=1;
            	                }

            	            }
            	            switch (alt146) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM287 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2695); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM287, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop146;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop146: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2698);
            	        assignmentExpressionNoIn288=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn288.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop147;	/* break out of the loop */
            	    break;
                }
            }
            loop147: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 349:75: -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	{
            	    // .//Emerson.g:349:78: ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpressionNoIn == NULL || !stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	        	}
            	        	stream_assignmentExpressionNoIn->reset(stream_assignmentExpressionNoIn);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, expressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//Emerson.g:353:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static EmersonParser_assignmentExpression_return
assignmentExpression(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpression_return retval;
    ANTLR3_UINT32 assignmentExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM291;
    pANTLR3_COMMON_TOKEN    LTERM293;
    EmersonParser_conditionalExpression_return conditionalExpression289;
    #undef	RETURN_TYPE_conditionalExpression289
    #define	RETURN_TYPE_conditionalExpression289 EmersonParser_conditionalExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression290;
    #undef	RETURN_TYPE_leftHandSideExpression290
    #define	RETURN_TYPE_leftHandSideExpression290 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator292;
    #undef	RETURN_TYPE_assignmentOperator292
    #define	RETURN_TYPE_assignmentOperator292 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpression_return assignmentExpression294;
    #undef	RETURN_TYPE_assignmentExpression294
    #define	RETURN_TYPE_assignmentExpression294 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM291_tree;
    pANTLR3_BASE_TREE LTERM293_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpression;
    /* Initialize rule variables
     */
    assignmentExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM291       = NULL;
    LTERM293       = NULL;
    conditionalExpression289.tree = NULL;

    leftHandSideExpression290.tree = NULL;

    assignmentOperator292.tree = NULL;

    assignmentExpression294.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM291_tree   = NULL;
    LTERM293_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_conditionalExpression   = NULL;
    #define CREATE_stream_conditionalExpression  if (stream_conditionalExpression == NULL) {stream_conditionalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:354:2: ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt150;

            alt150=2;

            alt150 = cdfa150.predict(ctx, RECOGNIZER, ISTREAM, &cdfa150);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt150) 
            {
        	case 1:
        	    // .//Emerson.g:354:4: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression2722);
        	        conditionalExpression289=conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpression; stream_conditionalExpression->add(stream_conditionalExpression, conditionalExpression289.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 354:26: -> ^( COND_EXPR conditionalExpression )
        	        	{
        	        	    // .//Emerson.g:354:29: ^( COND_EXPR conditionalExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR, (pANTLR3_UINT8)"COND_EXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpression == NULL ? NULL : stream_conditionalExpression->nextTree(stream_conditionalExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:355:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression2735);
        	        leftHandSideExpression290=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression290.tree, NULL); }

        	        // .//Emerson.g:355:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt148=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA148_0 = LA(1);
        	                if ( (LA148_0 == LTERM) ) 
        	                {
        	                    alt148=1;
        	                }

        	            }
        	            switch (alt148) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM291 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2737); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM291, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop148;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop148: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpression2740);
        	        assignmentOperator292=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator292.tree, NULL); }

        	        // .//Emerson.g:355:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt149=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA149_0 = LA(1);
        	                if ( (LA149_0 == LTERM) ) 
        	                {
        	                    alt149=1;
        	                }

        	            }
        	            switch (alt149) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM293 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2742); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM293, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop149;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop149: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression2745);
        	        assignmentExpression294=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression294.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, leftHandSideExpression, assignmentOperator
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 355:81: -> ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	{
        	        	    // .//Emerson.g:355:85: ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_conditionalExpression != NULL) stream_conditionalExpression->free(stream_conditionalExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, assignmentExpression_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//Emerson.g:358:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static EmersonParser_assignmentExpressionNoIn_return
assignmentExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpressionNoIn_return retval;
    ANTLR3_UINT32 assignmentExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM297;
    pANTLR3_COMMON_TOKEN    LTERM299;
    EmersonParser_conditionalExpressionNoIn_return conditionalExpressionNoIn295;
    #undef	RETURN_TYPE_conditionalExpressionNoIn295
    #define	RETURN_TYPE_conditionalExpressionNoIn295 EmersonParser_conditionalExpressionNoIn_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression296;
    #undef	RETURN_TYPE_leftHandSideExpression296
    #define	RETURN_TYPE_leftHandSideExpression296 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator298;
    #undef	RETURN_TYPE_assignmentOperator298
    #define	RETURN_TYPE_assignmentOperator298 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn300;
    #undef	RETURN_TYPE_assignmentExpressionNoIn300
    #define	RETURN_TYPE_assignmentExpressionNoIn300 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM297_tree;
    pANTLR3_BASE_TREE LTERM299_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpressionNoIn;
    /* Initialize rule variables
     */
    assignmentExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM297       = NULL;
    LTERM299       = NULL;
    conditionalExpressionNoIn295.tree = NULL;

    leftHandSideExpression296.tree = NULL;

    assignmentOperator298.tree = NULL;

    assignmentExpressionNoIn300.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM297_tree   = NULL;
    LTERM299_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_conditionalExpressionNoIn   = NULL;
    #define CREATE_stream_conditionalExpressionNoIn  if (stream_conditionalExpressionNoIn == NULL) {stream_conditionalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:359:2: ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt153;

            alt153=2;

            alt153 = cdfa153.predict(ctx, RECOGNIZER, ISTREAM, &cdfa153);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt153) 
            {
        	case 1:
        	    // .//Emerson.g:359:4: conditionalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2769);
        	        conditionalExpressionNoIn295=conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpressionNoIn; stream_conditionalExpressionNoIn->add(stream_conditionalExpressionNoIn, conditionalExpressionNoIn295.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 359:30: -> ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:359:33: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR_NOIN, (pANTLR3_UINT8)"COND_EXPR_NOIN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpressionNoIn == NULL ? NULL : stream_conditionalExpressionNoIn->nextTree(stream_conditionalExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:360:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2782);
        	        leftHandSideExpression296=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression296.tree, NULL); }

        	        // .//Emerson.g:360:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt151=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA151_0 = LA(1);
        	                if ( (LA151_0 == LTERM) ) 
        	                {
        	                    alt151=1;
        	                }

        	            }
        	            switch (alt151) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM297 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2784); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM297, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop151;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop151: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2787);
        	        assignmentOperator298=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator298.tree, NULL); }

        	        // .//Emerson.g:360:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt152=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA152_0 = LA(1);
        	                if ( (LA152_0 == LTERM) ) 
        	                {
        	                    alt152=1;
        	                }

        	            }
        	            switch (alt152) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM299 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2789); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM299, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop152;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop152: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2792);
        	        assignmentExpressionNoIn300=assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn300.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression, assignmentExpressionNoIn, assignmentOperator
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 360:85: -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:360:89: ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_conditionalExpressionNoIn != NULL) stream_conditionalExpressionNoIn->free(stream_conditionalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, assignmentExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//Emerson.g:363:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static EmersonParser_leftHandSideExpression_return
leftHandSideExpression(pEmersonParser ctx)
{   
    EmersonParser_leftHandSideExpression_return retval;
    ANTLR3_UINT32 leftHandSideExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression301;
    #undef	RETURN_TYPE_callExpression301
    #define	RETURN_TYPE_callExpression301 EmersonParser_callExpression_return

    EmersonParser_newExpression_return newExpression302;
    #undef	RETURN_TYPE_newExpression302
    #define	RETURN_TYPE_newExpression302 EmersonParser_newExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    leftHandSideExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression301.tree = NULL;

    newExpression302.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:364:2: ( callExpression -> callExpression | newExpression -> newExpression )
            
            ANTLR3_UINT32 alt154;

            alt154=2;

            alt154 = cdfa154.predict(ctx, RECOGNIZER, ISTREAM, &cdfa154);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt154) 
            {
        	case 1:
        	    // .//Emerson.g:364:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression2817);
        	        callExpression301=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression301.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 364:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:365:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression2826);
        	        newExpression302=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression302.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 365:18: -> newExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, leftHandSideExpression_StartIndex); }
    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//Emerson.g:368:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static EmersonParser_newExpression_return
newExpression(pEmersonParser ctx)
{   
    EmersonParser_newExpression_return retval;
    ANTLR3_UINT32 newExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal304;
    pANTLR3_COMMON_TOKEN    LTERM305;
    EmersonParser_memberExpression_return memberExpression303;
    #undef	RETURN_TYPE_memberExpression303
    #define	RETURN_TYPE_memberExpression303 EmersonParser_memberExpression_return

    EmersonParser_newExpression_return newExpression306;
    #undef	RETURN_TYPE_newExpression306
    #define	RETURN_TYPE_newExpression306 EmersonParser_newExpression_return

    pANTLR3_BASE_TREE string_literal304_tree;
    pANTLR3_BASE_TREE LTERM305_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    newExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(51)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal304       = NULL;
    LTERM305       = NULL;
    memberExpression303.tree = NULL;

    newExpression306.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal304_tree   = NULL;
    LTERM305_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:369:2: ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt156;

            alt156=2;

            alt156 = cdfa156.predict(ctx, RECOGNIZER, ISTREAM, &cdfa156);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt156) 
            {
        	case 1:
        	    // .//Emerson.g:369:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression2842);
        	        memberExpression303=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression303.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 369:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:370:4: 'new' ( LTERM )* newExpression
        	    {
        	        string_literal304 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_newExpression2851); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal304, NULL); }


        	        // .//Emerson.g:370:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt155=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA155_0 = LA(1);
        	                if ( (LA155_0 == LTERM) ) 
        	                {
        	                    alt155=1;
        	                }

        	            }
        	            switch (alt155) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM305 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_newExpression2853); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenewExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM305, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop155;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop155: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression2856);
        	        newExpression306=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression306.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 370:31: -> ^( NEW newExpression )
        	        	{
        	        	    // .//Emerson.g:370:34: ^( NEW newExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(51, newExpression_StartIndex); }
    return retval;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start indexSuffix1
 * .//Emerson.g:374:1: indexSuffix1 : '[' ( LTERM )* expression ( LTERM )* ']' -> expression ;
 */
static EmersonParser_indexSuffix1_return
indexSuffix1(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix1_return retval;
    ANTLR3_UINT32 indexSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal307;
    pANTLR3_COMMON_TOKEN    LTERM308;
    pANTLR3_COMMON_TOKEN    LTERM310;
    pANTLR3_COMMON_TOKEN    char_literal311;
    EmersonParser_expression_return expression309;
    #undef	RETURN_TYPE_expression309
    #define	RETURN_TYPE_expression309 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal307_tree;
    pANTLR3_BASE_TREE LTERM308_tree;
    pANTLR3_BASE_TREE LTERM310_tree;
    pANTLR3_BASE_TREE char_literal311_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(52)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal307       = NULL;
    LTERM308       = NULL;
    LTERM310       = NULL;
    char_literal311       = NULL;
    expression309.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal307_tree   = NULL;
    LTERM308_tree   = NULL;
    LTERM310_tree   = NULL;
    char_literal311_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:375:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> expression )
        // .//Emerson.g:375:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal307 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_indexSuffix12878); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, char_literal307, NULL); }


            // .//Emerson.g:375:8: ( LTERM )*

            for (;;)
            {
                int alt157=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA157_0 = LA(1);
                    if ( (LA157_0 == LTERM) ) 
                    {
                        alt157=1;
                    }

                }
                switch (alt157) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM308 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix12880); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM308, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop157;	/* break out of the loop */
            	    break;
                }
            }
            loop157: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix12883);
            expression309=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression309.tree, NULL); }

            // .//Emerson.g:375:26: ( LTERM )*

            for (;;)
            {
                int alt158=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA158_0 = LA(1);
                    if ( (LA158_0 == LTERM) ) 
                    {
                        alt158=1;
                    }

                }
                switch (alt158) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM310 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix12885); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM310, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop158;	/* break out of the loop */
            	    break;
                }
            }
            loop158: ; /* Jump out to here if this rule does not match */

            char_literal311 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_indexSuffix12888); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal311, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 375:37: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(52, indexSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//Emerson.g:379:1: propertyReferenceSuffix1 : '.' ( LTERM )* Identifier -> Identifier ;
 */
static EmersonParser_propertyReferenceSuffix1_return
propertyReferenceSuffix1(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix1_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal312;
    pANTLR3_COMMON_TOKEN    LTERM313;
    pANTLR3_COMMON_TOKEN    Identifier314;

    pANTLR3_BASE_TREE char_literal312_tree;
    pANTLR3_BASE_TREE LTERM313_tree;
    pANTLR3_BASE_TREE Identifier314_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(53)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal312       = NULL;
    LTERM313       = NULL;
    Identifier314       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal312_tree   = NULL;
    LTERM313_tree   = NULL;
    Identifier314_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:380:2: ( '.' ( LTERM )* Identifier -> Identifier )
        // .//Emerson.g:380:4: '.' ( LTERM )* Identifier
        {
            char_literal312 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_propertyReferenceSuffix12905); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal312, NULL); }


            // .//Emerson.g:380:8: ( LTERM )*

            for (;;)
            {
                int alt159=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA159_0 = LA(1);
                    if ( (LA159_0 == LTERM) ) 
                    {
                        alt159=1;
                    }

                }
                switch (alt159) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM313 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix12907); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM313, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop159;	/* break out of the loop */
            	    break;
                }
            }
            loop159: ; /* Jump out to here if this rule does not match */

            Identifier314 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix12910); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier314, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 380:26: -> Identifier
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(53, propertyReferenceSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//Emerson.g:384:1: memberExpression : ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* );
 */
static EmersonParser_memberExpression_return
memberExpression(pEmersonParser ctx)
{   
    EmersonParser_memberExpression_return retval;
    ANTLR3_UINT32 memberExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM316;
    pANTLR3_COMMON_TOKEN    LTERM318;
    pANTLR3_COMMON_TOKEN    LTERM321;
    pANTLR3_COMMON_TOKEN    LTERM323;
    pANTLR3_COMMON_TOKEN    string_literal325;
    pANTLR3_COMMON_TOKEN    LTERM326;
    pANTLR3_COMMON_TOKEN    LTERM327;
    pANTLR3_COMMON_TOKEN    LTERM329;
    pANTLR3_COMMON_TOKEN    LTERM331;
    EmersonParser_memberExpression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr EmersonParser_memberExpression_return

    EmersonParser_primaryExpression_return primaryExpression315;
    #undef	RETURN_TYPE_primaryExpression315
    #define	RETURN_TYPE_primaryExpression315 EmersonParser_primaryExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1317;
    #undef	RETURN_TYPE_propertyReferenceSuffix1317
    #define	RETURN_TYPE_propertyReferenceSuffix1317 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1319;
    #undef	RETURN_TYPE_indexSuffix1319
    #define	RETURN_TYPE_indexSuffix1319 EmersonParser_indexSuffix1_return

    EmersonParser_functionExpression_return functionExpression320;
    #undef	RETURN_TYPE_functionExpression320
    #define	RETURN_TYPE_functionExpression320 EmersonParser_functionExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1322;
    #undef	RETURN_TYPE_propertyReferenceSuffix1322
    #define	RETURN_TYPE_propertyReferenceSuffix1322 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1324;
    #undef	RETURN_TYPE_indexSuffix1324
    #define	RETURN_TYPE_indexSuffix1324 EmersonParser_indexSuffix1_return

    EmersonParser_arguments_return arguments328;
    #undef	RETURN_TYPE_arguments328
    #define	RETURN_TYPE_arguments328 EmersonParser_arguments_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1330;
    #undef	RETURN_TYPE_propertyReferenceSuffix1330
    #define	RETURN_TYPE_propertyReferenceSuffix1330 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1332;
    #undef	RETURN_TYPE_indexSuffix1332
    #define	RETURN_TYPE_indexSuffix1332 EmersonParser_indexSuffix1_return

    pANTLR3_BASE_TREE LTERM316_tree;
    pANTLR3_BASE_TREE LTERM318_tree;
    pANTLR3_BASE_TREE LTERM321_tree;
    pANTLR3_BASE_TREE LTERM323_tree;
    pANTLR3_BASE_TREE string_literal325_tree;
    pANTLR3_BASE_TREE LTERM326_tree;
    pANTLR3_BASE_TREE LTERM327_tree;
    pANTLR3_BASE_TREE LTERM329_tree;
    pANTLR3_BASE_TREE LTERM331_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primaryExpression;
    /* Initialize rule variables
     */
    memberExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(54)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM316       = NULL;
    LTERM318       = NULL;
    LTERM321       = NULL;
    LTERM323       = NULL;
    string_literal325       = NULL;
    LTERM326       = NULL;
    LTERM327       = NULL;
    LTERM329       = NULL;
    LTERM331       = NULL;
    expr.tree = NULL;

    primaryExpression315.tree = NULL;

    propertyReferenceSuffix1317.tree = NULL;

    indexSuffix1319.tree = NULL;

    functionExpression320.tree = NULL;

    propertyReferenceSuffix1322.tree = NULL;

    indexSuffix1324.tree = NULL;

    arguments328.tree = NULL;

    propertyReferenceSuffix1330.tree = NULL;

    indexSuffix1332.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM316_tree   = NULL;
    LTERM318_tree   = NULL;
    LTERM321_tree   = NULL;
    LTERM323_tree   = NULL;
    string_literal325_tree   = NULL;
    LTERM326_tree   = NULL;
    LTERM327_tree   = NULL;
    LTERM329_tree   = NULL;
    LTERM331_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_functionExpression   = NULL;
    #define CREATE_stream_functionExpression  if (stream_functionExpression == NULL) {stream_functionExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }
    stream_primaryExpression   = NULL;
    #define CREATE_stream_primaryExpression  if (stream_primaryExpression == NULL) {stream_primaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primaryExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:386:2: ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* )
            
            ANTLR3_UINT32 alt171;

            alt171=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 125:
            case 128:
            case 157:
            case 200:
            case 201:
            case 202:
            case 203:
            	{
            		alt171=1;
            	}
                break;
            case 124:
            	{
            		alt171=2;
            	}
                break;
            case 156:
            	{
            		alt171=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 171;
                EXCEPTION->state        = 0;


                goto rulememberExpressionEx;
            }

            switch (alt171) 
            {
        	case 1:
        	    // .//Emerson.g:386:4: ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:386:4: ( primaryExpression -> primaryExpression )
        	        // .//Emerson.g:386:5: primaryExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression2929);
        	            primaryExpression315=primaryExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_primaryExpression; stream_primaryExpression->add(stream_primaryExpression, primaryExpression315.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : primaryExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 386:23: -> primaryExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primaryExpression == NULL ? NULL : stream_primaryExpression->nextTree(stream_primaryExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:386:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt162=3;
        	            alt162 = cdfa162.predict(ctx, RECOGNIZER, ISTREAM, &cdfa162);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt162) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:386:47: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:386:47: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt160=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA160_0 = LA(1);
        	        	                if ( (LA160_0 == LTERM) ) 
        	        	                {
        	        	                    alt160=1;
        	        	                }

        	        	            }
        	        	            switch (alt160) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM316 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2938); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM316, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop160;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop160: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression2941);
        	        	        propertyReferenceSuffix1317=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1317.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : propertyReferenceSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 386:79: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:386:82: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:386:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:386:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt161=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA161_0 = LA(1);
        	        	                if ( (LA161_0 == LTERM) ) 
        	        	                {
        	        	                    alt161=1;
        	        	                }

        	        	            }
        	        	            switch (alt161) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM318 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2958); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM318, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop161;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop161: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression2961);
        	        	        indexSuffix1319=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1319.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 386:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:386:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop162;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop162: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:387:4: ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:387:4: ( functionExpression -> functionExpression )
        	        // .//Emerson.g:387:5: functionExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression2980);
        	            functionExpression320=functionExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_functionExpression; stream_functionExpression->add(stream_functionExpression, functionExpression320.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : functionExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 387:24: -> functionExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionExpression == NULL ? NULL : stream_functionExpression->nextTree(stream_functionExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:387:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt165=3;
        	            alt165 = cdfa165.predict(ctx, RECOGNIZER, ISTREAM, &cdfa165);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt165) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:387:48: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:387:48: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt163=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA163_0 = LA(1);
        	        	                if ( (LA163_0 == LTERM) ) 
        	        	                {
        	        	                    alt163=1;
        	        	                }

        	        	            }
        	        	            switch (alt163) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM321 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2988); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM321, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop163;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop163: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression2991);
        	        	        propertyReferenceSuffix1322=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1322.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 387:80: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:387:83: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:387:137: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:387:137: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt164=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA164_0 = LA(1);
        	        	                if ( (LA164_0 == LTERM) ) 
        	        	                {
        	        	                    alt164=1;
        	        	                }

        	        	            }
        	        	            switch (alt164) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM323 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3008); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM323, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop164;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop164: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3011);
        	        	        indexSuffix1324=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1324.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 387:157: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:387:160: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop165;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop165: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:388:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:388:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) )
        	        // .//Emerson.g:388:5: 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments
        	        {
        	            string_literal325 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_memberExpression3030); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal325, NULL); }


        	            // .//Emerson.g:388:11: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt166=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA166_0 = LA(1);
        	                    if ( (LA166_0 == LTERM) ) 
        	                    {
        	                        alt166=1;
        	                    }

        	                }
        	                switch (alt166) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM326 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3032); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM326, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop166;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop166: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression3037);
        	            expr=memberExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, expr.tree, NULL); }

        	            // .//Emerson.g:388:40: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt167=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA167_0 = LA(1);
        	                    if ( (LA167_0 == LTERM) ) 
        	                    {
        	                        alt167=1;
        	                    }

        	                }
        	                switch (alt167) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM327 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3039); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM327, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop167;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop167: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_arguments_in_memberExpression3042);
        	            arguments328=arguments(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments328.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : expr, arguments
        	             * token labels      : 
        	             * rule labels       : retval, expr
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 388:57: -> ^( NEW $expr arguments )
        	            	{
        	            	    // .//Emerson.g:388:60: ^( NEW $expr arguments )
        	            	    {
        	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	            	if (stream_expr != NULL) stream_expr->free(stream_expr);


        	            }
        	        }


        	        // .//Emerson.g:388:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt170=3;
        	            alt170 = cdfa170.predict(ctx, RECOGNIZER, ISTREAM, &cdfa170);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt170) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:388:85: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:388:85: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt168=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA168_0 = LA(1);
        	        	                if ( (LA168_0 == LTERM) ) 
        	        	                {
        	        	                    alt168=1;
        	        	                }

        	        	            }
        	        	            switch (alt168) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM329 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3057); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM329, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop168;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop168: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3060);
        	        	        propertyReferenceSuffix1330=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1330.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 388:117: -> ^( DOT $memberExpression)
        	        	        	{
        	        	        	    // .//Emerson.g:388:120: ^( DOT $memberExpression)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:388:147: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:388:147: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt169=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA169_0 = LA(1);
        	        	                if ( (LA169_0 == LTERM) ) 
        	        	                {
        	        	                    alt169=1;
        	        	                }

        	        	            }
        	        	            switch (alt169) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM331 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3073); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM331, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop169;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop169: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3076);
        	        	        indexSuffix1332=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1332.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 388:167: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:388:170: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop170;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop170: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_functionExpression != NULL) stream_functionExpression->free(stream_functionExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
        if (stream_primaryExpression != NULL) stream_primaryExpression->free(stream_primaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(54, memberExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//Emerson.g:391:1: memberExpressionSuffix : ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_memberExpressionSuffix_return
memberExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_memberExpressionSuffix_return retval;
    ANTLR3_UINT32 memberExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_indexSuffix_return indexSuffix333;
    #undef	RETURN_TYPE_indexSuffix333
    #define	RETURN_TYPE_indexSuffix333 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix334;
    #undef	RETURN_TYPE_propertyReferenceSuffix334
    #define	RETURN_TYPE_propertyReferenceSuffix334 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    memberExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(55)) )
    {
    	retval.start = 0;

        return retval; 
    }
    indexSuffix333.tree = NULL;

    propertyReferenceSuffix334.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:392:2: ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt172;

            alt172=2;


            {
                int LA172_0 = LA(1);
                if ( (LA172_0 == 157) ) 
                {
                    alt172=1;
                }
                else if ( (LA172_0 == 159) ) 
                {
                    alt172=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 172;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt172) 
            {
        	case 1:
        	    // .//Emerson.g:392:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix3105);
        	        indexSuffix333=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix333.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 392:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:393:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3115);
        	        propertyReferenceSuffix334=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix334.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 393:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(55, memberExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//Emerson.g:396:1: callExpression : ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* ;
 */
static EmersonParser_callExpression_return
callExpression(pEmersonParser ctx)
{   
    EmersonParser_callExpression_return retval;
    ANTLR3_UINT32 callExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM336;
    pANTLR3_COMMON_TOKEN    LTERM338;
    pANTLR3_COMMON_TOKEN    LTERM340;
    pANTLR3_COMMON_TOKEN    LTERM342;
    EmersonParser_memberExpression_return memberExpression335;
    #undef	RETURN_TYPE_memberExpression335
    #define	RETURN_TYPE_memberExpression335 EmersonParser_memberExpression_return

    EmersonParser_arguments_return arguments337;
    #undef	RETURN_TYPE_arguments337
    #define	RETURN_TYPE_arguments337 EmersonParser_arguments_return

    EmersonParser_arguments_return arguments339;
    #undef	RETURN_TYPE_arguments339
    #define	RETURN_TYPE_arguments339 EmersonParser_arguments_return

    EmersonParser_indexSuffix1_return indexSuffix1341;
    #undef	RETURN_TYPE_indexSuffix1341
    #define	RETURN_TYPE_indexSuffix1341 EmersonParser_indexSuffix1_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1343;
    #undef	RETURN_TYPE_propertyReferenceSuffix1343
    #define	RETURN_TYPE_propertyReferenceSuffix1343 EmersonParser_propertyReferenceSuffix1_return

    pANTLR3_BASE_TREE LTERM336_tree;
    pANTLR3_BASE_TREE LTERM338_tree;
    pANTLR3_BASE_TREE LTERM340_tree;
    pANTLR3_BASE_TREE LTERM342_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    /* Initialize rule variables
     */
    callExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(56)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM336       = NULL;
    LTERM338       = NULL;
    LTERM340       = NULL;
    LTERM342       = NULL;
    memberExpression335.tree = NULL;

    arguments337.tree = NULL;

    arguments339.tree = NULL;

    indexSuffix1341.tree = NULL;

    propertyReferenceSuffix1343.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM336_tree   = NULL;
    LTERM338_tree   = NULL;
    LTERM340_tree   = NULL;
    LTERM342_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:397:5: ( ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* )
        // .//Emerson.g:397:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
        {
            // .//Emerson.g:397:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) )
            // .//Emerson.g:397:8: memberExpression ( LTERM )* arguments
            {
                FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression3135);
                memberExpression335=memberExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression335.tree, NULL); }

                // .//Emerson.g:397:25: ( LTERM )*

                for (;;)
                {
                    int alt173=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA173_0 = LA(1);
                        if ( (LA173_0 == LTERM) ) 
                        {
                            alt173=1;
                        }

                    }
                    switch (alt173) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM336 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3137); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecallExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM336, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop173;	/* break out of the loop */
                	    break;
                    }
                }
                loop173: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_arguments_in_callExpression3140);
                arguments337=arguments(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments337.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : arguments, memberExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 397:42: -> ^( CALL memberExpression arguments )
                	{
                	    // .//Emerson.g:397:45: ^( CALL memberExpression arguments )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:397:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*

            for (;;)
            {
                int alt177=4;
                alt177 = cdfa177.predict(ctx, RECOGNIZER, ISTREAM, &cdfa177);
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt177) 
                {
            	case 1:
            	    // .//Emerson.g:397:82: ( LTERM )* arguments
            	    {

            	        // .//Emerson.g:397:82: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt174=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA174_0 = LA(1);
            	                if ( (LA174_0 == LTERM) ) 
            	                {
            	                    alt174=1;
            	                }

            	            }
            	            switch (alt174) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM338 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3154); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM338, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop174;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop174: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression3157);
            	        arguments339=arguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments339.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : arguments
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 397:99: -> arguments
            	        	{
            	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:397:114: ( LTERM )* indexSuffix1
            	    {

            	        // .//Emerson.g:397:114: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt175=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA175_0 = LA(1);
            	                if ( (LA175_0 == LTERM) ) 
            	                {
            	                    alt175=1;
            	                }

            	            }
            	            switch (alt175) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM340 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3165); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM340, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop175;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop175: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression3168);
            	        indexSuffix1341=indexSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1341.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : indexSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 397:134: -> ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	{
            	        	    // .//Emerson.g:397:137: ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // .//Emerson.g:397:183: ( LTERM )* propertyReferenceSuffix1
            	    {

            	        // .//Emerson.g:397:183: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt176=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA176_0 = LA(1);
            	                if ( (LA176_0 == LTERM) ) 
            	                {
            	                    alt176=1;
            	                }

            	            }
            	            switch (alt176) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM342 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3183); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM342, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop176;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop176: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression3186);
            	        propertyReferenceSuffix1343=propertyReferenceSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1343.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : propertyReferenceSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 397:215: -> ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	{
            	        	    // .//Emerson.g:397:218: ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop177;	/* break out of the loop */
            	    break;
                }
            }
            loop177: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(56, callExpression_StartIndex); }
    return retval;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//Emerson.g:400:1: callExpressionSuffix : ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_callExpressionSuffix_return
callExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_callExpressionSuffix_return retval;
    ANTLR3_UINT32 callExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_arguments_return arguments344;
    #undef	RETURN_TYPE_arguments344
    #define	RETURN_TYPE_arguments344 EmersonParser_arguments_return

    EmersonParser_indexSuffix_return indexSuffix345;
    #undef	RETURN_TYPE_indexSuffix345
    #define	RETURN_TYPE_indexSuffix345 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix346;
    #undef	RETURN_TYPE_propertyReferenceSuffix346
    #define	RETURN_TYPE_propertyReferenceSuffix346 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    callExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(57)) )
    {
    	retval.start = 0;

        return retval; 
    }
    arguments344.tree = NULL;

    indexSuffix345.tree = NULL;

    propertyReferenceSuffix346.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:401:2: ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt178;

            alt178=3;

            switch ( LA(1) ) 
            {
            case 125:
            	{
            		alt178=1;
            	}
                break;
            case 157:
            	{
            		alt178=2;
            	}
                break;
            case 159:
            	{
            		alt178=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 178;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt178) 
            {
        	case 1:
        	    // .//Emerson.g:401:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix3213);
        	        arguments344=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments344.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : arguments
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 401:14: -> arguments
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:402:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix3222);
        	        indexSuffix345=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix345.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:403:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3231);
        	        propertyReferenceSuffix346=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix346.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 403:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(57, callExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//Emerson.g:406:1: arguments : '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )* ) ;
 */
static EmersonParser_arguments_return
arguments(pEmersonParser ctx)
{   
    EmersonParser_arguments_return retval;
    ANTLR3_UINT32 arguments_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal347;
    pANTLR3_COMMON_TOKEN    LTERM348;
    pANTLR3_COMMON_TOKEN    LTERM350;
    pANTLR3_COMMON_TOKEN    char_literal351;
    pANTLR3_COMMON_TOKEN    LTERM352;
    pANTLR3_COMMON_TOKEN    LTERM354;
    pANTLR3_COMMON_TOKEN    char_literal355;
    EmersonParser_assignmentExpression_return assignmentExpression349;
    #undef	RETURN_TYPE_assignmentExpression349
    #define	RETURN_TYPE_assignmentExpression349 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression353;
    #undef	RETURN_TYPE_assignmentExpression353
    #define	RETURN_TYPE_assignmentExpression353 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal347_tree;
    pANTLR3_BASE_TREE LTERM348_tree;
    pANTLR3_BASE_TREE LTERM350_tree;
    pANTLR3_BASE_TREE char_literal351_tree;
    pANTLR3_BASE_TREE LTERM352_tree;
    pANTLR3_BASE_TREE LTERM354_tree;
    pANTLR3_BASE_TREE char_literal355_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arguments_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(58)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal347       = NULL;
    LTERM348       = NULL;
    LTERM350       = NULL;
    char_literal351       = NULL;
    LTERM352       = NULL;
    LTERM354       = NULL;
    char_literal355       = NULL;
    assignmentExpression349.tree = NULL;

    assignmentExpression353.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal347_tree   = NULL;
    LTERM348_tree   = NULL;
    LTERM350_tree   = NULL;
    char_literal351_tree   = NULL;
    LTERM352_tree   = NULL;
    LTERM354_tree   = NULL;
    char_literal355_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:407:2: ( '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )* ) )
        // .//Emerson.g:407:4: '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')'
        {
            char_literal347 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_arguments3246); 
            if  (HASEXCEPTION())
            {
                goto ruleargumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal347, NULL); }


            // .//Emerson.g:407:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?
            {
                int alt183=2;
                alt183 = cdfa183.predict(ctx, RECOGNIZER, ISTREAM, &cdfa183);
                if  (HASEXCEPTION())
                {
                    goto ruleargumentsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt183) 
                {
            	case 1:
            	    // .//Emerson.g:407:9: ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
            	    {

            	        // .//Emerson.g:407:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt179=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA179_0 = LA(1);
            	                if ( (LA179_0 == LTERM) ) 
            	                {
            	                    alt179=1;
            	                }

            	            }
            	            switch (alt179) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM348 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3249); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM348, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop179;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop179: ; /* Jump out to here if this rule does not match */

            	        // .//Emerson.g:407:16: ( assignmentExpression )
            	        // .//Emerson.g:407:17: assignmentExpression
            	        {
            	            FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3253);
            	            assignmentExpression349=assignmentExpression(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleargumentsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression349.tree, NULL); }

            	        }


            	        // .//Emerson.g:407:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*

            	        for (;;)
            	        {
            	            int alt182=2;
            	            alt182 = cdfa182.predict(ctx, RECOGNIZER, ISTREAM, &cdfa182);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleargumentsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt182) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:407:40: ( LTERM )* ',' ( LTERM )* assignmentExpression
            	        	    {

            	        	        // .//Emerson.g:407:40: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt180=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA180_0 = LA(1);
            	        	                if ( (LA180_0 == LTERM) ) 
            	        	                {
            	        	                    alt180=1;
            	        	                }

            	        	            }
            	        	            switch (alt180) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM350 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3257); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleargumentsEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM350, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop180;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop180: ; /* Jump out to here if this rule does not match */

            	        	        char_literal351 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_arguments3260); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal351, NULL); }


            	        	        // .//Emerson.g:407:51: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt181=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA181_0 = LA(1);
            	        	                if ( (LA181_0 == LTERM) ) 
            	        	                {
            	        	                    alt181=1;
            	        	                }

            	        	            }
            	        	            switch (alt181) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM352 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3262); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleargumentsEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM352, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop181;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop181: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3265);
            	        	        assignmentExpression353=assignmentExpression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression353.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop182;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop182: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:407:83: ( LTERM )*

            for (;;)
            {
                int alt184=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA184_0 = LA(1);
                    if ( (LA184_0 == LTERM) ) 
                    {
                        alt184=1;
                    }

                }
                switch (alt184) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM354 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3271); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargumentsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM354, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop184;	/* break out of the loop */
            	    break;
                }
            }
            loop184: ; /* Jump out to here if this rule does not match */

            char_literal355 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_arguments3274); 
            if  (HASEXCEPTION())
            {
                goto ruleargumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal355, NULL); }


             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 407:94: -> ^( ARGLIST ( assignmentExpression )* )
            	{
            	    // .//Emerson.g:407:97: ^( ARGLIST ( assignmentExpression )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

            	        // .//Emerson.g:407:107: ( assignmentExpression )*
            	        {
            	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(58, arguments_StartIndex); }
    return retval;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//Emerson.g:411:1: indexSuffix : '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) ;
 */
static EmersonParser_indexSuffix_return
indexSuffix(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix_return retval;
    ANTLR3_UINT32 indexSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal356;
    pANTLR3_COMMON_TOKEN    LTERM357;
    pANTLR3_COMMON_TOKEN    LTERM359;
    pANTLR3_COMMON_TOKEN    char_literal360;
    EmersonParser_expression_return expression358;
    #undef	RETURN_TYPE_expression358
    #define	RETURN_TYPE_expression358 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal356_tree;
    pANTLR3_BASE_TREE LTERM357_tree;
    pANTLR3_BASE_TREE LTERM359_tree;
    pANTLR3_BASE_TREE char_literal360_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(59)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal356       = NULL;
    LTERM357       = NULL;
    LTERM359       = NULL;
    char_literal360       = NULL;
    expression358.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal356_tree   = NULL;
    LTERM357_tree   = NULL;
    LTERM359_tree   = NULL;
    char_literal360_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:412:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) )
        // .//Emerson.g:412:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal356 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_indexSuffix3297); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, char_literal356, NULL); }


            // .//Emerson.g:412:8: ( LTERM )*

            for (;;)
            {
                int alt185=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA185_0 = LA(1);
                    if ( (LA185_0 == LTERM) ) 
                    {
                        alt185=1;
                    }

                }
                switch (alt185) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM357 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3299); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM357, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop185;	/* break out of the loop */
            	    break;
                }
            }
            loop185: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix3302);
            expression358=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression358.tree, NULL); }

            // .//Emerson.g:412:26: ( LTERM )*

            for (;;)
            {
                int alt186=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA186_0 = LA(1);
                    if ( (LA186_0 == LTERM) ) 
                    {
                        alt186=1;
                    }

                }
                switch (alt186) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM359 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3304); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM359, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop186;	/* break out of the loop */
            	    break;
                }
            }
            loop186: ; /* Jump out to here if this rule does not match */

            char_literal360 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_indexSuffix3307); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal360, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 412:37: -> ^( ARRAY_INDEX expression )
            	{
            	    // .//Emerson.g:412:40: ^( ARRAY_INDEX expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(59, indexSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//Emerson.g:415:1: propertyReferenceSuffix : '.' ( LTERM )* Identifier -> ^( DOT Identifier ) ;
 */
static EmersonParser_propertyReferenceSuffix_return
propertyReferenceSuffix(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal361;
    pANTLR3_COMMON_TOKEN    LTERM362;
    pANTLR3_COMMON_TOKEN    Identifier363;

    pANTLR3_BASE_TREE char_literal361_tree;
    pANTLR3_BASE_TREE LTERM362_tree;
    pANTLR3_BASE_TREE Identifier363_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(60)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal361       = NULL;
    LTERM362       = NULL;
    Identifier363       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal361_tree   = NULL;
    LTERM362_tree   = NULL;
    Identifier363_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:416:2: ( '.' ( LTERM )* Identifier -> ^( DOT Identifier ) )
        // .//Emerson.g:416:4: '.' ( LTERM )* Identifier
        {
            char_literal361 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_propertyReferenceSuffix3328); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal361, NULL); }


            // .//Emerson.g:416:8: ( LTERM )*

            for (;;)
            {
                int alt187=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA187_0 = LA(1);
                    if ( (LA187_0 == LTERM) ) 
                    {
                        alt187=1;
                    }

                }
                switch (alt187) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM362 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix3330); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM362, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop187;	/* break out of the loop */
            	    break;
                }
            }
            loop187: ; /* Jump out to here if this rule does not match */

            Identifier363 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix3333); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier363, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 416:26: -> ^( DOT Identifier )
            	{
            	    // .//Emerson.g:416:29: ^( DOT Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(60, propertyReferenceSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//Emerson.g:419:1: assignmentOperator : ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) );
 */
static EmersonParser_assignmentOperator_return
assignmentOperator(pEmersonParser ctx)
{   
    EmersonParser_assignmentOperator_return retval;
    ANTLR3_UINT32 assignmentOperator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal364;
    pANTLR3_COMMON_TOKEN    string_literal365;
    pANTLR3_COMMON_TOKEN    string_literal366;
    pANTLR3_COMMON_TOKEN    string_literal367;
    pANTLR3_COMMON_TOKEN    string_literal368;
    pANTLR3_COMMON_TOKEN    string_literal369;
    pANTLR3_COMMON_TOKEN    string_literal370;
    pANTLR3_COMMON_TOKEN    string_literal371;
    pANTLR3_COMMON_TOKEN    string_literal372;
    pANTLR3_COMMON_TOKEN    string_literal373;
    pANTLR3_COMMON_TOKEN    string_literal374;
    pANTLR3_COMMON_TOKEN    string_literal375;

    pANTLR3_BASE_TREE char_literal364_tree;
    pANTLR3_BASE_TREE string_literal365_tree;
    pANTLR3_BASE_TREE string_literal366_tree;
    pANTLR3_BASE_TREE string_literal367_tree;
    pANTLR3_BASE_TREE string_literal368_tree;
    pANTLR3_BASE_TREE string_literal369_tree;
    pANTLR3_BASE_TREE string_literal370_tree;
    pANTLR3_BASE_TREE string_literal371_tree;
    pANTLR3_BASE_TREE string_literal372_tree;
    pANTLR3_BASE_TREE string_literal373_tree;
    pANTLR3_BASE_TREE string_literal374_tree;
    pANTLR3_BASE_TREE string_literal375_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_163;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;

    /* Initialize rule variables
     */
    assignmentOperator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(61)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal364       = NULL;
    string_literal365       = NULL;
    string_literal366       = NULL;
    string_literal367       = NULL;
    string_literal368       = NULL;
    string_literal369       = NULL;
    string_literal370       = NULL;
    string_literal371       = NULL;
    string_literal372       = NULL;
    string_literal373       = NULL;
    string_literal374       = NULL;
    string_literal375       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal364_tree   = NULL;
    string_literal365_tree   = NULL;
    string_literal366_tree   = NULL;
    string_literal367_tree   = NULL;
    string_literal368_tree   = NULL;
    string_literal369_tree   = NULL;
    string_literal370_tree   = NULL;
    string_literal371_tree   = NULL;
    string_literal372_tree   = NULL;
    string_literal373_tree   = NULL;
    string_literal374_tree   = NULL;
    string_literal375_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_163   = NULL;
    #define CREATE_stream_163  if (stream_163 == NULL) {stream_163 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 163"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:420:2: ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) )
            
            ANTLR3_UINT32 alt188;

            alt188=12;

            switch ( LA(1) ) 
            {
            case 132:
            	{
            		alt188=1;
            	}
                break;
            case 160:
            	{
            		alt188=2;
            	}
                break;
            case 161:
            	{
            		alt188=3;
            	}
                break;
            case 162:
            	{
            		alt188=4;
            	}
                break;
            case 163:
            	{
            		alt188=5;
            	}
                break;
            case 164:
            	{
            		alt188=6;
            	}
                break;
            case 165:
            	{
            		alt188=7;
            	}
                break;
            case 166:
            	{
            		alt188=8;
            	}
                break;
            case 167:
            	{
            		alt188=9;
            	}
                break;
            case 168:
            	{
            		alt188=10;
            	}
                break;
            case 169:
            	{
            		alt188=11;
            	}
                break;
            case 170:
            	{
            		alt188=12;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 188;
                EXCEPTION->state        = 0;


                goto ruleassignmentOperatorEx;
            }

            switch (alt188) 
            {
        	case 1:
        	    // .//Emerson.g:420:4: '='
        	    {
        	        char_literal364 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_assignmentOperator3353); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal364, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:8: -> ^( ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:11: ^( ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:420:22: '*='
        	    {
        	        string_literal365 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_assignmentOperator3362); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, string_literal365, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:27: -> ^( MULT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:30: ^( MULT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT_ASSIGN, (pANTLR3_UINT8)"MULT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:420:46: '/='
        	    {
        	        string_literal366 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_assignmentOperator3371); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal366, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:51: -> ^( DIV_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:54: ^( DIV_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV_ASSIGN, (pANTLR3_UINT8)"DIV_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:420:70: '%='
        	    {
        	        string_literal367 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_assignmentOperator3381); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, string_literal367, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:75: -> ^( MOD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:78: ^( MOD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD_ASSIGN, (pANTLR3_UINT8)"MOD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:420:93: '+='
        	    {
        	        string_literal368 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_assignmentOperator3390); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal368, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:98: -> ^( ADD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:101: ^( ADD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_ASSIGN, (pANTLR3_UINT8)"ADD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:420:116: '-='
        	    {
        	        string_literal369 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_assignmentOperator3399); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal369, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:121: -> ^( SUB_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:124: ^( SUB_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB_ASSIGN, (pANTLR3_UINT8)"SUB_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:420:139: '<<='
        	    {
        	        string_literal370 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_assignmentOperator3408); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, string_literal370, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:145: -> ^( LEFT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:148: ^( LEFT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT_ASSIGN, (pANTLR3_UINT8)"LEFT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:420:170: '>>='
        	    {
        	        string_literal371 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_assignmentOperator3417); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, string_literal371, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:176: -> ^( RIGHT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:179: ^( RIGHT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT_ASSIGN, (pANTLR3_UINT8)"RIGHT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:420:202: '>>>='
        	    {
        	        string_literal372 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_assignmentOperator3426); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, string_literal372, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:209: -> ^( TRIPLE_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:212: ^( TRIPLE_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT_ASSIGN, (pANTLR3_UINT8)"TRIPLE_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:420:236: '&='
        	    {
        	        string_literal373 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_assignmentOperator3435); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, string_literal373, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:240: -> ^( AND_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:243: ^( AND_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND_ASSIGN, (pANTLR3_UINT8)"AND_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:420:258: '^='
        	    {
        	        string_literal374 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_assignmentOperator3443); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, string_literal374, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:262: -> ^( EXP_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:265: ^( EXP_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP_ASSIGN, (pANTLR3_UINT8)"EXP_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:420:281: '|='
        	    {
        	        string_literal375 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_assignmentOperator3452); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, string_literal375, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:286: -> ^( OR_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:420:289: ^( OR_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR_ASSIGN, (pANTLR3_UINT8)"OR_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_163 != NULL) stream_163->free(stream_163);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_167 != NULL) stream_167->free(stream_167);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(61, assignmentOperator_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//Emerson.g:423:1: conditionalExpression : ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpression_return
conditionalExpression(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpression_return retval;
    ANTLR3_UINT32 conditionalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM377;
    pANTLR3_COMMON_TOKEN    char_literal378;
    pANTLR3_COMMON_TOKEN    LTERM379;
    pANTLR3_COMMON_TOKEN    LTERM380;
    pANTLR3_COMMON_TOKEN    char_literal381;
    pANTLR3_COMMON_TOKEN    LTERM382;
    EmersonParser_assignmentExpression_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return

    EmersonParser_logicalORExpression_return logicalORExpression376;
    #undef	RETURN_TYPE_logicalORExpression376
    #define	RETURN_TYPE_logicalORExpression376 EmersonParser_logicalORExpression_return

    pANTLR3_BASE_TREE LTERM377_tree;
    pANTLR3_BASE_TREE char_literal378_tree;
    pANTLR3_BASE_TREE LTERM379_tree;
    pANTLR3_BASE_TREE LTERM380_tree;
    pANTLR3_BASE_TREE char_literal381_tree;
    pANTLR3_BASE_TREE LTERM382_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpression;
    /* Initialize rule variables
     */
    conditionalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(62)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM377       = NULL;
    char_literal378       = NULL;
    LTERM379       = NULL;
    LTERM380       = NULL;
    char_literal381       = NULL;
    LTERM382       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpression376.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM377_tree   = NULL;
    char_literal378_tree   = NULL;
    LTERM379_tree   = NULL;
    LTERM380_tree   = NULL;
    char_literal381_tree   = NULL;
    LTERM382_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_logicalORExpression   = NULL;
    #define CREATE_stream_logicalORExpression  if (stream_logicalORExpression == NULL) {stream_logicalORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:424:2: ( ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? )
        // .//Emerson.g:424:4: ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
        {
            // .//Emerson.g:424:4: ( logicalORExpression -> logicalORExpression )
            // .//Emerson.g:424:5: logicalORExpression
            {
                FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression3470);
                logicalORExpression376=logicalORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpression; stream_logicalORExpression->add(stream_logicalORExpression, logicalORExpression376.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 424:25: -> logicalORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpression == NULL ? NULL : stream_logicalORExpression->nextTree(stream_logicalORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:424:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
            {
                int alt193=2;
                alt193 = cdfa193.predict(ctx, RECOGNIZER, ISTREAM, &cdfa193);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt193) 
                {
            	case 1:
            	    // .//Emerson.g:424:50: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
            	    {

            	        // .//Emerson.g:424:50: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt189=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA189_0 = LA(1);
            	                if ( (LA189_0 == LTERM) ) 
            	                {
            	                    alt189=1;
            	                }

            	            }
            	            switch (alt189) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM377 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3478); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM377, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop189;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop189: ; /* Jump out to here if this rule does not match */

            	        char_literal378 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_conditionalExpression3481); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, char_literal378, NULL); }


            	        // .//Emerson.g:424:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt190=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA190_0 = LA(1);
            	                if ( (LA190_0 == LTERM) ) 
            	                {
            	                    alt190=1;
            	                }

            	            }
            	            switch (alt190) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM379 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3483); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM379, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop190;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop190: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3488);
            	        expr1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr1.tree, NULL); }

            	        // .//Emerson.g:424:95: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt191=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA191_0 = LA(1);
            	                if ( (LA191_0 == LTERM) ) 
            	                {
            	                    alt191=1;
            	                }

            	            }
            	            switch (alt191) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM380 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3490); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM380, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop191;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop191: ; /* Jump out to here if this rule does not match */

            	        char_literal381 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_conditionalExpression3493); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal381, NULL); }


            	        // .//Emerson.g:424:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt192=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA192_0 = LA(1);
            	                if ( (LA192_0 == LTERM) ) 
            	                {
            	                    alt192=1;
            	                }

            	            }
            	            switch (alt192) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM382 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3495); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM382, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop192;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop192: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3500);
            	        expr2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr1, expr2, conditionalExpression
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 424:140: -> ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:424:143: ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_logicalORExpression != NULL) stream_logicalORExpression->free(stream_logicalORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(62, conditionalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//Emerson.g:427:1: conditionalExpressionNoIn : ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpressionNoIn_return
conditionalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpressionNoIn_return retval;
    ANTLR3_UINT32 conditionalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM384;
    pANTLR3_COMMON_TOKEN    char_literal385;
    pANTLR3_COMMON_TOKEN    LTERM386;
    pANTLR3_COMMON_TOKEN    LTERM387;
    pANTLR3_COMMON_TOKEN    char_literal388;
    pANTLR3_COMMON_TOKEN    LTERM389;
    EmersonParser_assignmentExpressionNoIn_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_logicalORExpressionNoIn_return logicalORExpressionNoIn383;
    #undef	RETURN_TYPE_logicalORExpressionNoIn383
    #define	RETURN_TYPE_logicalORExpressionNoIn383 EmersonParser_logicalORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM384_tree;
    pANTLR3_BASE_TREE char_literal385_tree;
    pANTLR3_BASE_TREE LTERM386_tree;
    pANTLR3_BASE_TREE LTERM387_tree;
    pANTLR3_BASE_TREE char_literal388_tree;
    pANTLR3_BASE_TREE LTERM389_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpressionNoIn;
    /* Initialize rule variables
     */
    conditionalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(63)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM384       = NULL;
    char_literal385       = NULL;
    LTERM386       = NULL;
    LTERM387       = NULL;
    char_literal388       = NULL;
    LTERM389       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpressionNoIn383.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM384_tree   = NULL;
    char_literal385_tree   = NULL;
    LTERM386_tree   = NULL;
    LTERM387_tree   = NULL;
    char_literal388_tree   = NULL;
    LTERM389_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_logicalORExpressionNoIn   = NULL;
    #define CREATE_stream_logicalORExpressionNoIn  if (stream_logicalORExpressionNoIn == NULL) {stream_logicalORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:428:2: ( ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? )
        // .//Emerson.g:428:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
        {
            // .//Emerson.g:428:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn )
            // .//Emerson.g:428:5: logicalORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3531);
                logicalORExpressionNoIn383=logicalORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpressionNoIn; stream_logicalORExpressionNoIn->add(stream_logicalORExpressionNoIn, logicalORExpressionNoIn383.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 428:29: -> logicalORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpressionNoIn == NULL ? NULL : stream_logicalORExpressionNoIn->nextTree(stream_logicalORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:428:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
            {
                int alt198=2;
                alt198 = cdfa198.predict(ctx, RECOGNIZER, ISTREAM, &cdfa198);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt198) 
                {
            	case 1:
            	    // .//Emerson.g:428:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:428:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt194=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA194_0 = LA(1);
            	                if ( (LA194_0 == LTERM) ) 
            	                {
            	                    alt194=1;
            	                }

            	            }
            	            switch (alt194) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM384 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3538); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM384, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop194;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop194: ; /* Jump out to here if this rule does not match */

            	        char_literal385 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_conditionalExpressionNoIn3541); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, char_literal385, NULL); }


            	        // .//Emerson.g:428:68: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt195=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA195_0 = LA(1);
            	                if ( (LA195_0 == LTERM) ) 
            	                {
            	                    alt195=1;
            	                }

            	            }
            	            switch (alt195) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM386 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3543); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM386, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop195;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop195: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3548);
            	        expr1=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr1.tree, NULL); }

            	        // .//Emerson.g:428:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt196=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA196_0 = LA(1);
            	                if ( (LA196_0 == LTERM) ) 
            	                {
            	                    alt196=1;
            	                }

            	            }
            	            switch (alt196) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM387 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3550); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM387, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop196;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop196: ; /* Jump out to here if this rule does not match */

            	        char_literal388 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_conditionalExpressionNoIn3553); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal388, NULL); }


            	        // .//Emerson.g:428:117: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt197=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA197_0 = LA(1);
            	                if ( (LA197_0 == LTERM) ) 
            	                {
            	                    alt197=1;
            	                }

            	            }
            	            switch (alt197) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM389 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3555); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM389, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop197;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop197: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3560);
            	        expr2=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr1, expr2, conditionalExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 428:155: -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:428:158: ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_logicalORExpressionNoIn != NULL) stream_logicalORExpressionNoIn->free(stream_logicalORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(63, conditionalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start logicalORExpression
 * .//Emerson.g:432:1: logicalORExpression : ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* ;
 */
static EmersonParser_logicalORExpression_return
logicalORExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpression_return retval;
    ANTLR3_UINT32 logicalORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM391;
    pANTLR3_COMMON_TOKEN    string_literal392;
    pANTLR3_COMMON_TOKEN    LTERM393;
    EmersonParser_logicalANDExpression_return logicalANDExpression390;
    #undef	RETURN_TYPE_logicalANDExpression390
    #define	RETURN_TYPE_logicalANDExpression390 EmersonParser_logicalANDExpression_return

    EmersonParser_logicalANDExpression_return logicalANDExpression394;
    #undef	RETURN_TYPE_logicalANDExpression394
    #define	RETURN_TYPE_logicalANDExpression394 EmersonParser_logicalANDExpression_return

    pANTLR3_BASE_TREE LTERM391_tree;
    pANTLR3_BASE_TREE string_literal392_tree;
    pANTLR3_BASE_TREE LTERM393_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpression;
    /* Initialize rule variables
     */
    logicalORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(64)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM391       = NULL;
    string_literal392       = NULL;
    LTERM393       = NULL;
    logicalANDExpression390.tree = NULL;

    logicalANDExpression394.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM391_tree   = NULL;
    string_literal392_tree   = NULL;
    LTERM393_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_logicalANDExpression   = NULL;
    #define CREATE_stream_logicalANDExpression  if (stream_logicalANDExpression == NULL) {stream_logicalANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:433:2: ( ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* )
        // .//Emerson.g:433:4: ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
        {
            // .//Emerson.g:433:4: ( logicalANDExpression -> logicalANDExpression )
            // .//Emerson.g:433:5: logicalANDExpression
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3590);
                logicalANDExpression390=logicalANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression390.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 433:26: -> logicalANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:433:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*

            for (;;)
            {
                int alt201=2;
                alt201 = cdfa201.predict(ctx, RECOGNIZER, ISTREAM, &cdfa201);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt201) 
                {
            	case 1:
            	    // .//Emerson.g:433:51: ( LTERM )* '||' ( LTERM )* logicalANDExpression
            	    {

            	        // .//Emerson.g:433:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt199=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA199_0 = LA(1);
            	                if ( (LA199_0 == LTERM) ) 
            	                {
            	                    alt199=1;
            	                }

            	            }
            	            switch (alt199) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM391 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3597); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM391, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop199;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop199: ; /* Jump out to here if this rule does not match */

            	        string_literal392 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_logicalORExpression3600); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, string_literal392, NULL); }


            	        // .//Emerson.g:433:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt200=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA200_0 = LA(1);
            	                if ( (LA200_0 == LTERM) ) 
            	                {
            	                    alt200=1;
            	                }

            	            }
            	            switch (alt200) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM393 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3602); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM393, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop200;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop200: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3605);
            	        logicalANDExpression394=logicalANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression394.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, logicalORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 433:91: -> ^( OR $logicalORExpression logicalANDExpression )
            	        	{
            	        	    // .//Emerson.g:433:94: ^( OR $logicalORExpression logicalANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop201;	/* break out of the loop */
            	    break;
                }
            }
            loop201: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_logicalANDExpression != NULL) stream_logicalANDExpression->free(stream_logicalANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(64, logicalORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalANDExpression
 * .//Emerson.g:436:1: logicalANDExpression : ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* ;
 */
static EmersonParser_logicalANDExpression_return
logicalANDExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpression_return retval;
    ANTLR3_UINT32 logicalANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM396;
    pANTLR3_COMMON_TOKEN    string_literal397;
    pANTLR3_COMMON_TOKEN    LTERM398;
    EmersonParser_bitwiseORExpression_return bitwiseORExpression395;
    #undef	RETURN_TYPE_bitwiseORExpression395
    #define	RETURN_TYPE_bitwiseORExpression395 EmersonParser_bitwiseORExpression_return

    EmersonParser_bitwiseORExpression_return bitwiseORExpression399;
    #undef	RETURN_TYPE_bitwiseORExpression399
    #define	RETURN_TYPE_bitwiseORExpression399 EmersonParser_bitwiseORExpression_return

    pANTLR3_BASE_TREE LTERM396_tree;
    pANTLR3_BASE_TREE string_literal397_tree;
    pANTLR3_BASE_TREE LTERM398_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpression;
    /* Initialize rule variables
     */
    logicalANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(65)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM396       = NULL;
    string_literal397       = NULL;
    LTERM398       = NULL;
    bitwiseORExpression395.tree = NULL;

    bitwiseORExpression399.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM396_tree   = NULL;
    string_literal397_tree   = NULL;
    LTERM398_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_bitwiseORExpression   = NULL;
    #define CREATE_stream_bitwiseORExpression  if (stream_bitwiseORExpression == NULL) {stream_bitwiseORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:437:2: ( ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* )
        // .//Emerson.g:437:4: ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
        {
            // .//Emerson.g:437:4: ( bitwiseORExpression -> bitwiseORExpression )
            // .//Emerson.g:437:5: bitwiseORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3632);
                bitwiseORExpression395=bitwiseORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression395.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 437:25: -> bitwiseORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:437:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*

            for (;;)
            {
                int alt204=2;
                alt204 = cdfa204.predict(ctx, RECOGNIZER, ISTREAM, &cdfa204);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt204) 
                {
            	case 1:
            	    // .//Emerson.g:437:49: ( LTERM )* '&&' ( LTERM )* bitwiseORExpression
            	    {

            	        // .//Emerson.g:437:49: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt202=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA202_0 = LA(1);
            	                if ( (LA202_0 == LTERM) ) 
            	                {
            	                    alt202=1;
            	                }

            	            }
            	            switch (alt202) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM396 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3639); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM396, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop202;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop202: ; /* Jump out to here if this rule does not match */

            	        string_literal397 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_logicalANDExpression3642); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal397, NULL); }


            	        // .//Emerson.g:437:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt203=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA203_0 = LA(1);
            	                if ( (LA203_0 == LTERM) ) 
            	                {
            	                    alt203=1;
            	                }

            	            }
            	            switch (alt203) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM398 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3644); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM398, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop203;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop203: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3647);
            	        bitwiseORExpression399=bitwiseORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression399.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, bitwiseORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 437:89: -> ^( AND $logicalANDExpression bitwiseORExpression )
            	        	{
            	        	    // .//Emerson.g:437:92: ^( AND $logicalANDExpression bitwiseORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop204;	/* break out of the loop */
            	    break;
                }
            }
            loop204: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_bitwiseORExpression != NULL) stream_bitwiseORExpression->free(stream_bitwiseORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(65, logicalANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//Emerson.g:440:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* ;
 */
static EmersonParser_logicalORExpressionNoIn_return
logicalORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM401;
    pANTLR3_COMMON_TOKEN    string_literal402;
    pANTLR3_COMMON_TOKEN    LTERM403;
    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn400;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn400
    #define	RETURN_TYPE_logicalANDExpressionNoIn400 EmersonParser_logicalANDExpressionNoIn_return

    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn404;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn404
    #define	RETURN_TYPE_logicalANDExpressionNoIn404 EmersonParser_logicalANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM401_tree;
    pANTLR3_BASE_TREE string_literal402_tree;
    pANTLR3_BASE_TREE LTERM403_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpressionNoIn;
    /* Initialize rule variables
     */
    logicalORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(66)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM401       = NULL;
    string_literal402       = NULL;
    LTERM403       = NULL;
    logicalANDExpressionNoIn400.tree = NULL;

    logicalANDExpressionNoIn404.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM401_tree   = NULL;
    string_literal402_tree   = NULL;
    LTERM403_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_logicalANDExpressionNoIn   = NULL;
    #define CREATE_stream_logicalANDExpressionNoIn  if (stream_logicalANDExpressionNoIn == NULL) {stream_logicalANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:441:2: ( ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* )
        // .//Emerson.g:441:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
        {
            // .//Emerson.g:441:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn )
            // .//Emerson.g:441:5: logicalANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3675);
                logicalANDExpressionNoIn400=logicalANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn400.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 441:30: -> logicalANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:441:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*

            for (;;)
            {
                int alt207=2;
                alt207 = cdfa207.predict(ctx, RECOGNIZER, ISTREAM, &cdfa207);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt207) 
                {
            	case 1:
            	    // .//Emerson.g:441:59: ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn
            	    {

            	        // .//Emerson.g:441:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt205=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA205_0 = LA(1);
            	                if ( (LA205_0 == LTERM) ) 
            	                {
            	                    alt205=1;
            	                }

            	            }
            	            switch (alt205) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM401 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3682); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM401, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop205;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop205: ; /* Jump out to here if this rule does not match */

            	        string_literal402 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_logicalORExpressionNoIn3685); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, string_literal402, NULL); }


            	        // .//Emerson.g:441:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt206=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA206_0 = LA(1);
            	                if ( (LA206_0 == LTERM) ) 
            	                {
            	                    alt206=1;
            	                }

            	            }
            	            switch (alt206) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM403 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3687); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM403, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop206;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop206: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3690);
            	        logicalANDExpressionNoIn404=logicalANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn404.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, logicalORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 441:103: -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:441:106: ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop207;	/* break out of the loop */
            	    break;
                }
            }
            loop207: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_logicalANDExpressionNoIn != NULL) stream_logicalANDExpressionNoIn->free(stream_logicalANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(66, logicalORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//Emerson.g:445:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* ;
 */
static EmersonParser_logicalANDExpressionNoIn_return
logicalANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM406;
    pANTLR3_COMMON_TOKEN    string_literal407;
    pANTLR3_COMMON_TOKEN    LTERM408;
    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn405;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn405
    #define	RETURN_TYPE_bitwiseORExpressionNoIn405 EmersonParser_bitwiseORExpressionNoIn_return

    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn409;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn409
    #define	RETURN_TYPE_bitwiseORExpressionNoIn409 EmersonParser_bitwiseORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM406_tree;
    pANTLR3_BASE_TREE string_literal407_tree;
    pANTLR3_BASE_TREE LTERM408_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpressionNoIn;
    /* Initialize rule variables
     */
    logicalANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(67)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM406       = NULL;
    string_literal407       = NULL;
    LTERM408       = NULL;
    bitwiseORExpressionNoIn405.tree = NULL;

    bitwiseORExpressionNoIn409.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM406_tree   = NULL;
    string_literal407_tree   = NULL;
    LTERM408_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_bitwiseORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseORExpressionNoIn  if (stream_bitwiseORExpressionNoIn == NULL) {stream_bitwiseORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:446:2: ( ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* )
        // .//Emerson.g:446:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
        {
            // .//Emerson.g:446:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn )
            // .//Emerson.g:446:5: bitwiseORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3719);
                bitwiseORExpressionNoIn405=bitwiseORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn405.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 446:29: -> bitwiseORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:446:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*

            for (;;)
            {
                int alt210=2;
                alt210 = cdfa210.predict(ctx, RECOGNIZER, ISTREAM, &cdfa210);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt210) 
                {
            	case 1:
            	    // .//Emerson.g:446:58: ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn
            	    {

            	        // .//Emerson.g:446:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt208=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA208_0 = LA(1);
            	                if ( (LA208_0 == LTERM) ) 
            	                {
            	                    alt208=1;
            	                }

            	            }
            	            switch (alt208) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM406 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3727); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM406, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop208;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop208: ; /* Jump out to here if this rule does not match */

            	        string_literal407 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_logicalANDExpressionNoIn3730); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal407, NULL); }


            	        // .//Emerson.g:446:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt209=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA209_0 = LA(1);
            	                if ( (LA209_0 == LTERM) ) 
            	                {
            	                    alt209=1;
            	                }

            	            }
            	            switch (alt209) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM408 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3732); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM408, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop209;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop209: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3735);
            	        bitwiseORExpressionNoIn409=bitwiseORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn409.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, logicalANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 446:101: -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:446:104: ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop210;	/* break out of the loop */
            	    break;
                }
            }
            loop210: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_bitwiseORExpressionNoIn != NULL) stream_bitwiseORExpressionNoIn->free(stream_bitwiseORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(67, logicalANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//Emerson.g:449:1: bitwiseORExpression : ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* ;
 */
static EmersonParser_bitwiseORExpression_return
bitwiseORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpression_return retval;
    ANTLR3_UINT32 bitwiseORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM411;
    pANTLR3_COMMON_TOKEN    char_literal412;
    pANTLR3_COMMON_TOKEN    LTERM413;
    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression410;
    #undef	RETURN_TYPE_bitwiseXORExpression410
    #define	RETURN_TYPE_bitwiseXORExpression410 EmersonParser_bitwiseXORExpression_return

    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression414;
    #undef	RETURN_TYPE_bitwiseXORExpression414
    #define	RETURN_TYPE_bitwiseXORExpression414 EmersonParser_bitwiseXORExpression_return

    pANTLR3_BASE_TREE LTERM411_tree;
    pANTLR3_BASE_TREE char_literal412_tree;
    pANTLR3_BASE_TREE LTERM413_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpression;
    /* Initialize rule variables
     */
    bitwiseORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(68)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM411       = NULL;
    char_literal412       = NULL;
    LTERM413       = NULL;
    bitwiseXORExpression410.tree = NULL;

    bitwiseXORExpression414.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM411_tree   = NULL;
    char_literal412_tree   = NULL;
    LTERM413_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_bitwiseXORExpression   = NULL;
    #define CREATE_stream_bitwiseXORExpression  if (stream_bitwiseXORExpression == NULL) {stream_bitwiseXORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:450:2: ( ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* )
        // .//Emerson.g:450:4: ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
        {
            // .//Emerson.g:450:4: ( bitwiseXORExpression -> bitwiseXORExpression )
            // .//Emerson.g:450:5: bitwiseXORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3762);
                bitwiseXORExpression410=bitwiseXORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression410.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 450:26: -> bitwiseXORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:450:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*

            for (;;)
            {
                int alt213=2;
                alt213 = cdfa213.predict(ctx, RECOGNIZER, ISTREAM, &cdfa213);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt213) 
                {
            	case 1:
            	    // .//Emerson.g:450:52: ( LTERM )* '|' ( LTERM )* bitwiseXORExpression
            	    {

            	        // .//Emerson.g:450:52: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt211=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA211_0 = LA(1);
            	                if ( (LA211_0 == LTERM) ) 
            	                {
            	                    alt211=1;
            	                }

            	            }
            	            switch (alt211) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM411 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3770); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM411, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop211;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop211: ; /* Jump out to here if this rule does not match */

            	        char_literal412 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_bitwiseORExpression3773); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, char_literal412, NULL); }


            	        // .//Emerson.g:450:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt212=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA212_0 = LA(1);
            	                if ( (LA212_0 == LTERM) ) 
            	                {
            	                    alt212=1;
            	                }

            	            }
            	            switch (alt212) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM413 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3775); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM413, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop212;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop212: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3778);
            	        bitwiseXORExpression414=bitwiseXORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression414.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpression, bitwiseORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 450:91: -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	{
            	        	    // .//Emerson.g:450:94: ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop213;	/* break out of the loop */
            	    break;
                }
            }
            loop213: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_bitwiseXORExpression != NULL) stream_bitwiseXORExpression->free(stream_bitwiseXORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(68, bitwiseORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//Emerson.g:453:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseORExpressionNoIn_return
bitwiseORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM416;
    pANTLR3_COMMON_TOKEN    char_literal417;
    pANTLR3_COMMON_TOKEN    LTERM418;
    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn415;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn415
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn415 EmersonParser_bitwiseXORExpressionNoIn_return

    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn419;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn419
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn419 EmersonParser_bitwiseXORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM416_tree;
    pANTLR3_BASE_TREE char_literal417_tree;
    pANTLR3_BASE_TREE LTERM418_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(69)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM416       = NULL;
    char_literal417       = NULL;
    LTERM418       = NULL;
    bitwiseXORExpressionNoIn415.tree = NULL;

    bitwiseXORExpressionNoIn419.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM416_tree   = NULL;
    char_literal417_tree   = NULL;
    LTERM418_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_bitwiseXORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseXORExpressionNoIn  if (stream_bitwiseXORExpressionNoIn == NULL) {stream_bitwiseXORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:454:2: ( ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* )
        // .//Emerson.g:454:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
        {
            // .//Emerson.g:454:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn )
            // .//Emerson.g:454:5: bitwiseXORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3805);
                bitwiseXORExpressionNoIn415=bitwiseXORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn415.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 454:30: -> bitwiseXORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:454:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*

            for (;;)
            {
                int alt216=2;
                alt216 = cdfa216.predict(ctx, RECOGNIZER, ISTREAM, &cdfa216);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt216) 
                {
            	case 1:
            	    // .//Emerson.g:454:60: ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn
            	    {

            	        // .//Emerson.g:454:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt214=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA214_0 = LA(1);
            	                if ( (LA214_0 == LTERM) ) 
            	                {
            	                    alt214=1;
            	                }

            	            }
            	            switch (alt214) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM416 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn3813); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM416, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop214;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop214: ; /* Jump out to here if this rule does not match */

            	        char_literal417 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_bitwiseORExpressionNoIn3816); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, char_literal417, NULL); }


            	        // .//Emerson.g:454:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt215=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA215_0 = LA(1);
            	                if ( (LA215_0 == LTERM) ) 
            	                {
            	                    alt215=1;
            	                }

            	            }
            	            switch (alt215) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM418 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn3818); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM418, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop215;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop215: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3821);
            	        bitwiseXORExpressionNoIn419=bitwiseXORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn419.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 454:103: -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:454:106: ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop216;	/* break out of the loop */
            	    break;
                }
            }
            loop216: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_bitwiseXORExpressionNoIn != NULL) stream_bitwiseXORExpressionNoIn->free(stream_bitwiseXORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(69, bitwiseORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//Emerson.g:457:1: bitwiseXORExpression : ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* ;
 */
static EmersonParser_bitwiseXORExpression_return
bitwiseXORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpression_return retval;
    ANTLR3_UINT32 bitwiseXORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM421;
    pANTLR3_COMMON_TOKEN    char_literal422;
    pANTLR3_COMMON_TOKEN    LTERM423;
    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression420;
    #undef	RETURN_TYPE_bitwiseANDExpression420
    #define	RETURN_TYPE_bitwiseANDExpression420 EmersonParser_bitwiseANDExpression_return

    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression424;
    #undef	RETURN_TYPE_bitwiseANDExpression424
    #define	RETURN_TYPE_bitwiseANDExpression424 EmersonParser_bitwiseANDExpression_return

    pANTLR3_BASE_TREE LTERM421_tree;
    pANTLR3_BASE_TREE char_literal422_tree;
    pANTLR3_BASE_TREE LTERM423_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpression;
    /* Initialize rule variables
     */
    bitwiseXORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(70)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM421       = NULL;
    char_literal422       = NULL;
    LTERM423       = NULL;
    bitwiseANDExpression420.tree = NULL;

    bitwiseANDExpression424.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM421_tree   = NULL;
    char_literal422_tree   = NULL;
    LTERM423_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_bitwiseANDExpression   = NULL;
    #define CREATE_stream_bitwiseANDExpression  if (stream_bitwiseANDExpression == NULL) {stream_bitwiseANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:458:1: ( ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* )
        // .//Emerson.g:458:3: ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
        {
            // .//Emerson.g:458:3: ( bitwiseANDExpression -> bitwiseANDExpression )
            // .//Emerson.g:458:4: bitwiseANDExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3847);
                bitwiseANDExpression420=bitwiseANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression420.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 458:25: -> bitwiseANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:458:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*

            for (;;)
            {
                int alt219=2;
                alt219 = cdfa219.predict(ctx, RECOGNIZER, ISTREAM, &cdfa219);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt219) 
                {
            	case 1:
            	    // .//Emerson.g:458:51: ( LTERM )* '^' ( LTERM )* bitwiseANDExpression
            	    {

            	        // .//Emerson.g:458:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt217=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA217_0 = LA(1);
            	                if ( (LA217_0 == LTERM) ) 
            	                {
            	                    alt217=1;
            	                }

            	            }
            	            switch (alt217) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM421 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression3855); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM421, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop217;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop217: ; /* Jump out to here if this rule does not match */

            	        char_literal422 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_bitwiseXORExpression3858); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal422, NULL); }


            	        // .//Emerson.g:458:62: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt218=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA218_0 = LA(1);
            	                if ( (LA218_0 == LTERM) ) 
            	                {
            	                    alt218=1;
            	                }

            	            }
            	            switch (alt218) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM423 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression3860); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM423, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop218;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop218: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3863);
            	        bitwiseANDExpression424=bitwiseANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression424.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 458:90: -> ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	{
            	        	    // .//Emerson.g:458:93: ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop219;	/* break out of the loop */
            	    break;
                }
            }
            loop219: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_bitwiseANDExpression != NULL) stream_bitwiseANDExpression->free(stream_bitwiseANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(70, bitwiseXORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//Emerson.g:461:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseXORExpressionNoIn_return
bitwiseXORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseXORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM426;
    pANTLR3_COMMON_TOKEN    char_literal427;
    pANTLR3_COMMON_TOKEN    LTERM428;
    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn425;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn425
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn425 EmersonParser_bitwiseANDExpressionNoIn_return

    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn429;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn429
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn429 EmersonParser_bitwiseANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM426_tree;
    pANTLR3_BASE_TREE char_literal427_tree;
    pANTLR3_BASE_TREE LTERM428_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseXORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(71)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM426       = NULL;
    char_literal427       = NULL;
    LTERM428       = NULL;
    bitwiseANDExpressionNoIn425.tree = NULL;

    bitwiseANDExpressionNoIn429.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM426_tree   = NULL;
    char_literal427_tree   = NULL;
    LTERM428_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_bitwiseANDExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseANDExpressionNoIn  if (stream_bitwiseANDExpressionNoIn == NULL) {stream_bitwiseANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:462:2: ( ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* )
        // .//Emerson.g:462:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
        {
            // .//Emerson.g:462:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn )
            // .//Emerson.g:462:5: bitwiseANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3890);
                bitwiseANDExpressionNoIn425=bitwiseANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn425.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 462:30: -> bitwiseANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:462:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*

            for (;;)
            {
                int alt222=2;
                alt222 = cdfa222.predict(ctx, RECOGNIZER, ISTREAM, &cdfa222);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt222) 
                {
            	case 1:
            	    // .//Emerson.g:462:59: ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn
            	    {

            	        // .//Emerson.g:462:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt220=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA220_0 = LA(1);
            	                if ( (LA220_0 == LTERM) ) 
            	                {
            	                    alt220=1;
            	                }

            	            }
            	            switch (alt220) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM426 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3897); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM426, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop220;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop220: ; /* Jump out to here if this rule does not match */

            	        char_literal427 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_bitwiseXORExpressionNoIn3900); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal427, NULL); }


            	        // .//Emerson.g:462:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt221=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA221_0 = LA(1);
            	                if ( (LA221_0 == LTERM) ) 
            	                {
            	                    alt221=1;
            	                }

            	            }
            	            switch (alt221) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM428 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3902); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM428, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop221;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop221: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3905);
            	        bitwiseANDExpressionNoIn429=bitwiseANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn429.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpressionNoIn, bitwiseANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 462:102: -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:462:105: ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop222;	/* break out of the loop */
            	    break;
                }
            }
            loop222: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_bitwiseANDExpressionNoIn != NULL) stream_bitwiseANDExpressionNoIn->free(stream_bitwiseANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(71, bitwiseXORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//Emerson.g:465:1: bitwiseANDExpression : ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* ;
 */
static EmersonParser_bitwiseANDExpression_return
bitwiseANDExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpression_return retval;
    ANTLR3_UINT32 bitwiseANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM431;
    pANTLR3_COMMON_TOKEN    char_literal432;
    pANTLR3_COMMON_TOKEN    LTERM433;
    EmersonParser_equalityExpression_return equalityExpression430;
    #undef	RETURN_TYPE_equalityExpression430
    #define	RETURN_TYPE_equalityExpression430 EmersonParser_equalityExpression_return

    EmersonParser_equalityExpression_return equalityExpression434;
    #undef	RETURN_TYPE_equalityExpression434
    #define	RETURN_TYPE_equalityExpression434 EmersonParser_equalityExpression_return

    pANTLR3_BASE_TREE LTERM431_tree;
    pANTLR3_BASE_TREE char_literal432_tree;
    pANTLR3_BASE_TREE LTERM433_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpression;
    /* Initialize rule variables
     */
    bitwiseANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(72)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM431       = NULL;
    char_literal432       = NULL;
    LTERM433       = NULL;
    equalityExpression430.tree = NULL;

    equalityExpression434.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM431_tree   = NULL;
    char_literal432_tree   = NULL;
    LTERM433_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_equalityExpression   = NULL;
    #define CREATE_stream_equalityExpression  if (stream_equalityExpression == NULL) {stream_equalityExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:466:2: ( ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* )
        // .//Emerson.g:466:4: ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
        {
            // .//Emerson.g:466:4: ( equalityExpression -> equalityExpression )
            // .//Emerson.g:466:5: equalityExpression
            {
                FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression3933);
                equalityExpression430=equalityExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression430.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 466:24: -> equalityExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:466:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*

            for (;;)
            {
                int alt225=2;
                alt225 = cdfa225.predict(ctx, RECOGNIZER, ISTREAM, &cdfa225);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt225) 
                {
            	case 1:
            	    // .//Emerson.g:466:48: ( LTERM )* '&' ( LTERM )* equalityExpression
            	    {

            	        // .//Emerson.g:466:48: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt223=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA223_0 = LA(1);
            	                if ( (LA223_0 == LTERM) ) 
            	                {
            	                    alt223=1;
            	                }

            	            }
            	            switch (alt223) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM431 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression3941); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM431, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop223;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop223: ; /* Jump out to here if this rule does not match */

            	        char_literal432 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_bitwiseANDExpression3944); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal432, NULL); }


            	        // .//Emerson.g:466:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt224=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA224_0 = LA(1);
            	                if ( (LA224_0 == LTERM) ) 
            	                {
            	                    alt224=1;
            	                }

            	            }
            	            switch (alt224) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM433 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression3946); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM433, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop224;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop224: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression3949);
            	        equalityExpression434=equalityExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression434.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpression, equalityExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 466:85: -> ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	{
            	        	    // .//Emerson.g:466:88: ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop225;	/* break out of the loop */
            	    break;
                }
            }
            loop225: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_equalityExpression != NULL) stream_equalityExpression->free(stream_equalityExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(72, bitwiseANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//Emerson.g:469:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseANDExpressionNoIn_return
bitwiseANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM436;
    pANTLR3_COMMON_TOKEN    char_literal437;
    pANTLR3_COMMON_TOKEN    LTERM438;
    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn435;
    #undef	RETURN_TYPE_equalityExpressionNoIn435
    #define	RETURN_TYPE_equalityExpressionNoIn435 EmersonParser_equalityExpressionNoIn_return

    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn439;
    #undef	RETURN_TYPE_equalityExpressionNoIn439
    #define	RETURN_TYPE_equalityExpressionNoIn439 EmersonParser_equalityExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM436_tree;
    pANTLR3_BASE_TREE char_literal437_tree;
    pANTLR3_BASE_TREE LTERM438_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(73)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM436       = NULL;
    char_literal437       = NULL;
    LTERM438       = NULL;
    equalityExpressionNoIn435.tree = NULL;

    equalityExpressionNoIn439.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM436_tree   = NULL;
    char_literal437_tree   = NULL;
    LTERM438_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_equalityExpressionNoIn   = NULL;
    #define CREATE_stream_equalityExpressionNoIn  if (stream_equalityExpressionNoIn == NULL) {stream_equalityExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:470:2: ( ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* )
        // .//Emerson.g:470:4: ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
        {
            // .//Emerson.g:470:4: ( equalityExpressionNoIn -> equalityExpressionNoIn )
            // .//Emerson.g:470:5: equalityExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3977);
                equalityExpressionNoIn435=equalityExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn435.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 470:28: -> equalityExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:470:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*

            for (;;)
            {
                int alt228=2;
                alt228 = cdfa228.predict(ctx, RECOGNIZER, ISTREAM, &cdfa228);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt228) 
                {
            	case 1:
            	    // .//Emerson.g:470:56: ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn
            	    {

            	        // .//Emerson.g:470:56: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt226=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA226_0 = LA(1);
            	                if ( (LA226_0 == LTERM) ) 
            	                {
            	                    alt226=1;
            	                }

            	            }
            	            switch (alt226) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM436 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3985); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM436, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop226;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop226: ; /* Jump out to here if this rule does not match */

            	        char_literal437 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_bitwiseANDExpressionNoIn3988); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal437, NULL); }


            	        // .//Emerson.g:470:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt227=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA227_0 = LA(1);
            	                if ( (LA227_0 == LTERM) ) 
            	                {
            	                    alt227=1;
            	                }

            	            }
            	            switch (alt227) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM438 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3990); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM438, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop227;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop227: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3993);
            	        equalityExpressionNoIn439=equalityExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn439.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpressionNoIn, bitwiseANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 470:97: -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:470:100: ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop228;	/* break out of the loop */
            	    break;
                }
            }
            loop228: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_equalityExpressionNoIn != NULL) stream_equalityExpressionNoIn->free(stream_equalityExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(73, bitwiseANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//Emerson.g:473:1: equalityExpression : ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* ;
 */
static EmersonParser_equalityExpression_return
equalityExpression(pEmersonParser ctx)
{   
    EmersonParser_equalityExpression_return retval;
    ANTLR3_UINT32 equalityExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM441;
    pANTLR3_COMMON_TOKEN    LTERM443;
    EmersonParser_relationalExpression_return relationalExpression440;
    #undef	RETURN_TYPE_relationalExpression440
    #define	RETURN_TYPE_relationalExpression440 EmersonParser_relationalExpression_return

    EmersonParser_equalityOps_return equalityOps442;
    #undef	RETURN_TYPE_equalityOps442
    #define	RETURN_TYPE_equalityOps442 EmersonParser_equalityOps_return

    EmersonParser_relationalExpression_return relationalExpression444;
    #undef	RETURN_TYPE_relationalExpression444
    #define	RETURN_TYPE_relationalExpression444 EmersonParser_relationalExpression_return

    pANTLR3_BASE_TREE LTERM441_tree;
    pANTLR3_BASE_TREE LTERM443_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    /* Initialize rule variables
     */
    equalityExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(74)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM441       = NULL;
    LTERM443       = NULL;
    relationalExpression440.tree = NULL;

    equalityOps442.tree = NULL;

    relationalExpression444.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM441_tree   = NULL;
    LTERM443_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalExpression   = NULL;
    #define CREATE_stream_relationalExpression  if (stream_relationalExpression == NULL) {stream_relationalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpression"); }
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:474:2: ( ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* )
        // .//Emerson.g:474:4: ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
        {
            // .//Emerson.g:474:4: ( relationalExpression -> relationalExpression )
            // .//Emerson.g:474:5: relationalExpression
            {
                FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4020);
                relationalExpression440=relationalExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression440.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 474:26: -> relationalExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:474:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*

            for (;;)
            {
                int alt231=2;
                alt231 = cdfa231.predict(ctx, RECOGNIZER, ISTREAM, &cdfa231);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt231) 
                {
            	case 1:
            	    // .//Emerson.g:474:51: ( LTERM )* equalityOps ( LTERM )* relationalExpression
            	    {

            	        // .//Emerson.g:474:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt229=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA229_0 = LA(1);
            	                if ( (LA229_0 == LTERM) ) 
            	                {
            	                    alt229=1;
            	                }

            	            }
            	            switch (alt229) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM441 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4027); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM441, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop229;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop229: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpression4030);
            	        equalityOps442=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps442.tree, NULL); }

            	        // .//Emerson.g:474:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt230=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA230_0 = LA(1);
            	                if ( (LA230_0 == LTERM) ) 
            	                {
            	                    alt230=1;
            	                }

            	            }
            	            switch (alt230) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM443 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4032); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM443, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop230;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop230: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4035);
            	        relationalExpression444=relationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression444.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpression, equalityExpression, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 474:98: -> ^( equalityOps $equalityExpression relationalExpression )
            	        	{
            	        	    // .//Emerson.g:474:101: ^( equalityOps $equalityExpression relationalExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop231;	/* break out of the loop */
            	    break;
                }
            }
            loop231: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalExpression != NULL) stream_relationalExpression->free(stream_relationalExpression);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(74, equalityExpression_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityOps
 * .//Emerson.g:477:1: equalityOps : ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) );
 */
static EmersonParser_equalityOps_return
equalityOps(pEmersonParser ctx)
{   
    EmersonParser_equalityOps_return retval;
    ANTLR3_UINT32 equalityOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal445;
    pANTLR3_COMMON_TOKEN    string_literal446;
    pANTLR3_COMMON_TOKEN    string_literal447;
    pANTLR3_COMMON_TOKEN    string_literal448;

    pANTLR3_BASE_TREE string_literal445_tree;
    pANTLR3_BASE_TREE string_literal446_tree;
    pANTLR3_BASE_TREE string_literal447_tree;
    pANTLR3_BASE_TREE string_literal448_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;

    /* Initialize rule variables
     */
    equalityOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(75)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal445       = NULL;
    string_literal446       = NULL;
    string_literal447       = NULL;
    string_literal448       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal445_tree   = NULL;
    string_literal446_tree   = NULL;
    string_literal447_tree   = NULL;
    string_literal448_tree   = NULL;

    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:478:1: ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) )
            
            ANTLR3_UINT32 alt232;

            alt232=4;

            switch ( LA(1) ) 
            {
            case 177:
            	{
            		alt232=1;
            	}
                break;
            case 178:
            	{
            		alt232=2;
            	}
                break;
            case 179:
            	{
            		alt232=3;
            	}
                break;
            case 180:
            	{
            		alt232=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 232;
                EXCEPTION->state        = 0;


                goto ruleequalityOpsEx;
            }

            switch (alt232) 
            {
        	case 1:
        	    // .//Emerson.g:478:4: '=='
        	    {
        	        string_literal445 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_equalityOps4060); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, string_literal445, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 478:9: -> ^( EQUALS )
        	        	{
        	        	    // .//Emerson.g:478:12: ^( EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:479:3: '!='
        	    {
        	        string_literal446 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_equalityOps4070); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal446, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 479:8: -> ^( NOT_EQUALS )
        	        	{
        	        	    // .//Emerson.g:479:11: ^( NOT_EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_EQUALS, (pANTLR3_UINT8)"NOT_EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:480:3: '==='
        	    {
        	        string_literal447 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_equalityOps4080); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal447, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 480:9: -> ^( IDENT )
        	        	{
        	        	    // .//Emerson.g:480:12: ^( IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENT, (pANTLR3_UINT8)"IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:481:3: '!=='
        	    {
        	        string_literal448 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_equalityOps4090); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal448, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 481:9: -> ^( NOT_IDENT )
        	        	{
        	        	    // .//Emerson.g:481:12: ^( NOT_IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_IDENT, (pANTLR3_UINT8)"NOT_IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityOpsEx; /* Prevent compiler warnings */
    ruleequalityOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_177 != NULL) stream_177->free(stream_177);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(75, equalityOps_StartIndex); }
    return retval;
}
/* $ANTLR end equalityOps */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//Emerson.g:484:1: equalityExpressionNoIn : ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* ;
 */
static EmersonParser_equalityExpressionNoIn_return
equalityExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_equalityExpressionNoIn_return retval;
    ANTLR3_UINT32 equalityExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM450;
    pANTLR3_COMMON_TOKEN    LTERM452;
    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn449;
    #undef	RETURN_TYPE_relationalExpressionNoIn449
    #define	RETURN_TYPE_relationalExpressionNoIn449 EmersonParser_relationalExpressionNoIn_return

    EmersonParser_equalityOps_return equalityOps451;
    #undef	RETURN_TYPE_equalityOps451
    #define	RETURN_TYPE_equalityOps451 EmersonParser_equalityOps_return

    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn453;
    #undef	RETURN_TYPE_relationalExpressionNoIn453
    #define	RETURN_TYPE_relationalExpressionNoIn453 EmersonParser_relationalExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM450_tree;
    pANTLR3_BASE_TREE LTERM452_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpressionNoIn;
    /* Initialize rule variables
     */
    equalityExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(76)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM450       = NULL;
    LTERM452       = NULL;
    relationalExpressionNoIn449.tree = NULL;

    equalityOps451.tree = NULL;

    relationalExpressionNoIn453.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM450_tree   = NULL;
    LTERM452_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }
    stream_relationalExpressionNoIn   = NULL;
    #define CREATE_stream_relationalExpressionNoIn  if (stream_relationalExpressionNoIn == NULL) {stream_relationalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:485:2: ( ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* )
        // .//Emerson.g:485:4: ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
        {
            // .//Emerson.g:485:4: ( relationalExpressionNoIn -> relationalExpressionNoIn )
            // .//Emerson.g:485:5: relationalExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4107);
                relationalExpressionNoIn449=relationalExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn449.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 485:30: -> relationalExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:485:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*

            for (;;)
            {
                int alt235=2;
                alt235 = cdfa235.predict(ctx, RECOGNIZER, ISTREAM, &cdfa235);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt235) 
                {
            	case 1:
            	    // .//Emerson.g:485:59: ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn
            	    {

            	        // .//Emerson.g:485:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt233=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA233_0 = LA(1);
            	                if ( (LA233_0 == LTERM) ) 
            	                {
            	                    alt233=1;
            	                }

            	            }
            	            switch (alt233) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM450 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4114); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM450, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop233;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop233: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpressionNoIn4117);
            	        equalityOps451=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps451.tree, NULL); }

            	        // .//Emerson.g:485:78: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt234=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA234_0 = LA(1);
            	                if ( (LA234_0 == LTERM) ) 
            	                {
            	                    alt234=1;
            	                }

            	            }
            	            switch (alt234) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM452 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4119); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM452, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop234;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop234: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4122);
            	        relationalExpressionNoIn453=relationalExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn453.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpressionNoIn, equalityExpressionNoIn, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 485:110: -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:485:113: ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop235;	/* break out of the loop */
            	    break;
                }
            }
            loop235: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
        if (stream_relationalExpressionNoIn != NULL) stream_relationalExpressionNoIn->free(stream_relationalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(76, equalityExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//Emerson.g:489:1: relationalOps : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) );
 */
static EmersonParser_relationalOps_return
relationalOps(pEmersonParser ctx)
{   
    EmersonParser_relationalOps_return retval;
    ANTLR3_UINT32 relationalOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal454;
    pANTLR3_COMMON_TOKEN    char_literal455;
    pANTLR3_COMMON_TOKEN    string_literal456;
    pANTLR3_COMMON_TOKEN    string_literal457;
    pANTLR3_COMMON_TOKEN    string_literal458;
    pANTLR3_COMMON_TOKEN    string_literal459;

    pANTLR3_BASE_TREE char_literal454_tree;
    pANTLR3_BASE_TREE char_literal455_tree;
    pANTLR3_BASE_TREE string_literal456_tree;
    pANTLR3_BASE_TREE string_literal457_tree;
    pANTLR3_BASE_TREE string_literal458_tree;
    pANTLR3_BASE_TREE string_literal459_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;

    /* Initialize rule variables
     */
    relationalOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(77)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal454       = NULL;
    char_literal455       = NULL;
    string_literal456       = NULL;
    string_literal457       = NULL;
    string_literal458       = NULL;
    string_literal459       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal454_tree   = NULL;
    char_literal455_tree   = NULL;
    string_literal456_tree   = NULL;
    string_literal457_tree   = NULL;
    string_literal458_tree   = NULL;
    string_literal459_tree   = NULL;

    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:490:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) )
            
            ANTLR3_UINT32 alt236;

            alt236=6;

            switch ( LA(1) ) 
            {
            case 135:
            	{
            		alt236=1;
            	}
                break;
            case 181:
            	{
            		alt236=2;
            	}
                break;
            case 182:
            	{
            		alt236=3;
            	}
                break;
            case 183:
            	{
            		alt236=4;
            	}
                break;
            case 184:
            	{
            		alt236=5;
            	}
                break;
            case 141:
            	{
            		alt236=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 236;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt236) 
            {
        	case 1:
        	    // .//Emerson.g:490:3: '<'
        	    {
        	        char_literal454 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_relationalOps4147); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, char_literal454, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 490:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:490:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:491:3: '>'
        	    {
        	        char_literal455 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_relationalOps4158); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, char_literal455, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 491:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:491:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:492:3: '<='
        	    {
        	        string_literal456 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_relationalOps4169); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, string_literal456, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 492:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:492:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:493:3: '>='
        	    {
        	        string_literal457 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_relationalOps4179); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, string_literal457, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 493:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:493:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:494:3: 'instanceof'
        	    {
        	        string_literal458 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_relationalOps4189); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal458, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 494:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:494:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:495:3: 'in'
        	    {
        	        string_literal459 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_relationalOps4199); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal459, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 495:16: -> ^( IN )
        	        	{
        	        	    // .//Emerson.g:495:19: ^( IN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IN, (pANTLR3_UINT8)"IN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_141 != NULL) stream_141->free(stream_141);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(77, relationalOps_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//Emerson.g:498:1: relationalExpression : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* ;
 */
static EmersonParser_relationalExpression_return
relationalExpression(pEmersonParser ctx)
{   
    EmersonParser_relationalExpression_return retval;
    ANTLR3_UINT32 relationalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM461;
    pANTLR3_COMMON_TOKEN    LTERM463;
    EmersonParser_shiftExpression_return shiftExpression460;
    #undef	RETURN_TYPE_shiftExpression460
    #define	RETURN_TYPE_shiftExpression460 EmersonParser_shiftExpression_return

    EmersonParser_relationalOps_return relationalOps462;
    #undef	RETURN_TYPE_relationalOps462
    #define	RETURN_TYPE_relationalOps462 EmersonParser_relationalOps_return

    EmersonParser_shiftExpression_return shiftExpression464;
    #undef	RETURN_TYPE_shiftExpression464
    #define	RETURN_TYPE_shiftExpression464 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM461_tree;
    pANTLR3_BASE_TREE LTERM463_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOps;
    /* Initialize rule variables
     */
    relationalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(78)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM461       = NULL;
    LTERM463       = NULL;
    shiftExpression460.tree = NULL;

    relationalOps462.tree = NULL;

    shiftExpression464.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM461_tree   = NULL;
    LTERM463_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }
    stream_relationalOps   = NULL;
    #define CREATE_stream_relationalOps  if (stream_relationalOps == NULL) {stream_relationalOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:499:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* )
        // .//Emerson.g:499:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
        {
            // .//Emerson.g:499:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:499:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4224);
                shiftExpression460=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression460.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 499:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:499:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*

            for (;;)
            {
                int alt239=2;
                alt239 = cdfa239.predict(ctx, RECOGNIZER, ISTREAM, &cdfa239);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt239) 
                {
            	case 1:
            	    // .//Emerson.g:499:42: ( LTERM )* relationalOps ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:499:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt237=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA237_0 = LA(1);
            	                if ( (LA237_0 == LTERM) ) 
            	                {
            	                    alt237=1;
            	                }

            	            }
            	            switch (alt237) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM461 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4232); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM461, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop237;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop237: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression4235);
            	        relationalOps462=relationalOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOps; stream_relationalOps->add(stream_relationalOps, relationalOps462.tree, NULL); }

            	        // .//Emerson.g:499:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt238=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA238_0 = LA(1);
            	                if ( (LA238_0 == LTERM) ) 
            	                {
            	                    alt238=1;
            	                }

            	            }
            	            switch (alt238) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM463 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4237); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM463, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop238;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop238: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4240);
            	        shiftExpression464=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression464.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : shiftExpression, relationalOps, relationalExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 499:86: -> ^( relationalOps $relationalExpression shiftExpression )
            	        	{
            	        	    // .//Emerson.g:499:89: ^( relationalOps $relationalExpression shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOps == NULL ? NULL : stream_relationalOps->nextNode(stream_relationalOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop239;	/* break out of the loop */
            	    break;
                }
            }
            loop239: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
        if (stream_relationalOps != NULL) stream_relationalOps->free(stream_relationalOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(78, relationalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//Emerson.g:502:1: relationalOpsNoIn : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) );
 */
static EmersonParser_relationalOpsNoIn_return
relationalOpsNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalOpsNoIn_return retval;
    ANTLR3_UINT32 relationalOpsNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal465;
    pANTLR3_COMMON_TOKEN    char_literal466;
    pANTLR3_COMMON_TOKEN    string_literal467;
    pANTLR3_COMMON_TOKEN    string_literal468;
    pANTLR3_COMMON_TOKEN    string_literal469;

    pANTLR3_BASE_TREE char_literal465_tree;
    pANTLR3_BASE_TREE char_literal466_tree;
    pANTLR3_BASE_TREE string_literal467_tree;
    pANTLR3_BASE_TREE string_literal468_tree;
    pANTLR3_BASE_TREE string_literal469_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;

    /* Initialize rule variables
     */
    relationalOpsNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(79)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal465       = NULL;
    char_literal466       = NULL;
    string_literal467       = NULL;
    string_literal468       = NULL;
    string_literal469       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal465_tree   = NULL;
    char_literal466_tree   = NULL;
    string_literal467_tree   = NULL;
    string_literal468_tree   = NULL;
    string_literal469_tree   = NULL;

    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:503:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) )
            
            ANTLR3_UINT32 alt240;

            alt240=5;

            switch ( LA(1) ) 
            {
            case 135:
            	{
            		alt240=1;
            	}
                break;
            case 181:
            	{
            		alt240=2;
            	}
                break;
            case 182:
            	{
            		alt240=3;
            	}
                break;
            case 183:
            	{
            		alt240=4;
            	}
                break;
            case 184:
            	{
            		alt240=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 240;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt240) 
            {
        	case 1:
        	    // .//Emerson.g:503:3: '<'
        	    {
        	        char_literal465 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_relationalOpsNoIn4264); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, char_literal465, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 503:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:503:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:504:3: '>'
        	    {
        	        char_literal466 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_relationalOpsNoIn4275); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, char_literal466, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 504:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:504:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:505:3: '<='
        	    {
        	        string_literal467 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_relationalOpsNoIn4286); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, string_literal467, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 505:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:505:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:506:3: '>='
        	    {
        	        string_literal468 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_relationalOpsNoIn4296); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, string_literal468, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 506:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:506:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:507:3: 'instanceof'
        	    {
        	        string_literal469 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_relationalOpsNoIn4306); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal469, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 507:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:507:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(79, relationalOpsNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//Emerson.g:510:1: relationalExpressionNoIn : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* ;
 */
static EmersonParser_relationalExpressionNoIn_return
relationalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalExpressionNoIn_return retval;
    ANTLR3_UINT32 relationalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM471;
    pANTLR3_COMMON_TOKEN    LTERM473;
    EmersonParser_shiftExpression_return shiftExpression470;
    #undef	RETURN_TYPE_shiftExpression470
    #define	RETURN_TYPE_shiftExpression470 EmersonParser_shiftExpression_return

    EmersonParser_relationalOpsNoIn_return relationalOpsNoIn472;
    #undef	RETURN_TYPE_relationalOpsNoIn472
    #define	RETURN_TYPE_relationalOpsNoIn472 EmersonParser_relationalOpsNoIn_return

    EmersonParser_shiftExpression_return shiftExpression474;
    #undef	RETURN_TYPE_shiftExpression474
    #define	RETURN_TYPE_shiftExpression474 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM471_tree;
    pANTLR3_BASE_TREE LTERM473_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOpsNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    /* Initialize rule variables
     */
    relationalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(80)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM471       = NULL;
    LTERM473       = NULL;
    shiftExpression470.tree = NULL;

    relationalOpsNoIn472.tree = NULL;

    shiftExpression474.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM471_tree   = NULL;
    LTERM473_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalOpsNoIn   = NULL;
    #define CREATE_stream_relationalOpsNoIn  if (stream_relationalOpsNoIn == NULL) {stream_relationalOpsNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOpsNoIn"); }
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:511:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* )
        // .//Emerson.g:511:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
        {
            // .//Emerson.g:511:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:511:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4323);
                shiftExpression470=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression470.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 511:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:511:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*

            for (;;)
            {
                int alt243=2;
                alt243 = cdfa243.predict(ctx, RECOGNIZER, ISTREAM, &cdfa243);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt243) 
                {
            	case 1:
            	    // .//Emerson.g:511:42: ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:511:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt241=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA241_0 = LA(1);
            	                if ( (LA241_0 == LTERM) ) 
            	                {
            	                    alt241=1;
            	                }

            	            }
            	            switch (alt241) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM471 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4331); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM471, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop241;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop241: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4334);
            	        relationalOpsNoIn472=relationalOpsNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOpsNoIn; stream_relationalOpsNoIn->add(stream_relationalOpsNoIn, relationalOpsNoIn472.tree, NULL); }

            	        // .//Emerson.g:511:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt242=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA242_0 = LA(1);
            	                if ( (LA242_0 == LTERM) ) 
            	                {
            	                    alt242=1;
            	                }

            	            }
            	            switch (alt242) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM473 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4336); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM473, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop242;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop242: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4339);
            	        shiftExpression474=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression474.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpressionNoIn, relationalOpsNoIn, shiftExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 511:90: -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	{
            	        	    // .//Emerson.g:511:93: ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOpsNoIn == NULL ? NULL : stream_relationalOpsNoIn->nextNode(stream_relationalOpsNoIn), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop243;	/* break out of the loop */
            	    break;
                }
            }
            loop243: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalOpsNoIn != NULL) stream_relationalOpsNoIn->free(stream_relationalOpsNoIn);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(80, relationalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start shiftOps
 * .//Emerson.g:514:1: shiftOps : ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) );
 */
static EmersonParser_shiftOps_return
shiftOps(pEmersonParser ctx)
{   
    EmersonParser_shiftOps_return retval;
    ANTLR3_UINT32 shiftOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal475;
    pANTLR3_COMMON_TOKEN    string_literal476;
    pANTLR3_COMMON_TOKEN    string_literal477;

    pANTLR3_BASE_TREE string_literal475_tree;
    pANTLR3_BASE_TREE string_literal476_tree;
    pANTLR3_BASE_TREE string_literal477_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;

    /* Initialize rule variables
     */
    shiftOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(81)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal475       = NULL;
    string_literal476       = NULL;
    string_literal477       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal475_tree   = NULL;
    string_literal476_tree   = NULL;
    string_literal477_tree   = NULL;

    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:515:1: ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) )
            
            ANTLR3_UINT32 alt244;

            alt244=3;

            switch ( LA(1) ) 
            {
            case 185:
            	{
            		alt244=1;
            	}
                break;
            case 186:
            	{
            		alt244=2;
            	}
                break;
            case 187:
            	{
            		alt244=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 244;
                EXCEPTION->state        = 0;


                goto ruleshiftOpsEx;
            }

            switch (alt244) 
            {
        	case 1:
        	    // .//Emerson.g:515:2: '<<'
        	    {
        	        string_literal475 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_shiftOps4362); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal475, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 515:7: -> ^( LEFT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:515:10: ^( LEFT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT, (pANTLR3_UINT8)"LEFT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:516:3: '>>'
        	    {
        	        string_literal476 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_shiftOps4372); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, string_literal476, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 516:7: -> ^( RIGHT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:516:10: ^( RIGHT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT, (pANTLR3_UINT8)"RIGHT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:517:3: '>>>'
        	    {
        	        string_literal477 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_shiftOps4381); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, string_literal477, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 517:9: -> ^( TRIPLE_SHIFT )
        	        	{
        	        	    // .//Emerson.g:517:12: ^( TRIPLE_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT, (pANTLR3_UINT8)"TRIPLE_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftOpsEx; /* Prevent compiler warnings */
    ruleshiftOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_187 != NULL) stream_187->free(stream_187);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(81, shiftOps_StartIndex); }
    return retval;
}
/* $ANTLR end shiftOps */

/** 
 * $ANTLR start shiftExpression
 * .//Emerson.g:520:1: shiftExpression : ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* ;
 */
static EmersonParser_shiftExpression_return
shiftExpression(pEmersonParser ctx)
{   
    EmersonParser_shiftExpression_return retval;
    ANTLR3_UINT32 shiftExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM479;
    pANTLR3_COMMON_TOKEN    LTERM481;
    EmersonParser_additiveExpression_return additiveExpression478;
    #undef	RETURN_TYPE_additiveExpression478
    #define	RETURN_TYPE_additiveExpression478 EmersonParser_additiveExpression_return

    EmersonParser_shiftOps_return shiftOps480;
    #undef	RETURN_TYPE_shiftOps480
    #define	RETURN_TYPE_shiftOps480 EmersonParser_shiftOps_return

    EmersonParser_additiveExpression_return additiveExpression482;
    #undef	RETURN_TYPE_additiveExpression482
    #define	RETURN_TYPE_additiveExpression482 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM479_tree;
    pANTLR3_BASE_TREE LTERM481_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    /* Initialize rule variables
     */
    shiftExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(82)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM479       = NULL;
    LTERM481       = NULL;
    additiveExpression478.tree = NULL;

    shiftOps480.tree = NULL;

    additiveExpression482.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM479_tree   = NULL;
    LTERM481_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftOps   = NULL;
    #define CREATE_stream_shiftOps  if (stream_shiftOps == NULL) {stream_shiftOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftOps"); }
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:521:2: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* )
        // .//Emerson.g:521:4: ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
        {
            // .//Emerson.g:521:4: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:521:5: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4398);
                additiveExpression478=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression478.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 521:24: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:521:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*

            for (;;)
            {
                int alt247=2;
                alt247 = cdfa247.predict(ctx, RECOGNIZER, ISTREAM, &cdfa247);
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt247) 
                {
            	case 1:
            	    // .//Emerson.g:521:47: ( LTERM )* shiftOps ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:521:47: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt245=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA245_0 = LA(1);
            	                if ( (LA245_0 == LTERM) ) 
            	                {
            	                    alt245=1;
            	                }

            	            }
            	            switch (alt245) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM479 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4405); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM479, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop245;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop245: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftOps_in_shiftExpression4408);
            	        shiftOps480=shiftOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftOps; stream_shiftOps->add(stream_shiftOps, shiftOps480.tree, NULL); }

            	        // .//Emerson.g:521:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt246=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA246_0 = LA(1);
            	                if ( (LA246_0 == LTERM) ) 
            	                {
            	                    alt246=1;
            	                }

            	            }
            	            switch (alt246) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM481 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4410); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM481, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop246;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop246: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4413);
            	        additiveExpression482=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression482.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : shiftOps, additiveExpression, shiftExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 521:89: -> ^( shiftOps $shiftExpression additiveExpression )
            	        	{
            	        	    // .//Emerson.g:521:92: ^( shiftOps $shiftExpression additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_shiftOps == NULL ? NULL : stream_shiftOps->nextNode(stream_shiftOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop247;	/* break out of the loop */
            	    break;
                }
            }
            loop247: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftExpressionEx; /* Prevent compiler warnings */
    ruleshiftExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftOps != NULL) stream_shiftOps->free(stream_shiftOps);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(82, shiftExpression_StartIndex); }
    return retval;
}
/* $ANTLR end shiftExpression */

/** 
 * $ANTLR start addOps
 * .//Emerson.g:525:1: addOps : ( '+' -> ^( ADD ) | '-' -> ^( SUB ) );
 */
static EmersonParser_addOps_return
addOps(pEmersonParser ctx)
{   
    EmersonParser_addOps_return retval;
    ANTLR3_UINT32 addOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal483;
    pANTLR3_COMMON_TOKEN    char_literal484;

    pANTLR3_BASE_TREE char_literal483_tree;
    pANTLR3_BASE_TREE char_literal484_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;

    /* Initialize rule variables
     */
    addOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(83)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal483       = NULL;
    char_literal484       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal483_tree   = NULL;
    char_literal484_tree   = NULL;

    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:526:1: ( '+' -> ^( ADD ) | '-' -> ^( SUB ) )
            
            ANTLR3_UINT32 alt248;

            alt248=2;


            {
                int LA248_0 = LA(1);
                if ( (LA248_0 == 188) ) 
                {
                    alt248=1;
                }
                else if ( (LA248_0 == 189) ) 
                {
                    alt248=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 248;
                    EXCEPTION->state        = 0;


                    goto ruleaddOpsEx;
                }
            }
            switch (alt248) 
            {
        	case 1:
        	    // .//Emerson.g:526:3: '+'
        	    {
        	        char_literal483 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_addOps4439); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, char_literal483, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 526:7: -> ^( ADD )
        	        	{
        	        	    // .//Emerson.g:526:10: ^( ADD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:527:3: '-'
        	    {
        	        char_literal484 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_addOps4449); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, char_literal484, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 527:7: -> ^( SUB )
        	        	{
        	        	    // .//Emerson.g:527:10: ^( SUB )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleaddOpsEx; /* Prevent compiler warnings */
    ruleaddOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_189 != NULL) stream_189->free(stream_189);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(83, addOps_StartIndex); }
    return retval;
}
/* $ANTLR end addOps */

/** 
 * $ANTLR start additiveExpression
 * .//Emerson.g:531:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* ;
 */
static EmersonParser_additiveExpression_return
additiveExpression(pEmersonParser ctx)
{   
    EmersonParser_additiveExpression_return retval;
    ANTLR3_UINT32 additiveExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM486;
    pANTLR3_COMMON_TOKEN    LTERM488;
    EmersonParser_multiplicativeExpression_return multiplicativeExpression485;
    #undef	RETURN_TYPE_multiplicativeExpression485
    #define	RETURN_TYPE_multiplicativeExpression485 EmersonParser_multiplicativeExpression_return

    EmersonParser_addOps_return addOps487;
    #undef	RETURN_TYPE_addOps487
    #define	RETURN_TYPE_addOps487 EmersonParser_addOps_return

    EmersonParser_multiplicativeExpression_return multiplicativeExpression489;
    #undef	RETURN_TYPE_multiplicativeExpression489
    #define	RETURN_TYPE_multiplicativeExpression489 EmersonParser_multiplicativeExpression_return

    pANTLR3_BASE_TREE LTERM486_tree;
    pANTLR3_BASE_TREE LTERM488_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_addOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicativeExpression;
    /* Initialize rule variables
     */
    additiveExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(84)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM486       = NULL;
    LTERM488       = NULL;
    multiplicativeExpression485.tree = NULL;

    addOps487.tree = NULL;

    multiplicativeExpression489.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM486_tree   = NULL;
    LTERM488_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_addOps   = NULL;
    #define CREATE_stream_addOps  if (stream_addOps == NULL) {stream_addOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule addOps"); }
    stream_multiplicativeExpression   = NULL;
    #define CREATE_stream_multiplicativeExpression  if (stream_multiplicativeExpression == NULL) {stream_multiplicativeExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicativeExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:532:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* )
        // .//Emerson.g:532:4: ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
        {
            // .//Emerson.g:532:4: ( multiplicativeExpression -> multiplicativeExpression )
            // .//Emerson.g:532:5: multiplicativeExpression
            {
                FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4467);
                multiplicativeExpression485=multiplicativeExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression485.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : multiplicativeExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 532:30: -> multiplicativeExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:532:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*

            for (;;)
            {
                int alt251=2;
                alt251 = cdfa251.predict(ctx, RECOGNIZER, ISTREAM, &cdfa251);
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt251) 
                {
            	case 1:
            	    // .//Emerson.g:532:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
            	    {

            	        // .//Emerson.g:532:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt249=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA249_0 = LA(1);
            	                if ( (LA249_0 == LTERM) ) 
            	                {
            	                    alt249=1;
            	                }

            	            }
            	            switch (alt249) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM486 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4474); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM486, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop249;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop249: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_addOps_in_additiveExpression4477);
            	        addOps487=addOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_addOps; stream_addOps->add(stream_addOps, addOps487.tree, NULL); }

            	        // .//Emerson.g:532:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt250=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA250_0 = LA(1);
            	                if ( (LA250_0 == LTERM) ) 
            	                {
            	                    alt250=1;
            	                }

            	            }
            	            switch (alt250) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM488 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4479); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM488, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop250;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop250: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4482);
            	        multiplicativeExpression489=multiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression489.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : additiveExpression, multiplicativeExpression, addOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 532:105: -> ^( addOps $additiveExpression multiplicativeExpression )
            	        	{
            	        	    // .//Emerson.g:532:108: ^( addOps $additiveExpression multiplicativeExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_addOps == NULL ? NULL : stream_addOps->nextNode(stream_addOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop251;	/* break out of the loop */
            	    break;
                }
            }
            loop251: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_addOps != NULL) stream_addOps->free(stream_addOps);
        if (stream_multiplicativeExpression != NULL) stream_multiplicativeExpression->free(stream_multiplicativeExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(84, additiveExpression_StartIndex); }
    return retval;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multOps
 * .//Emerson.g:535:1: multOps : ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) );
 */
static EmersonParser_multOps_return
multOps(pEmersonParser ctx)
{   
    EmersonParser_multOps_return retval;
    ANTLR3_UINT32 multOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal490;
    pANTLR3_COMMON_TOKEN    char_literal491;
    pANTLR3_COMMON_TOKEN    char_literal492;

    pANTLR3_BASE_TREE char_literal490_tree;
    pANTLR3_BASE_TREE char_literal491_tree;
    pANTLR3_BASE_TREE char_literal492_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    multOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(85)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal490       = NULL;
    char_literal491       = NULL;
    char_literal492       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal490_tree   = NULL;
    char_literal491_tree   = NULL;
    char_literal492_tree   = NULL;

    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:536:1: ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) )
            
            ANTLR3_UINT32 alt252;

            alt252=3;

            switch ( LA(1) ) 
            {
            case 190:
            	{
            		alt252=1;
            	}
                break;
            case 191:
            	{
            		alt252=2;
            	}
                break;
            case 192:
            	{
            		alt252=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 252;
                EXCEPTION->state        = 0;


                goto rulemultOpsEx;
            }

            switch (alt252) 
            {
        	case 1:
        	    // .//Emerson.g:536:3: '*'
        	    {
        	        char_literal490 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_multOps4507); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal490, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 536:7: -> ^( MULT )
        	        	{
        	        	    // .//Emerson.g:536:10: ^( MULT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT, (pANTLR3_UINT8)"MULT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:537:3: '/'
        	    {
        	        char_literal491 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_multOps4517); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal491, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 537:7: -> ^( DIV )
        	        	{
        	        	    // .//Emerson.g:537:10: ^( DIV )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:538:3: '%'
        	    {
        	        char_literal492 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_multOps4527); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal492, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 538:7: -> ^( MOD )
        	        	{
        	        	    // .//Emerson.g:538:10: ^( MOD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultOpsEx; /* Prevent compiler warnings */
    rulemultOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(85, multOps_StartIndex); }
    return retval;
}
/* $ANTLR end multOps */

/** 
 * $ANTLR start multiplicativeExpression
 * .//Emerson.g:541:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* ;
 */
static EmersonParser_multiplicativeExpression_return
multiplicativeExpression(pEmersonParser ctx)
{   
    EmersonParser_multiplicativeExpression_return retval;
    ANTLR3_UINT32 multiplicativeExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM494;
    pANTLR3_COMMON_TOKEN    LTERM496;
    EmersonParser_unaryExpression_return unaryExpression493;
    #undef	RETURN_TYPE_unaryExpression493
    #define	RETURN_TYPE_unaryExpression493 EmersonParser_unaryExpression_return

    EmersonParser_multOps_return multOps495;
    #undef	RETURN_TYPE_multOps495
    #define	RETURN_TYPE_multOps495 EmersonParser_multOps_return

    EmersonParser_unaryExpression_return unaryExpression497;
    #undef	RETURN_TYPE_unaryExpression497
    #define	RETURN_TYPE_unaryExpression497 EmersonParser_unaryExpression_return

    pANTLR3_BASE_TREE LTERM494_tree;
    pANTLR3_BASE_TREE LTERM496_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    /* Initialize rule variables
     */
    multiplicativeExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(86)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM494       = NULL;
    LTERM496       = NULL;
    unaryExpression493.tree = NULL;

    multOps495.tree = NULL;

    unaryExpression497.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM494_tree   = NULL;
    LTERM496_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_multOps   = NULL;
    #define CREATE_stream_multOps  if (stream_multOps == NULL) {stream_multOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multOps"); }
    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:542:2: ( ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* )
        // .//Emerson.g:542:4: ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
        {
            // .//Emerson.g:542:4: ( unaryExpression -> unaryExpression )
            // .//Emerson.g:542:5: unaryExpression
            {
                FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4544);
                unaryExpression493=unaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression493.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : unaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 542:21: -> unaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:542:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*

            for (;;)
            {
                int alt255=2;
                alt255 = cdfa255.predict(ctx, RECOGNIZER, ISTREAM, &cdfa255);
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt255) 
                {
            	case 1:
            	    // .//Emerson.g:542:42: ( LTERM )* multOps ( LTERM )* unaryExpression
            	    {

            	        // .//Emerson.g:542:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt253=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA253_0 = LA(1);
            	                if ( (LA253_0 == LTERM) ) 
            	                {
            	                    alt253=1;
            	                }

            	            }
            	            switch (alt253) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM494 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4552); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM494, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop253;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop253: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multOps_in_multiplicativeExpression4555);
            	        multOps495=multOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multOps; stream_multOps->add(stream_multOps, multOps495.tree, NULL); }

            	        // .//Emerson.g:542:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt254=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA254_0 = LA(1);
            	                if ( (LA254_0 == LTERM) ) 
            	                {
            	                    alt254=1;
            	                }

            	            }
            	            switch (alt254) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM496 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4557); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM496, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop254;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop254: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4560);
            	        unaryExpression497=unaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression497.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : multiplicativeExpression, multOps, unaryExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 542:80: -> ^( multOps $multiplicativeExpression unaryExpression )
            	        	{
            	        	    // .//Emerson.g:542:83: ^( multOps $multiplicativeExpression unaryExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_multOps == NULL ? NULL : stream_multOps->nextNode(stream_multOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop255;	/* break out of the loop */
            	    break;
                }
            }
            loop255: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_multOps != NULL) stream_multOps->free(stream_multOps);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(86, multiplicativeExpression_StartIndex); }
    return retval;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start postfixExpression
 * .//Emerson.g:546:1: postfixExpression : ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )? ;
 */
static EmersonParser_postfixExpression_return
postfixExpression(pEmersonParser ctx)
{   
    EmersonParser_postfixExpression_return retval;
    ANTLR3_UINT32 postfixExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal499;
    pANTLR3_COMMON_TOKEN    string_literal500;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression498;
    #undef	RETURN_TYPE_leftHandSideExpression498
    #define	RETURN_TYPE_leftHandSideExpression498 EmersonParser_leftHandSideExpression_return

    pANTLR3_BASE_TREE string_literal499_tree;
    pANTLR3_BASE_TREE string_literal500_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    postfixExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(87)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal499       = NULL;
    string_literal500       = NULL;
    leftHandSideExpression498.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal499_tree   = NULL;
    string_literal500_tree   = NULL;

    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:547:2: ( ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )? )
        // .//Emerson.g:547:3: ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
        {
            // .//Emerson.g:547:3: ( leftHandSideExpression -> leftHandSideExpression )
            // .//Emerson.g:547:4: leftHandSideExpression
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression4585);
                leftHandSideExpression498=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulepostfixExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression498.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : leftHandSideExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 547:27: -> leftHandSideExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:547:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
            {
                int alt256=3;
                alt256 = cdfa256.predict(ctx, RECOGNIZER, ISTREAM, &cdfa256);
                if  (HASEXCEPTION())
                {
                    goto rulepostfixExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt256) 
                {
            	case 1:
            	    // .//Emerson.g:547:55: ( '--' -> $postfixExpression '--' )
            	    {
            	        // .//Emerson.g:547:55: ( '--' -> $postfixExpression '--' )
            	        // .//Emerson.g:547:56: '--'
            	        {
            	            string_literal499 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_postfixExpression4594); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulepostfixExpressionEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, string_literal499, NULL); }


            	             
            	            /* AST REWRITE
            	             * elements          : postfixExpression, 193
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 547:61: -> $postfixExpression '--'
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_193 == NULL ? NULL : stream_193->nextNode(stream_193));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:547:91: ( '++' -> $postfixExpression '++' )
            	    {
            	        // .//Emerson.g:547:91: ( '++' -> $postfixExpression '++' )
            	        // .//Emerson.g:547:92: '++'
            	        {
            	            string_literal500 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_postfixExpression4607); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulepostfixExpressionEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, string_literal500, NULL); }


            	             
            	            /* AST REWRITE
            	             * elements          : 194, postfixExpression
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 547:97: -> $postfixExpression '++'
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_194 == NULL ? NULL : stream_194->nextNode(stream_194));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(87, postfixExpression_StartIndex); }
    return retval;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start unaryOps
 * .//Emerson.g:551:1: unaryOps : ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) );
 */
static EmersonParser_unaryOps_return
unaryOps(pEmersonParser ctx)
{   
    EmersonParser_unaryOps_return retval;
    ANTLR3_UINT32 unaryOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal501;
    pANTLR3_COMMON_TOKEN    string_literal502;
    pANTLR3_COMMON_TOKEN    string_literal503;
    pANTLR3_COMMON_TOKEN    string_literal504;
    pANTLR3_COMMON_TOKEN    string_literal505;
    pANTLR3_COMMON_TOKEN    char_literal506;
    pANTLR3_COMMON_TOKEN    char_literal507;
    pANTLR3_COMMON_TOKEN    char_literal508;
    pANTLR3_COMMON_TOKEN    char_literal509;

    pANTLR3_BASE_TREE string_literal501_tree;
    pANTLR3_BASE_TREE string_literal502_tree;
    pANTLR3_BASE_TREE string_literal503_tree;
    pANTLR3_BASE_TREE string_literal504_tree;
    pANTLR3_BASE_TREE string_literal505_tree;
    pANTLR3_BASE_TREE char_literal506_tree;
    pANTLR3_BASE_TREE char_literal507_tree;
    pANTLR3_BASE_TREE char_literal508_tree;
    pANTLR3_BASE_TREE char_literal509_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;

    /* Initialize rule variables
     */
    unaryOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(88)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal501       = NULL;
    string_literal502       = NULL;
    string_literal503       = NULL;
    string_literal504       = NULL;
    string_literal505       = NULL;
    char_literal506       = NULL;
    char_literal507       = NULL;
    char_literal508       = NULL;
    char_literal509       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal501_tree   = NULL;
    string_literal502_tree   = NULL;
    string_literal503_tree   = NULL;
    string_literal504_tree   = NULL;
    string_literal505_tree   = NULL;
    char_literal506_tree   = NULL;
    char_literal507_tree   = NULL;
    char_literal508_tree   = NULL;
    char_literal509_tree   = NULL;

    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 
    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:552:1: ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) )
            
            ANTLR3_UINT32 alt257;

            alt257=9;

            switch ( LA(1) ) 
            {
            case 195:
            	{
            		alt257=1;
            	}
                break;
            case 196:
            	{
            		alt257=2;
            	}
                break;
            case 197:
            	{
            		alt257=3;
            	}
                break;
            case 194:
            	{
            		alt257=4;
            	}
                break;
            case 193:
            	{
            		alt257=5;
            	}
                break;
            case 188:
            	{
            		alt257=6;
            	}
                break;
            case 189:
            	{
            		alt257=7;
            	}
                break;
            case 198:
            	{
            		alt257=8;
            	}
                break;
            case 199:
            	{
            		alt257=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 257;
                EXCEPTION->state        = 0;


                goto ruleunaryOpsEx;
            }

            switch (alt257) 
            {
        	case 1:
        	    // .//Emerson.g:552:2: 'delete'
        	    {
        	        string_literal501 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_unaryOps4627); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal501, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 552:11: -> ^( DELETE )
        	        	{
        	        	    // .//Emerson.g:552:14: ^( DELETE )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELETE, (pANTLR3_UINT8)"DELETE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:553:3: 'void'
        	    {
        	        string_literal502 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_unaryOps4637); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, string_literal502, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 553:10: -> ^( VOID )
        	        	{
        	        	    // .//Emerson.g:553:13: ^( VOID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VOID, (pANTLR3_UINT8)"VOID"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:554:3: 'typeof'
        	    {
        	        string_literal503 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_unaryOps4647); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, string_literal503, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 554:12: -> ^( TYPEOF )
        	        	{
        	        	    // .//Emerson.g:554:15: ^( TYPEOF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TYPEOF, (pANTLR3_UINT8)"TYPEOF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:555:3: '++'
        	    {
        	        string_literal504 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_unaryOps4657); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, string_literal504, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 555:9: -> ^( PLUSPLUS )
        	        	{
        	        	    // .//Emerson.g:555:12: ^( PLUSPLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:556:3: '--'
        	    {
        	        string_literal505 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_unaryOps4668); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, string_literal505, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 556:9: -> ^( MINUSMINUS )
        	        	{
        	        	    // .//Emerson.g:556:12: ^( MINUSMINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:557:3: '+'
        	    {
        	        char_literal506 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_unaryOps4679); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, char_literal506, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 557:9: -> ^( UNARY_PLUS )
        	        	{
        	        	    // .//Emerson.g:557:12: ^( UNARY_PLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_PLUS, (pANTLR3_UINT8)"UNARY_PLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:558:3: '-'
        	    {
        	        char_literal507 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_unaryOps4691); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, char_literal507, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 558:9: -> ^( UNARY_MINUS )
        	        	{
        	        	    // .//Emerson.g:558:12: ^( UNARY_MINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_MINUS, (pANTLR3_UINT8)"UNARY_MINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:559:3: '~'
        	    {
        	        char_literal508 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_unaryOps4703); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, char_literal508, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 559:9: -> ^( COMPLEMENT )
        	        	{
        	        	    // .//Emerson.g:559:12: ^( COMPLEMENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMPLEMENT, (pANTLR3_UINT8)"COMPLEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:560:3: '!'
        	    {
        	        char_literal509 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_unaryOps4715); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, char_literal509, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 560:9: -> ^( NOT )
        	        	{
        	        	    // .//Emerson.g:560:12: ^( NOT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_199 != NULL) stream_199->free(stream_199);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_196 != NULL) stream_196->free(stream_196);
        if (stream_193 != NULL) stream_193->free(stream_193);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(88, unaryOps_StartIndex); }
    return retval;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//Emerson.g:564:1: unaryExpression : ( postfixExpression -> ^( POSTEXPR postfixExpression ) | unaryOps e= unaryExpression -> ^( unaryOps $e) );
 */
static EmersonParser_unaryExpression_return
unaryExpression(pEmersonParser ctx)
{   
    EmersonParser_unaryExpression_return retval;
    ANTLR3_UINT32 unaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_unaryExpression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e EmersonParser_unaryExpression_return

    EmersonParser_postfixExpression_return postfixExpression510;
    #undef	RETURN_TYPE_postfixExpression510
    #define	RETURN_TYPE_postfixExpression510 EmersonParser_postfixExpression_return

    EmersonParser_unaryOps_return unaryOps511;
    #undef	RETURN_TYPE_unaryOps511
    #define	RETURN_TYPE_unaryOps511 EmersonParser_unaryOps_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_postfixExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryOps;
    /* Initialize rule variables
     */
    unaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(89)) )
    {
    	retval.start = 0;

        return retval; 
    }
    e.tree = NULL;

    postfixExpression510.tree = NULL;

    unaryOps511.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }
    stream_postfixExpression   = NULL;
    #define CREATE_stream_postfixExpression  if (stream_postfixExpression == NULL) {stream_postfixExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule postfixExpression"); }
    stream_unaryOps   = NULL;
    #define CREATE_stream_unaryOps  if (stream_unaryOps == NULL) {stream_unaryOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryOps"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:565:2: ( postfixExpression -> ^( POSTEXPR postfixExpression ) | unaryOps e= unaryExpression -> ^( unaryOps $e) )
            
            ANTLR3_UINT32 alt258;

            alt258=2;


            {
                int LA258_0 = LA(1);
                if ( (((LA258_0 >= Identifier) && (LA258_0 <= NumericLiteral)) || ((LA258_0 >= 124) && (LA258_0 <= 125)) || LA258_0 == 128 || ((LA258_0 >= 156) && (LA258_0 <= 157)) || ((LA258_0 >= 200) && (LA258_0 <= 203))) ) 
                {
                    alt258=1;
                }
                else if ( (((LA258_0 >= 188) && (LA258_0 <= 189)) || ((LA258_0 >= 193) && (LA258_0 <= 199))) ) 
                {
                    alt258=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 258;
                    EXCEPTION->state        = 0;


                    goto ruleunaryExpressionEx;
                }
            }
            switch (alt258) 
            {
        	case 1:
        	    // .//Emerson.g:565:4: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression4734);
        	        postfixExpression510=postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_postfixExpression; stream_postfixExpression->add(stream_postfixExpression, postfixExpression510.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : postfixExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 565:22: -> ^( POSTEXPR postfixExpression )
        	        	{
        	        	    // .//Emerson.g:565:25: ^( POSTEXPR postfixExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POSTEXPR, (pANTLR3_UINT8)"POSTEXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_postfixExpression == NULL ? NULL : stream_postfixExpression->nextTree(stream_postfixExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:566:4: unaryOps e= unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryOps_in_unaryExpression4747);
        	        unaryOps511=unaryOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryOps; stream_unaryOps->add(stream_unaryOps, unaryOps511.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression4751);
        	        e=unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : unaryOps, e
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 566:31: -> ^( unaryOps $e)
        	        	{
        	        	    // .//Emerson.g:566:34: ^( unaryOps $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_unaryOps == NULL ? NULL : stream_unaryOps->nextNode(stream_unaryOps), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
        if (stream_postfixExpression != NULL) stream_postfixExpression->free(stream_postfixExpression);
        if (stream_unaryOps != NULL) stream_unaryOps->free(stream_unaryOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(89, unaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start primaryExpression
 * .//Emerson.g:570:1: primaryExpression : ( 'this' | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static EmersonParser_primaryExpression_return
primaryExpression(pEmersonParser ctx)
{   
    EmersonParser_primaryExpression_return retval;
    ANTLR3_UINT32 primaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal512;
    pANTLR3_COMMON_TOKEN    Identifier513;
    pANTLR3_COMMON_TOKEN    char_literal517;
    pANTLR3_COMMON_TOKEN    LTERM518;
    pANTLR3_COMMON_TOKEN    LTERM520;
    pANTLR3_COMMON_TOKEN    char_literal521;
    EmersonParser_literal_return literal514;
    #undef	RETURN_TYPE_literal514
    #define	RETURN_TYPE_literal514 EmersonParser_literal_return

    EmersonParser_arrayLiteral_return arrayLiteral515;
    #undef	RETURN_TYPE_arrayLiteral515
    #define	RETURN_TYPE_arrayLiteral515 EmersonParser_arrayLiteral_return

    EmersonParser_objectLiteral_return objectLiteral516;
    #undef	RETURN_TYPE_objectLiteral516
    #define	RETURN_TYPE_objectLiteral516 EmersonParser_objectLiteral_return

    EmersonParser_expression_return expression519;
    #undef	RETURN_TYPE_expression519
    #define	RETURN_TYPE_expression519 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal512_tree;
    pANTLR3_BASE_TREE Identifier513_tree;
    pANTLR3_BASE_TREE char_literal517_tree;
    pANTLR3_BASE_TREE LTERM518_tree;
    pANTLR3_BASE_TREE LTERM520_tree;
    pANTLR3_BASE_TREE char_literal521_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    primaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(90)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal512       = NULL;
    Identifier513       = NULL;
    char_literal517       = NULL;
    LTERM518       = NULL;
    LTERM520       = NULL;
    char_literal521       = NULL;
    literal514.tree = NULL;

    arrayLiteral515.tree = NULL;

    objectLiteral516.tree = NULL;

    expression519.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal512_tree   = NULL;
    Identifier513_tree   = NULL;
    char_literal517_tree   = NULL;
    LTERM518_tree   = NULL;
    LTERM520_tree   = NULL;
    char_literal521_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:571:2: ( 'this' | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) )
            
            ANTLR3_UINT32 alt261;

            alt261=6;

            switch ( LA(1) ) 
            {
            case 200:
            	{
            		alt261=1;
            	}
                break;
            case Identifier:
            	{
            		alt261=2;
            	}
                break;
            case StringLiteral:
            case NumericLiteral:
            case 201:
            case 202:
            case 203:
            	{
            		alt261=3;
            	}
                break;
            case 157:
            	{
            		alt261=4;
            	}
                break;
            case 128:
            	{
            		alt261=5;
            	}
                break;
            case 125:
            	{
            		alt261=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 261;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt261) 
            {
        	case 1:
        	    // .//Emerson.g:571:4: 'this'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal512 = (pANTLR3_COMMON_TOKEN) MATCHT(200, &FOLLOW_200_in_primaryExpression4773); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal512_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal512));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal512_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:572:4: Identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Identifier513 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression4778); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Identifier513_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Identifier513));
        	        ADAPTOR->addChild(ADAPTOR, root_0, Identifier513_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:573:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression4783);
        	        literal514=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal514.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:574:4: arrayLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression4788);
        	        arrayLiteral515=arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arrayLiteral515.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:575:4: objectLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression4793);
        	        objectLiteral516=objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, objectLiteral516.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:576:4: '(' ( LTERM )* expression ( LTERM )* ')'
        	    {
        	        char_literal517 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_primaryExpression4798); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal517, NULL); }


        	        // .//Emerson.g:576:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt259=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA259_0 = LA(1);
        	                if ( (LA259_0 == LTERM) ) 
        	                {
        	                    alt259=1;
        	                }

        	            }
        	            switch (alt259) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM518 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression4800); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM518, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop259;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop259: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression4803);
        	        expression519=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression519.tree, NULL); }

        	        // .//Emerson.g:576:26: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt260=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA260_0 = LA(1);
        	                if ( (LA260_0 == LTERM) ) 
        	                {
        	                    alt260=1;
        	                }

        	            }
        	            switch (alt260) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM520 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression4805); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM520, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop260;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop260: ; /* Jump out to here if this rule does not match */

        	        char_literal521 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_primaryExpression4808); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal521, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 576:37: -> ^( PAREN expression )
        	        	{
        	        	    // .//Emerson.g:576:40: ^( PAREN expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAREN, (pANTLR3_UINT8)"PAREN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(90, primaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//Emerson.g:580:1: arrayLiteral : ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) );
 */
static EmersonParser_arrayLiteral_return
arrayLiteral(pEmersonParser ctx)
{   
    EmersonParser_arrayLiteral_return retval;
    ANTLR3_UINT32 arrayLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal522;
    pANTLR3_COMMON_TOKEN    LTERM523;
    pANTLR3_COMMON_TOKEN    LTERM525;
    pANTLR3_COMMON_TOKEN    char_literal526;
    pANTLR3_COMMON_TOKEN    char_literal527;
    pANTLR3_COMMON_TOKEN    LTERM528;
    pANTLR3_COMMON_TOKEN    char_literal529;
    pANTLR3_COMMON_TOKEN    LTERM530;
    pANTLR3_COMMON_TOKEN    LTERM531;
    pANTLR3_COMMON_TOKEN    char_literal532;
    EmersonParser_assignmentExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression524;
    #undef	RETURN_TYPE_assignmentExpression524
    #define	RETURN_TYPE_assignmentExpression524 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal522_tree;
    pANTLR3_BASE_TREE LTERM523_tree;
    pANTLR3_BASE_TREE LTERM525_tree;
    pANTLR3_BASE_TREE char_literal526_tree;
    pANTLR3_BASE_TREE char_literal527_tree;
    pANTLR3_BASE_TREE LTERM528_tree;
    pANTLR3_BASE_TREE char_literal529_tree;
    pANTLR3_BASE_TREE LTERM530_tree;
    pANTLR3_BASE_TREE LTERM531_tree;
    pANTLR3_BASE_TREE char_literal532_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arrayLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(91)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal522       = NULL;
    LTERM523       = NULL;
    LTERM525       = NULL;
    char_literal526       = NULL;
    char_literal527       = NULL;
    LTERM528       = NULL;
    char_literal529       = NULL;
    LTERM530       = NULL;
    LTERM531       = NULL;
    char_literal532       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    assignmentExpression524.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal522_tree   = NULL;
    LTERM523_tree   = NULL;
    LTERM525_tree   = NULL;
    char_literal526_tree   = NULL;
    char_literal527_tree   = NULL;
    LTERM528_tree   = NULL;
    char_literal529_tree   = NULL;
    LTERM530_tree   = NULL;
    LTERM531_tree   = NULL;
    char_literal532_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:581:3: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt269;

            alt269=2;


            {
                int LA269_0 = LA(1);
                if ( (LA269_0 == 157) ) 
                {

                    {
                        int LA269_1 = LA(2);
                        if ( (synpred321_Emerson(ctx)) ) 
                        {
                            alt269=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt269=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 269;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 269;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt269) 
            {
        	case 1:
        	    // .//Emerson.g:581:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
        	    {
        	        char_literal522 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_arrayLiteral4832); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, char_literal522, NULL); }


        	        // .//Emerson.g:581:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt262=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA262_0 = LA(1);
        	                if ( (LA262_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA262_2 = LA(2);
        	                        if ( (synpred318_Emerson(ctx)) ) 
        	                        {
        	                            alt262=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt262) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM523 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4834); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM523, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop262;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop262: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:581:16: ( assignmentExpression )?
        	        {
        	            int alt263=2;
        	            {
        	                int LA263_0 = LA(1);
        	                if ( (((LA263_0 >= Identifier) && (LA263_0 <= NumericLiteral)) || ((LA263_0 >= 124) && (LA263_0 <= 125)) || LA263_0 == 128 || ((LA263_0 >= 156) && (LA263_0 <= 157)) || ((LA263_0 >= 188) && (LA263_0 <= 189)) || ((LA263_0 >= 193) && (LA263_0 <= 203))) ) 
        	                {
        	                    alt263=1;
        	                }
        	            }
        	            switch (alt263) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:581:17: assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4838);
        	        	        assignmentExpression524=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression524.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:581:40: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt264=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA264_0 = LA(1);
        	                if ( (LA264_0 == LTERM) ) 
        	                {
        	                    alt264=1;
        	                }

        	            }
        	            switch (alt264) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM525 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4842); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM525, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop264;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop264: ; /* Jump out to here if this rule does not match */

        	        char_literal526 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_arrayLiteral4845); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal526, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 581:51: -> ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	{
        	        	    // .//Emerson.g:581:54: ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        // .//Emerson.g:581:70: ( assignmentExpression )?
        	        	        {
        	        	        	if ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if ( stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:582:4: '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']'
        	    {
        	        char_literal527 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_arrayLiteral4859); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, char_literal527, NULL); }


        	        // .//Emerson.g:582:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt265=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA265_0 = LA(1);
        	                if ( (LA265_0 == LTERM) ) 
        	                {
        	                    alt265=1;
        	                }

        	            }
        	            switch (alt265) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM528 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4861); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM528, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop265;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop265: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4866);
        	        e1=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e1.tree, NULL); }

        	        // .//Emerson.g:582:39: ( ',' ( LTERM )* e2= assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt267=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA267_0 = LA(1);
        	                if ( (LA267_0 == 126) ) 
        	                {
        	                    alt267=1;
        	                }

        	            }
        	            switch (alt267) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:582:40: ',' ( LTERM )* e2= assignmentExpression
        	        	    {
        	        	        char_literal529 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_arrayLiteral4869); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal529, NULL); }


        	        	        // .//Emerson.g:582:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt266=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA266_0 = LA(1);
        	        	                if ( (LA266_0 == LTERM) ) 
        	        	                {
        	        	                    alt266=1;
        	        	                }

        	        	            }
        	        	            switch (alt266) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM530 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4871); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulearrayLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM530, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop266;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop266: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4876);
        	        	        e2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop267;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop267: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:582:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt268=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA268_0 = LA(1);
        	                if ( (LA268_0 == LTERM) ) 
        	                {
        	                    alt268=1;
        	                }

        	            }
        	            switch (alt268) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM531 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4880); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM531, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop268;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop268: ; /* Jump out to here if this rule does not match */

        	        char_literal532 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_arrayLiteral4883); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal532, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 582:88: -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	{
        	        	    // .//Emerson.g:582:91: ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
        	        	        // .//Emerson.g:582:128: ( assignmentExpression )*
        	        	        {
        	        	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(91, arrayLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//Emerson.g:586:1: objectLiteral : ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static EmersonParser_objectLiteral_return
objectLiteral(pEmersonParser ctx)
{   
    EmersonParser_objectLiteral_return retval;
    ANTLR3_UINT32 objectLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal533;
    pANTLR3_COMMON_TOKEN    LTERM534;
    pANTLR3_COMMON_TOKEN    LTERM536;
    pANTLR3_COMMON_TOKEN    char_literal537;
    pANTLR3_COMMON_TOKEN    char_literal538;
    pANTLR3_COMMON_TOKEN    LTERM539;
    pANTLR3_COMMON_TOKEN    char_literal540;
    pANTLR3_COMMON_TOKEN    LTERM541;
    pANTLR3_COMMON_TOKEN    LTERM542;
    pANTLR3_COMMON_TOKEN    char_literal543;
    EmersonParser_propertyNameAndValue_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return propertyNameAndValue535;
    #undef	RETURN_TYPE_propertyNameAndValue535
    #define	RETURN_TYPE_propertyNameAndValue535 EmersonParser_propertyNameAndValue_return

    pANTLR3_BASE_TREE char_literal533_tree;
    pANTLR3_BASE_TREE LTERM534_tree;
    pANTLR3_BASE_TREE LTERM536_tree;
    pANTLR3_BASE_TREE char_literal537_tree;
    pANTLR3_BASE_TREE char_literal538_tree;
    pANTLR3_BASE_TREE LTERM539_tree;
    pANTLR3_BASE_TREE char_literal540_tree;
    pANTLR3_BASE_TREE LTERM541_tree;
    pANTLR3_BASE_TREE LTERM542_tree;
    pANTLR3_BASE_TREE char_literal543_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyNameAndValue;
    /* Initialize rule variables
     */
    objectLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(92)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal533       = NULL;
    LTERM534       = NULL;
    LTERM536       = NULL;
    char_literal537       = NULL;
    char_literal538       = NULL;
    LTERM539       = NULL;
    char_literal540       = NULL;
    LTERM541       = NULL;
    LTERM542       = NULL;
    char_literal543       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    propertyNameAndValue535.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal533_tree   = NULL;
    LTERM534_tree   = NULL;
    LTERM536_tree   = NULL;
    char_literal537_tree   = NULL;
    char_literal538_tree   = NULL;
    LTERM539_tree   = NULL;
    char_literal540_tree   = NULL;
    LTERM541_tree   = NULL;
    LTERM542_tree   = NULL;
    char_literal543_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_propertyNameAndValue   = NULL;
    #define CREATE_stream_propertyNameAndValue  if (stream_propertyNameAndValue == NULL) {stream_propertyNameAndValue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyNameAndValue"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:587:3: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt277;

            alt277=2;


            {
                int LA277_0 = LA(1);
                if ( (LA277_0 == 128) ) 
                {

                    {
                        int LA277_1 = LA(2);
                        if ( (synpred329_Emerson(ctx)) ) 
                        {
                            alt277=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt277=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 277;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 277;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt277) 
            {
        	case 1:
        	    // .//Emerson.g:587:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
        	    {
        	        char_literal533 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_objectLiteral4914); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal533, NULL); }


        	        // .//Emerson.g:587:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt270=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA270_0 = LA(1);
        	                if ( (LA270_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA270_2 = LA(2);
        	                        if ( (synpred326_Emerson(ctx)) ) 
        	                        {
        	                            alt270=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt270) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM534 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4916); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM534, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop270;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop270: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:587:16: ( propertyNameAndValue )?
        	        {
        	            int alt271=2;
        	            {
        	                int LA271_0 = LA(1);
        	                if ( (((LA271_0 >= Identifier) && (LA271_0 <= NumericLiteral))) ) 
        	                {
        	                    alt271=1;
        	                }
        	            }
        	            switch (alt271) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: propertyNameAndValue
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral4919);
        	        	        propertyNameAndValue535=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, propertyNameAndValue535.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:587:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt272=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA272_0 = LA(1);
        	                if ( (LA272_0 == LTERM) ) 
        	                {
        	                    alt272=1;
        	                }

        	            }
        	            switch (alt272) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM536 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4922); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM536, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop272;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop272: ; /* Jump out to here if this rule does not match */

        	        char_literal537 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_objectLiteral4925); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal537, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 587:49: -> ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	{
        	        	    // .//Emerson.g:587:52: ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        // .//Emerson.g:587:66: ( propertyNameAndValue )?
        	        	        {
        	        	        	if ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if ( stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:588:4: '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}'
        	    {
        	        char_literal538 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_objectLiteral4939); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal538, NULL); }


        	        // .//Emerson.g:588:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt273=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA273_0 = LA(1);
        	                if ( (LA273_0 == LTERM) ) 
        	                {
        	                    alt273=1;
        	                }

        	            }
        	            switch (alt273) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM539 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4941); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM539, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop273;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop273: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral4946);
        	        p1=propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p1.tree, NULL); }

        	        // .//Emerson.g:588:39: ( ',' ( LTERM )* p2= propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt275=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA275_0 = LA(1);
        	                if ( (LA275_0 == 126) ) 
        	                {
        	                    alt275=1;
        	                }

        	            }
        	            switch (alt275) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:588:40: ',' ( LTERM )* p2= propertyNameAndValue
        	        	    {
        	        	        char_literal540 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_objectLiteral4949); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal540, NULL); }


        	        	        // .//Emerson.g:588:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt274=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA274_0 = LA(1);
        	        	                if ( (LA274_0 == LTERM) ) 
        	        	                {
        	        	                    alt274=1;
        	        	                }

        	        	            }
        	        	            switch (alt274) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM541 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4951); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleobjectLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM541, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop274;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop274: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral4956);
        	        	        p2=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop275;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop275: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:588:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt276=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA276_0 = LA(1);
        	                if ( (LA276_0 == LTERM) ) 
        	                {
        	                    alt276=1;
        	                }

        	            }
        	            switch (alt276) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM542 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4960); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM542, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop276;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop276: ; /* Jump out to here if this rule does not match */

        	        char_literal543 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_objectLiteral4967); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal543, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue, propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 588:92: -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	{
        	        	    // .//Emerson.g:588:95: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));
        	        	        // .//Emerson.g:588:130: ( propertyNameAndValue )*
        	        	        {
        	        	        	while ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->free(stream_propertyNameAndValue);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(92, objectLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start propertyNameAndValue
 * .//Emerson.g:591:1: propertyNameAndValue : propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) ;
 */
static EmersonParser_propertyNameAndValue_return
propertyNameAndValue(pEmersonParser ctx)
{   
    EmersonParser_propertyNameAndValue_return retval;
    ANTLR3_UINT32 propertyNameAndValue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM545;
    pANTLR3_COMMON_TOKEN    char_literal546;
    pANTLR3_COMMON_TOKEN    LTERM547;
    EmersonParser_propertyName_return propertyName544;
    #undef	RETURN_TYPE_propertyName544
    #define	RETURN_TYPE_propertyName544 EmersonParser_propertyName_return

    EmersonParser_assignmentExpression_return assignmentExpression548;
    #undef	RETURN_TYPE_assignmentExpression548
    #define	RETURN_TYPE_assignmentExpression548 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM545_tree;
    pANTLR3_BASE_TREE char_literal546_tree;
    pANTLR3_BASE_TREE LTERM547_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    propertyNameAndValue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(93)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM545       = NULL;
    char_literal546       = NULL;
    LTERM547       = NULL;
    propertyName544.tree = NULL;

    assignmentExpression548.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM545_tree   = NULL;
    char_literal546_tree   = NULL;
    LTERM547_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:592:2: ( propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) )
        // .//Emerson.g:592:4: propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue4991);
            propertyName544=propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName544.tree, NULL); }

            // .//Emerson.g:592:17: ( LTERM )*

            for (;;)
            {
                int alt278=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA278_0 = LA(1);
                    if ( (LA278_0 == LTERM) ) 
                    {
                        alt278=1;
                    }

                }
                switch (alt278) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM545 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue4993); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM545, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop278;	/* break out of the loop */
            	    break;
                }
            }
            loop278: ; /* Jump out to here if this rule does not match */

            char_literal546 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_propertyNameAndValue4996); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal546, NULL); }


            // .//Emerson.g:592:28: ( LTERM )*

            for (;;)
            {
                int alt279=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA279_0 = LA(1);
                    if ( (LA279_0 == LTERM) ) 
                    {
                        alt279=1;
                    }

                }
                switch (alt279) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM547 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue4998); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM547, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop279;	/* break out of the loop */
            	    break;
                }
            }
            loop279: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_propertyNameAndValue5001);
            assignmentExpression548=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression548.tree, NULL); }

             
            /* AST REWRITE
             * elements          : propertyName, assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 592:56: -> ^( NAME_VALUE propertyName assignmentExpression )
            	{
            	    // .//Emerson.g:592:59: ^( NAME_VALUE propertyName assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE, (pANTLR3_UINT8)"NAME_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(93, propertyNameAndValue_StartIndex); }
    return retval;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start propertyName
 * .//Emerson.g:595:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static EmersonParser_propertyName_return
propertyName(pEmersonParser ctx)
{   
    EmersonParser_propertyName_return retval;
    ANTLR3_UINT32 propertyName_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set549;

    pANTLR3_BASE_TREE set549_tree;

    /* Initialize rule variables
     */
    propertyName_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(94)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set549       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set549_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:596:2: ( Identifier | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set549=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Identifier) && (LA(1) <= NumericLiteral)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set549)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_propertyName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_propertyName0);    goto rulepropertyNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(94, propertyName_StartIndex); }
    return retval;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//Emerson.g:602:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static EmersonParser_literal_return
literal(pEmersonParser ctx)
{   
    EmersonParser_literal_return retval;
    ANTLR3_UINT32 literal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set550;

    pANTLR3_BASE_TREE set550_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(95)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set550       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set550_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:603:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set550=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= StringLiteral) && (LA(1) <= NumericLiteral)) || ((LA(1) >= 201) && (LA(1) <= 203)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set550)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(95, literal_StartIndex); }
    return retval;
}
/* $ANTLR end literal */

// $ANTLR start synpred5_Emerson
static void synpred5_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:138:4: ( functionDeclaration )
    // .//Emerson.g:138:4: functionDeclaration
    {
        FOLLOWPUSH(FOLLOW_functionDeclaration_in_synpred5_Emerson827);
        functionDeclaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred5_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred5_EmersonEx; /* Prevent compiler warnings */
rulesynpred5_EmersonEx: ;

}
// $ANTLR end synpred5_Emerson

// $ANTLR start synpred9_Emerson
static void synpred9_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:148:15: ( LTERM )
    // .//Emerson.g:148:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred9_Emerson894); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred9_EmersonEx; /* Prevent compiler warnings */
rulesynpred9_EmersonEx: ;

}
// $ANTLR end synpred9_Emerson

// $ANTLR start synpred23_Emerson
static void synpred23_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:162:4: ( statementBlock )
    // .//Emerson.g:162:4: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred23_Emerson1035);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred23_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred23_EmersonEx; /* Prevent compiler warnings */
rulesynpred23_EmersonEx: ;

}
// $ANTLR end synpred23_Emerson

// $ANTLR start synpred26_Emerson
static void synpred26_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:165:4: ( expressionStatement )
    // .//Emerson.g:165:4: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred26_Emerson1050);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_EmersonEx; /* Prevent compiler warnings */
rulesynpred26_EmersonEx: ;

}
// $ANTLR end synpred26_Emerson

// $ANTLR start synpred33_Emerson
static void synpred33_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:172:4: ( labelledStatement )
    // .//Emerson.g:172:4: labelledStatement
    {
        FOLLOWPUSH(FOLLOW_labelledStatement_in_synpred33_Emerson1085);
        labelledStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred33_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred33_EmersonEx; /* Prevent compiler warnings */
rulesynpred33_EmersonEx: ;

}
// $ANTLR end synpred33_Emerson

// $ANTLR start synpred37_Emerson
static void synpred37_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:176:4: ( msgSendStatement )
    // .//Emerson.g:176:4: msgSendStatement
    {
        FOLLOWPUSH(FOLLOW_msgSendStatement_in_synpred37_Emerson1105);
        msgSendStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred37_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred37_EmersonEx; /* Prevent compiler warnings */
rulesynpred37_EmersonEx: ;

}
// $ANTLR end synpred37_Emerson

// $ANTLR start synpred52_Emerson
static void synpred52_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:202:15: ( LTERM )
    // .//Emerson.g:202:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred52_Emerson1284); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred52_EmersonEx; /* Prevent compiler warnings */
rulesynpred52_EmersonEx: ;

}
// $ANTLR end synpred52_Emerson

// $ANTLR start synpred54_Emerson
static void synpred54_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:206:15: ( LTERM )
    // .//Emerson.g:206:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred54_Emerson1313); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred54_EmersonEx; /* Prevent compiler warnings */
rulesynpred54_EmersonEx: ;

}
// $ANTLR end synpred54_Emerson

// $ANTLR start synpred66_Emerson
static void synpred66_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:236:18: ( LTERM )
    // .//Emerson.g:236:18: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred66_Emerson1528); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred66_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred66_EmersonEx; /* Prevent compiler warnings */
rulesynpred66_EmersonEx: ;

}
// $ANTLR end synpred66_Emerson

// $ANTLR start synpred75_Emerson
static void synpred75_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_statement_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_statement_return

    // .//Emerson.g:241:73: ( ( LTERM )* 'else' ( LTERM )* s2= statement )
    // .//Emerson.g:241:73: ( LTERM )* 'else' ( LTERM )* s2= statement
    {

        // .//Emerson.g:241:73: ( LTERM )*

        for (;;)
        {
            int alt295=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA295_0 = LA(1);
                if ( (LA295_0 == LTERM) ) 
                {
                    alt295=1;
                }

            }
            switch (alt295) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred75_Emerson1591); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred75_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop295;	/* break out of the loop */
        	    break;
            }
        }
        loop295: ; /* Jump out to here if this rule does not match */

         MATCHT(137, &FOLLOW_137_in_synpred75_Emerson1594); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred75_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:241:87: ( LTERM )*

        for (;;)
        {
            int alt296=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA296_0 = LA(1);
                if ( (LA296_0 == LTERM) ) 
                {
                    alt296=1;
                }

            }
            switch (alt296) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred75_Emerson1596); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred75_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop296;	/* break out of the loop */
        	    break;
            }
        }
        loop296: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_statement_in_synpred75_Emerson1601);
        s2=statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred75_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred75_EmersonEx; /* Prevent compiler warnings */
rulesynpred75_EmersonEx: ;

}
// $ANTLR end synpred75_Emerson

// $ANTLR start synpred78_Emerson
static void synpred78_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:247:4: ( forStatement )
    // .//Emerson.g:247:4: forStatement
    {
        FOLLOWPUSH(FOLLOW_forStatement_in_synpred78_Emerson1640);
        forStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred78_EmersonEx; /* Prevent compiler warnings */
rulesynpred78_EmersonEx: ;

}
// $ANTLR end synpred78_Emerson

// $ANTLR start synpred133_Emerson
static void synpred133_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:306:40: ( LTERM )
    // .//Emerson.g:306:40: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred133_Emerson2266); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred133_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred133_EmersonEx; /* Prevent compiler warnings */
rulesynpred133_EmersonEx: ;

}
// $ANTLR end synpred133_Emerson

// $ANTLR start synpred136_Emerson
static void synpred136_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:310:25: ( LTERM )
    // .//Emerson.g:310:25: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred136_Emerson2301); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred136_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred136_EmersonEx; /* Prevent compiler warnings */
rulesynpred136_EmersonEx: ;

}
// $ANTLR end synpred136_Emerson

// $ANTLR start synpred154_Emerson
static void synpred154_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_memberExpression_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_memberExpression_return

	EmersonParser_leftHandSideExpression_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return




    // .//Emerson.g:339:4: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) )
    // .//Emerson.g:339:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred154_Emerson2565);
        e1=memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred154_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:339:24: ( LTERM )*

        for (;;)
        {
            int alt306=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA306_0 = LA(1);
                if ( (LA306_0 == LTERM) ) 
                {
                    alt306=1;
                }

            }
            switch (alt306) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred154_Emerson2567); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred154_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop306;	/* break out of the loop */
        	    break;
            }
        }
        loop306: ; /* Jump out to here if this rule does not match */

         MATCHT(155, &FOLLOW_155_in_synpred154_Emerson2569); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred154_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred154_Emerson2573);
        e2=leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred154_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        if ( LA(1) == LTERM || LA(1) == 131 )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred154_Emerson2575;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred154_Emerson2575);    goto rulesynpred154_EmersonEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred154_EmersonEx; /* Prevent compiler warnings */
rulesynpred154_EmersonEx: ;

}
// $ANTLR end synpred154_Emerson

// $ANTLR start synpred160_Emerson
static void synpred160_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:345:26: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )
    // .//Emerson.g:345:26: ( LTERM )* ',' ( LTERM )* assignmentExpression
    {

        // .//Emerson.g:345:26: ( LTERM )*

        for (;;)
        {
            int alt307=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA307_0 = LA(1);
                if ( (LA307_0 == LTERM) ) 
                {
                    alt307=1;
                }

            }
            switch (alt307) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred160_Emerson2655); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred160_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop307;	/* break out of the loop */
        	    break;
            }
        }
        loop307: ; /* Jump out to here if this rule does not match */

         MATCHT(126, &FOLLOW_126_in_synpred160_Emerson2658); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred160_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:345:37: ( LTERM )*

        for (;;)
        {
            int alt308=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA308_0 = LA(1);
                if ( (LA308_0 == LTERM) ) 
                {
                    alt308=1;
                }

            }
            switch (alt308) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred160_Emerson2660); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred160_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop308;	/* break out of the loop */
        	    break;
            }
        }
        loop308: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred160_Emerson2663);
        assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred160_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred160_EmersonEx; /* Prevent compiler warnings */
rulesynpred160_EmersonEx: ;

}
// $ANTLR end synpred160_Emerson

// $ANTLR start synpred164_Emerson
static void synpred164_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:354:4: ( conditionalExpression )
    // .//Emerson.g:354:4: conditionalExpression
    {
        FOLLOWPUSH(FOLLOW_conditionalExpression_in_synpred164_Emerson2722);
        conditionalExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred164_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred164_EmersonEx; /* Prevent compiler warnings */
rulesynpred164_EmersonEx: ;

}
// $ANTLR end synpred164_Emerson

// $ANTLR start synpred167_Emerson
static void synpred167_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:359:4: ( conditionalExpressionNoIn )
    // .//Emerson.g:359:4: conditionalExpressionNoIn
    {
        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_synpred167_Emerson2769);
        conditionalExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred167_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred167_EmersonEx; /* Prevent compiler warnings */
rulesynpred167_EmersonEx: ;

}
// $ANTLR end synpred167_Emerson

// $ANTLR start synpred170_Emerson
static void synpred170_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:364:4: ( callExpression )
    // .//Emerson.g:364:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred170_Emerson2817);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred170_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred170_EmersonEx; /* Prevent compiler warnings */
rulesynpred170_EmersonEx: ;

}
// $ANTLR end synpred170_Emerson

// $ANTLR start synpred171_Emerson
static void synpred171_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:369:4: ( memberExpression )
    // .//Emerson.g:369:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred171_Emerson2842);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred171_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred171_EmersonEx; /* Prevent compiler warnings */
rulesynpred171_EmersonEx: ;

}
// $ANTLR end synpred171_Emerson

// $ANTLR start synpred177_Emerson
static void synpred177_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:386:47: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:386:47: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:386:47: ( LTERM )*

        for (;;)
        {
            int alt311=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA311_0 = LA(1);
                if ( (LA311_0 == LTERM) ) 
                {
                    alt311=1;
                }

            }
            switch (alt311) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred177_Emerson2938); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred177_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop311;	/* break out of the loop */
        	    break;
            }
        }
        loop311: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred177_Emerson2941);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred177_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred177_EmersonEx; /* Prevent compiler warnings */
rulesynpred177_EmersonEx: ;

}
// $ANTLR end synpred177_Emerson

// $ANTLR start synpred179_Emerson
static void synpred179_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:386:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:386:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:386:136: ( LTERM )*

        for (;;)
        {
            int alt312=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA312_0 = LA(1);
                if ( (LA312_0 == LTERM) ) 
                {
                    alt312=1;
                }

            }
            switch (alt312) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred179_Emerson2958); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred179_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop312;	/* break out of the loop */
        	    break;
            }
        }
        loop312: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred179_Emerson2961);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred179_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred179_EmersonEx; /* Prevent compiler warnings */
rulesynpred179_EmersonEx: ;

}
// $ANTLR end synpred179_Emerson

// $ANTLR start synpred182_Emerson
static void synpred182_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:387:48: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:387:48: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:387:48: ( LTERM )*

        for (;;)
        {
            int alt316=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA316_0 = LA(1);
                if ( (LA316_0 == LTERM) ) 
                {
                    alt316=1;
                }

            }
            switch (alt316) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred182_Emerson2988); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred182_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop316;	/* break out of the loop */
        	    break;
            }
        }
        loop316: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson2991);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred182_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred182_EmersonEx; /* Prevent compiler warnings */
rulesynpred182_EmersonEx: ;

}
// $ANTLR end synpred182_Emerson

// $ANTLR start synpred184_Emerson
static void synpred184_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:387:137: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:387:137: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:387:137: ( LTERM )*

        for (;;)
        {
            int alt317=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA317_0 = LA(1);
                if ( (LA317_0 == LTERM) ) 
                {
                    alt317=1;
                }

            }
            switch (alt317) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred184_Emerson3008); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred184_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop317;	/* break out of the loop */
        	    break;
            }
        }
        loop317: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred184_Emerson3011);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred184_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred184_EmersonEx; /* Prevent compiler warnings */
rulesynpred184_EmersonEx: ;

}
// $ANTLR end synpred184_Emerson

// $ANTLR start synpred189_Emerson
static void synpred189_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:388:85: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:388:85: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:388:85: ( LTERM )*

        for (;;)
        {
            int alt321=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA321_0 = LA(1);
                if ( (LA321_0 == LTERM) ) 
                {
                    alt321=1;
                }

            }
            switch (alt321) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred189_Emerson3057); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred189_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop321;	/* break out of the loop */
        	    break;
            }
        }
        loop321: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson3060);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred189_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred189_EmersonEx; /* Prevent compiler warnings */
rulesynpred189_EmersonEx: ;

}
// $ANTLR end synpred189_Emerson

// $ANTLR start synpred191_Emerson
static void synpred191_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:388:147: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:388:147: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:388:147: ( LTERM )*

        for (;;)
        {
            int alt322=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA322_0 = LA(1);
                if ( (LA322_0 == LTERM) ) 
                {
                    alt322=1;
                }

            }
            switch (alt322) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred191_Emerson3073); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred191_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop322;	/* break out of the loop */
        	    break;
            }
        }
        loop322: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred191_Emerson3076);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred191_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred191_EmersonEx; /* Prevent compiler warnings */
rulesynpred191_EmersonEx: ;

}
// $ANTLR end synpred191_Emerson

// $ANTLR start synpred195_Emerson
static void synpred195_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:397:82: ( ( LTERM )* arguments )
    // .//Emerson.g:397:82: ( LTERM )* arguments
    {

        // .//Emerson.g:397:82: ( LTERM )*

        for (;;)
        {
            int alt323=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA323_0 = LA(1);
                if ( (LA323_0 == LTERM) ) 
                {
                    alt323=1;
                }

            }
            switch (alt323) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred195_Emerson3154); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred195_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop323;	/* break out of the loop */
        	    break;
            }
        }
        loop323: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_arguments_in_synpred195_Emerson3157);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred195_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred195_EmersonEx; /* Prevent compiler warnings */
rulesynpred195_EmersonEx: ;

}
// $ANTLR end synpred195_Emerson

// $ANTLR start synpred197_Emerson
static void synpred197_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:397:114: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:397:114: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:397:114: ( LTERM )*

        for (;;)
        {
            int alt324=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA324_0 = LA(1);
                if ( (LA324_0 == LTERM) ) 
                {
                    alt324=1;
                }

            }
            switch (alt324) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred197_Emerson3165); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred197_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop324;	/* break out of the loop */
        	    break;
            }
        }
        loop324: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred197_Emerson3168);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred197_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred197_EmersonEx; /* Prevent compiler warnings */
rulesynpred197_EmersonEx: ;

}
// $ANTLR end synpred197_Emerson

// $ANTLR start synpred199_Emerson
static void synpred199_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:397:183: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:397:183: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:397:183: ( LTERM )*

        for (;;)
        {
            int alt325=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA325_0 = LA(1);
                if ( (LA325_0 == LTERM) ) 
                {
                    alt325=1;
                }

            }
            switch (alt325) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred199_Emerson3183); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred199_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop325;	/* break out of the loop */
        	    break;
            }
        }
        loop325: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred199_Emerson3186);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred199_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred199_EmersonEx; /* Prevent compiler warnings */
rulesynpred199_EmersonEx: ;

}
// $ANTLR end synpred199_Emerson

// $ANTLR start synpred278_Emerson
static void synpred278_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:499:42: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression )
    // .//Emerson.g:499:42: ( LTERM )* relationalOps ( LTERM )* shiftExpression
    {

        // .//Emerson.g:499:42: ( LTERM )*

        for (;;)
        {
            int alt364=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA364_0 = LA(1);
                if ( (LA364_0 == LTERM) ) 
                {
                    alt364=1;
                }

            }
            switch (alt364) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred278_Emerson4232); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred278_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop364;	/* break out of the loop */
        	    break;
            }
        }
        loop364: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_relationalOps_in_synpred278_Emerson4235);
        relationalOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred278_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:499:63: ( LTERM )*

        for (;;)
        {
            int alt365=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA365_0 = LA(1);
                if ( (LA365_0 == LTERM) ) 
                {
                    alt365=1;
                }

            }
            switch (alt365) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred278_Emerson4237); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred278_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop365;	/* break out of the loop */
        	    break;
            }
        }
        loop365: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_shiftExpression_in_synpred278_Emerson4240);
        shiftExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred278_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred278_EmersonEx; /* Prevent compiler warnings */
rulesynpred278_EmersonEx: ;

}
// $ANTLR end synpred278_Emerson

// $ANTLR start synpred294_Emerson
static void synpred294_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:532:59: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression )
    // .//Emerson.g:532:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
    {

        // .//Emerson.g:532:59: ( LTERM )*

        for (;;)
        {
            int alt370=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA370_0 = LA(1);
                if ( (LA370_0 == LTERM) ) 
                {
                    alt370=1;
                }

            }
            switch (alt370) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred294_Emerson4474); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred294_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop370;	/* break out of the loop */
        	    break;
            }
        }
        loop370: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_addOps_in_synpred294_Emerson4477);
        addOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred294_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:532:73: ( LTERM )*

        for (;;)
        {
            int alt371=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA371_0 = LA(1);
                if ( (LA371_0 == LTERM) ) 
                {
                    alt371=1;
                }

            }
            switch (alt371) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred294_Emerson4479); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred294_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop371;	/* break out of the loop */
        	    break;
            }
        }
        loop371: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_synpred294_Emerson4482);
        multiplicativeExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred294_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred294_EmersonEx; /* Prevent compiler warnings */
rulesynpred294_EmersonEx: ;

}
// $ANTLR end synpred294_Emerson

// $ANTLR start synpred300_Emerson
static void synpred300_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:547:55: ( ( '--' ) )
    // .//Emerson.g:547:55: ( '--' )
    {
        // .//Emerson.g:547:55: ( '--' )
        // .//Emerson.g:547:56: '--'
        {
             MATCHT(193, &FOLLOW_193_in_synpred300_Emerson4594); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred300_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


    }

// This is where rules clean up and exit
//
goto rulesynpred300_EmersonEx; /* Prevent compiler warnings */
rulesynpred300_EmersonEx: ;

}
// $ANTLR end synpred300_Emerson

// $ANTLR start synpred301_Emerson
static void synpred301_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:547:91: ( ( '++' ) )
    // .//Emerson.g:547:91: ( '++' )
    {
        // .//Emerson.g:547:91: ( '++' )
        // .//Emerson.g:547:92: '++'
        {
             MATCHT(194, &FOLLOW_194_in_synpred301_Emerson4607); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred301_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


    }

// This is where rules clean up and exit
//
goto rulesynpred301_EmersonEx; /* Prevent compiler warnings */
rulesynpred301_EmersonEx: ;

}
// $ANTLR end synpred301_Emerson

// $ANTLR start synpred318_Emerson
static void synpred318_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:581:9: ( LTERM )
    // .//Emerson.g:581:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred318_Emerson4834); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred318_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred318_EmersonEx; /* Prevent compiler warnings */
rulesynpred318_EmersonEx: ;

}
// $ANTLR end synpred318_Emerson

// $ANTLR start synpred321_Emerson
static void synpred321_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:581:5: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' )
    // .//Emerson.g:581:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
    {
         MATCHT(157, &FOLLOW_157_in_synpred321_Emerson4832); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred321_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:581:9: ( LTERM )*

        for (;;)
        {
            int alt374=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA374_0 = LA(1);
                if ( (LA374_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA374_2 = LA(2);
                        if ( (synpred318_Emerson(ctx)) ) 
                        {
                            alt374=1;
                        }

                    }
                }

            }
            switch (alt374) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred321_Emerson4834); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred321_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop374;	/* break out of the loop */
        	    break;
            }
        }
        loop374: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:581:16: ( assignmentExpression )?
        {
            int alt375=2;
            {
                int LA375_0 = LA(1);
                if ( (((LA375_0 >= Identifier) && (LA375_0 <= NumericLiteral)) || ((LA375_0 >= 124) && (LA375_0 <= 125)) || LA375_0 == 128 || ((LA375_0 >= 156) && (LA375_0 <= 157)) || ((LA375_0 >= 188) && (LA375_0 <= 189)) || ((LA375_0 >= 193) && (LA375_0 <= 203))) ) 
                {
                    alt375=1;
                }
            }
            switch (alt375) 
            {
        	case 1:
        	    // .//Emerson.g:581:17: assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred321_Emerson4838);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred321_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:581:40: ( LTERM )*

        for (;;)
        {
            int alt376=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA376_0 = LA(1);
                if ( (LA376_0 == LTERM) ) 
                {
                    alt376=1;
                }

            }
            switch (alt376) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred321_Emerson4842); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred321_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop376;	/* break out of the loop */
        	    break;
            }
        }
        loop376: ; /* Jump out to here if this rule does not match */

         MATCHT(158, &FOLLOW_158_in_synpred321_Emerson4845); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred321_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred321_EmersonEx; /* Prevent compiler warnings */
rulesynpred321_EmersonEx: ;

}
// $ANTLR end synpred321_Emerson

// $ANTLR start synpred326_Emerson
static void synpred326_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:587:9: ( LTERM )
    // .//Emerson.g:587:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred326_Emerson4916); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred326_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred326_EmersonEx; /* Prevent compiler warnings */
rulesynpred326_EmersonEx: ;

}
// $ANTLR end synpred326_Emerson

// $ANTLR start synpred329_Emerson
static void synpred329_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:587:5: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' )
    // .//Emerson.g:587:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
    {
         MATCHT(128, &FOLLOW_128_in_synpred329_Emerson4914); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred329_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:587:9: ( LTERM )*

        for (;;)
        {
            int alt378=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA378_0 = LA(1);
                if ( (LA378_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA378_2 = LA(2);
                        if ( (synpred326_Emerson(ctx)) ) 
                        {
                            alt378=1;
                        }

                    }
                }

            }
            switch (alt378) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred329_Emerson4916); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred329_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop378;	/* break out of the loop */
        	    break;
            }
        }
        loop378: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:587:16: ( propertyNameAndValue )?
        {
            int alt379=2;
            {
                int LA379_0 = LA(1);
                if ( (((LA379_0 >= Identifier) && (LA379_0 <= NumericLiteral))) ) 
                {
                    alt379=1;
                }
            }
            switch (alt379) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: propertyNameAndValue
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred329_Emerson4919);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred329_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:587:38: ( LTERM )*

        for (;;)
        {
            int alt380=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA380_0 = LA(1);
                if ( (LA380_0 == LTERM) ) 
                {
                    alt380=1;
                }

            }
            switch (alt380) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred329_Emerson4922); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred329_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop380;	/* break out of the loop */
        	    break;
            }
        }
        loop380: ; /* Jump out to here if this rule does not match */

         MATCHT(129, &FOLLOW_129_in_synpred329_Emerson4925); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred329_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred329_EmersonEx; /* Prevent compiler warnings */
rulesynpred329_EmersonEx: ;

}
// $ANTLR end synpred329_Emerson
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred26_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred179_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred179_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred33_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred33_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred154_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred154_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred184_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred184_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred75_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred75_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred37_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred37_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred326_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred326_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred195_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred195_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred167_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred167_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred9_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred9_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred191_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred191_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred278_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred278_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred321_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred321_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred54_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred54_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred189_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred189_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred199_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred199_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred66_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred66_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred52_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred52_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred300_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred300_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred133_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred133_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred164_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred164_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred177_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred177_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred136_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred136_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred5_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred5_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred23_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred23_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred294_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred294_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred170_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred170_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred171_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred171_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred197_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred197_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred301_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred301_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred318_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred318_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred329_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred329_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred160_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred160_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred182_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred182_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred78_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred78_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
