/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//Emerson.g
 *     -                            On : 2011-02-11 20:57:52
 *     -                for the parser : EmersonParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

  #include <stdlib.h>;
  #include <stdio.h>;
  #include "EmersonUtil.h";

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonParserTokenNames[202+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "LEFT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "RIGHT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "TRIPLE_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "LEFT_SHIFT",
        (pANTLR3_UINT8) "RIGHT_SHIFT",
        (pANTLR3_UINT8) "TRIPLE_SHIFT",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "EXPR_LIST",
        (pANTLR3_UINT8) "COND_EXPR",
        (pANTLR3_UINT8) "COND_EXPR_NOIN",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_SEND",
        (pANTLR3_UINT8) "MESSAGE_RECV",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'check'",
        (pANTLR3_UINT8) "'<wo38__'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'<-'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'<<='",
        (pANTLR3_UINT8) "'>>='",
        (pANTLR3_UINT8) "'>>>='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'>>>'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static EmersonParser_program_return	program    (pEmersonParser ctx);
static EmersonParser_sourceElements_return	sourceElements    (pEmersonParser ctx);
static EmersonParser_sourceElement_return	sourceElement    (pEmersonParser ctx);
static EmersonParser_functionDeclaration_return	functionDeclaration    (pEmersonParser ctx);
static EmersonParser_functionExpression_return	functionExpression    (pEmersonParser ctx);
static EmersonParser_formalParameterList_return	formalParameterList    (pEmersonParser ctx);
static EmersonParser_functionBody_return	functionBody    (pEmersonParser ctx);
static EmersonParser_statement_return	statement    (pEmersonParser ctx);
static EmersonParser_statementBlock_return	statementBlock    (pEmersonParser ctx);
static EmersonParser_statementList_return	statementList    (pEmersonParser ctx);
static EmersonParser_variableStatement_return	variableStatement    (pEmersonParser ctx);
static EmersonParser_variableDeclarationList_return	variableDeclarationList    (pEmersonParser ctx);
static EmersonParser_variableDeclarationListNoIn_return	variableDeclarationListNoIn    (pEmersonParser ctx);
static EmersonParser_variableDeclaration_return	variableDeclaration    (pEmersonParser ctx);
static EmersonParser_variableDeclarationNoIn_return	variableDeclarationNoIn    (pEmersonParser ctx);
static EmersonParser_initialiser_return	initialiser    (pEmersonParser ctx);
static EmersonParser_initialiserNoIn_return	initialiserNoIn    (pEmersonParser ctx);
static EmersonParser_emptyStatement_return	emptyStatement    (pEmersonParser ctx);
static EmersonParser_expressionStatement_return	expressionStatement    (pEmersonParser ctx);
static EmersonParser_whenStatement_return	whenStatement    (pEmersonParser ctx);
static EmersonParser_whenPred_return	whenPred    (pEmersonParser ctx);
static EmersonParser_whenCheckedListFirst_return	whenCheckedListFirst    (pEmersonParser ctx);
static EmersonParser_whenCheckedListSubsequent_return	whenCheckedListSubsequent    (pEmersonParser ctx);
static EmersonParser_ifStatement_return	ifStatement    (pEmersonParser ctx);
static EmersonParser_iterationStatement_return	iterationStatement    (pEmersonParser ctx);
static EmersonParser_doWhileStatement_return	doWhileStatement    (pEmersonParser ctx);
static EmersonParser_whileStatement_return	whileStatement    (pEmersonParser ctx);
static EmersonParser_forStatement_return	forStatement    (pEmersonParser ctx);
static EmersonParser_forStatementInitialiserPart_return	forStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_forInStatement_return	forInStatement    (pEmersonParser ctx);
static EmersonParser_forInStatementInitialiserPart_return	forInStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_continueStatement_return	continueStatement    (pEmersonParser ctx);
static EmersonParser_breakStatement_return	breakStatement    (pEmersonParser ctx);
static EmersonParser_returnStatement_return	returnStatement    (pEmersonParser ctx);
static EmersonParser_withStatement_return	withStatement    (pEmersonParser ctx);
static EmersonParser_labelledStatement_return	labelledStatement    (pEmersonParser ctx);
static EmersonParser_switchStatement_return	switchStatement    (pEmersonParser ctx);
static EmersonParser_caseBlock_return	caseBlock    (pEmersonParser ctx);
static EmersonParser_caseClause_return	caseClause    (pEmersonParser ctx);
static EmersonParser_defaultClause_return	defaultClause    (pEmersonParser ctx);
static EmersonParser_throwStatement_return	throwStatement    (pEmersonParser ctx);
static EmersonParser_tryStatement_return	tryStatement    (pEmersonParser ctx);
static EmersonParser_catchClause_return	catchClause    (pEmersonParser ctx);
static EmersonParser_finallyClause_return	finallyClause    (pEmersonParser ctx);
static EmersonParser_msgSendStatement_return	msgSendStatement    (pEmersonParser ctx);
static EmersonParser_msgRecvStatement_return	msgRecvStatement    (pEmersonParser ctx);
static EmersonParser_expression_return	expression    (pEmersonParser ctx);
static EmersonParser_expressionNoIn_return	expressionNoIn    (pEmersonParser ctx);
static EmersonParser_assignmentExpression_return	assignmentExpression    (pEmersonParser ctx);
static EmersonParser_assignmentExpressionNoIn_return	assignmentExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_leftHandSideExpression_return	leftHandSideExpression    (pEmersonParser ctx);
static EmersonParser_newExpression_return	newExpression    (pEmersonParser ctx);
static EmersonParser_indexSuffix1_return	indexSuffix1    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix1_return	propertyReferenceSuffix1    (pEmersonParser ctx);
static EmersonParser_memberExpression_return	memberExpression    (pEmersonParser ctx);
static EmersonParser_memberExpressionSuffix_return	memberExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_callExpression_return	callExpression    (pEmersonParser ctx);
static EmersonParser_callExpressionSuffix_return	callExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_arguments_return	arguments    (pEmersonParser ctx);
static EmersonParser_indexSuffix_return	indexSuffix    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix_return	propertyReferenceSuffix    (pEmersonParser ctx);
static EmersonParser_assignmentOperator_return	assignmentOperator    (pEmersonParser ctx);
static EmersonParser_conditionalExpression_return	conditionalExpression    (pEmersonParser ctx);
static EmersonParser_conditionalExpressionNoIn_return	conditionalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalORExpression_return	logicalORExpression    (pEmersonParser ctx);
static EmersonParser_logicalANDExpression_return	logicalANDExpression    (pEmersonParser ctx);
static EmersonParser_logicalORExpressionNoIn_return	logicalORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalANDExpressionNoIn_return	logicalANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpression_return	bitwiseORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpressionNoIn_return	bitwiseORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpression_return	bitwiseXORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpressionNoIn_return	bitwiseXORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpression_return	bitwiseANDExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpressionNoIn_return	bitwiseANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_equalityExpression_return	equalityExpression    (pEmersonParser ctx);
static EmersonParser_equalityOps_return	equalityOps    (pEmersonParser ctx);
static EmersonParser_equalityExpressionNoIn_return	equalityExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_relationalOps_return	relationalOps    (pEmersonParser ctx);
static EmersonParser_relationalExpression_return	relationalExpression    (pEmersonParser ctx);
static EmersonParser_relationalOpsNoIn_return	relationalOpsNoIn    (pEmersonParser ctx);
static EmersonParser_relationalExpressionNoIn_return	relationalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_shiftOps_return	shiftOps    (pEmersonParser ctx);
static EmersonParser_shiftExpression_return	shiftExpression    (pEmersonParser ctx);
static EmersonParser_addOps_return	addOps    (pEmersonParser ctx);
static EmersonParser_additiveExpression_return	additiveExpression    (pEmersonParser ctx);
static EmersonParser_multOps_return	multOps    (pEmersonParser ctx);
static EmersonParser_multiplicativeExpression_return	multiplicativeExpression    (pEmersonParser ctx);
static EmersonParser_postfixExpression_return	postfixExpression    (pEmersonParser ctx);
static EmersonParser_unaryOps_return	unaryOps    (pEmersonParser ctx);
static EmersonParser_unaryExpression_return	unaryExpression    (pEmersonParser ctx);
static EmersonParser_primaryExpression_return	primaryExpression    (pEmersonParser ctx);
static EmersonParser_arrayLiteral_return	arrayLiteral    (pEmersonParser ctx);
static EmersonParser_objectLiteral_return	objectLiteral    (pEmersonParser ctx);
static EmersonParser_propertyNameAndValue_return	propertyNameAndValue    (pEmersonParser ctx);
static EmersonParser_propertyName_return	propertyName    (pEmersonParser ctx);
static EmersonParser_literal_return	literal    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred5_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred9_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred23_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred26_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred33_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred38_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred53_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred55_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred67_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred70_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred72_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred79_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred82_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred137_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred140_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred158_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred164_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred168_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred171_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred174_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred175_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred181_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred183_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred186_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred188_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred193_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred195_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred199_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred201_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred203_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred298_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred304_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred305_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred322_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred325_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred330_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred333_Emerson    (pEmersonParser ctx);
static void	EmersonParserFree(pEmersonParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//Emerson.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonParserNewSSD(instream, NULL);
}

/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonParser) ANTLR3_CALLOC(1, sizeof(EmersonParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our EmersonParser interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->statementBlock	= statementBlock;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->emptyStatement	= emptyStatement;
    ctx->expressionStatement	= expressionStatement;
    ctx->whenStatement	= whenStatement;
    ctx->whenPred	= whenPred;
    ctx->whenCheckedListFirst	= whenCheckedListFirst;
    ctx->whenCheckedListSubsequent	= whenCheckedListSubsequent;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->labelledStatement	= labelledStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->msgSendStatement	= msgSendStatement;
    ctx->msgRecvStatement	= msgRecvStatement;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityOps	= equalityOps;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->shiftOps	= shiftOps;
    ctx->shiftExpression	= shiftExpression;
    ctx->addOps	= addOps;
    ctx->additiveExpression	= additiveExpression;
    ctx->multOps	= multOps;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred5_Emerson	= synpred5_Emerson;
    ctx->synpred9_Emerson	= synpred9_Emerson;
    ctx->synpred23_Emerson	= synpred23_Emerson;
    ctx->synpred26_Emerson	= synpred26_Emerson;
    ctx->synpred33_Emerson	= synpred33_Emerson;
    ctx->synpred38_Emerson	= synpred38_Emerson;
    ctx->synpred53_Emerson	= synpred53_Emerson;
    ctx->synpred55_Emerson	= synpred55_Emerson;
    ctx->synpred67_Emerson	= synpred67_Emerson;
    ctx->synpred70_Emerson	= synpred70_Emerson;
    ctx->synpred72_Emerson	= synpred72_Emerson;
    ctx->synpred79_Emerson	= synpred79_Emerson;
    ctx->synpred82_Emerson	= synpred82_Emerson;
    ctx->synpred137_Emerson	= synpred137_Emerson;
    ctx->synpred140_Emerson	= synpred140_Emerson;
    ctx->synpred158_Emerson	= synpred158_Emerson;
    ctx->synpred164_Emerson	= synpred164_Emerson;
    ctx->synpred168_Emerson	= synpred168_Emerson;
    ctx->synpred171_Emerson	= synpred171_Emerson;
    ctx->synpred174_Emerson	= synpred174_Emerson;
    ctx->synpred175_Emerson	= synpred175_Emerson;
    ctx->synpred181_Emerson	= synpred181_Emerson;
    ctx->synpred183_Emerson	= synpred183_Emerson;
    ctx->synpred186_Emerson	= synpred186_Emerson;
    ctx->synpred188_Emerson	= synpred188_Emerson;
    ctx->synpred193_Emerson	= synpred193_Emerson;
    ctx->synpred195_Emerson	= synpred195_Emerson;
    ctx->synpred199_Emerson	= synpred199_Emerson;
    ctx->synpred201_Emerson	= synpred201_Emerson;
    ctx->synpred203_Emerson	= synpred203_Emerson;
    ctx->synpred298_Emerson	= synpred298_Emerson;
    ctx->synpred304_Emerson	= synpred304_Emerson;
    ctx->synpred305_Emerson	= synpred305_Emerson;
    ctx->synpred322_Emerson	= synpred322_Emerson;
    ctx->synpred325_Emerson	= synpred325_Emerson;
    ctx->synpred330_Emerson	= synpred330_Emerson;
    ctx->synpred333_Emerson	= synpred333_Emerson;
    ctx->free			= EmersonParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonParserFree(pEmersonParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program778  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program778	= { FOLLOW_LTERM_in_program778_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program781  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program781	= { FOLLOW_sourceElements_in_program781_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program783  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program783	= { FOLLOW_LTERM_in_program783_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_program786  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_program786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_program786	= { FOLLOW_EOF_in_program786_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements807  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements807	= { FOLLOW_sourceElement_in_sourceElements807_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_sourceElements810  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_sourceElements810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_sourceElements810	= { FOLLOW_LTERM_in_sourceElements810_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements813  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements813	= { FOLLOW_sourceElement_in_sourceElements813_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement834  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement834	= { FOLLOW_functionDeclaration_in_sourceElement834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement843  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement843	= { FOLLOW_statement_in_sourceElement843_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_functionDeclaration860  */
static	ANTLR3_BITWORD FOLLOW_125_in_functionDeclaration860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_functionDeclaration860	= { FOLLOW_125_in_functionDeclaration860_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration862  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration862	= { FOLLOW_LTERM_in_functionDeclaration862_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration865  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration865	= { FOLLOW_Identifier_in_functionDeclaration865_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration867  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration867	= { FOLLOW_LTERM_in_functionDeclaration867_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration870  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration870	= { FOLLOW_formalParameterList_in_functionDeclaration870_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration872  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration872	= { FOLLOW_LTERM_in_functionDeclaration872_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration875  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration875	= { FOLLOW_functionBody_in_functionDeclaration875_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_functionExpression899  */
static	ANTLR3_BITWORD FOLLOW_125_in_functionExpression899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_functionExpression899	= { FOLLOW_125_in_functionExpression899_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression901  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression901	= { FOLLOW_LTERM_in_functionExpression901_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression904  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression904	= { FOLLOW_Identifier_in_functionExpression904_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression907  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression907	= { FOLLOW_LTERM_in_functionExpression907_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression910  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression910	= { FOLLOW_formalParameterList_in_functionExpression910_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression912  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression912	= { FOLLOW_LTERM_in_functionExpression912_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression915  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression915	= { FOLLOW_functionBody_in_functionExpression915_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_formalParameterList942  */
static	ANTLR3_BITWORD FOLLOW_126_in_formalParameterList942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_formalParameterList942	= { FOLLOW_126_in_formalParameterList942_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList945  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList945	= { FOLLOW_LTERM_in_formalParameterList945_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList950  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList950	= { FOLLOW_Identifier_in_formalParameterList950_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList953  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList953	= { FOLLOW_LTERM_in_formalParameterList953_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_formalParameterList956  */
static	ANTLR3_BITWORD FOLLOW_127_in_formalParameterList956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_formalParameterList956	= { FOLLOW_127_in_formalParameterList956_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList958  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList958	= { FOLLOW_LTERM_in_formalParameterList958_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList963  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList963	= { FOLLOW_Identifier_in_formalParameterList963_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList969  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList969	= { FOLLOW_LTERM_in_formalParameterList969_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_formalParameterList972  */
static	ANTLR3_BITWORD FOLLOW_128_in_formalParameterList972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_formalParameterList972	= { FOLLOW_128_in_formalParameterList972_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_functionBody998  */
static	ANTLR3_BITWORD FOLLOW_129_in_functionBody998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_functionBody998	= { FOLLOW_129_in_functionBody998_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1000  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1000_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1000	= { FOLLOW_LTERM_in_functionBody1000_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_functionBody1003  */
static	ANTLR3_BITWORD FOLLOW_130_in_functionBody1003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_functionBody1003	= { FOLLOW_130_in_functionBody1003_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_functionBody1014  */
static	ANTLR3_BITWORD FOLLOW_129_in_functionBody1014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_functionBody1014	= { FOLLOW_129_in_functionBody1014_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1016  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1016	= { FOLLOW_LTERM_in_functionBody1016_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody1020  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody1020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody1020	= { FOLLOW_sourceElements_in_functionBody1020_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1027  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1027_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1027	= { FOLLOW_LTERM_in_functionBody1027_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_functionBody1030  */
static	ANTLR3_BITWORD FOLLOW_130_in_functionBody1030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_functionBody1030	= { FOLLOW_130_in_functionBody1030_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement1042  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement1042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement1042	= { FOLLOW_statementBlock_in_statement1042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement1047  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement1047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement1047	= { FOLLOW_variableStatement_in_statement1047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_statement1052  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_statement1052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_statement1052	= { FOLLOW_emptyStatement_in_statement1052_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement1057  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement1057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement1057	= { FOLLOW_expressionStatement_in_statement1057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement1062  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement1062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement1062	= { FOLLOW_ifStatement_in_statement1062_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement1067  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement1067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement1067	= { FOLLOW_iterationStatement_in_statement1067_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement1072  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement1072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement1072	= { FOLLOW_continueStatement_in_statement1072_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement1077  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement1077_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement1077	= { FOLLOW_breakStatement_in_statement1077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1082  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1082	= { FOLLOW_returnStatement_in_statement1082_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement1087  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement1087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement1087	= { FOLLOW_withStatement_in_statement1087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_statement1092  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_statement1092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_statement1092	= { FOLLOW_labelledStatement_in_statement1092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement1097  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement1097_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement1097	= { FOLLOW_switchStatement_in_statement1097_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement1102  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement1102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement1102	= { FOLLOW_throwStatement_in_statement1102_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenStatement_in_statement1110  */
static	ANTLR3_BITWORD FOLLOW_whenStatement_in_statement1110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenStatement_in_statement1110	= { FOLLOW_whenStatement_in_statement1110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement1115  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement1115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement1115	= { FOLLOW_tryStatement_in_statement1115_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_statement1120  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_statement1120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_statement1120	= { FOLLOW_msgSendStatement_in_statement1120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_statement1125  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_statement1125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_statement1125	= { FOLLOW_msgRecvStatement_in_statement1125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_statementBlock1137  */
static	ANTLR3_BITWORD FOLLOW_129_in_statementBlock1137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_statementBlock1137	= { FOLLOW_129_in_statementBlock1137_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1139  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1139	= { FOLLOW_LTERM_in_statementBlock1139_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_statementBlock1142  */
static	ANTLR3_BITWORD FOLLOW_130_in_statementBlock1142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_statementBlock1142	= { FOLLOW_130_in_statementBlock1142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_statementBlock1147  */
static	ANTLR3_BITWORD FOLLOW_129_in_statementBlock1147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_statementBlock1147	= { FOLLOW_129_in_statementBlock1147_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1149  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1149	= { FOLLOW_LTERM_in_statementBlock1149_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock1153  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock1153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock1153	= { FOLLOW_statementList_in_statementBlock1153_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1158  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1158	= { FOLLOW_LTERM_in_statementBlock1158_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_statementBlock1161  */
static	ANTLR3_BITWORD FOLLOW_130_in_statementBlock1161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_statementBlock1161	= { FOLLOW_130_in_statementBlock1161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1174  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1174	= { FOLLOW_statement_in_statementList1174_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementList1177  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementList1177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementList1177	= { FOLLOW_LTERM_in_statementList1177_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1180  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1180	= { FOLLOW_statement_in_statementList1180_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_variableStatement1203  */
static	ANTLR3_BITWORD FOLLOW_131_in_variableStatement1203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_variableStatement1203	= { FOLLOW_131_in_variableStatement1203_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1205  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1205	= { FOLLOW_LTERM_in_variableStatement1205_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1208  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1208	= { FOLLOW_variableDeclarationList_in_variableStatement1208_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1211  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1211	= { FOLLOW_LTERM_in_variableStatement1211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_variableStatement1215  */
static	ANTLR3_BITWORD FOLLOW_132_in_variableStatement1215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_variableStatement1215	= { FOLLOW_132_in_variableStatement1215_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1237  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1237_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1237	= { FOLLOW_variableDeclaration_in_variableDeclarationList1237_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1240  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1240	= { FOLLOW_LTERM_in_variableDeclarationList1240_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_variableDeclarationList1243  */
static	ANTLR3_BITWORD FOLLOW_127_in_variableDeclarationList1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_variableDeclarationList1243	= { FOLLOW_127_in_variableDeclarationList1243_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1245  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1245	= { FOLLOW_LTERM_in_variableDeclarationList1245_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1248  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1248	= { FOLLOW_variableDeclaration_in_variableDeclarationList1248_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1267  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1267	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1267_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1270  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1270	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1270_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_variableDeclarationListNoIn1273  */
static	ANTLR3_BITWORD FOLLOW_127_in_variableDeclarationListNoIn1273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_variableDeclarationListNoIn1273	= { FOLLOW_127_in_variableDeclarationListNoIn1273_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1275  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1275	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1275_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1278  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1278_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1278	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1278_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1297  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1297	= { FOLLOW_Identifier_in_variableDeclaration1297_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclaration1299  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclaration1299_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclaration1299	= { FOLLOW_LTERM_in_variableDeclaration1299_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1302  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1302	= { FOLLOW_initialiser_in_variableDeclaration1302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1326  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1326	= { FOLLOW_Identifier_in_variableDeclarationNoIn1326_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationNoIn1328  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationNoIn1328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationNoIn1328	= { FOLLOW_LTERM_in_variableDeclarationNoIn1328_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1331  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1331	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_initialiser1356  */
static	ANTLR3_BITWORD FOLLOW_133_in_initialiser1356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_initialiser1356	= { FOLLOW_133_in_initialiser1356_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiser1358  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiser1358_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiser1358	= { FOLLOW_LTERM_in_initialiser1358_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_initialiser1361  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_initialiser1361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_initialiser1361	= { FOLLOW_assignmentExpression_in_initialiser1361_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_initialiserNoIn1378  */
static	ANTLR3_BITWORD FOLLOW_133_in_initialiserNoIn1378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_initialiserNoIn1378	= { FOLLOW_133_in_initialiserNoIn1378_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiserNoIn1380  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiserNoIn1380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiserNoIn1380	= { FOLLOW_LTERM_in_initialiserNoIn1380_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1383  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1383	= { FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1383_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_emptyStatement1399  */
static	ANTLR3_BITWORD FOLLOW_132_in_emptyStatement1399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_emptyStatement1399	= { FOLLOW_132_in_emptyStatement1399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1411  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1411	= { FOLLOW_expression_in_expressionStatement1411_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionStatement1414  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionStatement1414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionStatement1414	= { FOLLOW_LTERM_in_expressionStatement1414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_expressionStatement1418  */
static	ANTLR3_BITWORD FOLLOW_132_in_expressionStatement1418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_expressionStatement1418	= { FOLLOW_132_in_expressionStatement1418_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_whenStatement1437  */
static	ANTLR3_BITWORD FOLLOW_134_in_whenStatement1437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_whenStatement1437	= { FOLLOW_134_in_whenStatement1437_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1439  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1439	= { FOLLOW_LTERM_in_whenStatement1439_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_whenStatement1442  */
static	ANTLR3_BITWORD FOLLOW_126_in_whenStatement1442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_whenStatement1442	= { FOLLOW_126_in_whenStatement1442_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1444  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1444	= { FOLLOW_LTERM_in_whenStatement1444_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenStatement1447  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenStatement1447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenStatement1447	= { FOLLOW_expression_in_whenStatement1447_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1449  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1449	= { FOLLOW_LTERM_in_whenStatement1449_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_whenStatement1452  */
static	ANTLR3_BITWORD FOLLOW_128_in_whenStatement1452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_whenStatement1452	= { FOLLOW_128_in_whenStatement1452_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1454  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1454	= { FOLLOW_LTERM_in_whenStatement1454_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_whenStatement1457  */
static	ANTLR3_BITWORD FOLLOW_135_in_whenStatement1457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_whenStatement1457	= { FOLLOW_135_in_whenStatement1457_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListFirst_in_whenStatement1459  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListFirst_in_whenStatement1459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListFirst_in_whenStatement1459	= { FOLLOW_whenCheckedListFirst_in_whenStatement1459_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1461  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1461	= { FOLLOW_LTERM_in_whenStatement1461_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whenStatement1466  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whenStatement1466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whenStatement1466	= { FOLLOW_statement_in_whenStatement1466_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenPred1505  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenPred1505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenPred1505	= { FOLLOW_expression_in_whenPred1505_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenPred1507  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenPred1507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenPred1507	= { FOLLOW_LTERM_in_whenPred1507_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_whenPred1510  */
static	ANTLR3_BITWORD FOLLOW_136_in_whenPred1510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_whenPred1510	= { FOLLOW_136_in_whenPred1510_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenPred1512  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenPred1512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenPred1512	= { FOLLOW_LTERM_in_whenPred1512_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenPred1517  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenPred1517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenPred1517	= { FOLLOW_expression_in_whenPred1517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListFirst1548  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListFirst1548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListFirst1548	= { FOLLOW_expression_in_whenCheckedListFirst1548_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListFirst1550  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListFirst1550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListFirst1550	= { FOLLOW_LTERM_in_whenCheckedListFirst1550_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_whenCheckedListFirst1554  */
static	ANTLR3_BITWORD FOLLOW_127_in_whenCheckedListFirst1554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_whenCheckedListFirst1554	= { FOLLOW_127_in_whenCheckedListFirst1554_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListFirst1556  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListFirst1556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListFirst1556	= { FOLLOW_LTERM_in_whenCheckedListFirst1556_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1561  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1561	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListSubsequent1598  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListSubsequent1598_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListSubsequent1598	= { FOLLOW_expression_in_whenCheckedListSubsequent1598_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListSubsequent1600  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListSubsequent1600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListSubsequent1600	= { FOLLOW_LTERM_in_whenCheckedListSubsequent1600_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_whenCheckedListSubsequent1604  */
static	ANTLR3_BITWORD FOLLOW_127_in_whenCheckedListSubsequent1604_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_whenCheckedListSubsequent1604	= { FOLLOW_127_in_whenCheckedListSubsequent1604_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListSubsequent1606  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListSubsequent1606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListSubsequent1606	= { FOLLOW_LTERM_in_whenCheckedListSubsequent1606_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1611  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1611	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1611_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_ifStatement1648  */
static	ANTLR3_BITWORD FOLLOW_137_in_ifStatement1648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_ifStatement1648	= { FOLLOW_137_in_ifStatement1648_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1650  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1650	= { FOLLOW_LTERM_in_ifStatement1650_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_ifStatement1653  */
static	ANTLR3_BITWORD FOLLOW_126_in_ifStatement1653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_ifStatement1653	= { FOLLOW_126_in_ifStatement1653_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1655  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1655	= { FOLLOW_LTERM_in_ifStatement1655_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1658  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1658	= { FOLLOW_expression_in_ifStatement1658_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1660  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1660	= { FOLLOW_LTERM_in_ifStatement1660_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_ifStatement1663  */
static	ANTLR3_BITWORD FOLLOW_128_in_ifStatement1663_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_ifStatement1663	= { FOLLOW_128_in_ifStatement1663_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1665  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1665	= { FOLLOW_LTERM_in_ifStatement1665_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1670  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1670	= { FOLLOW_statement_in_ifStatement1670_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1673  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1673	= { FOLLOW_LTERM_in_ifStatement1673_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_ifStatement1676  */
static	ANTLR3_BITWORD FOLLOW_138_in_ifStatement1676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_ifStatement1676	= { FOLLOW_138_in_ifStatement1676_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1678  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1678	= { FOLLOW_LTERM_in_ifStatement1678_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1683  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1683	= { FOLLOW_statement_in_ifStatement1683_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1712  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1712	= { FOLLOW_doWhileStatement_in_iterationStatement1712_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1717  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1717	= { FOLLOW_whileStatement_in_iterationStatement1717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1722  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1722	= { FOLLOW_forStatement_in_iterationStatement1722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1727  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1727	= { FOLLOW_forInStatement_in_iterationStatement1727_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_doWhileStatement1739  */
static	ANTLR3_BITWORD FOLLOW_139_in_doWhileStatement1739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_doWhileStatement1739	= { FOLLOW_139_in_doWhileStatement1739_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1741  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1741	= { FOLLOW_LTERM_in_doWhileStatement1741_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1744  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1744	= { FOLLOW_statement_in_doWhileStatement1744_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1746  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1746	= { FOLLOW_LTERM_in_doWhileStatement1746_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_doWhileStatement1749  */
static	ANTLR3_BITWORD FOLLOW_140_in_doWhileStatement1749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_doWhileStatement1749	= { FOLLOW_140_in_doWhileStatement1749_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1751  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1751	= { FOLLOW_LTERM_in_doWhileStatement1751_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_doWhileStatement1754  */
static	ANTLR3_BITWORD FOLLOW_126_in_doWhileStatement1754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_doWhileStatement1754	= { FOLLOW_126_in_doWhileStatement1754_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1756  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1756	= { FOLLOW_expression_in_doWhileStatement1756_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_doWhileStatement1758  */
static	ANTLR3_BITWORD FOLLOW_128_in_doWhileStatement1758_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_doWhileStatement1758	= { FOLLOW_128_in_doWhileStatement1758_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1761  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1761	= { FOLLOW_LTERM_in_doWhileStatement1761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_doWhileStatement1765  */
static	ANTLR3_BITWORD FOLLOW_132_in_doWhileStatement1765_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_doWhileStatement1765	= { FOLLOW_132_in_doWhileStatement1765_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_whileStatement1791  */
static	ANTLR3_BITWORD FOLLOW_140_in_whileStatement1791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_whileStatement1791	= { FOLLOW_140_in_whileStatement1791_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1793  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1793	= { FOLLOW_LTERM_in_whileStatement1793_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_whileStatement1796  */
static	ANTLR3_BITWORD FOLLOW_126_in_whileStatement1796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_whileStatement1796	= { FOLLOW_126_in_whileStatement1796_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1798  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1798_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1798	= { FOLLOW_LTERM_in_whileStatement1798_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1801  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1801	= { FOLLOW_expression_in_whileStatement1801_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1803  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1803	= { FOLLOW_LTERM_in_whileStatement1803_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_whileStatement1806  */
static	ANTLR3_BITWORD FOLLOW_128_in_whileStatement1806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_whileStatement1806	= { FOLLOW_128_in_whileStatement1806_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1808  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1808	= { FOLLOW_LTERM_in_whileStatement1808_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1811  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1811	= { FOLLOW_statement_in_whileStatement1811_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forStatement1834  */
static	ANTLR3_BITWORD FOLLOW_141_in_forStatement1834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forStatement1834	= { FOLLOW_141_in_forStatement1834_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1836  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1836	= { FOLLOW_LTERM_in_forStatement1836_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_forStatement1839  */
static	ANTLR3_BITWORD FOLLOW_126_in_forStatement1839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006000001A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_forStatement1839	= { FOLLOW_126_in_forStatement1839_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1842  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006000000A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1842	= { FOLLOW_LTERM_in_forStatement1842_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement1847  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement1847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement1847	= { FOLLOW_forStatementInitialiserPart_in_forStatement1847_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1851  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1851	= { FOLLOW_LTERM_in_forStatement1851_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_forStatement1854  */
static	ANTLR3_BITWORD FOLLOW_132_in_forStatement1854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000012), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_forStatement1854	= { FOLLOW_132_in_forStatement1854_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1857  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1857_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1857	= { FOLLOW_LTERM_in_forStatement1857_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1862  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1862	= { FOLLOW_expression_in_forStatement1862_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1866  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1866	= { FOLLOW_LTERM_in_forStatement1866_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_forStatement1869  */
static	ANTLR3_BITWORD FOLLOW_132_in_forStatement1869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000003), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_forStatement1869	= { FOLLOW_132_in_forStatement1869_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1872  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1872	= { FOLLOW_LTERM_in_forStatement1872_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1877  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1877	= { FOLLOW_expression_in_forStatement1877_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1881  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1881	= { FOLLOW_LTERM_in_forStatement1881_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_forStatement1884  */
static	ANTLR3_BITWORD FOLLOW_128_in_forStatement1884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_forStatement1884	= { FOLLOW_128_in_forStatement1884_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1886  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1886	= { FOLLOW_LTERM_in_forStatement1886_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement1889  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement1889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement1889	= { FOLLOW_statement_in_forStatement1889_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart1938  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart1938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart1938	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart1938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_forStatementInitialiserPart1943  */
static	ANTLR3_BITWORD FOLLOW_131_in_forStatementInitialiserPart1943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_forStatementInitialiserPart1943	= { FOLLOW_131_in_forStatementInitialiserPart1943_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatementInitialiserPart1945  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatementInitialiserPart1945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatementInitialiserPart1945	= { FOLLOW_LTERM_in_forStatementInitialiserPart1945_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1948  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1948	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1948_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forInStatement1968  */
static	ANTLR3_BITWORD FOLLOW_141_in_forInStatement1968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forInStatement1968	= { FOLLOW_141_in_forInStatement1968_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1970  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1970	= { FOLLOW_LTERM_in_forInStatement1970_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_forInStatement1973  */
static	ANTLR3_BITWORD FOLLOW_126_in_forInStatement1973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0x000000006000000A), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_forInStatement1973	= { FOLLOW_126_in_forInStatement1973_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1975  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0x000000006000000A), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1975	= { FOLLOW_LTERM_in_forInStatement1975_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement1978  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement1978_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement1978	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement1978_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1980  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1980	= { FOLLOW_LTERM_in_forInStatement1980_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_forInStatement1983  */
static	ANTLR3_BITWORD FOLLOW_142_in_forInStatement1983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_forInStatement1983	= { FOLLOW_142_in_forInStatement1983_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1985  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1985	= { FOLLOW_LTERM_in_forInStatement1985_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement1988  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement1988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement1988	= { FOLLOW_expression_in_forInStatement1988_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1990  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1990	= { FOLLOW_LTERM_in_forInStatement1990_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_forInStatement1993  */
static	ANTLR3_BITWORD FOLLOW_128_in_forInStatement1993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_forInStatement1993	= { FOLLOW_128_in_forInStatement1993_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1995  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1995	= { FOLLOW_LTERM_in_forInStatement1995_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement1998  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement1998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement1998	= { FOLLOW_statement_in_forInStatement1998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2022  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2022	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_forInStatementInitialiserPart2031  */
static	ANTLR3_BITWORD FOLLOW_131_in_forInStatementInitialiserPart2031_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_forInStatementInitialiserPart2031	= { FOLLOW_131_in_forInStatementInitialiserPart2031_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatementInitialiserPart2033  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatementInitialiserPart2033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatementInitialiserPart2033	= { FOLLOW_LTERM_in_forInStatementInitialiserPart2033_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2036  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2036	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2036_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_continueStatement2055  */
static	ANTLR3_BITWORD FOLLOW_143_in_continueStatement2055_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_continueStatement2055	= { FOLLOW_143_in_continueStatement2055_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2057  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2057	= { FOLLOW_Identifier_in_continueStatement2057_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_continueStatement2061  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_continueStatement2061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_continueStatement2061	= { FOLLOW_LTERM_in_continueStatement2061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_continueStatement2065  */
static	ANTLR3_BITWORD FOLLOW_132_in_continueStatement2065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_continueStatement2065	= { FOLLOW_132_in_continueStatement2065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_breakStatement2087  */
static	ANTLR3_BITWORD FOLLOW_144_in_breakStatement2087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_breakStatement2087	= { FOLLOW_144_in_breakStatement2087_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2089  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2089	= { FOLLOW_Identifier_in_breakStatement2089_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_breakStatement2093  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_breakStatement2093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_breakStatement2093	= { FOLLOW_LTERM_in_breakStatement2093_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_breakStatement2097  */
static	ANTLR3_BITWORD FOLLOW_132_in_breakStatement2097_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_breakStatement2097	= { FOLLOW_132_in_breakStatement2097_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_returnStatement2118  */
static	ANTLR3_BITWORD FOLLOW_145_in_returnStatement2118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000012), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_returnStatement2118	= { FOLLOW_145_in_returnStatement2118_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2120  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2120	= { FOLLOW_expression_in_returnStatement2120_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_returnStatement2124  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_returnStatement2124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_returnStatement2124	= { FOLLOW_LTERM_in_returnStatement2124_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_returnStatement2128  */
static	ANTLR3_BITWORD FOLLOW_132_in_returnStatement2128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_returnStatement2128	= { FOLLOW_132_in_returnStatement2128_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_withStatement2150  */
static	ANTLR3_BITWORD FOLLOW_146_in_withStatement2150_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_withStatement2150	= { FOLLOW_146_in_withStatement2150_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2152  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2152	= { FOLLOW_LTERM_in_withStatement2152_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_withStatement2155  */
static	ANTLR3_BITWORD FOLLOW_126_in_withStatement2155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_withStatement2155	= { FOLLOW_126_in_withStatement2155_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2157  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2157	= { FOLLOW_LTERM_in_withStatement2157_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2160  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2160	= { FOLLOW_expression_in_withStatement2160_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2162  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2162	= { FOLLOW_LTERM_in_withStatement2162_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_withStatement2165  */
static	ANTLR3_BITWORD FOLLOW_128_in_withStatement2165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_withStatement2165	= { FOLLOW_128_in_withStatement2165_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2167  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2167	= { FOLLOW_LTERM_in_withStatement2167_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2170  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2170	= { FOLLOW_statement_in_withStatement2170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_labelledStatement2191  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_labelledStatement2191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_labelledStatement2191	= { FOLLOW_Identifier_in_labelledStatement2191_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2193  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2193	= { FOLLOW_LTERM_in_labelledStatement2193_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_labelledStatement2196  */
static	ANTLR3_BITWORD FOLLOW_147_in_labelledStatement2196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_labelledStatement2196	= { FOLLOW_147_in_labelledStatement2196_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2198  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2198	= { FOLLOW_LTERM_in_labelledStatement2198_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labelledStatement2201  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labelledStatement2201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labelledStatement2201	= { FOLLOW_statement_in_labelledStatement2201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_switchStatement2224  */
static	ANTLR3_BITWORD FOLLOW_148_in_switchStatement2224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_switchStatement2224	= { FOLLOW_148_in_switchStatement2224_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2226  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2226	= { FOLLOW_LTERM_in_switchStatement2226_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_switchStatement2229  */
static	ANTLR3_BITWORD FOLLOW_126_in_switchStatement2229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_switchStatement2229	= { FOLLOW_126_in_switchStatement2229_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2231  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2231	= { FOLLOW_LTERM_in_switchStatement2231_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2234  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2234	= { FOLLOW_expression_in_switchStatement2234_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2236  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2236	= { FOLLOW_LTERM_in_switchStatement2236_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_switchStatement2239  */
static	ANTLR3_BITWORD FOLLOW_128_in_switchStatement2239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_switchStatement2239	= { FOLLOW_128_in_switchStatement2239_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2241  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2241	= { FOLLOW_LTERM_in_switchStatement2241_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2244  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2244	= { FOLLOW_caseBlock_in_switchStatement2244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_caseBlock2266  */
static	ANTLR3_BITWORD FOLLOW_129_in_caseBlock2266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000600004) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_caseBlock2266	= { FOLLOW_129_in_caseBlock2266_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2269  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2269	= { FOLLOW_LTERM_in_caseBlock2269_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2274  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000600004) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2274	= { FOLLOW_caseClause_in_caseBlock2274_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2279  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2279	= { FOLLOW_LTERM_in_caseBlock2279_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2282  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000200004) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2282	= { FOLLOW_defaultClause_in_caseBlock2282_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2285  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2285	= { FOLLOW_LTERM_in_caseBlock2285_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2290  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000200004) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2290	= { FOLLOW_caseClause_in_caseBlock2290_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2296  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2296	= { FOLLOW_LTERM_in_caseBlock2296_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_caseBlock2299  */
static	ANTLR3_BITWORD FOLLOW_130_in_caseBlock2299_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_caseBlock2299	= { FOLLOW_130_in_caseBlock2299_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_caseClause2336  */
static	ANTLR3_BITWORD FOLLOW_149_in_caseClause2336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_caseClause2336	= { FOLLOW_149_in_caseClause2336_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2338  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2338	= { FOLLOW_LTERM_in_caseClause2338_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause2341  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause2341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause2341	= { FOLLOW_expression_in_caseClause2341_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2343  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2343	= { FOLLOW_LTERM_in_caseClause2343_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_caseClause2346  */
static	ANTLR3_BITWORD FOLLOW_147_in_caseClause2346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_caseClause2346	= { FOLLOW_147_in_caseClause2346_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2348  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2348	= { FOLLOW_LTERM_in_caseClause2348_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2351  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2351	= { FOLLOW_statementList_in_caseClause2351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_defaultClause2376  */
static	ANTLR3_BITWORD FOLLOW_150_in_defaultClause2376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_defaultClause2376	= { FOLLOW_150_in_defaultClause2376_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2378  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2378	= { FOLLOW_LTERM_in_defaultClause2378_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_defaultClause2381  */
static	ANTLR3_BITWORD FOLLOW_147_in_defaultClause2381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_defaultClause2381	= { FOLLOW_147_in_defaultClause2381_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2383  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2383	= { FOLLOW_LTERM_in_defaultClause2383_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause2386  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause2386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause2386	= { FOLLOW_statementList_in_defaultClause2386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_throwStatement2408  */
static	ANTLR3_BITWORD FOLLOW_151_in_throwStatement2408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_throwStatement2408	= { FOLLOW_151_in_throwStatement2408_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement2410  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement2410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement2410	= { FOLLOW_expression_in_throwStatement2410_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_throwStatement2413  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_throwStatement2413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_throwStatement2413	= { FOLLOW_LTERM_in_throwStatement2413_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_throwStatement2417  */
static	ANTLR3_BITWORD FOLLOW_132_in_throwStatement2417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_throwStatement2417	= { FOLLOW_132_in_throwStatement2417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_tryStatement2438  */
static	ANTLR3_BITWORD FOLLOW_152_in_tryStatement2438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_tryStatement2438	= { FOLLOW_152_in_tryStatement2438_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2440  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2440	= { FOLLOW_LTERM_in_tryStatement2440_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement2443  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement2443_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement2443	= { FOLLOW_statementBlock_in_tryStatement2443_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2445  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2445	= { FOLLOW_LTERM_in_tryStatement2445_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2457  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2457	= { FOLLOW_finallyClause_in_tryStatement2457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchClause_in_tryStatement2469  */
static	ANTLR3_BITWORD FOLLOW_catchClause_in_tryStatement2469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_catchClause_in_tryStatement2469	= { FOLLOW_catchClause_in_tryStatement2469_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2472  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2472	= { FOLLOW_LTERM_in_tryStatement2472_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2475  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2475	= { FOLLOW_finallyClause_in_tryStatement2475_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_catchClause2508  */
static	ANTLR3_BITWORD FOLLOW_153_in_catchClause2508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_catchClause2508	= { FOLLOW_153_in_catchClause2508_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2510  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2510	= { FOLLOW_LTERM_in_catchClause2510_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_catchClause2513  */
static	ANTLR3_BITWORD FOLLOW_126_in_catchClause2513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_catchClause2513	= { FOLLOW_126_in_catchClause2513_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2515  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2515	= { FOLLOW_LTERM_in_catchClause2515_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause2518  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause2518_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause2518	= { FOLLOW_Identifier_in_catchClause2518_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2520  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2520	= { FOLLOW_LTERM_in_catchClause2520_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_catchClause2523  */
static	ANTLR3_BITWORD FOLLOW_128_in_catchClause2523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_catchClause2523	= { FOLLOW_128_in_catchClause2523_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2525  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2525	= { FOLLOW_LTERM_in_catchClause2525_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause2528  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause2528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause2528	= { FOLLOW_statementBlock_in_catchClause2528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_finallyClause2550  */
static	ANTLR3_BITWORD FOLLOW_154_in_finallyClause2550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_finallyClause2550	= { FOLLOW_154_in_finallyClause2550_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_finallyClause2552  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_finallyClause2552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_finallyClause2552	= { FOLLOW_LTERM_in_finallyClause2552_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause2555  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause2555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause2555	= { FOLLOW_statementBlock_in_finallyClause2555_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2580  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2580	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2580_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2583  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2583	= { FOLLOW_LTERM_in_msgSendStatement2583_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgSendStatement2586  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgSendStatement2586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgSendStatement2586	= { FOLLOW_155_in_msgSendStatement2586_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2591  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2591	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2591_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2594  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2594	= { FOLLOW_LTERM_in_msgSendStatement2594_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_msgSendStatement2598  */
static	ANTLR3_BITWORD FOLLOW_132_in_msgSendStatement2598_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_msgSendStatement2598	= { FOLLOW_132_in_msgSendStatement2598_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgSendStatement2617  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgSendStatement2617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgSendStatement2617	= { FOLLOW_155_in_msgSendStatement2617_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement2619  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement2619_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement2619	= { FOLLOW_memberExpression_in_msgSendStatement2619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2647  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2647	= { FOLLOW_memberExpression_in_msgRecvStatement2647_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2649  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2649	= { FOLLOW_LTERM_in_msgRecvStatement2649_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_msgRecvStatement2651  */
static	ANTLR3_BITWORD FOLLOW_156_in_msgRecvStatement2651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_msgRecvStatement2651	= { FOLLOW_156_in_msgRecvStatement2651_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2655  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2655	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2655_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2658  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2658	= { FOLLOW_LTERM_in_msgRecvStatement2658_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_msgRecvStatement2662  */
static	ANTLR3_BITWORD FOLLOW_132_in_msgRecvStatement2662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_msgRecvStatement2662	= { FOLLOW_132_in_msgRecvStatement2662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2683  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2683	= { FOLLOW_memberExpression_in_msgRecvStatement2683_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2685  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2685	= { FOLLOW_LTERM_in_msgRecvStatement2685_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_msgRecvStatement2687  */
static	ANTLR3_BITWORD FOLLOW_156_in_msgRecvStatement2687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_msgRecvStatement2687	= { FOLLOW_156_in_msgRecvStatement2687_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2691  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2691_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2691	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2691_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2693  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2693_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2693	= { FOLLOW_LTERM_in_msgRecvStatement2693_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_msgRecvStatement2696  */
static	ANTLR3_BITWORD FOLLOW_156_in_msgRecvStatement2696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_msgRecvStatement2696	= { FOLLOW_156_in_msgRecvStatement2696_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2700  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2700	= { FOLLOW_memberExpression_in_msgRecvStatement2700_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2703  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2703	= { FOLLOW_LTERM_in_msgRecvStatement2703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_msgRecvStatement2707  */
static	ANTLR3_BITWORD FOLLOW_132_in_msgRecvStatement2707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_msgRecvStatement2707	= { FOLLOW_132_in_msgRecvStatement2707_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2734  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2734	= { FOLLOW_assignmentExpression_in_expression2734_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2737  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2737	= { FOLLOW_LTERM_in_expression2737_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_expression2740  */
static	ANTLR3_BITWORD FOLLOW_127_in_expression2740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_expression2740	= { FOLLOW_127_in_expression2740_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2742  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2742	= { FOLLOW_LTERM_in_expression2742_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2745  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2745	= { FOLLOW_assignmentExpression_in_expression2745_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2769  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2769	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2769_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2772  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2772	= { FOLLOW_LTERM_in_expressionNoIn2772_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_expressionNoIn2775  */
static	ANTLR3_BITWORD FOLLOW_127_in_expressionNoIn2775_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_expressionNoIn2775	= { FOLLOW_127_in_expressionNoIn2775_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2777  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2777	= { FOLLOW_LTERM_in_expressionNoIn2777_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2780  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2780	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2780_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression2804  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression2804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression2804	= { FOLLOW_conditionalExpression_in_assignmentExpression2804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression2817  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression2817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x00000FFE00000020) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression2817	= { FOLLOW_leftHandSideExpression_in_assignmentExpression2817_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2819  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x00000FFE00000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2819	= { FOLLOW_LTERM_in_assignmentExpression2819_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpression2822  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpression2822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpression2822	= { FOLLOW_assignmentOperator_in_assignmentExpression2822_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2824  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2824	= { FOLLOW_LTERM_in_assignmentExpression2824_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression2827  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression2827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression2827	= { FOLLOW_assignmentExpression_in_assignmentExpression2827_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2851  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2851	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2851_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2864  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x00000FFE00000020) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2864	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2864_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2866  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x00000FFE00000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2866	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2866_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2869  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2869	= { FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2869_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2871  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2871_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2871	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2871_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2874  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2874	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression2899  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression2899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression2899	= { FOLLOW_callExpression_in_leftHandSideExpression2899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression2908  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression2908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression2908	= { FOLLOW_newExpression_in_leftHandSideExpression2908_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression2924  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression2924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression2924	= { FOLLOW_memberExpression_in_newExpression2924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_newExpression2933  */
static	ANTLR3_BITWORD FOLLOW_157_in_newExpression2933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_newExpression2933	= { FOLLOW_157_in_newExpression2933_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_newExpression2935  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_newExpression2935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_newExpression2935	= { FOLLOW_LTERM_in_newExpression2935_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression2938  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression2938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression2938	= { FOLLOW_newExpression_in_newExpression2938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_indexSuffix12960  */
static	ANTLR3_BITWORD FOLLOW_158_in_indexSuffix12960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_indexSuffix12960	= { FOLLOW_158_in_indexSuffix12960_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix12962  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix12962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix12962	= { FOLLOW_LTERM_in_indexSuffix12962_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix12965  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix12965_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix12965	= { FOLLOW_expression_in_indexSuffix12965_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix12967  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix12967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix12967	= { FOLLOW_LTERM_in_indexSuffix12967_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_indexSuffix12970  */
static	ANTLR3_BITWORD FOLLOW_159_in_indexSuffix12970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_indexSuffix12970	= { FOLLOW_159_in_indexSuffix12970_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_propertyReferenceSuffix12987  */
static	ANTLR3_BITWORD FOLLOW_160_in_propertyReferenceSuffix12987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_propertyReferenceSuffix12987	= { FOLLOW_160_in_propertyReferenceSuffix12987_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix12989  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix12989_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix12989	= { FOLLOW_LTERM_in_propertyReferenceSuffix12989_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix12992  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix12992_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix12992	= { FOLLOW_Identifier_in_propertyReferenceSuffix12992_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression3011  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression3011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression3011	= { FOLLOW_primaryExpression_in_memberExpression3011_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3020  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3020	= { FOLLOW_LTERM_in_memberExpression3020_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3023  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3023	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3023_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3040  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3040	= { FOLLOW_LTERM_in_memberExpression3040_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3043  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3043	= { FOLLOW_indexSuffix1_in_memberExpression3043_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression3062  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression3062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression3062	= { FOLLOW_functionExpression_in_memberExpression3062_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3070  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3070	= { FOLLOW_LTERM_in_memberExpression3070_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3073  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3073	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3073_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3090  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3090	= { FOLLOW_LTERM_in_memberExpression3090_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3093  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3093	= { FOLLOW_indexSuffix1_in_memberExpression3093_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_memberExpression3112  */
static	ANTLR3_BITWORD FOLLOW_157_in_memberExpression3112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_memberExpression3112	= { FOLLOW_157_in_memberExpression3112_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3114  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3114	= { FOLLOW_LTERM_in_memberExpression3114_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression3119  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression3119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression3119	= { FOLLOW_memberExpression_in_memberExpression3119_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3121  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3121	= { FOLLOW_LTERM_in_memberExpression3121_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression3124  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression3124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression3124	= { FOLLOW_arguments_in_memberExpression3124_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3139  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3139	= { FOLLOW_LTERM_in_memberExpression3139_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3142  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3142	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3142_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3155  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3155	= { FOLLOW_LTERM_in_memberExpression3155_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3158  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3158	= { FOLLOW_indexSuffix1_in_memberExpression3158_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix3187  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix3187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix3187	= { FOLLOW_indexSuffix_in_memberExpressionSuffix3187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3197  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3197	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression3217  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression3217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression3217	= { FOLLOW_memberExpression_in_callExpression3217_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3219  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3219	= { FOLLOW_LTERM_in_callExpression3219_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3222  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3222	= { FOLLOW_arguments_in_callExpression3222_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3236  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3236	= { FOLLOW_LTERM_in_callExpression3236_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3239  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3239	= { FOLLOW_arguments_in_callExpression3239_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3247  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3247	= { FOLLOW_LTERM_in_callExpression3247_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression3250  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression3250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression3250	= { FOLLOW_indexSuffix1_in_callExpression3250_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3265  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3265	= { FOLLOW_LTERM_in_callExpression3265_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression3268  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression3268_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x4000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression3268	= { FOLLOW_propertyReferenceSuffix1_in_callExpression3268_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix3295  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix3295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix3295	= { FOLLOW_arguments_in_callExpressionSuffix3295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix3304  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix3304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix3304	= { FOLLOW_indexSuffix_in_callExpressionSuffix3304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3313  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3313	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_arguments3328  */
static	ANTLR3_BITWORD FOLLOW_126_in_arguments3328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000003), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_arguments3328	= { FOLLOW_126_in_arguments3328_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3331  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3331	= { FOLLOW_LTERM_in_arguments3331_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3335  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3335	= { FOLLOW_assignmentExpression_in_arguments3335_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3339  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3339	= { FOLLOW_LTERM_in_arguments3339_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_arguments3342  */
static	ANTLR3_BITWORD FOLLOW_127_in_arguments3342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_arguments3342	= { FOLLOW_127_in_arguments3342_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3344  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3344	= { FOLLOW_LTERM_in_arguments3344_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3347  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3347	= { FOLLOW_assignmentExpression_in_arguments3347_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3353  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3353	= { FOLLOW_LTERM_in_arguments3353_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_arguments3356  */
static	ANTLR3_BITWORD FOLLOW_128_in_arguments3356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_arguments3356	= { FOLLOW_128_in_arguments3356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_indexSuffix3379  */
static	ANTLR3_BITWORD FOLLOW_158_in_indexSuffix3379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_indexSuffix3379	= { FOLLOW_158_in_indexSuffix3379_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3381  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3381	= { FOLLOW_LTERM_in_indexSuffix3381_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix3384  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix3384_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix3384	= { FOLLOW_expression_in_indexSuffix3384_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3386  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3386	= { FOLLOW_LTERM_in_indexSuffix3386_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_indexSuffix3389  */
static	ANTLR3_BITWORD FOLLOW_159_in_indexSuffix3389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_indexSuffix3389	= { FOLLOW_159_in_indexSuffix3389_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_propertyReferenceSuffix3410  */
static	ANTLR3_BITWORD FOLLOW_160_in_propertyReferenceSuffix3410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_propertyReferenceSuffix3410	= { FOLLOW_160_in_propertyReferenceSuffix3410_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix3412  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix3412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix3412	= { FOLLOW_LTERM_in_propertyReferenceSuffix3412_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix3415  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix3415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix3415	= { FOLLOW_Identifier_in_propertyReferenceSuffix3415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_assignmentOperator3435  */
static	ANTLR3_BITWORD FOLLOW_133_in_assignmentOperator3435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_assignmentOperator3435	= { FOLLOW_133_in_assignmentOperator3435_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_assignmentOperator3444  */
static	ANTLR3_BITWORD FOLLOW_161_in_assignmentOperator3444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_assignmentOperator3444	= { FOLLOW_161_in_assignmentOperator3444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_assignmentOperator3453  */
static	ANTLR3_BITWORD FOLLOW_162_in_assignmentOperator3453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_assignmentOperator3453	= { FOLLOW_162_in_assignmentOperator3453_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_assignmentOperator3463  */
static	ANTLR3_BITWORD FOLLOW_163_in_assignmentOperator3463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_assignmentOperator3463	= { FOLLOW_163_in_assignmentOperator3463_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_assignmentOperator3472  */
static	ANTLR3_BITWORD FOLLOW_164_in_assignmentOperator3472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_assignmentOperator3472	= { FOLLOW_164_in_assignmentOperator3472_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_assignmentOperator3481  */
static	ANTLR3_BITWORD FOLLOW_165_in_assignmentOperator3481_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_assignmentOperator3481	= { FOLLOW_165_in_assignmentOperator3481_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_assignmentOperator3490  */
static	ANTLR3_BITWORD FOLLOW_166_in_assignmentOperator3490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_assignmentOperator3490	= { FOLLOW_166_in_assignmentOperator3490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_assignmentOperator3499  */
static	ANTLR3_BITWORD FOLLOW_167_in_assignmentOperator3499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_assignmentOperator3499	= { FOLLOW_167_in_assignmentOperator3499_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_assignmentOperator3508  */
static	ANTLR3_BITWORD FOLLOW_168_in_assignmentOperator3508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_assignmentOperator3508	= { FOLLOW_168_in_assignmentOperator3508_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_assignmentOperator3517  */
static	ANTLR3_BITWORD FOLLOW_169_in_assignmentOperator3517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_assignmentOperator3517	= { FOLLOW_169_in_assignmentOperator3517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_assignmentOperator3525  */
static	ANTLR3_BITWORD FOLLOW_170_in_assignmentOperator3525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_assignmentOperator3525	= { FOLLOW_170_in_assignmentOperator3525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_assignmentOperator3534  */
static	ANTLR3_BITWORD FOLLOW_171_in_assignmentOperator3534_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_assignmentOperator3534	= { FOLLOW_171_in_assignmentOperator3534_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression3552  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression3552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression3552	= { FOLLOW_logicalORExpression_in_conditionalExpression3552_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3560  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3560	= { FOLLOW_LTERM_in_conditionalExpression3560_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_conditionalExpression3563  */
static	ANTLR3_BITWORD FOLLOW_172_in_conditionalExpression3563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_conditionalExpression3563	= { FOLLOW_172_in_conditionalExpression3563_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3565  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3565	= { FOLLOW_LTERM_in_conditionalExpression3565_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3570  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3570	= { FOLLOW_assignmentExpression_in_conditionalExpression3570_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3572  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3572	= { FOLLOW_LTERM_in_conditionalExpression3572_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_conditionalExpression3575  */
static	ANTLR3_BITWORD FOLLOW_147_in_conditionalExpression3575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_conditionalExpression3575	= { FOLLOW_147_in_conditionalExpression3575_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3577  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3577	= { FOLLOW_LTERM_in_conditionalExpression3577_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3582  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3582	= { FOLLOW_assignmentExpression_in_conditionalExpression3582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3613  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3613	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3613_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3620  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3620	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3620_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_conditionalExpressionNoIn3623  */
static	ANTLR3_BITWORD FOLLOW_172_in_conditionalExpressionNoIn3623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_conditionalExpressionNoIn3623	= { FOLLOW_172_in_conditionalExpressionNoIn3623_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3625  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3625	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3625_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3632  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3632	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3632_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_conditionalExpressionNoIn3635  */
static	ANTLR3_BITWORD FOLLOW_147_in_conditionalExpressionNoIn3635_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_conditionalExpressionNoIn3635	= { FOLLOW_147_in_conditionalExpressionNoIn3635_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3637  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3637	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3637_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3642  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3642	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3642_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3672  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3672	= { FOLLOW_logicalANDExpression_in_logicalORExpression3672_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3679  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3679	= { FOLLOW_LTERM_in_logicalORExpression3679_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_logicalORExpression3682  */
static	ANTLR3_BITWORD FOLLOW_173_in_logicalORExpression3682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_logicalORExpression3682	= { FOLLOW_173_in_logicalORExpression3682_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3684  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3684_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3684	= { FOLLOW_LTERM_in_logicalORExpression3684_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3687  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3687	= { FOLLOW_logicalANDExpression_in_logicalORExpression3687_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3714  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3714_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3714	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3714_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3721  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3721	= { FOLLOW_LTERM_in_logicalANDExpression3721_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_logicalANDExpression3724  */
static	ANTLR3_BITWORD FOLLOW_174_in_logicalANDExpression3724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_logicalANDExpression3724	= { FOLLOW_174_in_logicalANDExpression3724_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3726  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3726	= { FOLLOW_LTERM_in_logicalANDExpression3726_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3729  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3729_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3729	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3729_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3757  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3757	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3757_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3764  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3764	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3764_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_logicalORExpressionNoIn3767  */
static	ANTLR3_BITWORD FOLLOW_173_in_logicalORExpressionNoIn3767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_logicalORExpressionNoIn3767	= { FOLLOW_173_in_logicalORExpressionNoIn3767_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3769  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3769	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3769_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3772  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3772	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3772_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3801  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3801	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3801_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3809  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3809	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3809_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_logicalANDExpressionNoIn3812  */
static	ANTLR3_BITWORD FOLLOW_174_in_logicalANDExpressionNoIn3812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_logicalANDExpressionNoIn3812	= { FOLLOW_174_in_logicalANDExpressionNoIn3812_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3814  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3814_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3814	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3814_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3817  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3817	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3817_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3844  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3844	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3844_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3852  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3852	= { FOLLOW_LTERM_in_bitwiseORExpression3852_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_bitwiseORExpression3855  */
static	ANTLR3_BITWORD FOLLOW_175_in_bitwiseORExpression3855_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_bitwiseORExpression3855	= { FOLLOW_175_in_bitwiseORExpression3855_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3857  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3857_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3857	= { FOLLOW_LTERM_in_bitwiseORExpression3857_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3860  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3860	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3860_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3887  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3887	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3887_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn3895  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn3895_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn3895	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn3895_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_bitwiseORExpressionNoIn3898  */
static	ANTLR3_BITWORD FOLLOW_175_in_bitwiseORExpressionNoIn3898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_bitwiseORExpressionNoIn3898	= { FOLLOW_175_in_bitwiseORExpressionNoIn3898_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn3900  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn3900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn3900	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn3900_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3903  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3903	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3903_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3929  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3929	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3929_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression3937  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression3937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression3937	= { FOLLOW_LTERM_in_bitwiseXORExpression3937_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_bitwiseXORExpression3940  */
static	ANTLR3_BITWORD FOLLOW_176_in_bitwiseXORExpression3940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_bitwiseXORExpression3940	= { FOLLOW_176_in_bitwiseXORExpression3940_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression3942  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression3942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression3942	= { FOLLOW_LTERM_in_bitwiseXORExpression3942_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3945  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3945	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3945_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3972  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3972	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3972_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3979  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3979	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3979_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_bitwiseXORExpressionNoIn3982  */
static	ANTLR3_BITWORD FOLLOW_176_in_bitwiseXORExpressionNoIn3982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_bitwiseXORExpressionNoIn3982	= { FOLLOW_176_in_bitwiseXORExpressionNoIn3982_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3984  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3984	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3984_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3987  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3987	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3987_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4015  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4015	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4015_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4023  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4023	= { FOLLOW_LTERM_in_bitwiseANDExpression4023_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_bitwiseANDExpression4026  */
static	ANTLR3_BITWORD FOLLOW_177_in_bitwiseANDExpression4026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_bitwiseANDExpression4026	= { FOLLOW_177_in_bitwiseANDExpression4026_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4028  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4028	= { FOLLOW_LTERM_in_bitwiseANDExpression4028_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4031  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4031_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4031	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4031_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4059  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4059	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4059_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4067  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4067	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4067_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_bitwiseANDExpressionNoIn4070  */
static	ANTLR3_BITWORD FOLLOW_177_in_bitwiseANDExpressionNoIn4070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_bitwiseANDExpressionNoIn4070	= { FOLLOW_177_in_bitwiseANDExpressionNoIn4070_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4072  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4072	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4072_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4075  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4075_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4075	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4075_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4102  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4102	= { FOLLOW_relationalExpression_in_equalityExpression4102_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4109  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4109	= { FOLLOW_LTERM_in_equalityExpression4109_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpression4112  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpression4112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpression4112	= { FOLLOW_equalityOps_in_equalityExpression4112_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4114  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4114	= { FOLLOW_LTERM_in_equalityExpression4114_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4117  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4117	= { FOLLOW_relationalExpression_in_equalityExpression4117_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_equalityOps4142  */
static	ANTLR3_BITWORD FOLLOW_178_in_equalityOps4142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_equalityOps4142	= { FOLLOW_178_in_equalityOps4142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_equalityOps4152  */
static	ANTLR3_BITWORD FOLLOW_179_in_equalityOps4152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_equalityOps4152	= { FOLLOW_179_in_equalityOps4152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_equalityOps4162  */
static	ANTLR3_BITWORD FOLLOW_180_in_equalityOps4162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_equalityOps4162	= { FOLLOW_180_in_equalityOps4162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_equalityOps4172  */
static	ANTLR3_BITWORD FOLLOW_181_in_equalityOps4172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_equalityOps4172	= { FOLLOW_181_in_equalityOps4172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4189  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4189	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4189_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4196  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4196	= { FOLLOW_LTERM_in_equalityExpressionNoIn4196_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpressionNoIn4199  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpressionNoIn4199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpressionNoIn4199	= { FOLLOW_equalityOps_in_equalityExpressionNoIn4199_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4201  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4201	= { FOLLOW_LTERM_in_equalityExpressionNoIn4201_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4204  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x003C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4204	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4204_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_relationalOps4229  */
static	ANTLR3_BITWORD FOLLOW_182_in_relationalOps4229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_relationalOps4229	= { FOLLOW_182_in_relationalOps4229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_relationalOps4240  */
static	ANTLR3_BITWORD FOLLOW_183_in_relationalOps4240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_relationalOps4240	= { FOLLOW_183_in_relationalOps4240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_relationalOps4251  */
static	ANTLR3_BITWORD FOLLOW_184_in_relationalOps4251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_relationalOps4251	= { FOLLOW_184_in_relationalOps4251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_relationalOps4261  */
static	ANTLR3_BITWORD FOLLOW_185_in_relationalOps4261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_relationalOps4261	= { FOLLOW_185_in_relationalOps4261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_relationalOps4271  */
static	ANTLR3_BITWORD FOLLOW_186_in_relationalOps4271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_relationalOps4271	= { FOLLOW_186_in_relationalOps4271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_relationalOps4281  */
static	ANTLR3_BITWORD FOLLOW_142_in_relationalOps4281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_relationalOps4281	= { FOLLOW_142_in_relationalOps4281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4306  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x07C0000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4306	= { FOLLOW_shiftExpression_in_relationalExpression4306_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4314  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x07C0000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4314	= { FOLLOW_LTERM_in_relationalExpression4314_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression4317  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression4317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression4317	= { FOLLOW_relationalOps_in_relationalExpression4317_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4319  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4319	= { FOLLOW_LTERM_in_relationalExpression4319_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4322  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x07C0000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4322	= { FOLLOW_shiftExpression_in_relationalExpression4322_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_relationalOpsNoIn4346  */
static	ANTLR3_BITWORD FOLLOW_182_in_relationalOpsNoIn4346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_relationalOpsNoIn4346	= { FOLLOW_182_in_relationalOpsNoIn4346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_relationalOpsNoIn4357  */
static	ANTLR3_BITWORD FOLLOW_183_in_relationalOpsNoIn4357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_relationalOpsNoIn4357	= { FOLLOW_183_in_relationalOpsNoIn4357_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_relationalOpsNoIn4368  */
static	ANTLR3_BITWORD FOLLOW_184_in_relationalOpsNoIn4368_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_relationalOpsNoIn4368	= { FOLLOW_184_in_relationalOpsNoIn4368_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_relationalOpsNoIn4378  */
static	ANTLR3_BITWORD FOLLOW_185_in_relationalOpsNoIn4378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_relationalOpsNoIn4378	= { FOLLOW_185_in_relationalOpsNoIn4378_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_relationalOpsNoIn4388  */
static	ANTLR3_BITWORD FOLLOW_186_in_relationalOpsNoIn4388_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_relationalOpsNoIn4388	= { FOLLOW_186_in_relationalOpsNoIn4388_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4405  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x07C0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4405	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4405_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4413  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x07C0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4413	= { FOLLOW_LTERM_in_relationalExpressionNoIn4413_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4416  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4416_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4416	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4416_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4418  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4418	= { FOLLOW_LTERM_in_relationalExpressionNoIn4418_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4421  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4421_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x07C0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4421	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4421_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_shiftOps4444  */
static	ANTLR3_BITWORD FOLLOW_187_in_shiftOps4444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_shiftOps4444	= { FOLLOW_187_in_shiftOps4444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_shiftOps4454  */
static	ANTLR3_BITWORD FOLLOW_188_in_shiftOps4454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_shiftOps4454	= { FOLLOW_188_in_shiftOps4454_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_shiftOps4463  */
static	ANTLR3_BITWORD FOLLOW_189_in_shiftOps4463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_shiftOps4463	= { FOLLOW_189_in_shiftOps4463_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4480  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x3800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4480	= { FOLLOW_additiveExpression_in_shiftExpression4480_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4487  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x3800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4487	= { FOLLOW_LTERM_in_shiftExpression4487_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftOps_in_shiftExpression4490  */
static	ANTLR3_BITWORD FOLLOW_shiftOps_in_shiftExpression4490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftOps_in_shiftExpression4490	= { FOLLOW_shiftOps_in_shiftExpression4490_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4492  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4492	= { FOLLOW_LTERM_in_shiftExpression4492_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4495  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x3800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4495	= { FOLLOW_additiveExpression_in_shiftExpression4495_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_addOps4521  */
static	ANTLR3_BITWORD FOLLOW_190_in_addOps4521_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_addOps4521	= { FOLLOW_190_in_addOps4521_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_addOps4531  */
static	ANTLR3_BITWORD FOLLOW_191_in_addOps4531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_addOps4531	= { FOLLOW_191_in_addOps4531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4549  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0xC000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4549	= { FOLLOW_multiplicativeExpression_in_additiveExpression4549_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4556  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0xC000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4556	= { FOLLOW_LTERM_in_additiveExpression4556_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_additiveExpression4559  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_additiveExpression4559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_additiveExpression4559	= { FOLLOW_addOps_in_additiveExpression4559_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4561  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4561	= { FOLLOW_LTERM_in_additiveExpression4561_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4564  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0xC000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4564	= { FOLLOW_multiplicativeExpression_in_additiveExpression4564_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_multOps4589  */
static	ANTLR3_BITWORD FOLLOW_192_in_multOps4589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_multOps4589	= { FOLLOW_192_in_multOps4589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_multOps4599  */
static	ANTLR3_BITWORD FOLLOW_193_in_multOps4599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_multOps4599	= { FOLLOW_193_in_multOps4599_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_multOps4609  */
static	ANTLR3_BITWORD FOLLOW_194_in_multOps4609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_multOps4609	= { FOLLOW_194_in_multOps4609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4626  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4626	= { FOLLOW_unaryExpression_in_multiplicativeExpression4626_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4634  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4634	= { FOLLOW_LTERM_in_multiplicativeExpression4634_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multOps_in_multiplicativeExpression4637  */
static	ANTLR3_BITWORD FOLLOW_multOps_in_multiplicativeExpression4637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_multOps_in_multiplicativeExpression4637	= { FOLLOW_multOps_in_multiplicativeExpression4637_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4639  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4639	= { FOLLOW_LTERM_in_multiplicativeExpression4639_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4642  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4642	= { FOLLOW_unaryExpression_in_multiplicativeExpression4642_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression4667  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression4667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000018) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression4667	= { FOLLOW_leftHandSideExpression_in_postfixExpression4667_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_postfixExpression4676  */
static	ANTLR3_BITWORD FOLLOW_195_in_postfixExpression4676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_postfixExpression4676	= { FOLLOW_195_in_postfixExpression4676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_postfixExpression4689  */
static	ANTLR3_BITWORD FOLLOW_196_in_postfixExpression4689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_postfixExpression4689	= { FOLLOW_196_in_postfixExpression4689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_unaryOps4709  */
static	ANTLR3_BITWORD FOLLOW_197_in_unaryOps4709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_unaryOps4709	= { FOLLOW_197_in_unaryOps4709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_unaryOps4719  */
static	ANTLR3_BITWORD FOLLOW_198_in_unaryOps4719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_unaryOps4719	= { FOLLOW_198_in_unaryOps4719_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_unaryOps4729  */
static	ANTLR3_BITWORD FOLLOW_199_in_unaryOps4729_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_unaryOps4729	= { FOLLOW_199_in_unaryOps4729_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_unaryOps4739  */
static	ANTLR3_BITWORD FOLLOW_196_in_unaryOps4739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_unaryOps4739	= { FOLLOW_196_in_unaryOps4739_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_unaryOps4750  */
static	ANTLR3_BITWORD FOLLOW_195_in_unaryOps4750_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_unaryOps4750	= { FOLLOW_195_in_unaryOps4750_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_unaryOps4761  */
static	ANTLR3_BITWORD FOLLOW_190_in_unaryOps4761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_unaryOps4761	= { FOLLOW_190_in_unaryOps4761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_unaryOps4773  */
static	ANTLR3_BITWORD FOLLOW_191_in_unaryOps4773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_unaryOps4773	= { FOLLOW_191_in_unaryOps4773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_unaryOps4785  */
static	ANTLR3_BITWORD FOLLOW_200_in_unaryOps4785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_unaryOps4785	= { FOLLOW_200_in_unaryOps4785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_unaryOps4797  */
static	ANTLR3_BITWORD FOLLOW_201_in_unaryOps4797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_unaryOps4797	= { FOLLOW_201_in_unaryOps4797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression4816  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression4816_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression4816	= { FOLLOW_postfixExpression_in_unaryExpression4816_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryOps_in_unaryExpression4829  */
static	ANTLR3_BITWORD FOLLOW_unaryOps_in_unaryExpression4829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryOps_in_unaryExpression4829	= { FOLLOW_unaryOps_in_unaryExpression4829_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression4833  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression4833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression4833	= { FOLLOW_unaryExpression_in_unaryExpression4833_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_primaryExpression4855  */
static	ANTLR3_BITWORD FOLLOW_202_in_primaryExpression4855_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_primaryExpression4855	= { FOLLOW_202_in_primaryExpression4855_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression4860  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression4860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression4860	= { FOLLOW_Identifier_in_primaryExpression4860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression4865  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression4865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression4865	= { FOLLOW_literal_in_primaryExpression4865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression4870  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression4870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression4870	= { FOLLOW_arrayLiteral_in_primaryExpression4870_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression4875  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression4875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression4875	= { FOLLOW_objectLiteral_in_primaryExpression4875_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_primaryExpression4880  */
static	ANTLR3_BITWORD FOLLOW_126_in_primaryExpression4880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_primaryExpression4880	= { FOLLOW_126_in_primaryExpression4880_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression4882  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression4882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression4882	= { FOLLOW_LTERM_in_primaryExpression4882_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression4885  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression4885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression4885	= { FOLLOW_expression_in_primaryExpression4885_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression4887  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression4887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression4887	= { FOLLOW_LTERM_in_primaryExpression4887_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_primaryExpression4890  */
static	ANTLR3_BITWORD FOLLOW_128_in_primaryExpression4890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_primaryExpression4890	= { FOLLOW_128_in_primaryExpression4890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_arrayLiteral4914  */
static	ANTLR3_BITWORD FOLLOW_158_in_arrayLiteral4914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC0000000E0000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_arrayLiteral4914	= { FOLLOW_158_in_arrayLiteral4914_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4916  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC0000000E0000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4916	= { FOLLOW_LTERM_in_arrayLiteral4916_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4920  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4920	= { FOLLOW_assignmentExpression_in_arrayLiteral4920_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4924  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4924	= { FOLLOW_LTERM_in_arrayLiteral4924_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_arrayLiteral4927  */
static	ANTLR3_BITWORD FOLLOW_159_in_arrayLiteral4927_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_arrayLiteral4927	= { FOLLOW_159_in_arrayLiteral4927_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_arrayLiteral4941  */
static	ANTLR3_BITWORD FOLLOW_158_in_arrayLiteral4941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_arrayLiteral4941	= { FOLLOW_158_in_arrayLiteral4941_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4943  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4943	= { FOLLOW_LTERM_in_arrayLiteral4943_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4948  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4948	= { FOLLOW_assignmentExpression_in_arrayLiteral4948_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_arrayLiteral4951  */
static	ANTLR3_BITWORD FOLLOW_127_in_arrayLiteral4951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_arrayLiteral4951	= { FOLLOW_127_in_arrayLiteral4951_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4953  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4953	= { FOLLOW_LTERM_in_arrayLiteral4953_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4958  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4958	= { FOLLOW_assignmentExpression_in_arrayLiteral4958_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4962  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4962	= { FOLLOW_LTERM_in_arrayLiteral4962_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_arrayLiteral4965  */
static	ANTLR3_BITWORD FOLLOW_159_in_arrayLiteral4965_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_arrayLiteral4965	= { FOLLOW_159_in_arrayLiteral4965_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_objectLiteral4996  */
static	ANTLR3_BITWORD FOLLOW_129_in_objectLiteral4996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003C00000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_objectLiteral4996	= { FOLLOW_129_in_objectLiteral4996_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4998  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003C00000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4998	= { FOLLOW_LTERM_in_objectLiteral4998_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5001  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5001	= { FOLLOW_propertyNameAndValue_in_objectLiteral5001_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5004  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5004	= { FOLLOW_LTERM_in_objectLiteral5004_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_objectLiteral5007  */
static	ANTLR3_BITWORD FOLLOW_130_in_objectLiteral5007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_objectLiteral5007	= { FOLLOW_130_in_objectLiteral5007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_objectLiteral5021  */
static	ANTLR3_BITWORD FOLLOW_129_in_objectLiteral5021_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_objectLiteral5021	= { FOLLOW_129_in_objectLiteral5021_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5023  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5023	= { FOLLOW_LTERM_in_objectLiteral5023_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5028  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5028	= { FOLLOW_propertyNameAndValue_in_objectLiteral5028_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_objectLiteral5031  */
static	ANTLR3_BITWORD FOLLOW_127_in_objectLiteral5031_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_objectLiteral5031	= { FOLLOW_127_in_objectLiteral5031_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5033  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5033	= { FOLLOW_LTERM_in_objectLiteral5033_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5038  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5038	= { FOLLOW_propertyNameAndValue_in_objectLiteral5038_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5042  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5042	= { FOLLOW_LTERM_in_objectLiteral5042_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_objectLiteral5049  */
static	ANTLR3_BITWORD FOLLOW_130_in_objectLiteral5049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_objectLiteral5049	= { FOLLOW_130_in_objectLiteral5049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue5073  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue5073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue5073	= { FOLLOW_propertyName_in_propertyNameAndValue5073_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue5075  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue5075_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue5075	= { FOLLOW_LTERM_in_propertyNameAndValue5075_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_propertyNameAndValue5078  */
static	ANTLR3_BITWORD FOLLOW_147_in_propertyNameAndValue5078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_propertyNameAndValue5078	= { FOLLOW_147_in_propertyNameAndValue5078_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue5080  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue5080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue5080	= { FOLLOW_LTERM_in_propertyNameAndValue5080_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_propertyNameAndValue5083  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_propertyNameAndValue5083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_propertyNameAndValue5083	= { FOLLOW_assignmentExpression_in_propertyNameAndValue5083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_propertyName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_propertyName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_propertyName0	= { FOLLOW_set_in_propertyName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_synpred5_Emerson834  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_synpred5_Emerson834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_synpred5_Emerson834	= { FOLLOW_functionDeclaration_in_synpred5_Emerson834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred9_Emerson901  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred9_Emerson901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred9_Emerson901	= { FOLLOW_LTERM_in_synpred9_Emerson901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred23_Emerson1042  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred23_Emerson1042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred23_Emerson1042	= { FOLLOW_statementBlock_in_synpred23_Emerson1042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred26_Emerson1057  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred26_Emerson1057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred26_Emerson1057	= { FOLLOW_expressionStatement_in_synpred26_Emerson1057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_synpred33_Emerson1092  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_synpred33_Emerson1092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_synpred33_Emerson1092	= { FOLLOW_labelledStatement_in_synpred33_Emerson1092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_synpred38_Emerson1120  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_synpred38_Emerson1120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_synpred38_Emerson1120	= { FOLLOW_msgSendStatement_in_synpred38_Emerson1120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred53_Emerson1299  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred53_Emerson1299_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred53_Emerson1299	= { FOLLOW_LTERM_in_synpred53_Emerson1299_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred55_Emerson1328  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred55_Emerson1328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred55_Emerson1328	= { FOLLOW_LTERM_in_synpred55_Emerson1328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred67_Emerson1550  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred67_Emerson1550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred67_Emerson1550	= { FOLLOW_LTERM_in_synpred67_Emerson1550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred70_Emerson1600  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred70_Emerson1600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred70_Emerson1600	= { FOLLOW_LTERM_in_synpred70_Emerson1600_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_synpred72_Emerson1604  */
static	ANTLR3_BITWORD FOLLOW_127_in_synpred72_Emerson1604_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_synpred72_Emerson1604	= { FOLLOW_127_in_synpred72_Emerson1604_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred72_Emerson1606  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred72_Emerson1606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred72_Emerson1606	= { FOLLOW_LTERM_in_synpred72_Emerson1606_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1611  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1611	= { FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1611_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred79_Emerson1673  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred79_Emerson1673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred79_Emerson1673	= { FOLLOW_LTERM_in_synpred79_Emerson1673_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_synpred79_Emerson1676  */
static	ANTLR3_BITWORD FOLLOW_138_in_synpred79_Emerson1676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_synpred79_Emerson1676	= { FOLLOW_138_in_synpred79_Emerson1676_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred79_Emerson1678  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred79_Emerson1678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC00000006197BA5A), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred79_Emerson1678	= { FOLLOW_LTERM_in_synpred79_Emerson1678_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred79_Emerson1683  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred79_Emerson1683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred79_Emerson1683	= { FOLLOW_statement_in_synpred79_Emerson1683_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_synpred82_Emerson1722  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_synpred82_Emerson1722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_synpred82_Emerson1722	= { FOLLOW_forStatement_in_synpred82_Emerson1722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred137_Emerson2348  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred137_Emerson2348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred137_Emerson2348	= { FOLLOW_LTERM_in_synpred137_Emerson2348_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred140_Emerson2383  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred140_Emerson2383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred140_Emerson2383	= { FOLLOW_LTERM_in_synpred140_Emerson2383_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred158_Emerson2647  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred158_Emerson2647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred158_Emerson2647	= { FOLLOW_memberExpression_in_synpred158_Emerson2647_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred158_Emerson2649  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred158_Emerson2649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred158_Emerson2649	= { FOLLOW_LTERM_in_synpred158_Emerson2649_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_synpred158_Emerson2651  */
static	ANTLR3_BITWORD FOLLOW_156_in_synpred158_Emerson2651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003800000000), ANTLR3_UINT64_LIT(0x0000000060000002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_synpred158_Emerson2651	= { FOLLOW_156_in_synpred158_Emerson2651_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred158_Emerson2655  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred158_Emerson2655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred158_Emerson2655	= { FOLLOW_leftHandSideExpression_in_synpred158_Emerson2655_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred158_Emerson2657  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred158_Emerson2657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred158_Emerson2657	= { FOLLOW_set_in_synpred158_Emerson2657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred164_Emerson2737  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred164_Emerson2737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred164_Emerson2737	= { FOLLOW_LTERM_in_synpred164_Emerson2737_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_synpred164_Emerson2740  */
static	ANTLR3_BITWORD FOLLOW_127_in_synpred164_Emerson2740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_synpred164_Emerson2740	= { FOLLOW_127_in_synpred164_Emerson2740_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred164_Emerson2742  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred164_Emerson2742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred164_Emerson2742	= { FOLLOW_LTERM_in_synpred164_Emerson2742_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred164_Emerson2745  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred164_Emerson2745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred164_Emerson2745	= { FOLLOW_assignmentExpression_in_synpred164_Emerson2745_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_synpred168_Emerson2804  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_synpred168_Emerson2804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_synpred168_Emerson2804	= { FOLLOW_conditionalExpression_in_synpred168_Emerson2804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_synpred171_Emerson2851  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_synpred171_Emerson2851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_synpred171_Emerson2851	= { FOLLOW_conditionalExpressionNoIn_in_synpred171_Emerson2851_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred174_Emerson2899  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred174_Emerson2899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred174_Emerson2899	= { FOLLOW_callExpression_in_synpred174_Emerson2899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred175_Emerson2924  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred175_Emerson2924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred175_Emerson2924	= { FOLLOW_memberExpression_in_synpred175_Emerson2924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred181_Emerson3020  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred181_Emerson3020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred181_Emerson3020	= { FOLLOW_LTERM_in_synpred181_Emerson3020_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3023  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3023	= { FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3023_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred183_Emerson3040  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred183_Emerson3040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred183_Emerson3040	= { FOLLOW_LTERM_in_synpred183_Emerson3040_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred183_Emerson3043  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred183_Emerson3043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred183_Emerson3043	= { FOLLOW_indexSuffix1_in_synpred183_Emerson3043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred186_Emerson3070  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred186_Emerson3070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred186_Emerson3070	= { FOLLOW_LTERM_in_synpred186_Emerson3070_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred186_Emerson3073  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred186_Emerson3073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred186_Emerson3073	= { FOLLOW_propertyReferenceSuffix1_in_synpred186_Emerson3073_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred188_Emerson3090  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred188_Emerson3090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred188_Emerson3090	= { FOLLOW_LTERM_in_synpred188_Emerson3090_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred188_Emerson3093  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred188_Emerson3093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred188_Emerson3093	= { FOLLOW_indexSuffix1_in_synpred188_Emerson3093_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred193_Emerson3139  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred193_Emerson3139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred193_Emerson3139	= { FOLLOW_LTERM_in_synpred193_Emerson3139_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred193_Emerson3142  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred193_Emerson3142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred193_Emerson3142	= { FOLLOW_propertyReferenceSuffix1_in_synpred193_Emerson3142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred195_Emerson3155  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred195_Emerson3155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred195_Emerson3155	= { FOLLOW_LTERM_in_synpred195_Emerson3155_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred195_Emerson3158  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred195_Emerson3158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred195_Emerson3158	= { FOLLOW_indexSuffix1_in_synpred195_Emerson3158_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred199_Emerson3236  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred199_Emerson3236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred199_Emerson3236	= { FOLLOW_LTERM_in_synpred199_Emerson3236_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred199_Emerson3239  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred199_Emerson3239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred199_Emerson3239	= { FOLLOW_arguments_in_synpred199_Emerson3239_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred201_Emerson3247  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred201_Emerson3247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred201_Emerson3247	= { FOLLOW_LTERM_in_synpred201_Emerson3247_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred201_Emerson3250  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred201_Emerson3250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred201_Emerson3250	= { FOLLOW_indexSuffix1_in_synpred201_Emerson3250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred203_Emerson3265  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred203_Emerson3265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred203_Emerson3265	= { FOLLOW_LTERM_in_synpred203_Emerson3265_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred203_Emerson3268  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred203_Emerson3268_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred203_Emerson3268	= { FOLLOW_propertyReferenceSuffix1_in_synpred203_Emerson3268_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred298_Emerson4556  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred298_Emerson4556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0xC000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred298_Emerson4556	= { FOLLOW_LTERM_in_synpred298_Emerson4556_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_synpred298_Emerson4559  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_synpred298_Emerson4559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_synpred298_Emerson4559	= { FOLLOW_addOps_in_synpred298_Emerson4559_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred298_Emerson4561  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred298_Emerson4561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC000000060000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred298_Emerson4561	= { FOLLOW_LTERM_in_synpred298_Emerson4561_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_synpred298_Emerson4564  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_synpred298_Emerson4564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_synpred298_Emerson4564	= { FOLLOW_multiplicativeExpression_in_synpred298_Emerson4564_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_synpred304_Emerson4676  */
static	ANTLR3_BITWORD FOLLOW_195_in_synpred304_Emerson4676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_synpred304_Emerson4676	= { FOLLOW_195_in_synpred304_Emerson4676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_synpred305_Emerson4689  */
static	ANTLR3_BITWORD FOLLOW_196_in_synpred305_Emerson4689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_synpred305_Emerson4689	= { FOLLOW_196_in_synpred305_Emerson4689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred322_Emerson4916  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred322_Emerson4916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred322_Emerson4916	= { FOLLOW_LTERM_in_synpred322_Emerson4916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_synpred325_Emerson4914  */
static	ANTLR3_BITWORD FOLLOW_158_in_synpred325_Emerson4914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC0000000E0000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_synpred325_Emerson4914	= { FOLLOW_158_in_synpred325_Emerson4914_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred325_Emerson4916  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred325_Emerson4916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x6000003C00000000), ANTLR3_UINT64_LIT(0xC0000000E0000002), ANTLR3_UINT64_LIT(0x0000000000003FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred325_Emerson4916	= { FOLLOW_LTERM_in_synpred325_Emerson4916_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred325_Emerson4920  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred325_Emerson4920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred325_Emerson4920	= { FOLLOW_assignmentExpression_in_synpred325_Emerson4920_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred325_Emerson4924  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred325_Emerson4924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred325_Emerson4924	= { FOLLOW_LTERM_in_synpred325_Emerson4924_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_synpred325_Emerson4927  */
static	ANTLR3_BITWORD FOLLOW_159_in_synpred325_Emerson4927_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_synpred325_Emerson4927	= { FOLLOW_159_in_synpred325_Emerson4927_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred330_Emerson4998  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred330_Emerson4998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred330_Emerson4998	= { FOLLOW_LTERM_in_synpred330_Emerson4998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_synpred333_Emerson4996  */
static	ANTLR3_BITWORD FOLLOW_129_in_synpred333_Emerson4996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003C00000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_synpred333_Emerson4996	= { FOLLOW_129_in_synpred333_Emerson4996_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred333_Emerson4998  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred333_Emerson4998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000003C00000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred333_Emerson4998	= { FOLLOW_LTERM_in_synpred333_Emerson4998_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred333_Emerson5001  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred333_Emerson5001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred333_Emerson5001	= { FOLLOW_propertyNameAndValue_in_synpred333_Emerson5001_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred333_Emerson5004  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred333_Emerson5004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred333_Emerson5004	= { FOLLOW_LTERM_in_synpred333_Emerson5004_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_synpred333_Emerson5007  */
static	ANTLR3_BITWORD FOLLOW_130_in_synpred333_Emerson5007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_synpred333_Emerson5007	= { FOLLOW_130_in_synpred333_Emerson5007_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 135:18: ( ( LTERM )* sourceElement )*
 */
static const ANTLR3_INT32 dfa4_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa4_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa4_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa4_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa4_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa4_T_empty	    NULL

static const ANTLR3_INT32 dfa4_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, -1, 
	3, -1, 3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa4_transitions[] =
{
    dfa4_T0, dfa4_T0, dfa4_T_empty, dfa4_T_empty	
};


/* Declare tracking structure for Cyclic DFA 4
 */
static
ANTLR3_CYCLIC_DFA cdfa4
    =	{
	    4,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 135:18: ( ( LTERM )* sourceElement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa4_eot,	    /* EOT table			    */
	    dfa4_eof,	    /* EOF table			    */
	    dfa4_min,	    /* Minimum tokens for each state    */
	    dfa4_max,	    /* Maximum tokens for each state    */
	    dfa4_accept,	/* Accept table			    */
	    dfa4_special,	/* Special transition states	    */
	    dfa4_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 4
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    138:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static const ANTLR3_INT32 dfa5_eot[33] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[33] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[33] =
    {
	99, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_max[33] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_accept[33] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa5_special[33] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, -1, 2, 
	-1, 2, 2, 2, -1, 2, 2, 2, 2, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa5_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T0, dfa5_T1, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty	
};

static ANTLR3_INT32 dfa5_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA5_1;

    	    ANTLR3_MARKER index5_1;


    		LA5_1 = LA(1);

    	 
    	    index5_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred5_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index5_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"138:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );";
    EXCEPTION->decisionNum  = 5;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"138:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );",	
	    (CDFA_SPECIAL_FUNC) dfa5_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    153:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?
 */
static const ANTLR3_INT32 dfa17_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa17_max[4] =
    {
	128, 128, -1, -1
    };
static const ANTLR3_INT32 dfa17_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa17_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa17_T_empty	    NULL

static const ANTLR3_INT32 dfa17_T0[] =
    {
	1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa17_transitions[] =
{
    dfa17_T0, dfa17_T0, dfa17_T_empty, dfa17_T_empty	
};


/* Declare tracking structure for Cyclic DFA 17
 */
static
ANTLR3_CYCLIC_DFA cdfa17
    =	{
	    17,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"153:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa17_eot,	    /* EOT table			    */
	    dfa17_eof,	    /* EOF table			    */
	    dfa17_min,	    /* Minimum tokens for each state    */
	    dfa17_max,	    /* Maximum tokens for each state    */
	    dfa17_accept,	/* Accept table			    */
	    dfa17_special,	/* Special transition states	    */
	    dfa17_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 17
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 153:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*
 */
static const ANTLR3_INT32 dfa16_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa16_max[4] =
    {
	128, 128, -1, -1
    };
static const ANTLR3_INT32 dfa16_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa16_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa16_T_empty	    NULL

static const ANTLR3_INT32 dfa16_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa16_transitions[] =
{
    dfa16_T0, dfa16_T0, dfa16_T_empty, dfa16_T_empty	
};


/* Declare tracking structure for Cyclic DFA 16
 */
static
ANTLR3_CYCLIC_DFA cdfa16
    =	{
	    16,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 153:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa16_eot,	    /* EOT table			    */
	    dfa16_eof,	    /* EOF table			    */
	    dfa16_min,	    /* Minimum tokens for each state    */
	    dfa16_max,	    /* Maximum tokens for each state    */
	    dfa16_accept,	/* Accept table			    */
	    dfa16_special,	/* Special transition states	    */
	    dfa16_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 16
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    156:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa22_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_min[5] =
    {
	129, 98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa22_max[5] =
    {
	129, 205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa22_accept[5] =
    {
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa22_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa22_T_empty	    NULL

static const ANTLR3_INT32 dfa22_T0[] =
    {
	1
    };static const ANTLR3_INT32 dfa22_T1[] =
    {
	2, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, 3, 4, 4, -1, 4, -1, -1, 
	4, -1, 4, 4, 4, -1, 4, 4, 4, 4, -1, 4, -1, -1, 4, 4, -1, -1, -1, -1, 4, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, -1, 
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa22_transitions[] =
{
    dfa22_T0, dfa22_T1, dfa22_T1, dfa22_T_empty, dfa22_T_empty	
};


/* Declare tracking structure for Cyclic DFA 22
 */
static
ANTLR3_CYCLIC_DFA cdfa22
    =	{
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"156:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 22
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    162:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static const ANTLR3_INT32 dfa23_eot[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[36] =
    {
	99, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[36] =
    {
	205, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[36] =
    {
	-1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, 6, -1, -1, 7, 8, 9, 10, 12, 13, 14, 15, 1, 16, 17, 11
    };
static const ANTLR3_INT32 dfa23_special[36] =
    {	
	-1, 0, -1, -1, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	5, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 1, -1, 2, 3, -1, 30, -1, -1, 
	20, -1, 21, 21, 21, -1, 24, 25, 26, 27, -1, 28, -1, -1, 29, 31, -1, -1, 
	-1, -1, 10, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 
	11, -1, -1, -1, 11, 11, 11, 11, 11, 11, 11, 4, 6, 6, 6
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T0, dfa23_T1, dfa23_T_empty, dfa23_T_empty, dfa23_T1, dfa23_T1, 
    dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty	
};

static ANTLR3_INT32 dfa23_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA23_1;

    	    ANTLR3_MARKER index23_1;


    		LA23_1 = LA(1);

    	 
    	    index23_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred23_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred38_Emerson(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index23_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA23_4;

    	    ANTLR3_MARKER index23_4;


    		LA23_4 = LA(1);

    	 
    	    index23_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred38_Emerson(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index23_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA23_5;

    	    ANTLR3_MARKER index23_5;


    		LA23_5 = LA(1);

    	 
    	    index23_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred33_Emerson(ctx)) )
    	    {
    	        s = 35;
    	    }

    	    else if ( (synpred38_Emerson(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index23_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA23_6;

    	    ANTLR3_MARKER index23_6;


    		LA23_6 = LA(1);

    	 
    	    index23_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred38_Emerson(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index23_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA23_7;

    	    ANTLR3_MARKER index23_7;


    		LA23_7 = LA(1);

    	 
    	    index23_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred38_Emerson(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index23_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA23_8;

    	    ANTLR3_MARKER index23_8;


    		LA23_8 = LA(1);

    	 
    	    index23_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred38_Emerson(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index23_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA23_9;

    	    ANTLR3_MARKER index23_9;


    		LA23_9 = LA(1);

    	 
    	    index23_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred38_Emerson(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index23_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA23_10;

    	    ANTLR3_MARKER index23_10;


    		LA23_10 = LA(1);

    	 
    	    index23_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred38_Emerson(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index23_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"162:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );";
    EXCEPTION->decisionNum  = 23;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"162:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa23_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 23
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    182:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa27_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_min[5] =
    {
	129, 98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa27_max[5] =
    {
	129, 205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa27_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa27_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa27_T_empty	    NULL

static const ANTLR3_INT32 dfa27_T0[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 4, 3, 3, -1, 3, -1, -1, 
	3, -1, 3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa27_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa27_transitions[] =
{
    dfa27_T1, dfa27_T0, dfa27_T0, dfa27_T_empty, dfa27_T_empty	
};


/* Declare tracking structure for Cyclic DFA 27
 */
static
ANTLR3_CYCLIC_DFA cdfa27
    =	{
	    27,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"182:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa27_eot,	    /* EOT table			    */
	    dfa27_eof,	    /* EOF table			    */
	    dfa27_min,	    /* Minimum tokens for each state    */
	    dfa27_max,	    /* Maximum tokens for each state    */
	    dfa27_accept,	/* Accept table			    */
	    dfa27_special,	/* Special transition states	    */
	    dfa27_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 27
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 188:14: ( ( LTERM )* statement )*
 */
static const ANTLR3_INT32 dfa29_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa29_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa29_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa29_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa29_T_empty	    NULL

static const ANTLR3_INT32 dfa29_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, -1, 
	3, -1, 3, 3, 3, -1, 3, 3, 3, 3, -1, 3, 2, 2, 3, 3, -1, -1, -1, -1, 3, 3, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa29_transitions[] =
{
    dfa29_T0, dfa29_T0, dfa29_T_empty, dfa29_T_empty	
};


/* Declare tracking structure for Cyclic DFA 29
 */
static
ANTLR3_CYCLIC_DFA cdfa29
    =	{
	    29,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 188:14: ( ( LTERM )* statement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa29_eot,	    /* EOT table			    */
	    dfa29_eof,	    /* EOF table			    */
	    dfa29_min,	    /* Minimum tokens for each state    */
	    dfa29_max,	    /* Maximum tokens for each state    */
	    dfa29_accept,	/* Accept table			    */
	    dfa29_special,	/* Special transition states	    */
	    dfa29_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 29
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 196:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
 */
static const ANTLR3_INT32 dfa34_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa34_eof[5] =
    {
	-1, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa34_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa34_max[5] =
    {
	132, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa34_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa34_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa34_T_empty	    NULL

static const ANTLR3_INT32 dfa34_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };static const ANTLR3_INT32 dfa34_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, 2, 2, 2, 2, -1, 2, -1, -1, 
	2, 2, 2, 2, 2, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa34_transitions[] =
{
    dfa34_T0, dfa34_T1, dfa34_T_empty, dfa34_T_empty, dfa34_T1	
};


/* Declare tracking structure for Cyclic DFA 34
 */
static
ANTLR3_CYCLIC_DFA cdfa34
    =	{
	    34,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 196:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa34_eot,	    /* EOT table			    */
	    dfa34_eof,	    /* EOF table			    */
	    dfa34_min,	    /* Minimum tokens for each state    */
	    dfa34_max,	    /* Maximum tokens for each state    */
	    dfa34_accept,	/* Accept table			    */
	    dfa34_special,	/* Special transition states	    */
	    dfa34_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 34
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 200:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
 */
static const ANTLR3_INT32 dfa37_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa37_max[4] =
    {
	132, 132, -1, -1
    };
static const ANTLR3_INT32 dfa37_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa37_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa37_T_empty	    NULL

static const ANTLR3_INT32 dfa37_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa37_transitions[] =
{
    dfa37_T0, dfa37_T0, dfa37_T_empty, dfa37_T_empty	
};


/* Declare tracking structure for Cyclic DFA 37
 */
static
ANTLR3_CYCLIC_DFA cdfa37
    =	{
	    37,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 200:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa37_eot,	    /* EOT table			    */
	    dfa37_eof,	    /* EOF table			    */
	    dfa37_min,	    /* Minimum tokens for each state    */
	    dfa37_max,	    /* Maximum tokens for each state    */
	    dfa37_accept,	/* Accept table			    */
	    dfa37_special,	/* Special transition states	    */
	    dfa37_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 37
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    267:21: ( ( LTERM )* init= forStatementInitialiserPart )?
 */
static const ANTLR3_INT32 dfa76_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa76_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa76_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa76_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa76_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa76_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa76_T_empty	    NULL

static const ANTLR3_INT32 dfa76_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 2, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa76_transitions[] =
{
    dfa76_T0, dfa76_T0, dfa76_T_empty, dfa76_T_empty	
};


/* Declare tracking structure for Cyclic DFA 76
 */
static
ANTLR3_CYCLIC_DFA cdfa76
    =	{
	    76,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"267:21: ( ( LTERM )* init= forStatementInitialiserPart )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa76_eot,	    /* EOT table			    */
	    dfa76_eof,	    /* EOF table			    */
	    dfa76_min,	    /* Minimum tokens for each state    */
	    dfa76_max,	    /* Maximum tokens for each state    */
	    dfa76_accept,	/* Accept table			    */
	    dfa76_special,	/* Special transition states	    */
	    dfa76_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 76
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    267:75: ( ( LTERM )* cond= expression )?
 */
static const ANTLR3_INT32 dfa79_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa79_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa79_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa79_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa79_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa79_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa79_T_empty	    NULL

static const ANTLR3_INT32 dfa79_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa79_transitions[] =
{
    dfa79_T0, dfa79_T0, dfa79_T_empty, dfa79_T_empty	
};


/* Declare tracking structure for Cyclic DFA 79
 */
static
ANTLR3_CYCLIC_DFA cdfa79
    =	{
	    79,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"267:75: ( ( LTERM )* cond= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa79_eot,	    /* EOT table			    */
	    dfa79_eof,	    /* EOF table			    */
	    dfa79_min,	    /* Minimum tokens for each state    */
	    dfa79_max,	    /* Maximum tokens for each state    */
	    dfa79_accept,	/* Accept table			    */
	    dfa79_special,	/* Special transition states	    */
	    dfa79_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 79
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    267:112: ( ( LTERM )* iter= expression )?
 */
static const ANTLR3_INT32 dfa82_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa82_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa82_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa82_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa82_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa82_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa82_T_empty	    NULL

static const ANTLR3_INT32 dfa82_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa82_transitions[] =
{
    dfa82_T0, dfa82_T0, dfa82_T_empty, dfa82_T_empty	
};


/* Declare tracking structure for Cyclic DFA 82
 */
static
ANTLR3_CYCLIC_DFA cdfa82
    =	{
	    82,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"267:112: ( ( LTERM )* iter= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa82_eot,	    /* EOT table			    */
	    dfa82_eof,	    /* EOF table			    */
	    dfa82_min,	    /* Minimum tokens for each state    */
	    dfa82_max,	    /* Maximum tokens for each state    */
	    dfa82_accept,	/* Accept table			    */
	    dfa82_special,	/* Special transition states	    */
	    dfa82_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 82
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 309:8: ( ( LTERM )* case1= caseClause )*
 */
static const ANTLR3_INT32 dfa112_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa112_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa112_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa112_max[4] =
    {
	150, 150, -1, -1
    };
static const ANTLR3_INT32 dfa112_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa112_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa112_T_empty	    NULL

static const ANTLR3_INT32 dfa112_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa112_transitions[] =
{
    dfa112_T0, dfa112_T0, dfa112_T_empty, dfa112_T_empty	
};


/* Declare tracking structure for Cyclic DFA 112
 */
static
ANTLR3_CYCLIC_DFA cdfa112
    =	{
	    112,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 309:8: ( ( LTERM )* case1= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa112_eot,	    /* EOT table			    */
	    dfa112_eof,	    /* EOF table			    */
	    dfa112_min,	    /* Minimum tokens for each state    */
	    dfa112_max,	    /* Maximum tokens for each state    */
	    dfa112_accept,	/* Accept table			    */
	    dfa112_special,	/* Special transition states	    */
	    dfa112_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 112
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    309:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
 */
static const ANTLR3_INT32 dfa116_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa116_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa116_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa116_max[4] =
    {
	150, 150, -1, -1
    };
static const ANTLR3_INT32 dfa116_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa116_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa116_T_empty	    NULL

static const ANTLR3_INT32 dfa116_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa116_transitions[] =
{
    dfa116_T0, dfa116_T0, dfa116_T_empty, dfa116_T_empty	
};


/* Declare tracking structure for Cyclic DFA 116
 */
static
ANTLR3_CYCLIC_DFA cdfa116
    =	{
	    116,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"309:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa116_eot,	    /* EOT table			    */
	    dfa116_eof,	    /* EOF table			    */
	    dfa116_min,	    /* Minimum tokens for each state    */
	    dfa116_max,	    /* Maximum tokens for each state    */
	    dfa116_accept,	/* Accept table			    */
	    dfa116_special,	/* Special transition states	    */
	    dfa116_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 116
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 309:57: ( ( LTERM )* case2= caseClause )*
 */
static const ANTLR3_INT32 dfa115_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa115_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa115_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa115_max[4] =
    {
	149, 149, -1, -1
    };
static const ANTLR3_INT32 dfa115_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa115_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa115_T_empty	    NULL

static const ANTLR3_INT32 dfa115_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa115_transitions[] =
{
    dfa115_T0, dfa115_T0, dfa115_T_empty, dfa115_T_empty	
};


/* Declare tracking structure for Cyclic DFA 115
 */
static
ANTLR3_CYCLIC_DFA cdfa115
    =	{
	    115,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 309:57: ( ( LTERM )* case2= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa115_eot,	    /* EOT table			    */
	    dfa115_eof,	    /* EOF table			    */
	    dfa115_min,	    /* Minimum tokens for each state    */
	    dfa115_max,	    /* Maximum tokens for each state    */
	    dfa115_accept,	/* Accept table			    */
	    dfa115_special,	/* Special transition states	    */
	    dfa115_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 115
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    325:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
 */
static const ANTLR3_INT32 dfa129_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa129_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa129_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa129_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa129_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa129_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa129_T_empty	    NULL

static const ANTLR3_INT32 dfa129_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 3, 3, 3, -1, 3, -1, -1, 
	3, 3, 3, 3, 3, -1, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, -1, 2, -1, -1, 3, 3, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa129_transitions[] =
{
    dfa129_T0, dfa129_T0, dfa129_T_empty, dfa129_T_empty	
};


/* Declare tracking structure for Cyclic DFA 129
 */
static
ANTLR3_CYCLIC_DFA cdfa129
    =	{
	    129,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"325:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa129_eot,	    /* EOT table			    */
	    dfa129_eof,	    /* EOF table			    */
	    dfa129_min,	    /* Minimum tokens for each state    */
	    dfa129_max,	    /* Maximum tokens for each state    */
	    dfa129_accept,	/* Accept table			    */
	    dfa129_special,	/* Special transition states	    */
	    dfa129_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 129
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    345:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static const ANTLR3_INT32 dfa144_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa144_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa144_min[11] =
    {
	99, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa144_max[11] =
    {
	205, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa144_accept[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa144_special[11] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa144_T_empty	    NULL

static const ANTLR3_INT32 dfa144_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa144_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa144_transitions[] =
{
    dfa144_T0, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, 
    dfa144_T1, dfa144_T1, dfa144_T_empty, dfa144_T_empty	
};

static ANTLR3_INT32 dfa144_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA144_1;

    	    ANTLR3_MARKER index144_1;


    		LA144_1 = LA(1);

    	 
    	    index144_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA144_2;

    	    ANTLR3_MARKER index144_2;


    		LA144_2 = LA(1);

    	 
    	    index144_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA144_3;

    	    ANTLR3_MARKER index144_3;


    		LA144_3 = LA(1);

    	 
    	    index144_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA144_4;

    	    ANTLR3_MARKER index144_4;


    		LA144_4 = LA(1);

    	 
    	    index144_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA144_5;

    	    ANTLR3_MARKER index144_5;


    		LA144_5 = LA(1);

    	 
    	    index144_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA144_6;

    	    ANTLR3_MARKER index144_6;


    		LA144_6 = LA(1);

    	 
    	    index144_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA144_7;

    	    ANTLR3_MARKER index144_7;


    		LA144_7 = LA(1);

    	 
    	    index144_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA144_8;

    	    ANTLR3_MARKER index144_8;


    		LA144_8 = LA(1);

    	 
    	    index144_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"345:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );";
    EXCEPTION->decisionNum  = 144;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 144
 */
static
ANTLR3_CYCLIC_DFA cdfa144
    =	{
	    144,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"345:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );",	
	    (CDFA_SPECIAL_FUNC) dfa144_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa144_eot,	    /* EOT table			    */
	    dfa144_eof,	    /* EOF table			    */
	    dfa144_min,	    /* Minimum tokens for each state    */
	    dfa144_max,	    /* Maximum tokens for each state    */
	    dfa144_accept,	/* Accept table			    */
	    dfa144_special,	/* Special transition states	    */
	    dfa144_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 144
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 352:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
 */
static const ANTLR3_INT32 dfa147_eot[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_eof[40] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_min[40] =
    {
	98, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa147_max[40] =
    {
	205, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_accept[40] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa147_special[40] =
    {	
	-1, 0, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa147_T_empty	    NULL

static const ANTLR3_INT32 dfa147_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 6, 2, 2, -1, 2, 2, -1, 2, -1, 2, 
	2, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa147_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa147_transitions[] =
{
    dfa147_T0, dfa147_T1, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T1, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty	
};

static ANTLR3_INT32 dfa147_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA147_1;

    	    ANTLR3_MARKER index147_1;


    		LA147_1 = LA(1);

    	 
    	    index147_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 39;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index147_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA147_6;

    	    ANTLR3_MARKER index147_6;


    		LA147_6 = LA(1);

    	 
    	    index147_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 39;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index147_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 352:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*";
    EXCEPTION->decisionNum  = 147;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 147
 */
static
ANTLR3_CYCLIC_DFA cdfa147
    =	{
	    147,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 352:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*",	
	    (CDFA_SPECIAL_FUNC) dfa147_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa147_eot,	    /* EOT table			    */
	    dfa147_eof,	    /* EOF table			    */
	    dfa147_min,	    /* Minimum tokens for each state    */
	    dfa147_max,	    /* Maximum tokens for each state    */
	    dfa147_accept,	/* Accept table			    */
	    dfa147_special,	/* Special transition states	    */
	    dfa147_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 147
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 356:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
 */
static const ANTLR3_INT32 dfa150_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa150_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa150_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa150_max[4] =
    {
	132, 132, -1, -1
    };
static const ANTLR3_INT32 dfa150_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa150_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa150_T_empty	    NULL

static const ANTLR3_INT32 dfa150_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa150_transitions[] =
{
    dfa150_T0, dfa150_T0, dfa150_T_empty, dfa150_T_empty	
};


/* Declare tracking structure for Cyclic DFA 150
 */
static
ANTLR3_CYCLIC_DFA cdfa150
    =	{
	    150,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 356:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa150_eot,	    /* EOT table			    */
	    dfa150_eof,	    /* EOF table			    */
	    dfa150_min,	    /* Minimum tokens for each state    */
	    dfa150_max,	    /* Maximum tokens for each state    */
	    dfa150_accept,	/* Accept table			    */
	    dfa150_special,	/* Special transition states	    */
	    dfa150_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 150
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    360:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static const ANTLR3_INT32 dfa153_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa153_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa153_min[19] =
    {
	99, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_max[19] =
    {
	205, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_accept[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa153_special[19] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa153_T_empty	    NULL

static const ANTLR3_INT32 dfa153_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, -1, 
	-1, -1, 9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa153_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa153_transitions[] =
{
    dfa153_T0, dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T1, 
    dfa153_T1, dfa153_T1, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty	
};

static ANTLR3_INT32 dfa153_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA153_1;

    	    ANTLR3_MARKER index153_1;


    		LA153_1 = LA(1);

    	 
    	    index153_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA153_2;

    	    ANTLR3_MARKER index153_2;


    		LA153_2 = LA(1);

    	 
    	    index153_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA153_3;

    	    ANTLR3_MARKER index153_3;


    		LA153_3 = LA(1);

    	 
    	    index153_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA153_4;

    	    ANTLR3_MARKER index153_4;


    		LA153_4 = LA(1);

    	 
    	    index153_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA153_5;

    	    ANTLR3_MARKER index153_5;


    		LA153_5 = LA(1);

    	 
    	    index153_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA153_6;

    	    ANTLR3_MARKER index153_6;


    		LA153_6 = LA(1);

    	 
    	    index153_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA153_7;

    	    ANTLR3_MARKER index153_7;


    		LA153_7 = LA(1);

    	 
    	    index153_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA153_8;

    	    ANTLR3_MARKER index153_8;


    		LA153_8 = LA(1);

    	 
    	    index153_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index153_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"360:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );";
    EXCEPTION->decisionNum  = 153;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 153
 */
static
ANTLR3_CYCLIC_DFA cdfa153
    =	{
	    153,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"360:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa153_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa153_eot,	    /* EOT table			    */
	    dfa153_eof,	    /* EOF table			    */
	    dfa153_min,	    /* Minimum tokens for each state    */
	    dfa153_max,	    /* Maximum tokens for each state    */
	    dfa153_accept,	/* Accept table			    */
	    dfa153_special,	/* Special transition states	    */
	    dfa153_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 153
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    365:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static const ANTLR3_INT32 dfa156_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa156_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa156_min[19] =
    {
	99, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_max[19] =
    {
	205, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_accept[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa156_special[19] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa156_T_empty	    NULL

static const ANTLR3_INT32 dfa156_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, -1, 
	-1, -1, 9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa156_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa156_transitions[] =
{
    dfa156_T0, dfa156_T1, dfa156_T1, dfa156_T1, dfa156_T1, dfa156_T1, dfa156_T1, 
    dfa156_T1, dfa156_T1, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty	
};

static ANTLR3_INT32 dfa156_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA156_1;

    	    ANTLR3_MARKER index156_1;


    		LA156_1 = LA(1);

    	 
    	    index156_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index156_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA156_2;

    	    ANTLR3_MARKER index156_2;


    		LA156_2 = LA(1);

    	 
    	    index156_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index156_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA156_3;

    	    ANTLR3_MARKER index156_3;


    		LA156_3 = LA(1);

    	 
    	    index156_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index156_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA156_4;

    	    ANTLR3_MARKER index156_4;


    		LA156_4 = LA(1);

    	 
    	    index156_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index156_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA156_5;

    	    ANTLR3_MARKER index156_5;


    		LA156_5 = LA(1);

    	 
    	    index156_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index156_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA156_6;

    	    ANTLR3_MARKER index156_6;


    		LA156_6 = LA(1);

    	 
    	    index156_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index156_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA156_7;

    	    ANTLR3_MARKER index156_7;


    		LA156_7 = LA(1);

    	 
    	    index156_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index156_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA156_8;

    	    ANTLR3_MARKER index156_8;


    		LA156_8 = LA(1);

    	 
    	    index156_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index156_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"365:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );";
    EXCEPTION->decisionNum  = 156;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 156
 */
static
ANTLR3_CYCLIC_DFA cdfa156
    =	{
	    156,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"365:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );",	
	    (CDFA_SPECIAL_FUNC) dfa156_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa156_eot,	    /* EOT table			    */
	    dfa156_eof,	    /* EOF table			    */
	    dfa156_min,	    /* Minimum tokens for each state    */
	    dfa156_max,	    /* Maximum tokens for each state    */
	    dfa156_accept,	/* Accept table			    */
	    dfa156_special,	/* Special transition states	    */
	    dfa156_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 156
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    370:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static const ANTLR3_INT32 dfa157_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa157_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa157_min[11] =
    {
	99, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa157_max[11] =
    {
	205, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa157_accept[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa157_special[11] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa157_T_empty	    NULL

static const ANTLR3_INT32 dfa157_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa157_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa157_transitions[] =
{
    dfa157_T0, dfa157_T1, dfa157_T1, dfa157_T1, dfa157_T1, dfa157_T1, dfa157_T1, 
    dfa157_T1, dfa157_T1, dfa157_T_empty, dfa157_T_empty	
};

static ANTLR3_INT32 dfa157_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA157_1;

    	    ANTLR3_MARKER index157_1;


    		LA157_1 = LA(1);

    	 
    	    index157_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index157_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA157_2;

    	    ANTLR3_MARKER index157_2;


    		LA157_2 = LA(1);

    	 
    	    index157_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index157_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA157_3;

    	    ANTLR3_MARKER index157_3;


    		LA157_3 = LA(1);

    	 
    	    index157_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index157_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA157_4;

    	    ANTLR3_MARKER index157_4;


    		LA157_4 = LA(1);

    	 
    	    index157_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index157_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA157_5;

    	    ANTLR3_MARKER index157_5;


    		LA157_5 = LA(1);

    	 
    	    index157_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index157_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA157_6;

    	    ANTLR3_MARKER index157_6;


    		LA157_6 = LA(1);

    	 
    	    index157_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index157_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA157_7;

    	    ANTLR3_MARKER index157_7;


    		LA157_7 = LA(1);

    	 
    	    index157_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index157_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA157_8;

    	    ANTLR3_MARKER index157_8;


    		LA157_8 = LA(1);

    	 
    	    index157_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index157_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"370:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );";
    EXCEPTION->decisionNum  = 157;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 157
 */
static
ANTLR3_CYCLIC_DFA cdfa157
    =	{
	    157,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"370:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa157_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa157_eot,	    /* EOT table			    */
	    dfa157_eof,	    /* EOF table			    */
	    dfa157_min,	    /* Minimum tokens for each state    */
	    dfa157_max,	    /* Maximum tokens for each state    */
	    dfa157_accept,	/* Accept table			    */
	    dfa157_special,	/* Special transition states	    */
	    dfa157_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 157
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    375:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa159_eot[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_eof[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_min[10] =
    {
	99, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa159_max[10] =
    {
	205, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa159_accept[10] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa159_special[10] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa159_T_empty	    NULL

static const ANTLR3_INT32 dfa159_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa159_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa159_transitions[] =
{
    dfa159_T0, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T1, dfa159_T_empty	
};

static ANTLR3_INT32 dfa159_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA159_8;

    	    ANTLR3_MARKER index159_8;


    		LA159_8 = LA(1);

    	 
    	    index159_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred175_Emerson(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 9;
    	    }

    	 
    		SEEK(index159_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"375:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 159;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 159
 */
static
ANTLR3_CYCLIC_DFA cdfa159
    =	{
	    159,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"375:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa159_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa159_eot,	    /* EOT table			    */
	    dfa159_eof,	    /* EOF table			    */
	    dfa159_min,	    /* Minimum tokens for each state    */
	    dfa159_max,	    /* Maximum tokens for each state    */
	    dfa159_accept,	/* Accept table			    */
	    dfa159_special,	/* Special transition states	    */
	    dfa159_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 159
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 393:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa165_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_min[81] =
    {
	98, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_max[81] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa165_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa165_T_empty	    NULL

static const ANTLR3_INT32 dfa165_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 79, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa165_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa165_transitions[] =
{
    dfa165_T0, dfa165_T1, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T1, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty	
};

static ANTLR3_INT32 dfa165_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA165_1;

    	    ANTLR3_MARKER index165_1;


    		LA165_1 = LA(1);

    	 
    	    index165_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred181_Emerson(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred183_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index165_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA165_9;

    	    ANTLR3_MARKER index165_9;


    		LA165_9 = LA(1);

    	 
    	    index165_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred183_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index165_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 393:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 165;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 165
 */
static
ANTLR3_CYCLIC_DFA cdfa165
    =	{
	    165,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 393:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa165_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa165_eot,	    /* EOT table			    */
	    dfa165_eof,	    /* EOF table			    */
	    dfa165_min,	    /* Minimum tokens for each state    */
	    dfa165_max,	    /* Maximum tokens for each state    */
	    dfa165_accept,	/* Accept table			    */
	    dfa165_special,	/* Special transition states	    */
	    dfa165_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 165
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 394:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa168_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa168_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa168_min[81] =
    {
	98, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa168_max[81] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa168_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa168_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa168_T_empty	    NULL

static const ANTLR3_INT32 dfa168_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 79, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa168_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa168_transitions[] =
{
    dfa168_T0, dfa168_T1, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T1, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty	
};

static ANTLR3_INT32 dfa168_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA168_1;

    	    ANTLR3_MARKER index168_1;


    		LA168_1 = LA(1);

    	 
    	    index168_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred186_Emerson(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred188_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index168_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA168_9;

    	    ANTLR3_MARKER index168_9;


    		LA168_9 = LA(1);

    	 
    	    index168_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred188_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index168_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 394:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 168;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 168
 */
static
ANTLR3_CYCLIC_DFA cdfa168
    =	{
	    168,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 394:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa168_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa168_eot,	    /* EOT table			    */
	    dfa168_eof,	    /* EOF table			    */
	    dfa168_min,	    /* Minimum tokens for each state    */
	    dfa168_max,	    /* Maximum tokens for each state    */
	    dfa168_accept,	/* Accept table			    */
	    dfa168_special,	/* Special transition states	    */
	    dfa168_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 168
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 395:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa173_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa173_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa173_min[81] =
    {
	98, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa173_max[81] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa173_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa173_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa173_T_empty	    NULL

static const ANTLR3_INT32 dfa173_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 79, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa173_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa173_transitions[] =
{
    dfa173_T0, dfa173_T1, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T1, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, dfa173_T_empty, 
    dfa173_T_empty	
};

static ANTLR3_INT32 dfa173_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA173_1;

    	    ANTLR3_MARKER index173_1;


    		LA173_1 = LA(1);

    	 
    	    index173_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred193_Emerson(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred195_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index173_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA173_9;

    	    ANTLR3_MARKER index173_9;


    		LA173_9 = LA(1);

    	 
    	    index173_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred195_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index173_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 395:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 173;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 173
 */
static
ANTLR3_CYCLIC_DFA cdfa173
    =	{
	    173,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 395:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa173_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa173_eot,	    /* EOT table			    */
	    dfa173_eof,	    /* EOF table			    */
	    dfa173_min,	    /* Minimum tokens for each state    */
	    dfa173_max,	    /* Maximum tokens for each state    */
	    dfa173_accept,	/* Accept table			    */
	    dfa173_special,	/* Special transition states	    */
	    dfa173_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 173
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 404:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa180_eot[79] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa180_eof[79] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa180_min[79] =
    {
	98, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa180_max[79] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa180_accept[79] =
    {
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, 1, 2
    };
static const ANTLR3_INT32 dfa180_special[79] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa180_T_empty	    NULL

static const ANTLR3_INT32 dfa180_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 53, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, 2, 2, 2, 52, 2, 
	76, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa180_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa180_transitions[] =
{
    dfa180_T0, dfa180_T1, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T1, dfa180_T1, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, 
    dfa180_T_empty, dfa180_T_empty, dfa180_T_empty, dfa180_T_empty	
};

static ANTLR3_INT32 dfa180_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA180_1;

    	    ANTLR3_MARKER index180_1;


    		LA180_1 = LA(1);

    	 
    	    index180_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred199_Emerson(ctx)) )
    	    {
    	        s = 77;
    	    }

    	    else if ( (synpred201_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (synpred203_Emerson(ctx)) )
    	    {
    	        s = 76;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index180_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA180_52;

    	    ANTLR3_MARKER index180_52;


    		LA180_52 = LA(1);

    	 
    	    index180_52 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred201_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index180_52);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA180_53;

    	    ANTLR3_MARKER index180_53;


    		LA180_53 = LA(1);

    	 
    	    index180_53 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred199_Emerson(ctx)) )
    	    {
    	        s = 77;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index180_53);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 404:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*";
    EXCEPTION->decisionNum  = 180;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 180
 */
static
ANTLR3_CYCLIC_DFA cdfa180
    =	{
	    180,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 404:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa180_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa180_eot,	    /* EOT table			    */
	    dfa180_eof,	    /* EOF table			    */
	    dfa180_min,	    /* Minimum tokens for each state    */
	    dfa180_max,	    /* Maximum tokens for each state    */
	    dfa180_accept,	/* Accept table			    */
	    dfa180_special,	/* Special transition states	    */
	    dfa180_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 180
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    414:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?
 */
static const ANTLR3_INT32 dfa186_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa186_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa186_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa186_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa186_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa186_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa186_T_empty	    NULL

static const ANTLR3_INT32 dfa186_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa186_transitions[] =
{
    dfa186_T0, dfa186_T0, dfa186_T_empty, dfa186_T_empty	
};


/* Declare tracking structure for Cyclic DFA 186
 */
static
ANTLR3_CYCLIC_DFA cdfa186
    =	{
	    186,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"414:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa186_eot,	    /* EOT table			    */
	    dfa186_eof,	    /* EOF table			    */
	    dfa186_min,	    /* Minimum tokens for each state    */
	    dfa186_max,	    /* Maximum tokens for each state    */
	    dfa186_accept,	/* Accept table			    */
	    dfa186_special,	/* Special transition states	    */
	    dfa186_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 186
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 414:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
 */
static const ANTLR3_INT32 dfa185_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa185_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa185_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa185_max[4] =
    {
	128, 128, -1, -1
    };
static const ANTLR3_INT32 dfa185_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa185_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa185_T_empty	    NULL

static const ANTLR3_INT32 dfa185_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa185_transitions[] =
{
    dfa185_T0, dfa185_T0, dfa185_T_empty, dfa185_T_empty	
};


/* Declare tracking structure for Cyclic DFA 185
 */
static
ANTLR3_CYCLIC_DFA cdfa185
    =	{
	    185,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 414:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa185_eot,	    /* EOT table			    */
	    dfa185_eof,	    /* EOF table			    */
	    dfa185_min,	    /* Minimum tokens for each state    */
	    dfa185_max,	    /* Maximum tokens for each state    */
	    dfa185_accept,	/* Accept table			    */
	    dfa185_special,	/* Special transition states	    */
	    dfa185_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 185
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    431:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa196_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa196_eof[5] =
    {
	3, 3, -1, -1, 3
    };
static const ANTLR3_INT32 dfa196_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa196_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa196_accept[5] =
    {
	-1, -1, 1, 2, -1
    };
static const ANTLR3_INT32 dfa196_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa196_T_empty	    NULL

static const ANTLR3_INT32 dfa196_T0[] =
    {
	4, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, 3, -1, 3, 3, 
	3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, 3, 3, 3, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa196_T1[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, 3, -1, 3, 3, 
	-1, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa196_transitions[] =
{
    dfa196_T1, dfa196_T0, dfa196_T_empty, dfa196_T_empty, dfa196_T0	
};


/* Declare tracking structure for Cyclic DFA 196
 */
static
ANTLR3_CYCLIC_DFA cdfa196
    =	{
	    196,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"431:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa196_eot,	    /* EOT table			    */
	    dfa196_eof,	    /* EOF table			    */
	    dfa196_min,	    /* Minimum tokens for each state    */
	    dfa196_max,	    /* Maximum tokens for each state    */
	    dfa196_accept,	/* Accept table			    */
	    dfa196_special,	/* Special transition states	    */
	    dfa196_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 196
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    435:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa201_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa201_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa201_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa201_max[4] =
    {
	172, 172, -1, -1
    };
static const ANTLR3_INT32 dfa201_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa201_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa201_T_empty	    NULL

static const ANTLR3_INT32 dfa201_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa201_transitions[] =
{
    dfa201_T0, dfa201_T0, dfa201_T_empty, dfa201_T_empty	
};


/* Declare tracking structure for Cyclic DFA 201
 */
static
ANTLR3_CYCLIC_DFA cdfa201
    =	{
	    201,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"435:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa201_eot,	    /* EOT table			    */
	    dfa201_eof,	    /* EOF table			    */
	    dfa201_min,	    /* Minimum tokens for each state    */
	    dfa201_max,	    /* Maximum tokens for each state    */
	    dfa201_accept,	/* Accept table			    */
	    dfa201_special,	/* Special transition states	    */
	    dfa201_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 201
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 440:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
 */
static const ANTLR3_INT32 dfa204_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa204_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa204_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa204_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa204_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa204_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa204_T_empty	    NULL

static const ANTLR3_INT32 dfa204_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa204_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa204_transitions[] =
{
    dfa204_T0, dfa204_T1, dfa204_T_empty, dfa204_T_empty, dfa204_T1	
};


/* Declare tracking structure for Cyclic DFA 204
 */
static
ANTLR3_CYCLIC_DFA cdfa204
    =	{
	    204,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 440:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa204_eot,	    /* EOT table			    */
	    dfa204_eof,	    /* EOF table			    */
	    dfa204_min,	    /* Minimum tokens for each state    */
	    dfa204_max,	    /* Maximum tokens for each state    */
	    dfa204_accept,	/* Accept table			    */
	    dfa204_special,	/* Special transition states	    */
	    dfa204_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 204
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 444:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
 */
static const ANTLR3_INT32 dfa207_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa207_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa207_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa207_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa207_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa207_T_empty	    NULL

static const ANTLR3_INT32 dfa207_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa207_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa207_transitions[] =
{
    dfa207_T1, dfa207_T0, dfa207_T_empty, dfa207_T_empty, dfa207_T0	
};


/* Declare tracking structure for Cyclic DFA 207
 */
static
ANTLR3_CYCLIC_DFA cdfa207
    =	{
	    207,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 444:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa207_eot,	    /* EOT table			    */
	    dfa207_eof,	    /* EOF table			    */
	    dfa207_min,	    /* Minimum tokens for each state    */
	    dfa207_max,	    /* Maximum tokens for each state    */
	    dfa207_accept,	/* Accept table			    */
	    dfa207_special,	/* Special transition states	    */
	    dfa207_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 207
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 448:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa210_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa210_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa210_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa210_max[4] =
    {
	173, 173, -1, -1
    };
static const ANTLR3_INT32 dfa210_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa210_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa210_T_empty	    NULL

static const ANTLR3_INT32 dfa210_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa210_transitions[] =
{
    dfa210_T0, dfa210_T0, dfa210_T_empty, dfa210_T_empty	
};


/* Declare tracking structure for Cyclic DFA 210
 */
static
ANTLR3_CYCLIC_DFA cdfa210
    =	{
	    210,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 448:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa210_eot,	    /* EOT table			    */
	    dfa210_eof,	    /* EOF table			    */
	    dfa210_min,	    /* Minimum tokens for each state    */
	    dfa210_max,	    /* Maximum tokens for each state    */
	    dfa210_accept,	/* Accept table			    */
	    dfa210_special,	/* Special transition states	    */
	    dfa210_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 210
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 453:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa213_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa213_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa213_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa213_max[4] =
    {
	174, 174, -1, -1
    };
static const ANTLR3_INT32 dfa213_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa213_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa213_T_empty	    NULL

static const ANTLR3_INT32 dfa213_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa213_transitions[] =
{
    dfa213_T0, dfa213_T0, dfa213_T_empty, dfa213_T_empty	
};


/* Declare tracking structure for Cyclic DFA 213
 */
static
ANTLR3_CYCLIC_DFA cdfa213
    =	{
	    213,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 453:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa213_eot,	    /* EOT table			    */
	    dfa213_eof,	    /* EOF table			    */
	    dfa213_min,	    /* Minimum tokens for each state    */
	    dfa213_max,	    /* Maximum tokens for each state    */
	    dfa213_accept,	/* Accept table			    */
	    dfa213_special,	/* Special transition states	    */
	    dfa213_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 213
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 457:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
 */
static const ANTLR3_INT32 dfa216_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa216_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa216_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa216_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa216_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa216_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa216_T_empty	    NULL

static const ANTLR3_INT32 dfa216_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa216_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa216_transitions[] =
{
    dfa216_T0, dfa216_T1, dfa216_T_empty, dfa216_T_empty, dfa216_T1	
};


/* Declare tracking structure for Cyclic DFA 216
 */
static
ANTLR3_CYCLIC_DFA cdfa216
    =	{
	    216,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 457:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa216_eot,	    /* EOT table			    */
	    dfa216_eof,	    /* EOF table			    */
	    dfa216_min,	    /* Minimum tokens for each state    */
	    dfa216_max,	    /* Maximum tokens for each state    */
	    dfa216_accept,	/* Accept table			    */
	    dfa216_special,	/* Special transition states	    */
	    dfa216_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 216
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 461:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa219_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa219_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa219_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa219_max[4] =
    {
	175, 175, -1, -1
    };
static const ANTLR3_INT32 dfa219_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa219_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa219_T_empty	    NULL

static const ANTLR3_INT32 dfa219_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa219_transitions[] =
{
    dfa219_T0, dfa219_T0, dfa219_T_empty, dfa219_T_empty	
};


/* Declare tracking structure for Cyclic DFA 219
 */
static
ANTLR3_CYCLIC_DFA cdfa219
    =	{
	    219,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 461:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa219_eot,	    /* EOT table			    */
	    dfa219_eof,	    /* EOF table			    */
	    dfa219_min,	    /* Minimum tokens for each state    */
	    dfa219_max,	    /* Maximum tokens for each state    */
	    dfa219_accept,	/* Accept table			    */
	    dfa219_special,	/* Special transition states	    */
	    dfa219_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 219
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 465:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
 */
static const ANTLR3_INT32 dfa222_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa222_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa222_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa222_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa222_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa222_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa222_T_empty	    NULL

static const ANTLR3_INT32 dfa222_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa222_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa222_transitions[] =
{
    dfa222_T1, dfa222_T0, dfa222_T_empty, dfa222_T_empty, dfa222_T0	
};


/* Declare tracking structure for Cyclic DFA 222
 */
static
ANTLR3_CYCLIC_DFA cdfa222
    =	{
	    222,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 465:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa222_eot,	    /* EOT table			    */
	    dfa222_eof,	    /* EOF table			    */
	    dfa222_min,	    /* Minimum tokens for each state    */
	    dfa222_max,	    /* Maximum tokens for each state    */
	    dfa222_accept,	/* Accept table			    */
	    dfa222_special,	/* Special transition states	    */
	    dfa222_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 222
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 469:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa225_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa225_max[4] =
    {
	176, 176, -1, -1
    };
static const ANTLR3_INT32 dfa225_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa225_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa225_T_empty	    NULL

static const ANTLR3_INT32 dfa225_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa225_transitions[] =
{
    dfa225_T0, dfa225_T0, dfa225_T_empty, dfa225_T_empty	
};


/* Declare tracking structure for Cyclic DFA 225
 */
static
ANTLR3_CYCLIC_DFA cdfa225
    =	{
	    225,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 469:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa225_eot,	    /* EOT table			    */
	    dfa225_eof,	    /* EOF table			    */
	    dfa225_min,	    /* Minimum tokens for each state    */
	    dfa225_max,	    /* Maximum tokens for each state    */
	    dfa225_accept,	/* Accept table			    */
	    dfa225_special,	/* Special transition states	    */
	    dfa225_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 225
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 473:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
 */
static const ANTLR3_INT32 dfa228_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa228_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa228_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa228_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa228_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa228_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa228_T_empty	    NULL

static const ANTLR3_INT32 dfa228_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa228_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa228_transitions[] =
{
    dfa228_T1, dfa228_T0, dfa228_T_empty, dfa228_T_empty, dfa228_T0	
};


/* Declare tracking structure for Cyclic DFA 228
 */
static
ANTLR3_CYCLIC_DFA cdfa228
    =	{
	    228,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 473:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa228_eot,	    /* EOT table			    */
	    dfa228_eof,	    /* EOF table			    */
	    dfa228_min,	    /* Minimum tokens for each state    */
	    dfa228_max,	    /* Maximum tokens for each state    */
	    dfa228_accept,	/* Accept table			    */
	    dfa228_special,	/* Special transition states	    */
	    dfa228_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 228
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 477:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa231_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa231_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa231_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa231_max[4] =
    {
	177, 177, -1, -1
    };
static const ANTLR3_INT32 dfa231_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa231_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa231_T_empty	    NULL

static const ANTLR3_INT32 dfa231_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa231_transitions[] =
{
    dfa231_T0, dfa231_T0, dfa231_T_empty, dfa231_T_empty	
};


/* Declare tracking structure for Cyclic DFA 231
 */
static
ANTLR3_CYCLIC_DFA cdfa231
    =	{
	    231,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 477:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa231_eot,	    /* EOT table			    */
	    dfa231_eof,	    /* EOF table			    */
	    dfa231_min,	    /* Minimum tokens for each state    */
	    dfa231_max,	    /* Maximum tokens for each state    */
	    dfa231_accept,	/* Accept table			    */
	    dfa231_special,	/* Special transition states	    */
	    dfa231_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 231
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 481:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
 */
static const ANTLR3_INT32 dfa234_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa234_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa234_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa234_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa234_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa234_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa234_T_empty	    NULL

static const ANTLR3_INT32 dfa234_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, 3, 
	3, 3, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa234_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa234_transitions[] =
{
    dfa234_T1, dfa234_T0, dfa234_T_empty, dfa234_T_empty, dfa234_T0	
};


/* Declare tracking structure for Cyclic DFA 234
 */
static
ANTLR3_CYCLIC_DFA cdfa234
    =	{
	    234,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 481:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa234_eot,	    /* EOT table			    */
	    dfa234_eof,	    /* EOF table			    */
	    dfa234_min,	    /* Minimum tokens for each state    */
	    dfa234_max,	    /* Maximum tokens for each state    */
	    dfa234_accept,	/* Accept table			    */
	    dfa234_special,	/* Special transition states	    */
	    dfa234_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 234
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 492:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa238_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa238_max[4] =
    {
	181, 181, -1, -1
    };
static const ANTLR3_INT32 dfa238_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa238_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa238_T_empty	    NULL

static const ANTLR3_INT32 dfa238_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 2, 2, 2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa238_transitions[] =
{
    dfa238_T0, dfa238_T0, dfa238_T_empty, dfa238_T_empty	
};


/* Declare tracking structure for Cyclic DFA 238
 */
static
ANTLR3_CYCLIC_DFA cdfa238
    =	{
	    238,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 492:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa238_eot,	    /* EOT table			    */
	    dfa238_eof,	    /* EOF table			    */
	    dfa238_min,	    /* Minimum tokens for each state    */
	    dfa238_max,	    /* Maximum tokens for each state    */
	    dfa238_accept,	/* Accept table			    */
	    dfa238_special,	/* Special transition states	    */
	    dfa238_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 238
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 506:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa242_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa242_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa242_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa242_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa242_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa242_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa242_T_empty	    NULL

static const ANTLR3_INT32 dfa242_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 3, 3, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa242_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 3, 3, 3, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa242_transitions[] =
{
    dfa242_T1, dfa242_T0, dfa242_T_empty, dfa242_T_empty, dfa242_T0	
};


/* Declare tracking structure for Cyclic DFA 242
 */
static
ANTLR3_CYCLIC_DFA cdfa242
    =	{
	    242,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 506:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa242_eot,	    /* EOT table			    */
	    dfa242_eof,	    /* EOF table			    */
	    dfa242_min,	    /* Minimum tokens for each state    */
	    dfa242_max,	    /* Maximum tokens for each state    */
	    dfa242_accept,	/* Accept table			    */
	    dfa242_special,	/* Special transition states	    */
	    dfa242_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 242
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 518:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa246_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa246_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa246_min[4] =
    {
	98, 98, -1, -1
    };
static const ANTLR3_INT32 dfa246_max[4] =
    {
	186, 186, -1, -1
    };
static const ANTLR3_INT32 dfa246_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa246_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa246_T_empty	    NULL

static const ANTLR3_INT32 dfa246_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa246_transitions[] =
{
    dfa246_T0, dfa246_T0, dfa246_T_empty, dfa246_T_empty	
};


/* Declare tracking structure for Cyclic DFA 246
 */
static
ANTLR3_CYCLIC_DFA cdfa246
    =	{
	    246,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 518:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa246_eot,	    /* EOT table			    */
	    dfa246_eof,	    /* EOF table			    */
	    dfa246_min,	    /* Minimum tokens for each state    */
	    dfa246_max,	    /* Maximum tokens for each state    */
	    dfa246_accept,	/* Accept table			    */
	    dfa246_special,	/* Special transition states	    */
	    dfa246_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 246
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 528:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa250_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa250_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa250_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa250_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa250_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa250_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa250_T_empty	    NULL

static const ANTLR3_INT32 dfa250_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa250_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa250_transitions[] =
{
    dfa250_T1, dfa250_T0, dfa250_T_empty, dfa250_T_empty, dfa250_T0	
};


/* Declare tracking structure for Cyclic DFA 250
 */
static
ANTLR3_CYCLIC_DFA cdfa250
    =	{
	    250,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 528:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa250_eot,	    /* EOT table			    */
	    dfa250_eof,	    /* EOF table			    */
	    dfa250_min,	    /* Minimum tokens for each state    */
	    dfa250_max,	    /* Maximum tokens for each state    */
	    dfa250_accept,	/* Accept table			    */
	    dfa250_special,	/* Special transition states	    */
	    dfa250_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 250
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 539:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
 */
static const ANTLR3_INT32 dfa254_eot[60] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_eof[60] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_min[60] =
    {
	98, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_max[60] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_accept[60] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa254_special[60] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa254_T_empty	    NULL

static const ANTLR3_INT32 dfa254_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 40, 41, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa254_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa254_transitions[] =
{
    dfa254_T0, dfa254_T1, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T1, dfa254_T1, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty	
};

static ANTLR3_INT32 dfa254_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA254_1;

    	    ANTLR3_MARKER index254_1;


    		LA254_1 = LA(1);

    	 
    	    index254_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred298_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index254_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA254_40;

    	    ANTLR3_MARKER index254_40;


    		LA254_40 = LA(1);

    	 
    	    index254_40 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred298_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index254_40);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA254_41;

    	    ANTLR3_MARKER index254_41;


    		LA254_41 = LA(1);

    	 
    	    index254_41 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred298_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index254_41);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 539:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*";
    EXCEPTION->decisionNum  = 254;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 254
 */
static
ANTLR3_CYCLIC_DFA cdfa254
    =	{
	    254,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 539:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa254_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa254_eot,	    /* EOT table			    */
	    dfa254_eof,	    /* EOF table			    */
	    dfa254_min,	    /* Minimum tokens for each state    */
	    dfa254_max,	    /* Maximum tokens for each state    */
	    dfa254_accept,	/* Accept table			    */
	    dfa254_special,	/* Special transition states	    */
	    dfa254_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 254
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 549:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
 */
static const ANTLR3_INT32 dfa258_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa258_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa258_min[5] =
    {
	98, 98, -1, -1, 98
    };
static const ANTLR3_INT32 dfa258_max[5] =
    {
	205, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa258_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa258_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa258_T_empty	    NULL

static const ANTLR3_INT32 dfa258_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa258_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa258_transitions[] =
{
    dfa258_T0, dfa258_T1, dfa258_T_empty, dfa258_T_empty, dfa258_T1	
};


/* Declare tracking structure for Cyclic DFA 258
 */
static
ANTLR3_CYCLIC_DFA cdfa258
    =	{
	    258,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 549:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa258_eot,	    /* EOT table			    */
	    dfa258_eof,	    /* EOF table			    */
	    dfa258_min,	    /* Minimum tokens for each state    */
	    dfa258_max,	    /* Maximum tokens for each state    */
	    dfa258_accept,	/* Accept table			    */
	    dfa258_special,	/* Special transition states	    */
	    dfa258_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 258
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    554:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
 */
static const ANTLR3_INT32 dfa259_eot[64] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_eof[64] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_min[64] =
    {
	98, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_max[64] =
    {
	205, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_accept[64] =
    {
	-1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa259_special[64] =
    {	
	-1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa259_T_empty	    NULL

static const ANTLR3_INT32 dfa259_T0[] =
    {
	3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, 3, -1, 3, 3, 
	-1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, 3, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 
	3, 3
    };static const ANTLR3_INT32 dfa259_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa259_transitions[] =
{
    dfa259_T0, dfa259_T1, dfa259_T1, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty	
};

static ANTLR3_INT32 dfa259_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA259_1;

    	    ANTLR3_MARKER index259_1;


    		LA259_1 = LA(1);

    	 
    	    index259_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred304_Emerson(ctx)) )
    	    {
    	        s = 62;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 3;
    	    }

    	 
    		SEEK(index259_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA259_2;

    	    ANTLR3_MARKER index259_2;


    		LA259_2 = LA(1);

    	 
    	    index259_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 63;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 3;
    	    }

    	 
    		SEEK(index259_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"554:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?";
    EXCEPTION->decisionNum  = 259;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 259
 */
static
ANTLR3_CYCLIC_DFA cdfa259
    =	{
	    259,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"554:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?",	
	    (CDFA_SPECIAL_FUNC) dfa259_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa259_eot,	    /* EOT table			    */
	    dfa259_eof,	    /* EOF table			    */
	    dfa259_min,	    /* Minimum tokens for each state    */
	    dfa259_max,	    /* Maximum tokens for each state    */
	    dfa259_accept,	/* Accept table			    */
	    dfa259_special,	/* Special transition states	    */
	    dfa259_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 259
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//Emerson.g:129:1: program : (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) ;
 */
static EmersonParser_program_return
program(pEmersonParser ctx)
{   
    EmersonParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    LTERM2;
    pANTLR3_COMMON_TOKEN    EOF3;
    EmersonParser_sourceElements_return sourceElements1;
    #undef	RETURN_TYPE_sourceElements1
    #define	RETURN_TYPE_sourceElements1 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE LTERM2_tree;
    pANTLR3_BASE_TREE EOF3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        return retval; 
    }
    a       = NULL;
    LTERM2       = NULL;
    EOF3       = NULL;
    sourceElements1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    a_tree   = NULL;
    LTERM2_tree   = NULL;
    EOF3_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:130:2: ( (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) )
        // .//Emerson.g:130:4: (a= LTERM )* sourceElements ( LTERM )* EOF
        {

            // .//Emerson.g:130:5: (a= LTERM )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == LTERM) ) 
                    {
                        alt1=1;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: a= LTERM
            	    {
            	        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program778); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, a, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_sourceElements_in_program781);
            sourceElements1=sourceElements(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements1.tree, NULL); }

            // .//Emerson.g:130:28: ( LTERM )*

            for (;;)
            {
                int alt2=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (LA2_0 == LTERM) ) 
                    {
                        alt2=1;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM2 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program783); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM2, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */

            EOF3 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_program786); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF3, NULL); }


             
            /* AST REWRITE
             * elements          : sourceElements
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 130:39: -> ^( PROG sourceElements )
            	{
            	    // .//Emerson.g:130:42: ^( PROG sourceElements )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROG, (pANTLR3_UINT8)"PROG"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }
    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//Emerson.g:134:1: sourceElements : sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ ;
 */
static EmersonParser_sourceElements_return
sourceElements(pEmersonParser ctx)
{   
    EmersonParser_sourceElements_return retval;
    ANTLR3_UINT32 sourceElements_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM5;
    EmersonParser_sourceElement_return sourceElement4;
    #undef	RETURN_TYPE_sourceElement4
    #define	RETURN_TYPE_sourceElement4 EmersonParser_sourceElement_return

    EmersonParser_sourceElement_return sourceElement6;
    #undef	RETURN_TYPE_sourceElement6
    #define	RETURN_TYPE_sourceElement6 EmersonParser_sourceElement_return

    pANTLR3_BASE_TREE LTERM5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElement;
    /* Initialize rule variables
     */
    sourceElements_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM5       = NULL;
    sourceElement4.tree = NULL;

    sourceElement6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM5_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_sourceElement   = NULL;
    #define CREATE_stream_sourceElement  if (stream_sourceElement == NULL) {stream_sourceElement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:135:2: ( sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ )
        // .//Emerson.g:135:4: sourceElement ( ( LTERM )* sourceElement )*
        {
            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements807);
            sourceElement4=sourceElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceElementsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement4.tree, NULL); }

            // .//Emerson.g:135:18: ( ( LTERM )* sourceElement )*

            for (;;)
            {
                int alt4=2;
                alt4 = cdfa4.predict(ctx, RECOGNIZER, ISTREAM, &cdfa4);
                if  (HASEXCEPTION())
                {
                    goto rulesourceElementsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//Emerson.g:135:19: ( LTERM )* sourceElement
            	    {

            	        // .//Emerson.g:135:19: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt3=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA3_0 = LA(1);
            	                if ( (LA3_0 == LTERM) ) 
            	                {
            	                    alt3=1;
            	                }

            	            }
            	            switch (alt3) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM5 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_sourceElements810); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceElementsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM5, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop3;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop3: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements813);
            	        sourceElement6=sourceElement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceElementsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : sourceElement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 135:42: -> ( sourceElement )+
            	{
            	    if ((stream_sourceElement == NULL || !stream_sourceElement->hasNext(stream_sourceElement))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_sourceElement->hasNext(stream_sourceElement))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElement == NULL ? NULL : stream_sourceElement->nextTree(stream_sourceElement));

            	    	}
            	    	stream_sourceElement->reset(stream_sourceElement);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_sourceElement != NULL) stream_sourceElement->free(stream_sourceElement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, sourceElements_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//Emerson.g:138:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static EmersonParser_sourceElement_return
sourceElement(pEmersonParser ctx)
{   
    EmersonParser_sourceElement_return retval;
    ANTLR3_UINT32 sourceElement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_functionDeclaration_return functionDeclaration7;
    #undef	RETURN_TYPE_functionDeclaration7
    #define	RETURN_TYPE_functionDeclaration7 EmersonParser_functionDeclaration_return

    EmersonParser_statement_return statement8;
    #undef	RETURN_TYPE_statement8
    #define	RETURN_TYPE_statement8 EmersonParser_statement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionDeclaration;
    /* Initialize rule variables
     */
    sourceElement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        return retval; 
    }
    functionDeclaration7.tree = NULL;

    statement8.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_functionDeclaration   = NULL;
    #define CREATE_stream_functionDeclaration  if (stream_functionDeclaration == NULL) {stream_functionDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionDeclaration"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:139:2: ( functionDeclaration -> functionDeclaration | statement -> statement )
            
            ANTLR3_UINT32 alt5;

            alt5=2;

            alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
            if  (HASEXCEPTION())
            {
                goto rulesourceElementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt5) 
            {
        	case 1:
        	    // .//Emerson.g:139:4: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement834);
        	        functionDeclaration7=functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_functionDeclaration; stream_functionDeclaration->add(stream_functionDeclaration, functionDeclaration7.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : functionDeclaration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 139:24: -> functionDeclaration
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionDeclaration == NULL ? NULL : stream_functionDeclaration->nextTree(stream_functionDeclaration));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:140:4: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement843);
        	        statement8=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement8.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 140:14: -> statement
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_functionDeclaration != NULL) stream_functionDeclaration->free(stream_functionDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, sourceElement_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//Emerson.g:144:1: functionDeclaration : 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_DECL Identifier formalParameterList functionBody ) ;
 */
static EmersonParser_functionDeclaration_return
functionDeclaration(pEmersonParser ctx)
{   
    EmersonParser_functionDeclaration_return retval;
    ANTLR3_UINT32 functionDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal9;
    pANTLR3_COMMON_TOKEN    LTERM10;
    pANTLR3_COMMON_TOKEN    Identifier11;
    pANTLR3_COMMON_TOKEN    LTERM12;
    pANTLR3_COMMON_TOKEN    LTERM14;
    EmersonParser_formalParameterList_return formalParameterList13;
    #undef	RETURN_TYPE_formalParameterList13
    #define	RETURN_TYPE_formalParameterList13 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody15;
    #undef	RETURN_TYPE_functionBody15
    #define	RETURN_TYPE_functionBody15 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal9_tree;
    pANTLR3_BASE_TREE LTERM10_tree;
    pANTLR3_BASE_TREE Identifier11_tree;
    pANTLR3_BASE_TREE LTERM12_tree;
    pANTLR3_BASE_TREE LTERM14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal9       = NULL;
    LTERM10       = NULL;
    Identifier11       = NULL;
    LTERM12       = NULL;
    LTERM14       = NULL;
    formalParameterList13.tree = NULL;

    functionBody15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal9_tree   = NULL;
    LTERM10_tree   = NULL;
    Identifier11_tree   = NULL;
    LTERM12_tree   = NULL;
    LTERM14_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:145:2: ( 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_DECL Identifier formalParameterList functionBody ) )
        // .//Emerson.g:145:4: 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody
        {
            string_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_functionDeclaration860); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, string_literal9, NULL); }


            // .//Emerson.g:145:15: ( LTERM )*

            for (;;)
            {
                int alt6=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == LTERM) ) 
                    {
                        alt6=1;
                    }

                }
                switch (alt6) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM10 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration862); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM10, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */

            Identifier11 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration865); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier11, NULL); }


            // .//Emerson.g:145:33: ( LTERM )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == LTERM) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM12 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration867); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM12, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration870);
            formalParameterList13=formalParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList13.tree, NULL); }

            // .//Emerson.g:145:60: ( LTERM )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == LTERM) ) 
                    {
                        alt8=1;
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM14 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration872); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM14, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration875);
            functionBody15=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody15.tree, NULL); }

             
            /* AST REWRITE
             * elements          : functionBody, formalParameterList, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 145:80: -> ^( FUNC_DECL Identifier formalParameterList functionBody )
            	{
            	    // .//Emerson.g:145:83: ^( FUNC_DECL Identifier formalParameterList functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DECL, (pANTLR3_UINT8)"FUNC_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, functionDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//Emerson.g:148:1: functionExpression : 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody ) ;
 */
static EmersonParser_functionExpression_return
functionExpression(pEmersonParser ctx)
{   
    EmersonParser_functionExpression_return retval;
    ANTLR3_UINT32 functionExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal16;
    pANTLR3_COMMON_TOKEN    LTERM17;
    pANTLR3_COMMON_TOKEN    Identifier18;
    pANTLR3_COMMON_TOKEN    LTERM19;
    pANTLR3_COMMON_TOKEN    LTERM21;
    EmersonParser_formalParameterList_return formalParameterList20;
    #undef	RETURN_TYPE_formalParameterList20
    #define	RETURN_TYPE_formalParameterList20 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody22;
    #undef	RETURN_TYPE_functionBody22
    #define	RETURN_TYPE_functionBody22 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal16_tree;
    pANTLR3_BASE_TREE LTERM17_tree;
    pANTLR3_BASE_TREE Identifier18_tree;
    pANTLR3_BASE_TREE LTERM19_tree;
    pANTLR3_BASE_TREE LTERM21_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal16       = NULL;
    LTERM17       = NULL;
    Identifier18       = NULL;
    LTERM19       = NULL;
    LTERM21       = NULL;
    formalParameterList20.tree = NULL;

    functionBody22.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal16_tree   = NULL;
    LTERM17_tree   = NULL;
    Identifier18_tree   = NULL;
    LTERM19_tree   = NULL;
    LTERM21_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:149:2: ( 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody ) )
        // .//Emerson.g:149:4: 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody
        {
            string_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_functionExpression899); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, string_literal16, NULL); }


            // .//Emerson.g:149:15: ( LTERM )*

            for (;;)
            {
                int alt9=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA9_2 = LA(2);
                            if ( (synpred9_Emerson(ctx)) ) 
                            {
                                alt9=1;
                            }

                        }
                    }

                }
                switch (alt9) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM17 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression901); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM17, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:149:22: ( Identifier )?
            {
                int alt10=2;
                {
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == Identifier) ) 
                    {
                        alt10=1;
                    }
                }
                switch (alt10) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier18 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression904); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier18, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:149:34: ( LTERM )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == LTERM) ) 
                    {
                        alt11=1;
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM19 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression907); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM19, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression910);
            formalParameterList20=formalParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList20.tree, NULL); }

            // .//Emerson.g:149:61: ( LTERM )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == LTERM) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM21 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression912); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM21, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression915);
            functionBody22=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody22.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, functionBody, formalParameterList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 149:81: -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody )
            	{
            	    // .//Emerson.g:149:84: ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_EXPR, (pANTLR3_UINT8)"FUNC_EXPR"), root_1));

            	        // .//Emerson.g:149:97: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, functionExpression_StartIndex); }
    return retval;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//Emerson.g:152:1: formalParameterList : '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')' -> ^( FUNC_PARAMS ( $i1)? ( $i2)* ) ;
 */
static EmersonParser_formalParameterList_return
formalParameterList(pEmersonParser ctx)
{   
    EmersonParser_formalParameterList_return retval;
    ANTLR3_UINT32 formalParameterList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    i1;
    pANTLR3_COMMON_TOKEN    i2;
    pANTLR3_COMMON_TOKEN    char_literal23;
    pANTLR3_COMMON_TOKEN    LTERM24;
    pANTLR3_COMMON_TOKEN    LTERM25;
    pANTLR3_COMMON_TOKEN    char_literal26;
    pANTLR3_COMMON_TOKEN    LTERM27;
    pANTLR3_COMMON_TOKEN    LTERM28;
    pANTLR3_COMMON_TOKEN    char_literal29;

    pANTLR3_BASE_TREE i1_tree;
    pANTLR3_BASE_TREE i2_tree;
    pANTLR3_BASE_TREE char_literal23_tree;
    pANTLR3_BASE_TREE LTERM24_tree;
    pANTLR3_BASE_TREE LTERM25_tree;
    pANTLR3_BASE_TREE char_literal26_tree;
    pANTLR3_BASE_TREE LTERM27_tree;
    pANTLR3_BASE_TREE LTERM28_tree;
    pANTLR3_BASE_TREE char_literal29_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    formalParameterList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        return retval; 
    }
    i1       = NULL;
    i2       = NULL;
    char_literal23       = NULL;
    LTERM24       = NULL;
    LTERM25       = NULL;
    char_literal26       = NULL;
    LTERM27       = NULL;
    LTERM28       = NULL;
    char_literal29       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    i1_tree   = NULL;
    i2_tree   = NULL;
    char_literal23_tree   = NULL;
    LTERM24_tree   = NULL;
    LTERM25_tree   = NULL;
    char_literal26_tree   = NULL;
    LTERM27_tree   = NULL;
    LTERM28_tree   = NULL;
    char_literal29_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:153:2: ( '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')' -> ^( FUNC_PARAMS ( $i1)? ( $i2)* ) )
        // .//Emerson.g:153:4: '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')'
        {
            char_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_formalParameterList942); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal23, NULL); }


            // .//Emerson.g:153:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?
            {
                int alt17=2;
                alt17 = cdfa17.predict(ctx, RECOGNIZER, ISTREAM, &cdfa17);
                if  (HASEXCEPTION())
                {
                    goto ruleformalParameterListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt17) 
                {
            	case 1:
            	    // .//Emerson.g:153:9: ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*
            	    {

            	        // .//Emerson.g:153:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt13=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA13_0 = LA(1);
            	                if ( (LA13_0 == LTERM) ) 
            	                {
            	                    alt13=1;
            	                }

            	            }
            	            switch (alt13) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM24 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList945); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM24, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop13;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop13: ; /* Jump out to here if this rule does not match */

            	        i1 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList950); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, i1, NULL); }


            	        // .//Emerson.g:153:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*

            	        for (;;)
            	        {
            	            int alt16=2;
            	            alt16 = cdfa16.predict(ctx, RECOGNIZER, ISTREAM, &cdfa16);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleformalParameterListEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt16) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:153:31: ( LTERM )* ',' ( LTERM )* i2= Identifier
            	        	    {

            	        	        // .//Emerson.g:153:31: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt14=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA14_0 = LA(1);
            	        	                if ( (LA14_0 == LTERM) ) 
            	        	                {
            	        	                    alt14=1;
            	        	                }

            	        	            }
            	        	            switch (alt14) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM25 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList953); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleformalParameterListEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM25, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop14;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop14: ; /* Jump out to here if this rule does not match */

            	        	        char_literal26 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_formalParameterList956); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal26, NULL); }


            	        	        // .//Emerson.g:153:42: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt15=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA15_0 = LA(1);
            	        	                if ( (LA15_0 == LTERM) ) 
            	        	                {
            	        	                    alt15=1;
            	        	                }

            	        	            }
            	        	            switch (alt15) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM27 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList958); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleformalParameterListEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM27, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop15;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop15: ; /* Jump out to here if this rule does not match */

            	        	        i2 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList963); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, i2, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop16;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop16: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:153:67: ( LTERM )*

            for (;;)
            {
                int alt18=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == LTERM) ) 
                    {
                        alt18=1;
                    }

                }
                switch (alt18) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM28 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList969); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM28, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */

            char_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_formalParameterList972); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal29, NULL); }


             
            /* AST REWRITE
             * elements          : i1, i2
             * token labels      : i2, i1
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i2;
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_i2=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i2", i2);
            	stream_i1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i1", i1);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 153:78: -> ^( FUNC_PARAMS ( $i1)? ( $i2)* )
            	{
            	    // .//Emerson.g:153:81: ^( FUNC_PARAMS ( $i1)? ( $i2)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_PARAMS, (pANTLR3_UINT8)"FUNC_PARAMS"), root_1));

            	        // .//Emerson.g:153:96: ( $i1)?
            	        {
            	        	if ( (stream_i1 != NULL && stream_i1->hasNext(stream_i1))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_i1 == NULL ? NULL : stream_i1->nextNode(stream_i1));

            	        	}
            	        	if ( stream_i1 != NULL) stream_i1->reset(stream_i1);

            	        }
            	        // .//Emerson.g:153:101: ( $i2)*
            	        {
            	        	while ( (stream_i2 != NULL && stream_i2->hasNext(stream_i2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_i2 == NULL ? NULL : stream_i2->nextNode(stream_i2));

            	        	}
            	        	if (stream_i2 != NULL) stream_i2->reset(stream_i2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_i2 != NULL) stream_i2->free(stream_i2); 
            	if (stream_i1 != NULL) stream_i1->free(stream_i1); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, formalParameterList_StartIndex); }
    return retval;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//Emerson.g:156:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static EmersonParser_functionBody_return
functionBody(pEmersonParser ctx)
{   
    EmersonParser_functionBody_return retval;
    ANTLR3_UINT32 functionBody_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal30;
    pANTLR3_COMMON_TOKEN    LTERM31;
    pANTLR3_COMMON_TOKEN    char_literal32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    LTERM34;
    pANTLR3_COMMON_TOKEN    LTERM36;
    pANTLR3_COMMON_TOKEN    char_literal37;
    EmersonParser_sourceElements_return sourceElements35;
    #undef	RETURN_TYPE_sourceElements35
    #define	RETURN_TYPE_sourceElements35 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE char_literal30_tree;
    pANTLR3_BASE_TREE LTERM31_tree;
    pANTLR3_BASE_TREE char_literal32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE LTERM34_tree;
    pANTLR3_BASE_TREE LTERM36_tree;
    pANTLR3_BASE_TREE char_literal37_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    functionBody_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal30       = NULL;
    LTERM31       = NULL;
    char_literal32       = NULL;
    char_literal33       = NULL;
    LTERM34       = NULL;
    LTERM36       = NULL;
    char_literal37       = NULL;
    sourceElements35.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal30_tree   = NULL;
    LTERM31_tree   = NULL;
    char_literal32_tree   = NULL;
    char_literal33_tree   = NULL;
    LTERM34_tree   = NULL;
    LTERM36_tree   = NULL;
    char_literal37_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:157:2: ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt22;

            alt22=2;

            alt22 = cdfa22.predict(ctx, RECOGNIZER, ISTREAM, &cdfa22);
            if  (HASEXCEPTION())
            {
                goto rulefunctionBodyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//Emerson.g:157:4: '{' ( LTERM )* '}'
        	    {
        	        char_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_functionBody998); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal30, NULL); }


        	        // .//Emerson.g:157:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt19=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA19_0 = LA(1);
        	                if ( (LA19_0 == LTERM) ) 
        	                {
        	                    alt19=1;
        	                }

        	            }
        	            switch (alt19) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM31 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1000); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM31, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop19;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop19: ; /* Jump out to here if this rule does not match */

        	        char_literal32 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_functionBody1003); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal32, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 157:19: -> ^( EMPTY_FUNC_BODY )
        	        	{
        	        	    // .//Emerson.g:157:22: ^( EMPTY_FUNC_BODY )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_FUNC_BODY, (pANTLR3_UINT8)"EMPTY_FUNC_BODY"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:158:4: '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}'
        	    {
        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_functionBody1014); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal33, NULL); }


        	        // .//Emerson.g:158:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA20_0 = LA(1);
        	                if ( (LA20_0 == LTERM) ) 
        	                {
        	                    alt20=1;
        	                }

        	            }
        	            switch (alt20) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM34 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1016); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM34, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:158:15: ( sourceElements -> sourceElements )
        	        // .//Emerson.g:158:16: sourceElements
        	        {
        	            FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody1020);
        	            sourceElements35=sourceElements(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefunctionBodyEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements35.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sourceElements
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 158:31: -> sourceElements
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:158:50: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA21_0 = LA(1);
        	                if ( (LA21_0 == LTERM) ) 
        	                {
        	                    alt21=1;
        	                }

        	            }
        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM36 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1027); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM36, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	        char_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_functionBody1030); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal37, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, functionBody_StartIndex); }
    return retval;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//Emerson.g:162:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static EmersonParser_statement_return
statement(pEmersonParser ctx)
{   
    EmersonParser_statement_return retval;
    ANTLR3_UINT32 statement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_statementBlock_return statementBlock38;
    #undef	RETURN_TYPE_statementBlock38
    #define	RETURN_TYPE_statementBlock38 EmersonParser_statementBlock_return

    EmersonParser_variableStatement_return variableStatement39;
    #undef	RETURN_TYPE_variableStatement39
    #define	RETURN_TYPE_variableStatement39 EmersonParser_variableStatement_return

    EmersonParser_emptyStatement_return emptyStatement40;
    #undef	RETURN_TYPE_emptyStatement40
    #define	RETURN_TYPE_emptyStatement40 EmersonParser_emptyStatement_return

    EmersonParser_expressionStatement_return expressionStatement41;
    #undef	RETURN_TYPE_expressionStatement41
    #define	RETURN_TYPE_expressionStatement41 EmersonParser_expressionStatement_return

    EmersonParser_ifStatement_return ifStatement42;
    #undef	RETURN_TYPE_ifStatement42
    #define	RETURN_TYPE_ifStatement42 EmersonParser_ifStatement_return

    EmersonParser_iterationStatement_return iterationStatement43;
    #undef	RETURN_TYPE_iterationStatement43
    #define	RETURN_TYPE_iterationStatement43 EmersonParser_iterationStatement_return

    EmersonParser_continueStatement_return continueStatement44;
    #undef	RETURN_TYPE_continueStatement44
    #define	RETURN_TYPE_continueStatement44 EmersonParser_continueStatement_return

    EmersonParser_breakStatement_return breakStatement45;
    #undef	RETURN_TYPE_breakStatement45
    #define	RETURN_TYPE_breakStatement45 EmersonParser_breakStatement_return

    EmersonParser_returnStatement_return returnStatement46;
    #undef	RETURN_TYPE_returnStatement46
    #define	RETURN_TYPE_returnStatement46 EmersonParser_returnStatement_return

    EmersonParser_withStatement_return withStatement47;
    #undef	RETURN_TYPE_withStatement47
    #define	RETURN_TYPE_withStatement47 EmersonParser_withStatement_return

    EmersonParser_labelledStatement_return labelledStatement48;
    #undef	RETURN_TYPE_labelledStatement48
    #define	RETURN_TYPE_labelledStatement48 EmersonParser_labelledStatement_return

    EmersonParser_switchStatement_return switchStatement49;
    #undef	RETURN_TYPE_switchStatement49
    #define	RETURN_TYPE_switchStatement49 EmersonParser_switchStatement_return

    EmersonParser_throwStatement_return throwStatement50;
    #undef	RETURN_TYPE_throwStatement50
    #define	RETURN_TYPE_throwStatement50 EmersonParser_throwStatement_return

    EmersonParser_whenStatement_return whenStatement51;
    #undef	RETURN_TYPE_whenStatement51
    #define	RETURN_TYPE_whenStatement51 EmersonParser_whenStatement_return

    EmersonParser_tryStatement_return tryStatement52;
    #undef	RETURN_TYPE_tryStatement52
    #define	RETURN_TYPE_tryStatement52 EmersonParser_tryStatement_return

    EmersonParser_msgSendStatement_return msgSendStatement53;
    #undef	RETURN_TYPE_msgSendStatement53
    #define	RETURN_TYPE_msgSendStatement53 EmersonParser_msgSendStatement_return

    EmersonParser_msgRecvStatement_return msgRecvStatement54;
    #undef	RETURN_TYPE_msgRecvStatement54
    #define	RETURN_TYPE_msgRecvStatement54 EmersonParser_msgRecvStatement_return


    /* Initialize rule variables
     */
    statement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        return retval; 
    }
    statementBlock38.tree = NULL;

    variableStatement39.tree = NULL;

    emptyStatement40.tree = NULL;

    expressionStatement41.tree = NULL;

    ifStatement42.tree = NULL;

    iterationStatement43.tree = NULL;

    continueStatement44.tree = NULL;

    breakStatement45.tree = NULL;

    returnStatement46.tree = NULL;

    withStatement47.tree = NULL;

    labelledStatement48.tree = NULL;

    switchStatement49.tree = NULL;

    throwStatement50.tree = NULL;

    whenStatement51.tree = NULL;

    tryStatement52.tree = NULL;

    msgSendStatement53.tree = NULL;

    msgRecvStatement54.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:163:2: ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement )
            
            ANTLR3_UINT32 alt23;

            alt23=17;

            alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//Emerson.g:163:4: statementBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement1042);
        	        statementBlock38=statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statementBlock38.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:164:4: variableStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement1047);
        	        variableStatement39=variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableStatement39.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:165:4: emptyStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_emptyStatement_in_statement1052);
        	        emptyStatement40=emptyStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, emptyStatement40.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:166:4: expressionStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement1057);
        	        expressionStatement41=expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionStatement41.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:167:4: ifStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement1062);
        	        ifStatement42=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStatement42.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:168:4: iterationStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement1067);
        	        iterationStatement43=iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iterationStatement43.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:169:4: continueStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement1072);
        	        continueStatement44=continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continueStatement44.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:170:4: breakStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement1077);
        	        breakStatement45=breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, breakStatement45.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:171:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1082);
        	        returnStatement46=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement46.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:172:4: withStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement1087);
        	        withStatement47=withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, withStatement47.tree);

        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:173:4: labelledStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_labelledStatement_in_statement1092);
        	        labelledStatement48=labelledStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, labelledStatement48.tree);

        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:174:4: switchStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement1097);
        	        switchStatement49=switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switchStatement49.tree);

        	    }
        	    break;
        	case 13:
        	    // .//Emerson.g:175:4: throwStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement1102);
        	        throwStatement50=throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throwStatement50.tree);

        	    }
        	    break;
        	case 14:
        	    // .//Emerson.g:176:7: whenStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whenStatement_in_statement1110);
        	        whenStatement51=whenStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whenStatement51.tree);

        	    }
        	    break;
        	case 15:
        	    // .//Emerson.g:177:4: tryStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement1115);
        	        tryStatement52=tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tryStatement52.tree);

        	    }
        	    break;
        	case 16:
        	    // .//Emerson.g:178:4: msgSendStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgSendStatement_in_statement1120);
        	        msgSendStatement53=msgSendStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgSendStatement53.tree);

        	    }
        	    break;
        	case 17:
        	    // .//Emerson.g:179:4: msgRecvStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_statement1125);
        	        msgRecvStatement54=msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgRecvStatement54.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, statement_StartIndex); }
    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start statementBlock
 * .//Emerson.g:182:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static EmersonParser_statementBlock_return
statementBlock(pEmersonParser ctx)
{   
    EmersonParser_statementBlock_return retval;
    ANTLR3_UINT32 statementBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal55;
    pANTLR3_COMMON_TOKEN    LTERM56;
    pANTLR3_COMMON_TOKEN    char_literal57;
    pANTLR3_COMMON_TOKEN    char_literal58;
    pANTLR3_COMMON_TOKEN    LTERM59;
    pANTLR3_COMMON_TOKEN    LTERM61;
    pANTLR3_COMMON_TOKEN    char_literal62;
    EmersonParser_statementList_return statementList60;
    #undef	RETURN_TYPE_statementList60
    #define	RETURN_TYPE_statementList60 EmersonParser_statementList_return

    pANTLR3_BASE_TREE char_literal55_tree;
    pANTLR3_BASE_TREE LTERM56_tree;
    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_BASE_TREE char_literal58_tree;
    pANTLR3_BASE_TREE LTERM59_tree;
    pANTLR3_BASE_TREE LTERM61_tree;
    pANTLR3_BASE_TREE char_literal62_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    statementBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal55       = NULL;
    LTERM56       = NULL;
    char_literal57       = NULL;
    char_literal58       = NULL;
    LTERM59       = NULL;
    LTERM61       = NULL;
    char_literal62       = NULL;
    statementList60.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal55_tree   = NULL;
    LTERM56_tree   = NULL;
    char_literal57_tree   = NULL;
    char_literal58_tree   = NULL;
    LTERM59_tree   = NULL;
    LTERM61_tree   = NULL;
    char_literal62_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:183:2: ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt27;

            alt27=2;

            alt27 = cdfa27.predict(ctx, RECOGNIZER, ISTREAM, &cdfa27);
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt27) 
            {
        	case 1:
        	    // .//Emerson.g:183:4: '{' ( LTERM )* '}'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal55 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_statementBlock1137); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal55_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal55));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal55_tree);
        	        }

        	        // .//Emerson.g:183:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt24=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA24_0 = LA(1);
        	                if ( (LA24_0 == LTERM) ) 
        	                {
        	                    alt24=1;
        	                }

        	            }
        	            switch (alt24) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM56 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1139); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        LTERM56_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LTERM56));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, LTERM56_tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop24;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop24: ; /* Jump out to here if this rule does not match */

        	        char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_statementBlock1142); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal57_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal57));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal57_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:184:4: '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}'
        	    {
        	        char_literal58 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_statementBlock1147); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal58, NULL); }


        	        // .//Emerson.g:184:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt25=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA25_0 = LA(1);
        	                if ( (LA25_0 == LTERM) ) 
        	                {
        	                    alt25=1;
        	                }

        	            }
        	            switch (alt25) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM59 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1149); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM59, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop25;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop25: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:184:15: ( statementList -> statementList )
        	        // .//Emerson.g:184:16: statementList
        	        {
        	            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock1153);
        	            statementList60=statementList(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList60.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : statementList
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 184:29: -> statementList
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:184:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA26_0 = LA(1);
        	                if ( (LA26_0 == LTERM) ) 
        	                {
        	                    alt26=1;
        	                }

        	            }
        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM61 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1158); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM61, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        char_literal62 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_statementBlock1161); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal62, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, statementBlock_StartIndex); }
    return retval;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start statementList
 * .//Emerson.g:187:1: statementList : statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) ;
 */
static EmersonParser_statementList_return
statementList(pEmersonParser ctx)
{   
    EmersonParser_statementList_return retval;
    ANTLR3_UINT32 statementList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM64;
    EmersonParser_statement_return statement63;
    #undef	RETURN_TYPE_statement63
    #define	RETURN_TYPE_statement63 EmersonParser_statement_return

    EmersonParser_statement_return statement65;
    #undef	RETURN_TYPE_statement65
    #define	RETURN_TYPE_statement65 EmersonParser_statement_return

    pANTLR3_BASE_TREE LTERM64_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    statementList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM64       = NULL;
    statement63.tree = NULL;

    statement65.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM64_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:188:2: ( statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) )
        // .//Emerson.g:188:4: statement ( ( LTERM )* statement )*
        {
            FOLLOWPUSH(FOLLOW_statement_in_statementList1174);
            statement63=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement63.tree, NULL); }

            // .//Emerson.g:188:14: ( ( LTERM )* statement )*

            for (;;)
            {
                int alt29=2;
                alt29 = cdfa29.predict(ctx, RECOGNIZER, ISTREAM, &cdfa29);
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt29) 
                {
            	case 1:
            	    // .//Emerson.g:188:15: ( LTERM )* statement
            	    {

            	        // .//Emerson.g:188:15: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt28=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA28_0 = LA(1);
            	                if ( (LA28_0 == LTERM) ) 
            	                {
            	                    alt28=1;
            	                }

            	            }
            	            switch (alt28) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM64 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementList1177); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulestatementListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM64, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop28;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop28: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_statementList1180);
            	        statement65=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement65.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 188:34: -> ^( SLIST ( statement )+ )
            	{
            	    // .//Emerson.g:188:37: ^( SLIST ( statement )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SLIST, (pANTLR3_UINT8)"SLIST"), root_1));

            	        if ((stream_statement == NULL || !stream_statement->hasNext(stream_statement))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_statement->hasNext(stream_statement))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	stream_statement->reset(stream_statement);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, statementList_StartIndex); }
    return retval;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//Emerson.g:191:1: variableStatement : 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) ;
 */
static EmersonParser_variableStatement_return
variableStatement(pEmersonParser ctx)
{   
    EmersonParser_variableStatement_return retval;
    ANTLR3_UINT32 variableStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal66;
    pANTLR3_COMMON_TOKEN    LTERM67;
    pANTLR3_COMMON_TOKEN    LTERM69;
    pANTLR3_COMMON_TOKEN    char_literal70;
    EmersonParser_variableDeclarationList_return variableDeclarationList68;
    #undef	RETURN_TYPE_variableDeclarationList68
    #define	RETURN_TYPE_variableDeclarationList68 EmersonParser_variableDeclarationList_return

    pANTLR3_BASE_TREE string_literal66_tree;
    pANTLR3_BASE_TREE LTERM67_tree;
    pANTLR3_BASE_TREE LTERM69_tree;
    pANTLR3_BASE_TREE char_literal70_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationList;
    /* Initialize rule variables
     */
    variableStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal66       = NULL;
    LTERM67       = NULL;
    LTERM69       = NULL;
    char_literal70       = NULL;
    variableDeclarationList68.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal66_tree   = NULL;
    LTERM67_tree   = NULL;
    LTERM69_tree   = NULL;
    char_literal70_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_variableDeclarationList   = NULL;
    #define CREATE_stream_variableDeclarationList  if (stream_variableDeclarationList == NULL) {stream_variableDeclarationList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:192:2: ( 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) )
        // .//Emerson.g:192:4: 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' )
        {
            string_literal66 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_variableStatement1203); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, string_literal66, NULL); }


            // .//Emerson.g:192:10: ( LTERM )*

            for (;;)
            {
                int alt30=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA30_0 = LA(1);
                    if ( (LA30_0 == LTERM) ) 
                    {
                        alt30=1;
                    }

                }
                switch (alt30) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM67 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1205); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM67, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1208);
            variableDeclarationList68=variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationList; stream_variableDeclarationList->add(stream_variableDeclarationList, variableDeclarationList68.tree, NULL); }

            // .//Emerson.g:192:41: ( LTERM | ';' )
            {
                int alt31=2;

                {
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == LTERM) ) 
                    {
                        alt31=1;
                    }
                    else if ( (LA31_0 == 132) ) 
                    {
                        alt31=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 31;
                        EXCEPTION->state        = 0;


                        goto rulevariableStatementEx;
                    }
                }
                switch (alt31) 
                {
            	case 1:
            	    // .//Emerson.g:192:42: LTERM
            	    {
            	        LTERM69 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1211); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM69, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:192:50: ';'
            	    {
            	        char_literal70 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_variableStatement1215); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal70, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : variableDeclarationList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 192:55: -> ^( VARLIST variableDeclarationList )
            	{
            	    // .//Emerson.g:192:58: ^( VARLIST variableDeclarationList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationList == NULL ? NULL : stream_variableDeclarationList->nextTree(stream_variableDeclarationList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_variableDeclarationList != NULL) stream_variableDeclarationList->free(stream_variableDeclarationList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, variableStatement_StartIndex); }
    return retval;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//Emerson.g:195:1: variableDeclarationList : variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ ;
 */
static EmersonParser_variableDeclarationList_return
variableDeclarationList(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationList_return retval;
    ANTLR3_UINT32 variableDeclarationList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM72;
    pANTLR3_COMMON_TOKEN    char_literal73;
    pANTLR3_COMMON_TOKEN    LTERM74;
    EmersonParser_variableDeclaration_return variableDeclaration71;
    #undef	RETURN_TYPE_variableDeclaration71
    #define	RETURN_TYPE_variableDeclaration71 EmersonParser_variableDeclaration_return

    EmersonParser_variableDeclaration_return variableDeclaration75;
    #undef	RETURN_TYPE_variableDeclaration75
    #define	RETURN_TYPE_variableDeclaration75 EmersonParser_variableDeclaration_return

    pANTLR3_BASE_TREE LTERM72_tree;
    pANTLR3_BASE_TREE char_literal73_tree;
    pANTLR3_BASE_TREE LTERM74_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclaration;
    /* Initialize rule variables
     */
    variableDeclarationList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM72       = NULL;
    char_literal73       = NULL;
    LTERM74       = NULL;
    variableDeclaration71.tree = NULL;

    variableDeclaration75.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM72_tree   = NULL;
    char_literal73_tree   = NULL;
    LTERM74_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_variableDeclaration   = NULL;
    #define CREATE_stream_variableDeclaration  if (stream_variableDeclaration == NULL) {stream_variableDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclaration"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:196:2: ( variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ )
        // .//Emerson.g:196:4: variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1237);
            variableDeclaration71=variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration71.tree, NULL); }

            // .//Emerson.g:196:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*

            for (;;)
            {
                int alt34=2;
                alt34 = cdfa34.predict(ctx, RECOGNIZER, ISTREAM, &cdfa34);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt34) 
                {
            	case 1:
            	    // .//Emerson.g:196:25: ( LTERM )* ',' ( LTERM )* variableDeclaration
            	    {

            	        // .//Emerson.g:196:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt32=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA32_0 = LA(1);
            	                if ( (LA32_0 == LTERM) ) 
            	                {
            	                    alt32=1;
            	                }

            	            }
            	            switch (alt32) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM72 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1240); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM72, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop32;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop32: ; /* Jump out to here if this rule does not match */

            	        char_literal73 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_variableDeclarationList1243); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal73, NULL); }


            	        // .//Emerson.g:196:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == LTERM) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM74 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1245); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM74, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1248);
            	        variableDeclaration75=variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration75.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclaration
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 196:65: -> ( variableDeclaration )+
            	{
            	    if ((stream_variableDeclaration == NULL || !stream_variableDeclaration->hasNext(stream_variableDeclaration))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclaration->hasNext(stream_variableDeclaration))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclaration == NULL ? NULL : stream_variableDeclaration->nextTree(stream_variableDeclaration));

            	    	}
            	    	stream_variableDeclaration->reset(stream_variableDeclaration);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_variableDeclaration != NULL) stream_variableDeclaration->free(stream_variableDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, variableDeclarationList_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//Emerson.g:199:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ ;
 */
static EmersonParser_variableDeclarationListNoIn_return
variableDeclarationListNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationListNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationListNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM77;
    pANTLR3_COMMON_TOKEN    char_literal78;
    pANTLR3_COMMON_TOKEN    LTERM79;
    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn76;
    #undef	RETURN_TYPE_variableDeclarationNoIn76
    #define	RETURN_TYPE_variableDeclarationNoIn76 EmersonParser_variableDeclarationNoIn_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn80;
    #undef	RETURN_TYPE_variableDeclarationNoIn80
    #define	RETURN_TYPE_variableDeclarationNoIn80 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE LTERM77_tree;
    pANTLR3_BASE_TREE char_literal78_tree;
    pANTLR3_BASE_TREE LTERM79_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    variableDeclarationListNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM77       = NULL;
    char_literal78       = NULL;
    LTERM79       = NULL;
    variableDeclarationNoIn76.tree = NULL;

    variableDeclarationNoIn80.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM77_tree   = NULL;
    char_literal78_tree   = NULL;
    LTERM79_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:200:2: ( variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ )
        // .//Emerson.g:200:4: variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1267);
            variableDeclarationNoIn76=variableDeclarationNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn76.tree, NULL); }

            // .//Emerson.g:200:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*

            for (;;)
            {
                int alt37=2;
                alt37 = cdfa37.predict(ctx, RECOGNIZER, ISTREAM, &cdfa37);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt37) 
                {
            	case 1:
            	    // .//Emerson.g:200:29: ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn
            	    {

            	        // .//Emerson.g:200:29: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt35=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA35_0 = LA(1);
            	                if ( (LA35_0 == LTERM) ) 
            	                {
            	                    alt35=1;
            	                }

            	            }
            	            switch (alt35) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM77 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1270); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM77, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop35;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop35: ; /* Jump out to here if this rule does not match */

            	        char_literal78 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_variableDeclarationListNoIn1273); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal78, NULL); }


            	        // .//Emerson.g:200:40: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt36=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA36_0 = LA(1);
            	                if ( (LA36_0 == LTERM) ) 
            	                {
            	                    alt36=1;
            	                }

            	            }
            	            switch (alt36) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM79 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1275); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM79, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1278);
            	        variableDeclarationNoIn80=variableDeclarationNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn80.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclarationNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 200:73: -> ( variableDeclarationNoIn )+
            	{
            	    if ((stream_variableDeclarationNoIn == NULL || !stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

            	    	}
            	    	stream_variableDeclarationNoIn->reset(stream_variableDeclarationNoIn);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, variableDeclarationListNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//Emerson.g:203:1: variableDeclaration : Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) ;
 */
static EmersonParser_variableDeclaration_return
variableDeclaration(pEmersonParser ctx)
{   
    EmersonParser_variableDeclaration_return retval;
    ANTLR3_UINT32 variableDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier81;
    pANTLR3_COMMON_TOKEN    LTERM82;
    EmersonParser_initialiser_return initialiser83;
    #undef	RETURN_TYPE_initialiser83
    #define	RETURN_TYPE_initialiser83 EmersonParser_initialiser_return

    pANTLR3_BASE_TREE Identifier81_tree;
    pANTLR3_BASE_TREE LTERM82_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiser;
    /* Initialize rule variables
     */
    variableDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier81       = NULL;
    LTERM82       = NULL;
    initialiser83.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier81_tree   = NULL;
    LTERM82_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiser   = NULL;
    #define CREATE_stream_initialiser  if (stream_initialiser == NULL) {stream_initialiser = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiser"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:204:2: ( Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) )
        // .//Emerson.g:204:4: Identifier ( LTERM )* ( initialiser )?
        {
            Identifier81 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1297); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier81, NULL); }


            // .//Emerson.g:204:15: ( LTERM )*

            for (;;)
            {
                int alt38=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA38_0 = LA(1);
                    if ( (LA38_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA38_2 = LA(2);
                            if ( (synpred53_Emerson(ctx)) ) 
                            {
                                alt38=1;
                            }

                        }
                    }

                }
                switch (alt38) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM82 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclaration1299); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM82, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:204:22: ( initialiser )?
            {
                int alt39=2;
                {
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == 133) ) 
                    {
                        alt39=1;
                    }
                }
                switch (alt39) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiser
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1302);
            	        initialiser83=initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiser; stream_initialiser->add(stream_initialiser, initialiser83.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier, initialiser
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 204:35: -> ^( VAR Identifier ( initialiser )? )
            	{
            	    // .//Emerson.g:204:38: ^( VAR Identifier ( initialiser )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:204:55: ( initialiser )?
            	        {
            	        	if ( (stream_initialiser != NULL && stream_initialiser->hasNext(stream_initialiser))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiser == NULL ? NULL : stream_initialiser->nextTree(stream_initialiser));

            	        	}
            	        	if ( stream_initialiser != NULL) stream_initialiser->reset(stream_initialiser);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiser != NULL) stream_initialiser->free(stream_initialiser);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, variableDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//Emerson.g:207:1: variableDeclarationNoIn : Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static EmersonParser_variableDeclarationNoIn_return
variableDeclarationNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier84;
    pANTLR3_COMMON_TOKEN    LTERM85;
    EmersonParser_initialiserNoIn_return initialiserNoIn86;
    #undef	RETURN_TYPE_initialiserNoIn86
    #define	RETURN_TYPE_initialiserNoIn86 EmersonParser_initialiserNoIn_return

    pANTLR3_BASE_TREE Identifier84_tree;
    pANTLR3_BASE_TREE LTERM85_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiserNoIn;
    /* Initialize rule variables
     */
    variableDeclarationNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier84       = NULL;
    LTERM85       = NULL;
    initialiserNoIn86.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier84_tree   = NULL;
    LTERM85_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiserNoIn   = NULL;
    #define CREATE_stream_initialiserNoIn  if (stream_initialiserNoIn == NULL) {stream_initialiserNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiserNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:208:2: ( Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//Emerson.g:208:4: Identifier ( LTERM )* ( initialiserNoIn )?
        {
            Identifier84 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1326); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier84, NULL); }


            // .//Emerson.g:208:15: ( LTERM )*

            for (;;)
            {
                int alt40=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA40_2 = LA(2);
                            if ( (synpred55_Emerson(ctx)) ) 
                            {
                                alt40=1;
                            }

                        }
                    }

                }
                switch (alt40) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM85 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationNoIn1328); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM85, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:208:22: ( initialiserNoIn )?
            {
                int alt41=2;
                {
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == 133) ) 
                    {
                        alt41=1;
                    }
                }
                switch (alt41) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiserNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1331);
            	        initialiserNoIn86=initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiserNoIn; stream_initialiserNoIn->add(stream_initialiserNoIn, initialiserNoIn86.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier, initialiserNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 208:39: -> ^( VAR Identifier ( initialiserNoIn )? )
            	{
            	    // .//Emerson.g:208:43: ^( VAR Identifier ( initialiserNoIn )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:208:60: ( initialiserNoIn )?
            	        {
            	        	if ( (stream_initialiserNoIn != NULL && stream_initialiserNoIn->hasNext(stream_initialiserNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiserNoIn == NULL ? NULL : stream_initialiserNoIn->nextTree(stream_initialiserNoIn));

            	        	}
            	        	if ( stream_initialiserNoIn != NULL) stream_initialiserNoIn->reset(stream_initialiserNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiserNoIn != NULL) stream_initialiserNoIn->free(stream_initialiserNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, variableDeclarationNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//Emerson.g:211:1: initialiser : '=' ( LTERM )* assignmentExpression -> assignmentExpression ;
 */
static EmersonParser_initialiser_return
initialiser(pEmersonParser ctx)
{   
    EmersonParser_initialiser_return retval;
    ANTLR3_UINT32 initialiser_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal87;
    pANTLR3_COMMON_TOKEN    LTERM88;
    EmersonParser_assignmentExpression_return assignmentExpression89;
    #undef	RETURN_TYPE_assignmentExpression89
    #define	RETURN_TYPE_assignmentExpression89 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal87_tree;
    pANTLR3_BASE_TREE LTERM88_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    initialiser_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal87       = NULL;
    LTERM88       = NULL;
    assignmentExpression89.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal87_tree   = NULL;
    LTERM88_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:212:2: ( '=' ( LTERM )* assignmentExpression -> assignmentExpression )
        // .//Emerson.g:212:4: '=' ( LTERM )* assignmentExpression
        {
            char_literal87 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_initialiser1356); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal87, NULL); }


            // .//Emerson.g:212:8: ( LTERM )*

            for (;;)
            {
                int alt42=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA42_0 = LA(1);
                    if ( (LA42_0 == LTERM) ) 
                    {
                        alt42=1;
                    }

                }
                switch (alt42) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM88 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiser1358); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM88, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_initialiser1361);
            assignmentExpression89=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression89.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 212:36: -> assignmentExpression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, initialiser_StartIndex); }
    return retval;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//Emerson.g:215:1: initialiserNoIn : '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn ;
 */
static EmersonParser_initialiserNoIn_return
initialiserNoIn(pEmersonParser ctx)
{   
    EmersonParser_initialiserNoIn_return retval;
    ANTLR3_UINT32 initialiserNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal90;
    pANTLR3_COMMON_TOKEN    LTERM91;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn92;
    #undef	RETURN_TYPE_assignmentExpressionNoIn92
    #define	RETURN_TYPE_assignmentExpressionNoIn92 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE char_literal90_tree;
    pANTLR3_BASE_TREE LTERM91_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    initialiserNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal90       = NULL;
    LTERM91       = NULL;
    assignmentExpressionNoIn92.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal90_tree   = NULL;
    LTERM91_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:216:2: ( '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn )
        // .//Emerson.g:216:4: '=' ( LTERM )* assignmentExpressionNoIn
        {
            char_literal90 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_initialiserNoIn1378); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal90, NULL); }


            // .//Emerson.g:216:8: ( LTERM )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (LA43_0 == LTERM) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM91 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiserNoIn1380); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM91, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1383);
            assignmentExpressionNoIn92=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn92.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 216:40: -> assignmentExpressionNoIn
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, initialiserNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start emptyStatement
 * .//Emerson.g:219:1: emptyStatement : ';' ;
 */
static EmersonParser_emptyStatement_return
emptyStatement(pEmersonParser ctx)
{   
    EmersonParser_emptyStatement_return retval;
    ANTLR3_UINT32 emptyStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal93;

    pANTLR3_BASE_TREE char_literal93_tree;

    /* Initialize rule variables
     */
    emptyStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal93       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal93_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:220:2: ( ';' )
        // .//Emerson.g:220:4: ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal93 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_emptyStatement1399); 
            if  (HASEXCEPTION())
            {
                goto ruleemptyStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal93_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal93));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal93_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleemptyStatementEx; /* Prevent compiler warnings */
    ruleemptyStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, emptyStatement_StartIndex); }
    return retval;
}
/* $ANTLR end emptyStatement */

/** 
 * $ANTLR start expressionStatement
 * .//Emerson.g:223:1: expressionStatement : expression ( LTERM | ';' ) -> expression ;
 */
static EmersonParser_expressionStatement_return
expressionStatement(pEmersonParser ctx)
{   
    EmersonParser_expressionStatement_return retval;
    ANTLR3_UINT32 expressionStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM95;
    pANTLR3_COMMON_TOKEN    char_literal96;
    EmersonParser_expression_return expression94;
    #undef	RETURN_TYPE_expression94
    #define	RETURN_TYPE_expression94 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM95_tree;
    pANTLR3_BASE_TREE char_literal96_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expressionStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM95       = NULL;
    char_literal96       = NULL;
    expression94.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM95_tree   = NULL;
    char_literal96_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:224:2: ( expression ( LTERM | ';' ) -> expression )
        // .//Emerson.g:224:4: expression ( LTERM | ';' )
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1411);
            expression94=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression94.tree, NULL); }

            // .//Emerson.g:224:15: ( LTERM | ';' )
            {
                int alt44=2;

                {
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == LTERM) ) 
                    {
                        alt44=1;
                    }
                    else if ( (LA44_0 == 132) ) 
                    {
                        alt44=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 44;
                        EXCEPTION->state        = 0;


                        goto ruleexpressionStatementEx;
                    }
                }
                switch (alt44) 
                {
            	case 1:
            	    // .//Emerson.g:224:16: LTERM
            	    {
            	        LTERM95 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionStatement1414); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM95, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:224:24: ';'
            	    {
            	        char_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_expressionStatement1418); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal96, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 224:29: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, expressionStatement_StartIndex); }
    return retval;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start whenStatement
 * .//Emerson.g:227:1: whenStatement : 'when' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* 'check' whenCheckedListFirst ( LTERM )* s1= statement -> ^( WHEN expression whenCheckedListFirst $s1) ;
 */
static EmersonParser_whenStatement_return
whenStatement(pEmersonParser ctx)
{   
    EmersonParser_whenStatement_return retval;
    ANTLR3_UINT32 whenStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal97;
    pANTLR3_COMMON_TOKEN    LTERM98;
    pANTLR3_COMMON_TOKEN    char_literal99;
    pANTLR3_COMMON_TOKEN    LTERM100;
    pANTLR3_COMMON_TOKEN    LTERM102;
    pANTLR3_COMMON_TOKEN    char_literal103;
    pANTLR3_COMMON_TOKEN    LTERM104;
    pANTLR3_COMMON_TOKEN    string_literal105;
    pANTLR3_COMMON_TOKEN    LTERM107;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_expression_return expression101;
    #undef	RETURN_TYPE_expression101
    #define	RETURN_TYPE_expression101 EmersonParser_expression_return

    EmersonParser_whenCheckedListFirst_return whenCheckedListFirst106;
    #undef	RETURN_TYPE_whenCheckedListFirst106
    #define	RETURN_TYPE_whenCheckedListFirst106 EmersonParser_whenCheckedListFirst_return

    pANTLR3_BASE_TREE string_literal97_tree;
    pANTLR3_BASE_TREE LTERM98_tree;
    pANTLR3_BASE_TREE char_literal99_tree;
    pANTLR3_BASE_TREE LTERM100_tree;
    pANTLR3_BASE_TREE LTERM102_tree;
    pANTLR3_BASE_TREE char_literal103_tree;
    pANTLR3_BASE_TREE LTERM104_tree;
    pANTLR3_BASE_TREE string_literal105_tree;
    pANTLR3_BASE_TREE LTERM107_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedListFirst;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whenStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal97       = NULL;
    LTERM98       = NULL;
    char_literal99       = NULL;
    LTERM100       = NULL;
    LTERM102       = NULL;
    char_literal103       = NULL;
    LTERM104       = NULL;
    string_literal105       = NULL;
    LTERM107       = NULL;
    s1.tree = NULL;

    expression101.tree = NULL;

    whenCheckedListFirst106.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal97_tree   = NULL;
    LTERM98_tree   = NULL;
    char_literal99_tree   = NULL;
    LTERM100_tree   = NULL;
    LTERM102_tree   = NULL;
    char_literal103_tree   = NULL;
    LTERM104_tree   = NULL;
    string_literal105_tree   = NULL;
    LTERM107_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_whenCheckedListFirst   = NULL;
    #define CREATE_stream_whenCheckedListFirst  if (stream_whenCheckedListFirst == NULL) {stream_whenCheckedListFirst = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedListFirst"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:228:5: ( 'when' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* 'check' whenCheckedListFirst ( LTERM )* s1= statement -> ^( WHEN expression whenCheckedListFirst $s1) )
        // .//Emerson.g:228:7: 'when' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* 'check' whenCheckedListFirst ( LTERM )* s1= statement
        {
            string_literal97 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_whenStatement1437); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, string_literal97, NULL); }


            // .//Emerson.g:228:14: ( LTERM )*

            for (;;)
            {
                int alt45=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == LTERM) ) 
                    {
                        alt45=1;
                    }

                }
                switch (alt45) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM98 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1439); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM98, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop45;	/* break out of the loop */
            	    break;
                }
            }
            loop45: ; /* Jump out to here if this rule does not match */

            char_literal99 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_whenStatement1442); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal99, NULL); }


            // .//Emerson.g:228:25: ( LTERM )*

            for (;;)
            {
                int alt46=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == LTERM) ) 
                    {
                        alt46=1;
                    }

                }
                switch (alt46) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM100 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1444); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM100, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop46;	/* break out of the loop */
            	    break;
                }
            }
            loop46: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whenStatement1447);
            expression101=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression101.tree, NULL); }

            // .//Emerson.g:228:43: ( LTERM )*

            for (;;)
            {
                int alt47=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA47_0 = LA(1);
                    if ( (LA47_0 == LTERM) ) 
                    {
                        alt47=1;
                    }

                }
                switch (alt47) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM102 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1449); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM102, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */

            char_literal103 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_whenStatement1452); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal103, NULL); }


            // .//Emerson.g:228:54: ( LTERM )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == LTERM) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM104 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1454); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM104, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */

            string_literal105 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_whenStatement1457); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, string_literal105, NULL); }

            FOLLOWPUSH(FOLLOW_whenCheckedListFirst_in_whenStatement1459);
            whenCheckedListFirst106=whenCheckedListFirst(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedListFirst; stream_whenCheckedListFirst->add(stream_whenCheckedListFirst, whenCheckedListFirst106.tree, NULL); }

            // .//Emerson.g:228:90: ( LTERM )*

            for (;;)
            {
                int alt49=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA49_0 = LA(1);
                    if ( (LA49_0 == LTERM) ) 
                    {
                        alt49=1;
                    }

                }
                switch (alt49) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM107 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1461); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM107, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whenStatement1466);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

             
            /* AST REWRITE
             * elements          : s1, expression, whenCheckedListFirst
             * token labels      : 
             * rule labels       : retval, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 228:110: -> ^( WHEN expression whenCheckedListFirst $s1)
            	{
            	    // .//Emerson.g:228:113: ^( WHEN expression whenCheckedListFirst $s1)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN, (pANTLR3_UINT8)"WHEN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_whenCheckedListFirst == NULL ? NULL : stream_whenCheckedListFirst->nextTree(stream_whenCheckedListFirst));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenStatementEx; /* Prevent compiler warnings */
    rulewhenStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_whenCheckedListFirst != NULL) stream_whenCheckedListFirst->free(stream_whenCheckedListFirst);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, whenStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whenStatement */

/** 
 * $ANTLR start whenPred
 * .//Emerson.g:234:1: whenPred : s1= expression ( LTERM )* '<wo38__' ( LTERM )* s2= expression -> ^( WHEN_PRED $s1 $s2) ;
 */
static EmersonParser_whenPred_return
whenPred(pEmersonParser ctx)
{   
    EmersonParser_whenPred_return retval;
    ANTLR3_UINT32 whenPred_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM108;
    pANTLR3_COMMON_TOKEN    string_literal109;
    pANTLR3_COMMON_TOKEN    LTERM110;
    EmersonParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_expression_return

    EmersonParser_expression_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM108_tree;
    pANTLR3_BASE_TREE string_literal109_tree;
    pANTLR3_BASE_TREE LTERM110_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    whenPred_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM108       = NULL;
    string_literal109       = NULL;
    LTERM110       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM108_tree   = NULL;
    string_literal109_tree   = NULL;
    LTERM110_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:235:5: (s1= expression ( LTERM )* '<wo38__' ( LTERM )* s2= expression -> ^( WHEN_PRED $s1 $s2) )
        // .//Emerson.g:235:7: s1= expression ( LTERM )* '<wo38__' ( LTERM )* s2= expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenPred1505);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//Emerson.g:235:21: ( LTERM )*

            for (;;)
            {
                int alt50=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA50_0 = LA(1);
                    if ( (LA50_0 == LTERM) ) 
                    {
                        alt50=1;
                    }

                }
                switch (alt50) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM108 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenPred1507); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenPredEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM108, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop50;	/* break out of the loop */
            	    break;
                }
            }
            loop50: ; /* Jump out to here if this rule does not match */

            string_literal109 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_whenPred1510); 
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, string_literal109, NULL); }


            // .//Emerson.g:235:38: ( LTERM )*

            for (;;)
            {
                int alt51=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA51_0 = LA(1);
                    if ( (LA51_0 == LTERM) ) 
                    {
                        alt51=1;
                    }

                }
                switch (alt51) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM110 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenPred1512); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenPredEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM110, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop51;	/* break out of the loop */
            	    break;
                }
            }
            loop51: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whenPred1517);
            s2=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s2.tree, NULL); }

             
            /* AST REWRITE
             * elements          : s1, s2
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 235:59: -> ^( WHEN_PRED $s1 $s2)
            	{
            	    // .//Emerson.g:235:62: ^( WHEN_PRED $s1 $s2)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_PRED, (pANTLR3_UINT8)"WHEN_PRED"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenPredEx; /* Prevent compiler warnings */
    rulewhenPredEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, whenPred_StartIndex); }
    return retval;
}
/* $ANTLR end whenPred */

/** 
 * $ANTLR start whenCheckedListFirst
 * .//Emerson.g:238:1: whenCheckedListFirst : s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )? -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? ) ;
 */
static EmersonParser_whenCheckedListFirst_return
whenCheckedListFirst(pEmersonParser ctx)
{   
    EmersonParser_whenCheckedListFirst_return retval;
    ANTLR3_UINT32 whenCheckedListFirst_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM111;
    pANTLR3_COMMON_TOKEN    char_literal112;
    pANTLR3_COMMON_TOKEN    LTERM113;
    EmersonParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_expression_return

    EmersonParser_whenCheckedListSubsequent_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_whenCheckedListSubsequent_return

    pANTLR3_BASE_TREE LTERM111_tree;
    pANTLR3_BASE_TREE char_literal112_tree;
    pANTLR3_BASE_TREE LTERM113_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedListSubsequent;
    /* Initialize rule variables
     */
    whenCheckedListFirst_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM111       = NULL;
    char_literal112       = NULL;
    LTERM113       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM111_tree   = NULL;
    char_literal112_tree   = NULL;
    LTERM113_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_whenCheckedListSubsequent   = NULL;
    #define CREATE_stream_whenCheckedListSubsequent  if (stream_whenCheckedListSubsequent == NULL) {stream_whenCheckedListSubsequent = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedListSubsequent"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:239:5: (s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )? -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? ) )
        // .//Emerson.g:239:7: s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )?
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListFirst1548);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//Emerson.g:239:21: ( LTERM )*

            for (;;)
            {
                int alt52=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA52_0 = LA(1);
                    if ( (LA52_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA52_2 = LA(2);
                            if ( (synpred67_Emerson(ctx)) ) 
                            {
                                alt52=1;
                            }

                        }
                    }

                }
                switch (alt52) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM111 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListFirst1550); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM111, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop52;	/* break out of the loop */
            	    break;
                }
            }
            loop52: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:239:28: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )?
            {
                int alt54=2;
                {
                    int LA54_0 = LA(1);
                    if ( (LA54_0 == 127) ) 
                    {
                        alt54=1;
                    }
                }
                switch (alt54) 
                {
            	case 1:
            	    // .//Emerson.g:239:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
            	    {
            	        char_literal112 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_whenCheckedListFirst1554); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal112, NULL); }


            	        // .//Emerson.g:239:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt53=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA53_0 = LA(1);
            	                if ( (LA53_0 == LTERM) ) 
            	                {
            	                    alt53=1;
            	                }

            	            }
            	            switch (alt53) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM113 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListFirst1556); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhenCheckedListFirstEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM113, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop53;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop53: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1561);
            	        s2=whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedListSubsequent; stream_whenCheckedListSubsequent->add(stream_whenCheckedListSubsequent, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s2, s1
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 239:71: -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:239:77: ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_CHECKED_LIST_FIRST, (pANTLR3_UINT8)"WHEN_CHECKED_LIST_FIRST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:239:107: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListFirstEx; /* Prevent compiler warnings */
    rulewhenCheckedListFirstEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_whenCheckedListSubsequent != NULL) stream_whenCheckedListSubsequent->free(stream_whenCheckedListSubsequent);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, whenCheckedListFirst_StartIndex); }
    return retval;
}
/* $ANTLR end whenCheckedListFirst */

/** 
 * $ANTLR start whenCheckedListSubsequent
 * .//Emerson.g:242:1: whenCheckedListSubsequent : s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )* -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* ) ;
 */
static EmersonParser_whenCheckedListSubsequent_return
whenCheckedListSubsequent(pEmersonParser ctx)
{   
    EmersonParser_whenCheckedListSubsequent_return retval;
    ANTLR3_UINT32 whenCheckedListSubsequent_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM114;
    pANTLR3_COMMON_TOKEN    char_literal115;
    pANTLR3_COMMON_TOKEN    LTERM116;
    EmersonParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_expression_return

    EmersonParser_whenCheckedListSubsequent_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_whenCheckedListSubsequent_return

    pANTLR3_BASE_TREE LTERM114_tree;
    pANTLR3_BASE_TREE char_literal115_tree;
    pANTLR3_BASE_TREE LTERM116_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedListSubsequent;
    /* Initialize rule variables
     */
    whenCheckedListSubsequent_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM114       = NULL;
    char_literal115       = NULL;
    LTERM116       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM114_tree   = NULL;
    char_literal115_tree   = NULL;
    LTERM116_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_whenCheckedListSubsequent   = NULL;
    #define CREATE_stream_whenCheckedListSubsequent  if (stream_whenCheckedListSubsequent == NULL) {stream_whenCheckedListSubsequent = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedListSubsequent"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:243:5: (s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )* -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* ) )
        // .//Emerson.g:243:7: s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )*
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListSubsequent1598);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//Emerson.g:243:21: ( LTERM )*

            for (;;)
            {
                int alt55=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA55_0 = LA(1);
                    if ( (LA55_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA55_2 = LA(2);
                            if ( (synpred70_Emerson(ctx)) ) 
                            {
                                alt55=1;
                            }

                        }
                    }

                }
                switch (alt55) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM114 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListSubsequent1600); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM114, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:243:28: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )*

            for (;;)
            {
                int alt57=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA57_0 = LA(1);
                    if ( (LA57_0 == 127) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA57_2 = LA(2);
                            if ( (synpred72_Emerson(ctx)) ) 
                            {
                                alt57=1;
                            }

                        }
                    }

                }
                switch (alt57) 
                {
            	case 1:
            	    // .//Emerson.g:243:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
            	    {
            	        char_literal115 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_whenCheckedListSubsequent1604); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal115, NULL); }


            	        // .//Emerson.g:243:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt56=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA56_0 = LA(1);
            	                if ( (LA56_0 == LTERM) ) 
            	                {
            	                    alt56=1;
            	                }

            	            }
            	            switch (alt56) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM116 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListSubsequent1606); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhenCheckedListSubsequentEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM116, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop56;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop56: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1611);
            	        s2=whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedListSubsequent; stream_whenCheckedListSubsequent->add(stream_whenCheckedListSubsequent, s2.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop57;	/* break out of the loop */
            	    break;
                }
            }
            loop57: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : s1, s2
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 243:71: -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* )
            	{
            	    // .//Emerson.g:243:74: ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_CHECKED_LIST_SUBSEQUENT, (pANTLR3_UINT8)"WHEN_CHECKED_LIST_SUBSEQUENT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:243:109: ( $s2)*
            	        {
            	        	while ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if (stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListSubsequentEx; /* Prevent compiler warnings */
    rulewhenCheckedListSubsequentEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_whenCheckedListSubsequent != NULL) stream_whenCheckedListSubsequent->free(stream_whenCheckedListSubsequent);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, whenCheckedListSubsequent_StartIndex); }
    return retval;
}
/* $ANTLR end whenCheckedListSubsequent */

/** 
 * $ANTLR start ifStatement
 * .//Emerson.g:247:1: ifStatement : 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) ;
 */
static EmersonParser_ifStatement_return
ifStatement(pEmersonParser ctx)
{   
    EmersonParser_ifStatement_return retval;
    ANTLR3_UINT32 ifStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal117;
    pANTLR3_COMMON_TOKEN    LTERM118;
    pANTLR3_COMMON_TOKEN    char_literal119;
    pANTLR3_COMMON_TOKEN    LTERM120;
    pANTLR3_COMMON_TOKEN    LTERM122;
    pANTLR3_COMMON_TOKEN    char_literal123;
    pANTLR3_COMMON_TOKEN    LTERM124;
    pANTLR3_COMMON_TOKEN    LTERM125;
    pANTLR3_COMMON_TOKEN    string_literal126;
    pANTLR3_COMMON_TOKEN    LTERM127;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_statement_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_statement_return

    EmersonParser_expression_return expression121;
    #undef	RETURN_TYPE_expression121
    #define	RETURN_TYPE_expression121 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal117_tree;
    pANTLR3_BASE_TREE LTERM118_tree;
    pANTLR3_BASE_TREE char_literal119_tree;
    pANTLR3_BASE_TREE LTERM120_tree;
    pANTLR3_BASE_TREE LTERM122_tree;
    pANTLR3_BASE_TREE char_literal123_tree;
    pANTLR3_BASE_TREE LTERM124_tree;
    pANTLR3_BASE_TREE LTERM125_tree;
    pANTLR3_BASE_TREE string_literal126_tree;
    pANTLR3_BASE_TREE LTERM127_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    ifStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal117       = NULL;
    LTERM118       = NULL;
    char_literal119       = NULL;
    LTERM120       = NULL;
    LTERM122       = NULL;
    char_literal123       = NULL;
    LTERM124       = NULL;
    LTERM125       = NULL;
    string_literal126       = NULL;
    LTERM127       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expression121.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal117_tree   = NULL;
    LTERM118_tree   = NULL;
    char_literal119_tree   = NULL;
    LTERM120_tree   = NULL;
    LTERM122_tree   = NULL;
    char_literal123_tree   = NULL;
    LTERM124_tree   = NULL;
    LTERM125_tree   = NULL;
    string_literal126_tree   = NULL;
    LTERM127_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:248:5: ( 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) )
        // .//Emerson.g:248:7: 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
        {
            string_literal117 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_ifStatement1648); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, string_literal117, NULL); }


            // .//Emerson.g:248:12: ( LTERM )*

            for (;;)
            {
                int alt58=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA58_0 = LA(1);
                    if ( (LA58_0 == LTERM) ) 
                    {
                        alt58=1;
                    }

                }
                switch (alt58) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM118 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1650); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM118, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop58;	/* break out of the loop */
            	    break;
                }
            }
            loop58: ; /* Jump out to here if this rule does not match */

            char_literal119 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_ifStatement1653); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal119, NULL); }


            // .//Emerson.g:248:23: ( LTERM )*

            for (;;)
            {
                int alt59=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA59_0 = LA(1);
                    if ( (LA59_0 == LTERM) ) 
                    {
                        alt59=1;
                    }

                }
                switch (alt59) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM120 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1655); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM120, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1658);
            expression121=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression121.tree, NULL); }

            // .//Emerson.g:248:41: ( LTERM )*

            for (;;)
            {
                int alt60=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA60_0 = LA(1);
                    if ( (LA60_0 == LTERM) ) 
                    {
                        alt60=1;
                    }

                }
                switch (alt60) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM122 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1660); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM122, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop60;	/* break out of the loop */
            	    break;
                }
            }
            loop60: ; /* Jump out to here if this rule does not match */

            char_literal123 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_ifStatement1663); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal123, NULL); }


            // .//Emerson.g:248:52: ( LTERM )*

            for (;;)
            {
                int alt61=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA61_0 = LA(1);
                    if ( (LA61_0 == LTERM) ) 
                    {
                        alt61=1;
                    }

                }
                switch (alt61) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM124 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1665); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM124, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop61;	/* break out of the loop */
            	    break;
                }
            }
            loop61: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1670);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

            // .//Emerson.g:248:72: ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
            {
                int alt64=2;
                {
                    int LA64_0 = LA(1);
                    if ( (LA64_0 == LTERM) ) 
                    {
                        {
                            int LA64_1 = LA(2);
                            if ( (synpred79_Emerson(ctx)) ) 
                            {
                                alt64=1;
                            }
                        }
                    }
                    else if ( (LA64_0 == 138) ) 
                    {
                        {
                            int LA64_2 = LA(2);
                            if ( (synpred79_Emerson(ctx)) ) 
                            {
                                alt64=1;
                            }
                        }
                    }
                }
                switch (alt64) 
                {
            	case 1:
            	    // .//Emerson.g:248:73: ( LTERM )* 'else' ( LTERM )* s2= statement
            	    {

            	        // .//Emerson.g:248:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt62=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA62_0 = LA(1);
            	                if ( (LA62_0 == LTERM) ) 
            	                {
            	                    alt62=1;
            	                }

            	            }
            	            switch (alt62) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM125 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1673); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM125, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop62;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop62: ; /* Jump out to here if this rule does not match */

            	        string_literal126 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_ifStatement1676); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, string_literal126, NULL); }


            	        // .//Emerson.g:248:87: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt63=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA63_0 = LA(1);
            	                if ( (LA63_0 == LTERM) ) 
            	                {
            	                    alt63=1;
            	                }

            	            }
            	            switch (alt63) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM127 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1678); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM127, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop63;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop63: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1683);
            	        s2=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s2, s1, expression
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 248:109: -> ^( IF expression $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:248:112: ^( IF expression $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:248:132: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, ifStatement_StartIndex); }
    return retval;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//Emerson.g:251:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static EmersonParser_iterationStatement_return
iterationStatement(pEmersonParser ctx)
{   
    EmersonParser_iterationStatement_return retval;
    ANTLR3_UINT32 iterationStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_doWhileStatement_return doWhileStatement128;
    #undef	RETURN_TYPE_doWhileStatement128
    #define	RETURN_TYPE_doWhileStatement128 EmersonParser_doWhileStatement_return

    EmersonParser_whileStatement_return whileStatement129;
    #undef	RETURN_TYPE_whileStatement129
    #define	RETURN_TYPE_whileStatement129 EmersonParser_whileStatement_return

    EmersonParser_forStatement_return forStatement130;
    #undef	RETURN_TYPE_forStatement130
    #define	RETURN_TYPE_forStatement130 EmersonParser_forStatement_return

    EmersonParser_forInStatement_return forInStatement131;
    #undef	RETURN_TYPE_forInStatement131
    #define	RETURN_TYPE_forInStatement131 EmersonParser_forInStatement_return


    /* Initialize rule variables
     */
    iterationStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        return retval; 
    }
    doWhileStatement128.tree = NULL;

    whileStatement129.tree = NULL;

    forStatement130.tree = NULL;

    forInStatement131.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:252:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt65;

            alt65=4;

            switch ( LA(1) ) 
            {
            case 139:
            	{
            		alt65=1;
            	}
                break;
            case 140:
            	{
            		alt65=2;
            	}
                break;
            case 141:
            	{

            		{
            		    int LA65_3 = LA(2);
            		    if ( (synpred82_Emerson(ctx)) ) 
            		    {
            		        alt65=3;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt65=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 65;
            		        EXCEPTION->state        = 3;


            		        goto ruleiterationStatementEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 65;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt65) 
            {
        	case 1:
        	    // .//Emerson.g:252:4: doWhileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1712);
        	        doWhileStatement128=doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, doWhileStatement128.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:253:4: whileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1717);
        	        whileStatement129=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStatement129.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:254:4: forStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1722);
        	        forStatement130=forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forStatement130.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:255:4: forInStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1727);
        	        forInStatement131=forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forInStatement131.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, iterationStatement_StartIndex); }
    return retval;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//Emerson.g:258:1: doWhileStatement : 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) ;
 */
static EmersonParser_doWhileStatement_return
doWhileStatement(pEmersonParser ctx)
{   
    EmersonParser_doWhileStatement_return retval;
    ANTLR3_UINT32 doWhileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal132;
    pANTLR3_COMMON_TOKEN    LTERM133;
    pANTLR3_COMMON_TOKEN    LTERM135;
    pANTLR3_COMMON_TOKEN    string_literal136;
    pANTLR3_COMMON_TOKEN    LTERM137;
    pANTLR3_COMMON_TOKEN    char_literal138;
    pANTLR3_COMMON_TOKEN    char_literal140;
    pANTLR3_COMMON_TOKEN    LTERM141;
    pANTLR3_COMMON_TOKEN    char_literal142;
    EmersonParser_statement_return statement134;
    #undef	RETURN_TYPE_statement134
    #define	RETURN_TYPE_statement134 EmersonParser_statement_return

    EmersonParser_expression_return expression139;
    #undef	RETURN_TYPE_expression139
    #define	RETURN_TYPE_expression139 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal132_tree;
    pANTLR3_BASE_TREE LTERM133_tree;
    pANTLR3_BASE_TREE LTERM135_tree;
    pANTLR3_BASE_TREE string_literal136_tree;
    pANTLR3_BASE_TREE LTERM137_tree;
    pANTLR3_BASE_TREE char_literal138_tree;
    pANTLR3_BASE_TREE char_literal140_tree;
    pANTLR3_BASE_TREE LTERM141_tree;
    pANTLR3_BASE_TREE char_literal142_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    doWhileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal132       = NULL;
    LTERM133       = NULL;
    LTERM135       = NULL;
    string_literal136       = NULL;
    LTERM137       = NULL;
    char_literal138       = NULL;
    char_literal140       = NULL;
    LTERM141       = NULL;
    char_literal142       = NULL;
    statement134.tree = NULL;

    expression139.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal132_tree   = NULL;
    LTERM133_tree   = NULL;
    LTERM135_tree   = NULL;
    string_literal136_tree   = NULL;
    LTERM137_tree   = NULL;
    char_literal138_tree   = NULL;
    char_literal140_tree   = NULL;
    LTERM141_tree   = NULL;
    char_literal142_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:259:2: ( 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) )
        // .//Emerson.g:259:4: 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' )
        {
            string_literal132 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_doWhileStatement1739); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, string_literal132, NULL); }


            // .//Emerson.g:259:9: ( LTERM )*

            for (;;)
            {
                int alt66=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA66_0 = LA(1);
                    if ( (LA66_0 == LTERM) ) 
                    {
                        alt66=1;
                    }

                }
                switch (alt66) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM133 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1741); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM133, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop66;	/* break out of the loop */
            	    break;
                }
            }
            loop66: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1744);
            statement134=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement134.tree, NULL); }

            // .//Emerson.g:259:26: ( LTERM )*

            for (;;)
            {
                int alt67=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA67_0 = LA(1);
                    if ( (LA67_0 == LTERM) ) 
                    {
                        alt67=1;
                    }

                }
                switch (alt67) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM135 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1746); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM135, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop67;	/* break out of the loop */
            	    break;
                }
            }
            loop67: ; /* Jump out to here if this rule does not match */

            string_literal136 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_doWhileStatement1749); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, string_literal136, NULL); }


            // .//Emerson.g:259:41: ( LTERM )*

            for (;;)
            {
                int alt68=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA68_0 = LA(1);
                    if ( (LA68_0 == LTERM) ) 
                    {
                        alt68=1;
                    }

                }
                switch (alt68) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM137 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1751); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM137, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop68;	/* break out of the loop */
            	    break;
                }
            }
            loop68: ; /* Jump out to here if this rule does not match */

            char_literal138 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_doWhileStatement1754); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal138, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1756);
            expression139=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression139.tree, NULL); }
            char_literal140 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_doWhileStatement1758); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal140, NULL); }


            // .//Emerson.g:259:67: ( LTERM | ';' )
            {
                int alt69=2;

                {
                    int LA69_0 = LA(1);
                    if ( (LA69_0 == LTERM) ) 
                    {
                        alt69=1;
                    }
                    else if ( (LA69_0 == 132) ) 
                    {
                        alt69=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 69;
                        EXCEPTION->state        = 0;


                        goto ruledoWhileStatementEx;
                    }
                }
                switch (alt69) 
                {
            	case 1:
            	    // .//Emerson.g:259:68: LTERM
            	    {
            	        LTERM141 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1761); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM141, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:259:76: ';'
            	    {
            	        char_literal142 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_doWhileStatement1765); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal142, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 259:81: -> ^( DO statement expression )
            	{
            	    // .//Emerson.g:259:84: ^( DO statement expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO, (pANTLR3_UINT8)"DO"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, doWhileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//Emerson.g:262:1: whileStatement : 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) ;
 */
static EmersonParser_whileStatement_return
whileStatement(pEmersonParser ctx)
{   
    EmersonParser_whileStatement_return retval;
    ANTLR3_UINT32 whileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal143;
    pANTLR3_COMMON_TOKEN    LTERM144;
    pANTLR3_COMMON_TOKEN    char_literal145;
    pANTLR3_COMMON_TOKEN    LTERM146;
    pANTLR3_COMMON_TOKEN    LTERM148;
    pANTLR3_COMMON_TOKEN    char_literal149;
    pANTLR3_COMMON_TOKEN    LTERM150;
    EmersonParser_expression_return expression147;
    #undef	RETURN_TYPE_expression147
    #define	RETURN_TYPE_expression147 EmersonParser_expression_return

    EmersonParser_statement_return statement151;
    #undef	RETURN_TYPE_statement151
    #define	RETURN_TYPE_statement151 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal143_tree;
    pANTLR3_BASE_TREE LTERM144_tree;
    pANTLR3_BASE_TREE char_literal145_tree;
    pANTLR3_BASE_TREE LTERM146_tree;
    pANTLR3_BASE_TREE LTERM148_tree;
    pANTLR3_BASE_TREE char_literal149_tree;
    pANTLR3_BASE_TREE LTERM150_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal143       = NULL;
    LTERM144       = NULL;
    char_literal145       = NULL;
    LTERM146       = NULL;
    LTERM148       = NULL;
    char_literal149       = NULL;
    LTERM150       = NULL;
    expression147.tree = NULL;

    statement151.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal143_tree   = NULL;
    LTERM144_tree   = NULL;
    char_literal145_tree   = NULL;
    LTERM146_tree   = NULL;
    LTERM148_tree   = NULL;
    char_literal149_tree   = NULL;
    LTERM150_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:263:2: ( 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) )
        // .//Emerson.g:263:4: 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal143 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_whileStatement1791); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, string_literal143, NULL); }


            // .//Emerson.g:263:12: ( LTERM )*

            for (;;)
            {
                int alt70=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA70_0 = LA(1);
                    if ( (LA70_0 == LTERM) ) 
                    {
                        alt70=1;
                    }

                }
                switch (alt70) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM144 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1793); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM144, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop70;	/* break out of the loop */
            	    break;
                }
            }
            loop70: ; /* Jump out to here if this rule does not match */

            char_literal145 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_whileStatement1796); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal145, NULL); }


            // .//Emerson.g:263:23: ( LTERM )*

            for (;;)
            {
                int alt71=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA71_0 = LA(1);
                    if ( (LA71_0 == LTERM) ) 
                    {
                        alt71=1;
                    }

                }
                switch (alt71) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM146 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1798); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM146, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop71;	/* break out of the loop */
            	    break;
                }
            }
            loop71: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1801);
            expression147=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression147.tree, NULL); }

            // .//Emerson.g:263:41: ( LTERM )*

            for (;;)
            {
                int alt72=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA72_0 = LA(1);
                    if ( (LA72_0 == LTERM) ) 
                    {
                        alt72=1;
                    }

                }
                switch (alt72) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM148 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1803); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM148, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop72;	/* break out of the loop */
            	    break;
                }
            }
            loop72: ; /* Jump out to here if this rule does not match */

            char_literal149 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_whileStatement1806); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal149, NULL); }


            // .//Emerson.g:263:52: ( LTERM )*

            for (;;)
            {
                int alt73=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA73_0 = LA(1);
                    if ( (LA73_0 == LTERM) ) 
                    {
                        alt73=1;
                    }

                }
                switch (alt73) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM150 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1808); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM150, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop73;	/* break out of the loop */
            	    break;
                }
            }
            loop73: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1811);
            statement151=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement151.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 263:69: -> ^( WHILE expression statement )
            	{
            	    // .//Emerson.g:263:72: ^( WHILE expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE, (pANTLR3_UINT8)"WHILE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, whileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//Emerson.g:266:1: forStatement : 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) ;
 */
static EmersonParser_forStatement_return
forStatement(pEmersonParser ctx)
{   
    EmersonParser_forStatement_return retval;
    ANTLR3_UINT32 forStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal152;
    pANTLR3_COMMON_TOKEN    LTERM153;
    pANTLR3_COMMON_TOKEN    char_literal154;
    pANTLR3_COMMON_TOKEN    LTERM155;
    pANTLR3_COMMON_TOKEN    LTERM156;
    pANTLR3_COMMON_TOKEN    char_literal157;
    pANTLR3_COMMON_TOKEN    LTERM158;
    pANTLR3_COMMON_TOKEN    LTERM159;
    pANTLR3_COMMON_TOKEN    char_literal160;
    pANTLR3_COMMON_TOKEN    LTERM161;
    pANTLR3_COMMON_TOKEN    LTERM162;
    pANTLR3_COMMON_TOKEN    char_literal163;
    pANTLR3_COMMON_TOKEN    LTERM164;
    EmersonParser_forStatementInitialiserPart_return init;
    #undef	RETURN_TYPE_init
    #define	RETURN_TYPE_init EmersonParser_forStatementInitialiserPart_return

    EmersonParser_expression_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond EmersonParser_expression_return

    EmersonParser_expression_return iter;
    #undef	RETURN_TYPE_iter
    #define	RETURN_TYPE_iter EmersonParser_expression_return

    EmersonParser_statement_return statement165;
    #undef	RETURN_TYPE_statement165
    #define	RETURN_TYPE_statement165 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal152_tree;
    pANTLR3_BASE_TREE LTERM153_tree;
    pANTLR3_BASE_TREE char_literal154_tree;
    pANTLR3_BASE_TREE LTERM155_tree;
    pANTLR3_BASE_TREE LTERM156_tree;
    pANTLR3_BASE_TREE char_literal157_tree;
    pANTLR3_BASE_TREE LTERM158_tree;
    pANTLR3_BASE_TREE LTERM159_tree;
    pANTLR3_BASE_TREE char_literal160_tree;
    pANTLR3_BASE_TREE LTERM161_tree;
    pANTLR3_BASE_TREE LTERM162_tree;
    pANTLR3_BASE_TREE char_literal163_tree;
    pANTLR3_BASE_TREE LTERM164_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forStatementInitialiserPart;
    /* Initialize rule variables
     */
    forStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal152       = NULL;
    LTERM153       = NULL;
    char_literal154       = NULL;
    LTERM155       = NULL;
    LTERM156       = NULL;
    char_literal157       = NULL;
    LTERM158       = NULL;
    LTERM159       = NULL;
    char_literal160       = NULL;
    LTERM161       = NULL;
    LTERM162       = NULL;
    char_literal163       = NULL;
    LTERM164       = NULL;
    init.tree = NULL;

    cond.tree = NULL;

    iter.tree = NULL;

    statement165.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal152_tree   = NULL;
    LTERM153_tree   = NULL;
    char_literal154_tree   = NULL;
    LTERM155_tree   = NULL;
    LTERM156_tree   = NULL;
    char_literal157_tree   = NULL;
    LTERM158_tree   = NULL;
    LTERM159_tree   = NULL;
    char_literal160_tree   = NULL;
    LTERM161_tree   = NULL;
    LTERM162_tree   = NULL;
    char_literal163_tree   = NULL;
    LTERM164_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forStatementInitialiserPart   = NULL;
    #define CREATE_stream_forStatementInitialiserPart  if (stream_forStatementInitialiserPart == NULL) {stream_forStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:267:2: ( 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) )
        // .//Emerson.g:267:4: 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal152 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forStatement1834); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal152, NULL); }


            // .//Emerson.g:267:10: ( LTERM )*

            for (;;)
            {
                int alt74=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA74_0 = LA(1);
                    if ( (LA74_0 == LTERM) ) 
                    {
                        alt74=1;
                    }

                }
                switch (alt74) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM153 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1836); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM153, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop74;	/* break out of the loop */
            	    break;
                }
            }
            loop74: ; /* Jump out to here if this rule does not match */

            char_literal154 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_forStatement1839); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal154, NULL); }


            // .//Emerson.g:267:21: ( ( LTERM )* init= forStatementInitialiserPart )?
            {
                int alt76=2;
                alt76 = cdfa76.predict(ctx, RECOGNIZER, ISTREAM, &cdfa76);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt76) 
                {
            	case 1:
            	    // .//Emerson.g:267:22: ( LTERM )* init= forStatementInitialiserPart
            	    {

            	        // .//Emerson.g:267:22: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt75=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA75_0 = LA(1);
            	                if ( (LA75_0 == LTERM) ) 
            	                {
            	                    alt75=1;
            	                }

            	            }
            	            switch (alt75) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM155 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1842); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM155, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop75;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop75: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement1847);
            	        init=forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_forStatementInitialiserPart; stream_forStatementInitialiserPart->add(stream_forStatementInitialiserPart, init.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:267:64: ( LTERM )*

            for (;;)
            {
                int alt77=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA77_0 = LA(1);
                    if ( (LA77_0 == LTERM) ) 
                    {
                        alt77=1;
                    }

                }
                switch (alt77) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM156 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1851); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM156, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */

            char_literal157 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_forStatement1854); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal157, NULL); }


            // .//Emerson.g:267:75: ( ( LTERM )* cond= expression )?
            {
                int alt79=2;
                alt79 = cdfa79.predict(ctx, RECOGNIZER, ISTREAM, &cdfa79);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt79) 
                {
            	case 1:
            	    // .//Emerson.g:267:76: ( LTERM )* cond= expression
            	    {

            	        // .//Emerson.g:267:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt78=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA78_0 = LA(1);
            	                if ( (LA78_0 == LTERM) ) 
            	                {
            	                    alt78=1;
            	                }

            	            }
            	            switch (alt78) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM158 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1857); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM158, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop78;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop78: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1862);
            	        cond=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, cond.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:267:101: ( LTERM )*

            for (;;)
            {
                int alt80=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA80_0 = LA(1);
                    if ( (LA80_0 == LTERM) ) 
                    {
                        alt80=1;
                    }

                }
                switch (alt80) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM159 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1866); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM159, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop80;	/* break out of the loop */
            	    break;
                }
            }
            loop80: ; /* Jump out to here if this rule does not match */

            char_literal160 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_forStatement1869); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal160, NULL); }


            // .//Emerson.g:267:112: ( ( LTERM )* iter= expression )?
            {
                int alt82=2;
                alt82 = cdfa82.predict(ctx, RECOGNIZER, ISTREAM, &cdfa82);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt82) 
                {
            	case 1:
            	    // .//Emerson.g:267:113: ( LTERM )* iter= expression
            	    {

            	        // .//Emerson.g:267:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt81=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA81_0 = LA(1);
            	                if ( (LA81_0 == LTERM) ) 
            	                {
            	                    alt81=1;
            	                }

            	            }
            	            switch (alt81) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM161 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1872); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM161, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop81;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop81: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1877);
            	        iter=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, iter.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:267:138: ( LTERM )*

            for (;;)
            {
                int alt83=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA83_0 = LA(1);
                    if ( (LA83_0 == LTERM) ) 
                    {
                        alt83=1;
                    }

                }
                switch (alt83) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM162 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1881); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM162, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop83;	/* break out of the loop */
            	    break;
                }
            }
            loop83: ; /* Jump out to here if this rule does not match */

            char_literal163 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_forStatement1884); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal163, NULL); }


            // .//Emerson.g:267:149: ( LTERM )*

            for (;;)
            {
                int alt84=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA84_0 = LA(1);
                    if ( (LA84_0 == LTERM) ) 
                    {
                        alt84=1;
                    }

                }
                switch (alt84) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM164 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1886); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM164, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop84;	/* break out of the loop */
            	    break;
                }
            }
            loop84: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forStatement1889);
            statement165=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement165.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, cond, iter, init
             * token labels      : 
             * rule labels       : retval, init, iter, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_iter;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_init=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token init", init.tree != NULL ? init.tree : NULL);
            	stream_iter=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token iter", iter.tree != NULL ? iter.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 267:166: -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	{
            	    // .//Emerson.g:267:170: ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR"), root_1));

            	        // .//Emerson.g:267:176: ( ^( FORINIT $init) )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		// .//Emerson.g:267:176: ^( FORINIT $init)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORINIT, (pANTLR3_UINT8)"FORINIT"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }
            	        // .//Emerson.g:267:196: ( ^( FORCOND $cond) )?
            	        {
            	        	if ( (stream_cond != NULL && stream_cond->hasNext(stream_cond))  )
            	        	{
            	        		// .//Emerson.g:267:196: ^( FORCOND $cond)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORCOND, (pANTLR3_UINT8)"FORCOND"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_cond != NULL) stream_cond->reset(stream_cond);

            	        }
            	        // .//Emerson.g:267:215: ( ^( FORITER $iter) )?
            	        {
            	        	if ( (stream_iter != NULL && stream_iter->hasNext(stream_iter))  )
            	        	{
            	        		// .//Emerson.g:267:215: ^( FORITER $iter)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORITER, (pANTLR3_UINT8)"FORITER"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_iter == NULL ? NULL : stream_iter->nextTree(stream_iter));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_iter != NULL) stream_iter->reset(stream_iter);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_init != NULL) stream_init->free(stream_init);
            	if (stream_iter != NULL) stream_iter->free(stream_iter);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forStatementInitialiserPart != NULL) stream_forStatementInitialiserPart->free(stream_forStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, forStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//Emerson.g:270:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) );
 */
static EmersonParser_forStatementInitialiserPart_return
forStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal167;
    pANTLR3_COMMON_TOKEN    LTERM168;
    EmersonParser_expressionNoIn_return expressionNoIn166;
    #undef	RETURN_TYPE_expressionNoIn166
    #define	RETURN_TYPE_expressionNoIn166 EmersonParser_expressionNoIn_return

    EmersonParser_variableDeclarationListNoIn_return variableDeclarationListNoIn169;
    #undef	RETURN_TYPE_variableDeclarationListNoIn169
    #define	RETURN_TYPE_variableDeclarationListNoIn169 EmersonParser_variableDeclarationListNoIn_return

    pANTLR3_BASE_TREE string_literal167_tree;
    pANTLR3_BASE_TREE LTERM168_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationListNoIn;
    /* Initialize rule variables
     */
    forStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal167       = NULL;
    LTERM168       = NULL;
    expressionNoIn166.tree = NULL;

    variableDeclarationListNoIn169.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal167_tree   = NULL;
    LTERM168_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_variableDeclarationListNoIn   = NULL;
    #define CREATE_stream_variableDeclarationListNoIn  if (stream_variableDeclarationListNoIn == NULL) {stream_variableDeclarationListNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationListNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:271:2: ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt86;

            alt86=2;


            {
                int LA86_0 = LA(1);
                if ( (((LA86_0 >= Identifier) && (LA86_0 <= NumericLiteral)) || ((LA86_0 >= 125) && (LA86_0 <= 126)) || LA86_0 == 129 || ((LA86_0 >= 157) && (LA86_0 <= 158)) || ((LA86_0 >= 190) && (LA86_0 <= 191)) || ((LA86_0 >= 195) && (LA86_0 <= 205))) ) 
                {
                    alt86=1;
                }
                else if ( (LA86_0 == 131) ) 
                {
                    alt86=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 86;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt86) 
            {
        	case 1:
        	    // .//Emerson.g:271:4: expressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart1938);
        	        expressionNoIn166=expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionNoIn166.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:272:4: 'var' ( LTERM )* variableDeclarationListNoIn
        	    {
        	        string_literal167 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_forStatementInitialiserPart1943); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, string_literal167, NULL); }


        	        // .//Emerson.g:272:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt85=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA85_0 = LA(1);
        	                if ( (LA85_0 == LTERM) ) 
        	                {
        	                    alt85=1;
        	                }

        	            }
        	            switch (alt85) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM168 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatementInitialiserPart1945); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM168, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop85;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop85: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1948);
        	        variableDeclarationListNoIn169=variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationListNoIn; stream_variableDeclarationListNoIn->add(stream_variableDeclarationListNoIn, variableDeclarationListNoIn169.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationListNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 272:45: -> ^( VARLIST variableDeclarationListNoIn )
        	        	{
        	        	    // .//Emerson.g:272:48: ^( VARLIST variableDeclarationListNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationListNoIn == NULL ? NULL : stream_variableDeclarationListNoIn->nextTree(stream_variableDeclarationListNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_variableDeclarationListNoIn != NULL) stream_variableDeclarationListNoIn->free(stream_variableDeclarationListNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, forStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//Emerson.g:275:1: forInStatement : 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static EmersonParser_forInStatement_return
forInStatement(pEmersonParser ctx)
{   
    EmersonParser_forInStatement_return retval;
    ANTLR3_UINT32 forInStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal170;
    pANTLR3_COMMON_TOKEN    LTERM171;
    pANTLR3_COMMON_TOKEN    char_literal172;
    pANTLR3_COMMON_TOKEN    LTERM173;
    pANTLR3_COMMON_TOKEN    LTERM175;
    pANTLR3_COMMON_TOKEN    string_literal176;
    pANTLR3_COMMON_TOKEN    LTERM177;
    pANTLR3_COMMON_TOKEN    LTERM179;
    pANTLR3_COMMON_TOKEN    char_literal180;
    pANTLR3_COMMON_TOKEN    LTERM181;
    EmersonParser_forInStatementInitialiserPart_return forInStatementInitialiserPart174;
    #undef	RETURN_TYPE_forInStatementInitialiserPart174
    #define	RETURN_TYPE_forInStatementInitialiserPart174 EmersonParser_forInStatementInitialiserPart_return

    EmersonParser_expression_return expression178;
    #undef	RETURN_TYPE_expression178
    #define	RETURN_TYPE_expression178 EmersonParser_expression_return

    EmersonParser_statement_return statement182;
    #undef	RETURN_TYPE_statement182
    #define	RETURN_TYPE_statement182 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal170_tree;
    pANTLR3_BASE_TREE LTERM171_tree;
    pANTLR3_BASE_TREE char_literal172_tree;
    pANTLR3_BASE_TREE LTERM173_tree;
    pANTLR3_BASE_TREE LTERM175_tree;
    pANTLR3_BASE_TREE string_literal176_tree;
    pANTLR3_BASE_TREE LTERM177_tree;
    pANTLR3_BASE_TREE LTERM179_tree;
    pANTLR3_BASE_TREE char_literal180_tree;
    pANTLR3_BASE_TREE LTERM181_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forInStatementInitialiserPart;
    /* Initialize rule variables
     */
    forInStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal170       = NULL;
    LTERM171       = NULL;
    char_literal172       = NULL;
    LTERM173       = NULL;
    LTERM175       = NULL;
    string_literal176       = NULL;
    LTERM177       = NULL;
    LTERM179       = NULL;
    char_literal180       = NULL;
    LTERM181       = NULL;
    forInStatementInitialiserPart174.tree = NULL;

    expression178.tree = NULL;

    statement182.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal170_tree   = NULL;
    LTERM171_tree   = NULL;
    char_literal172_tree   = NULL;
    LTERM173_tree   = NULL;
    LTERM175_tree   = NULL;
    string_literal176_tree   = NULL;
    LTERM177_tree   = NULL;
    LTERM179_tree   = NULL;
    char_literal180_tree   = NULL;
    LTERM181_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forInStatementInitialiserPart   = NULL;
    #define CREATE_stream_forInStatementInitialiserPart  if (stream_forInStatementInitialiserPart == NULL) {stream_forInStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forInStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:276:2: ( 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//Emerson.g:276:4: 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal170 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forInStatement1968); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal170, NULL); }


            // .//Emerson.g:276:10: ( LTERM )*

            for (;;)
            {
                int alt87=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA87_0 = LA(1);
                    if ( (LA87_0 == LTERM) ) 
                    {
                        alt87=1;
                    }

                }
                switch (alt87) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM171 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1970); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM171, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop87;	/* break out of the loop */
            	    break;
                }
            }
            loop87: ; /* Jump out to here if this rule does not match */

            char_literal172 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_forInStatement1973); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal172, NULL); }


            // .//Emerson.g:276:21: ( LTERM )*

            for (;;)
            {
                int alt88=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA88_0 = LA(1);
                    if ( (LA88_0 == LTERM) ) 
                    {
                        alt88=1;
                    }

                }
                switch (alt88) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM173 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1975); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM173, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop88;	/* break out of the loop */
            	    break;
                }
            }
            loop88: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement1978);
            forInStatementInitialiserPart174=forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_forInStatementInitialiserPart; stream_forInStatementInitialiserPart->add(stream_forInStatementInitialiserPart, forInStatementInitialiserPart174.tree, NULL); }

            // .//Emerson.g:276:58: ( LTERM )*

            for (;;)
            {
                int alt89=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA89_0 = LA(1);
                    if ( (LA89_0 == LTERM) ) 
                    {
                        alt89=1;
                    }

                }
                switch (alt89) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM175 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1980); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM175, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop89;	/* break out of the loop */
            	    break;
                }
            }
            loop89: ; /* Jump out to here if this rule does not match */

            string_literal176 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_forInStatement1983); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal176, NULL); }


            // .//Emerson.g:276:70: ( LTERM )*

            for (;;)
            {
                int alt90=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA90_0 = LA(1);
                    if ( (LA90_0 == LTERM) ) 
                    {
                        alt90=1;
                    }

                }
                switch (alt90) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM177 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1985); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM177, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop90;	/* break out of the loop */
            	    break;
                }
            }
            loop90: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_forInStatement1988);
            expression178=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression178.tree, NULL); }

            // .//Emerson.g:276:88: ( LTERM )*

            for (;;)
            {
                int alt91=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA91_0 = LA(1);
                    if ( (LA91_0 == LTERM) ) 
                    {
                        alt91=1;
                    }

                }
                switch (alt91) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM179 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1990); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM179, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop91;	/* break out of the loop */
            	    break;
                }
            }
            loop91: ; /* Jump out to here if this rule does not match */

            char_literal180 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_forInStatement1993); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal180, NULL); }


            // .//Emerson.g:276:99: ( LTERM )*

            for (;;)
            {
                int alt92=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA92_0 = LA(1);
                    if ( (LA92_0 == LTERM) ) 
                    {
                        alt92=1;
                    }

                }
                switch (alt92) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM181 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1995); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM181, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop92;	/* break out of the loop */
            	    break;
                }
            }
            loop92: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forInStatement1998);
            statement182=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement182.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, forInStatementInitialiserPart, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 276:116: -> ^( FORIN forInStatementInitialiserPart expression statement )
            	{
            	    // .//Emerson.g:276:119: ^( FORIN forInStatementInitialiserPart expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORIN, (pANTLR3_UINT8)"FORIN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_forInStatementInitialiserPart == NULL ? NULL : stream_forInStatementInitialiserPart->nextTree(stream_forInStatementInitialiserPart));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forInStatementInitialiserPart != NULL) stream_forInStatementInitialiserPart->free(stream_forInStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, forInStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//Emerson.g:279:1: forInStatementInitialiserPart : ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) );
 */
static EmersonParser_forInStatementInitialiserPart_return
forInStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forInStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forInStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal184;
    pANTLR3_COMMON_TOKEN    LTERM185;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression183;
    #undef	RETURN_TYPE_leftHandSideExpression183
    #define	RETURN_TYPE_leftHandSideExpression183 EmersonParser_leftHandSideExpression_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn186;
    #undef	RETURN_TYPE_variableDeclarationNoIn186
    #define	RETURN_TYPE_variableDeclarationNoIn186 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE string_literal184_tree;
    pANTLR3_BASE_TREE LTERM185_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    forInStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal184       = NULL;
    LTERM185       = NULL;
    leftHandSideExpression183.tree = NULL;

    variableDeclarationNoIn186.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal184_tree   = NULL;
    LTERM185_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:280:2: ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt94;

            alt94=2;


            {
                int LA94_0 = LA(1);
                if ( (((LA94_0 >= Identifier) && (LA94_0 <= NumericLiteral)) || ((LA94_0 >= 125) && (LA94_0 <= 126)) || LA94_0 == 129 || ((LA94_0 >= 157) && (LA94_0 <= 158)) || ((LA94_0 >= 202) && (LA94_0 <= 205))) ) 
                {
                    alt94=1;
                }
                else if ( (LA94_0 == 131) ) 
                {
                    alt94=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 94;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt94) 
            {
        	case 1:
        	    // .//Emerson.g:280:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2022);
        	        leftHandSideExpression183=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression183.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 280:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:281:4: 'var' ( LTERM )* variableDeclarationNoIn
        	    {
        	        string_literal184 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_forInStatementInitialiserPart2031); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, string_literal184, NULL); }


        	        // .//Emerson.g:281:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt93=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA93_0 = LA(1);
        	                if ( (LA93_0 == LTERM) ) 
        	                {
        	                    alt93=1;
        	                }

        	            }
        	            switch (alt93) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM185 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatementInitialiserPart2033); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforInStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM185, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop93;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop93: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2036);
        	        variableDeclarationNoIn186=variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn186.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 281:41: -> ^( VAR variableDeclarationNoIn )
        	        	{
        	        	    // .//Emerson.g:281:44: ^( VAR variableDeclarationNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, forInStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//Emerson.g:284:1: continueStatement : 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) ;
 */
static EmersonParser_continueStatement_return
continueStatement(pEmersonParser ctx)
{   
    EmersonParser_continueStatement_return retval;
    ANTLR3_UINT32 continueStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal187;
    pANTLR3_COMMON_TOKEN    Identifier188;
    pANTLR3_COMMON_TOKEN    LTERM189;
    pANTLR3_COMMON_TOKEN    char_literal190;

    pANTLR3_BASE_TREE string_literal187_tree;
    pANTLR3_BASE_TREE Identifier188_tree;
    pANTLR3_BASE_TREE LTERM189_tree;
    pANTLR3_BASE_TREE char_literal190_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    continueStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal187       = NULL;
    Identifier188       = NULL;
    LTERM189       = NULL;
    char_literal190       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal187_tree   = NULL;
    Identifier188_tree   = NULL;
    LTERM189_tree   = NULL;
    char_literal190_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:285:2: ( 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) )
        // .//Emerson.g:285:4: 'continue' ( Identifier )? ( LTERM | ';' )
        {
            string_literal187 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_continueStatement2055); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, string_literal187, NULL); }


            // .//Emerson.g:285:15: ( Identifier )?
            {
                int alt95=2;
                {
                    int LA95_0 = LA(1);
                    if ( (LA95_0 == Identifier) ) 
                    {
                        alt95=1;
                    }
                }
                switch (alt95) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier188 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2057); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier188, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:285:27: ( LTERM | ';' )
            {
                int alt96=2;

                {
                    int LA96_0 = LA(1);
                    if ( (LA96_0 == LTERM) ) 
                    {
                        alt96=1;
                    }
                    else if ( (LA96_0 == 132) ) 
                    {
                        alt96=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 96;
                        EXCEPTION->state        = 0;


                        goto rulecontinueStatementEx;
                    }
                }
                switch (alt96) 
                {
            	case 1:
            	    // .//Emerson.g:285:28: LTERM
            	    {
            	        LTERM189 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_continueStatement2061); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM189, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:285:36: ';'
            	    {
            	        char_literal190 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_continueStatement2065); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal190, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 285:42: -> ^( CONTINUE ( Identifier )? )
            	{
            	    // .//Emerson.g:285:45: ^( CONTINUE ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE, (pANTLR3_UINT8)"CONTINUE"), root_1));

            	        // .//Emerson.g:285:56: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, continueStatement_StartIndex); }
    return retval;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//Emerson.g:288:1: breakStatement : 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) ;
 */
static EmersonParser_breakStatement_return
breakStatement(pEmersonParser ctx)
{   
    EmersonParser_breakStatement_return retval;
    ANTLR3_UINT32 breakStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal191;
    pANTLR3_COMMON_TOKEN    Identifier192;
    pANTLR3_COMMON_TOKEN    LTERM193;
    pANTLR3_COMMON_TOKEN    char_literal194;

    pANTLR3_BASE_TREE string_literal191_tree;
    pANTLR3_BASE_TREE Identifier192_tree;
    pANTLR3_BASE_TREE LTERM193_tree;
    pANTLR3_BASE_TREE char_literal194_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    breakStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal191       = NULL;
    Identifier192       = NULL;
    LTERM193       = NULL;
    char_literal194       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal191_tree   = NULL;
    Identifier192_tree   = NULL;
    LTERM193_tree   = NULL;
    char_literal194_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:289:2: ( 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) )
        // .//Emerson.g:289:4: 'break' ( Identifier )? ( LTERM | ';' )
        {
            string_literal191 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_breakStatement2087); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, string_literal191, NULL); }


            // .//Emerson.g:289:12: ( Identifier )?
            {
                int alt97=2;
                {
                    int LA97_0 = LA(1);
                    if ( (LA97_0 == Identifier) ) 
                    {
                        alt97=1;
                    }
                }
                switch (alt97) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier192 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2089); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier192, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:289:24: ( LTERM | ';' )
            {
                int alt98=2;

                {
                    int LA98_0 = LA(1);
                    if ( (LA98_0 == LTERM) ) 
                    {
                        alt98=1;
                    }
                    else if ( (LA98_0 == 132) ) 
                    {
                        alt98=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 98;
                        EXCEPTION->state        = 0;


                        goto rulebreakStatementEx;
                    }
                }
                switch (alt98) 
                {
            	case 1:
            	    // .//Emerson.g:289:25: LTERM
            	    {
            	        LTERM193 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_breakStatement2093); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM193, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:289:33: ';'
            	    {
            	        char_literal194 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_breakStatement2097); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal194, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 289:38: -> ^( BREAK ( Identifier )? )
            	{
            	    // .//Emerson.g:289:41: ^( BREAK ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK, (pANTLR3_UINT8)"BREAK"), root_1));

            	        // .//Emerson.g:289:49: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, breakStatement_StartIndex); }
    return retval;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//Emerson.g:292:1: returnStatement : 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) ;
 */
static EmersonParser_returnStatement_return
returnStatement(pEmersonParser ctx)
{   
    EmersonParser_returnStatement_return retval;
    ANTLR3_UINT32 returnStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal195;
    pANTLR3_COMMON_TOKEN    LTERM197;
    pANTLR3_COMMON_TOKEN    char_literal198;
    EmersonParser_expression_return expression196;
    #undef	RETURN_TYPE_expression196
    #define	RETURN_TYPE_expression196 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal195_tree;
    pANTLR3_BASE_TREE LTERM197_tree;
    pANTLR3_BASE_TREE char_literal198_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    returnStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal195       = NULL;
    LTERM197       = NULL;
    char_literal198       = NULL;
    expression196.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal195_tree   = NULL;
    LTERM197_tree   = NULL;
    char_literal198_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:293:2: ( 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) )
        // .//Emerson.g:293:4: 'return' ( expression )? ( LTERM | ';' )
        {
            string_literal195 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_returnStatement2118); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, string_literal195, NULL); }


            // .//Emerson.g:293:13: ( expression )?
            {
                int alt99=2;
                {
                    int LA99_0 = LA(1);
                    if ( (((LA99_0 >= Identifier) && (LA99_0 <= NumericLiteral)) || ((LA99_0 >= 125) && (LA99_0 <= 126)) || LA99_0 == 129 || ((LA99_0 >= 157) && (LA99_0 <= 158)) || ((LA99_0 >= 190) && (LA99_0 <= 191)) || ((LA99_0 >= 195) && (LA99_0 <= 205))) ) 
                    {
                        alt99=1;
                    }
                }
                switch (alt99) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2120);
            	        expression196=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression196.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:293:25: ( LTERM | ';' )
            {
                int alt100=2;

                {
                    int LA100_0 = LA(1);
                    if ( (LA100_0 == LTERM) ) 
                    {
                        alt100=1;
                    }
                    else if ( (LA100_0 == 132) ) 
                    {
                        alt100=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 100;
                        EXCEPTION->state        = 0;


                        goto rulereturnStatementEx;
                    }
                }
                switch (alt100) 
                {
            	case 1:
            	    // .//Emerson.g:293:26: LTERM
            	    {
            	        LTERM197 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_returnStatement2124); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM197, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:293:34: ';'
            	    {
            	        char_literal198 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_returnStatement2128); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal198, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 293:39: -> ^( RETURN ( expression )? )
            	{
            	    // .//Emerson.g:293:42: ^( RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        // .//Emerson.g:293:51: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, returnStatement_StartIndex); }
    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//Emerson.g:296:1: withStatement : 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) ;
 */
static EmersonParser_withStatement_return
withStatement(pEmersonParser ctx)
{   
    EmersonParser_withStatement_return retval;
    ANTLR3_UINT32 withStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal199;
    pANTLR3_COMMON_TOKEN    LTERM200;
    pANTLR3_COMMON_TOKEN    char_literal201;
    pANTLR3_COMMON_TOKEN    LTERM202;
    pANTLR3_COMMON_TOKEN    LTERM204;
    pANTLR3_COMMON_TOKEN    char_literal205;
    pANTLR3_COMMON_TOKEN    LTERM206;
    EmersonParser_expression_return expression203;
    #undef	RETURN_TYPE_expression203
    #define	RETURN_TYPE_expression203 EmersonParser_expression_return

    EmersonParser_statement_return statement207;
    #undef	RETURN_TYPE_statement207
    #define	RETURN_TYPE_statement207 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal199_tree;
    pANTLR3_BASE_TREE LTERM200_tree;
    pANTLR3_BASE_TREE char_literal201_tree;
    pANTLR3_BASE_TREE LTERM202_tree;
    pANTLR3_BASE_TREE LTERM204_tree;
    pANTLR3_BASE_TREE char_literal205_tree;
    pANTLR3_BASE_TREE LTERM206_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    withStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal199       = NULL;
    LTERM200       = NULL;
    char_literal201       = NULL;
    LTERM202       = NULL;
    LTERM204       = NULL;
    char_literal205       = NULL;
    LTERM206       = NULL;
    expression203.tree = NULL;

    statement207.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal199_tree   = NULL;
    LTERM200_tree   = NULL;
    char_literal201_tree   = NULL;
    LTERM202_tree   = NULL;
    LTERM204_tree   = NULL;
    char_literal205_tree   = NULL;
    LTERM206_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:297:2: ( 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) )
        // .//Emerson.g:297:4: 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal199 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_withStatement2150); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, string_literal199, NULL); }


            // .//Emerson.g:297:11: ( LTERM )*

            for (;;)
            {
                int alt101=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA101_0 = LA(1);
                    if ( (LA101_0 == LTERM) ) 
                    {
                        alt101=1;
                    }

                }
                switch (alt101) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM200 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2152); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM200, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop101;	/* break out of the loop */
            	    break;
                }
            }
            loop101: ; /* Jump out to here if this rule does not match */

            char_literal201 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_withStatement2155); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal201, NULL); }


            // .//Emerson.g:297:22: ( LTERM )*

            for (;;)
            {
                int alt102=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA102_0 = LA(1);
                    if ( (LA102_0 == LTERM) ) 
                    {
                        alt102=1;
                    }

                }
                switch (alt102) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM202 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2157); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM202, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop102;	/* break out of the loop */
            	    break;
                }
            }
            loop102: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_withStatement2160);
            expression203=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression203.tree, NULL); }

            // .//Emerson.g:297:40: ( LTERM )*

            for (;;)
            {
                int alt103=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA103_0 = LA(1);
                    if ( (LA103_0 == LTERM) ) 
                    {
                        alt103=1;
                    }

                }
                switch (alt103) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM204 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2162); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM204, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop103;	/* break out of the loop */
            	    break;
                }
            }
            loop103: ; /* Jump out to here if this rule does not match */

            char_literal205 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_withStatement2165); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal205, NULL); }


            // .//Emerson.g:297:51: ( LTERM )*

            for (;;)
            {
                int alt104=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA104_0 = LA(1);
                    if ( (LA104_0 == LTERM) ) 
                    {
                        alt104=1;
                    }

                }
                switch (alt104) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM206 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2167); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM206, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop104;	/* break out of the loop */
            	    break;
                }
            }
            loop104: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_withStatement2170);
            statement207=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement207.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 297:68: -> ^( WITH expression statement )
            	{
            	    // .//Emerson.g:297:71: ^( WITH expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WITH, (pANTLR3_UINT8)"WITH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, withStatement_StartIndex); }
    return retval;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start labelledStatement
 * .//Emerson.g:300:1: labelledStatement : Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) ;
 */
static EmersonParser_labelledStatement_return
labelledStatement(pEmersonParser ctx)
{   
    EmersonParser_labelledStatement_return retval;
    ANTLR3_UINT32 labelledStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier208;
    pANTLR3_COMMON_TOKEN    LTERM209;
    pANTLR3_COMMON_TOKEN    char_literal210;
    pANTLR3_COMMON_TOKEN    LTERM211;
    EmersonParser_statement_return statement212;
    #undef	RETURN_TYPE_statement212
    #define	RETURN_TYPE_statement212 EmersonParser_statement_return

    pANTLR3_BASE_TREE Identifier208_tree;
    pANTLR3_BASE_TREE LTERM209_tree;
    pANTLR3_BASE_TREE char_literal210_tree;
    pANTLR3_BASE_TREE LTERM211_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    labelledStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier208       = NULL;
    LTERM209       = NULL;
    char_literal210       = NULL;
    LTERM211       = NULL;
    statement212.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier208_tree   = NULL;
    LTERM209_tree   = NULL;
    char_literal210_tree   = NULL;
    LTERM211_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:301:2: ( Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) )
        // .//Emerson.g:301:4: Identifier ( LTERM )* ':' ( LTERM )* statement
        {
            Identifier208 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_labelledStatement2191); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier208, NULL); }


            // .//Emerson.g:301:15: ( LTERM )*

            for (;;)
            {
                int alt105=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA105_0 = LA(1);
                    if ( (LA105_0 == LTERM) ) 
                    {
                        alt105=1;
                    }

                }
                switch (alt105) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM209 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2193); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM209, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop105;	/* break out of the loop */
            	    break;
                }
            }
            loop105: ; /* Jump out to here if this rule does not match */

            char_literal210 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_labelledStatement2196); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal210, NULL); }


            // .//Emerson.g:301:26: ( LTERM )*

            for (;;)
            {
                int alt106=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA106_0 = LA(1);
                    if ( (LA106_0 == LTERM) ) 
                    {
                        alt106=1;
                    }

                }
                switch (alt106) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM211 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2198); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM211, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_labelledStatement2201);
            statement212=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement212.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 301:43: -> ^( LABEL Identifier statement )
            	{
            	    // .//Emerson.g:301:46: ^( LABEL Identifier statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LABEL, (pANTLR3_UINT8)"LABEL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelabelledStatementEx; /* Prevent compiler warnings */
    rulelabelledStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, labelledStatement_StartIndex); }
    return retval;
}
/* $ANTLR end labelledStatement */

/** 
 * $ANTLR start switchStatement
 * .//Emerson.g:304:1: switchStatement : 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) ;
 */
static EmersonParser_switchStatement_return
switchStatement(pEmersonParser ctx)
{   
    EmersonParser_switchStatement_return retval;
    ANTLR3_UINT32 switchStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal213;
    pANTLR3_COMMON_TOKEN    LTERM214;
    pANTLR3_COMMON_TOKEN    char_literal215;
    pANTLR3_COMMON_TOKEN    LTERM216;
    pANTLR3_COMMON_TOKEN    LTERM218;
    pANTLR3_COMMON_TOKEN    char_literal219;
    pANTLR3_COMMON_TOKEN    LTERM220;
    EmersonParser_expression_return expression217;
    #undef	RETURN_TYPE_expression217
    #define	RETURN_TYPE_expression217 EmersonParser_expression_return

    EmersonParser_caseBlock_return caseBlock221;
    #undef	RETURN_TYPE_caseBlock221
    #define	RETURN_TYPE_caseBlock221 EmersonParser_caseBlock_return

    pANTLR3_BASE_TREE string_literal213_tree;
    pANTLR3_BASE_TREE LTERM214_tree;
    pANTLR3_BASE_TREE char_literal215_tree;
    pANTLR3_BASE_TREE LTERM216_tree;
    pANTLR3_BASE_TREE LTERM218_tree;
    pANTLR3_BASE_TREE char_literal219_tree;
    pANTLR3_BASE_TREE LTERM220_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseBlock;
    /* Initialize rule variables
     */
    switchStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal213       = NULL;
    LTERM214       = NULL;
    char_literal215       = NULL;
    LTERM216       = NULL;
    LTERM218       = NULL;
    char_literal219       = NULL;
    LTERM220       = NULL;
    expression217.tree = NULL;

    caseBlock221.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal213_tree   = NULL;
    LTERM214_tree   = NULL;
    char_literal215_tree   = NULL;
    LTERM216_tree   = NULL;
    LTERM218_tree   = NULL;
    char_literal219_tree   = NULL;
    LTERM220_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_caseBlock   = NULL;
    #define CREATE_stream_caseBlock  if (stream_caseBlock == NULL) {stream_caseBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:305:2: ( 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) )
        // .//Emerson.g:305:4: 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock
        {
            string_literal213 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_switchStatement2224); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal213, NULL); }


            // .//Emerson.g:305:13: ( LTERM )*

            for (;;)
            {
                int alt107=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA107_0 = LA(1);
                    if ( (LA107_0 == LTERM) ) 
                    {
                        alt107=1;
                    }

                }
                switch (alt107) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM214 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2226); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM214, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop107;	/* break out of the loop */
            	    break;
                }
            }
            loop107: ; /* Jump out to here if this rule does not match */

            char_literal215 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_switchStatement2229); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal215, NULL); }


            // .//Emerson.g:305:24: ( LTERM )*

            for (;;)
            {
                int alt108=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA108_0 = LA(1);
                    if ( (LA108_0 == LTERM) ) 
                    {
                        alt108=1;
                    }

                }
                switch (alt108) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM216 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2231); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM216, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop108;	/* break out of the loop */
            	    break;
                }
            }
            loop108: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2234);
            expression217=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression217.tree, NULL); }

            // .//Emerson.g:305:42: ( LTERM )*

            for (;;)
            {
                int alt109=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA109_0 = LA(1);
                    if ( (LA109_0 == LTERM) ) 
                    {
                        alt109=1;
                    }

                }
                switch (alt109) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM218 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2236); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM218, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop109;	/* break out of the loop */
            	    break;
                }
            }
            loop109: ; /* Jump out to here if this rule does not match */

            char_literal219 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_switchStatement2239); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal219, NULL); }


            // .//Emerson.g:305:53: ( LTERM )*

            for (;;)
            {
                int alt110=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA110_0 = LA(1);
                    if ( (LA110_0 == LTERM) ) 
                    {
                        alt110=1;
                    }

                }
                switch (alt110) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM220 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2241); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM220, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop110;	/* break out of the loop */
            	    break;
                }
            }
            loop110: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2244);
            caseBlock221=caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_caseBlock; stream_caseBlock->add(stream_caseBlock, caseBlock221.tree, NULL); }

             
            /* AST REWRITE
             * elements          : caseBlock, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 305:70: -> ^( SWITCH expression caseBlock )
            	{
            	    // .//Emerson.g:305:73: ^( SWITCH expression caseBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH, (pANTLR3_UINT8)"SWITCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_caseBlock == NULL ? NULL : stream_caseBlock->nextTree(stream_caseBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_caseBlock != NULL) stream_caseBlock->free(stream_caseBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, switchStatement_StartIndex); }
    return retval;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//Emerson.g:308:1: caseBlock : '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? ;
 */
static EmersonParser_caseBlock_return
caseBlock(pEmersonParser ctx)
{   
    EmersonParser_caseBlock_return retval;
    ANTLR3_UINT32 caseBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal222;
    pANTLR3_COMMON_TOKEN    LTERM223;
    pANTLR3_COMMON_TOKEN    LTERM224;
    pANTLR3_COMMON_TOKEN    LTERM226;
    pANTLR3_COMMON_TOKEN    LTERM227;
    pANTLR3_COMMON_TOKEN    char_literal228;
    EmersonParser_caseClause_return case1;
    #undef	RETURN_TYPE_case1
    #define	RETURN_TYPE_case1 EmersonParser_caseClause_return

    EmersonParser_caseClause_return case2;
    #undef	RETURN_TYPE_case2
    #define	RETURN_TYPE_case2 EmersonParser_caseClause_return

    EmersonParser_defaultClause_return defaultClause225;
    #undef	RETURN_TYPE_defaultClause225
    #define	RETURN_TYPE_defaultClause225 EmersonParser_defaultClause_return

    pANTLR3_BASE_TREE char_literal222_tree;
    pANTLR3_BASE_TREE LTERM223_tree;
    pANTLR3_BASE_TREE LTERM224_tree;
    pANTLR3_BASE_TREE LTERM226_tree;
    pANTLR3_BASE_TREE LTERM227_tree;
    pANTLR3_BASE_TREE char_literal228_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal222       = NULL;
    LTERM223       = NULL;
    LTERM224       = NULL;
    LTERM226       = NULL;
    LTERM227       = NULL;
    char_literal228       = NULL;
    case1.tree = NULL;

    case2.tree = NULL;

    defaultClause225.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal222_tree   = NULL;
    LTERM223_tree   = NULL;
    LTERM224_tree   = NULL;
    LTERM226_tree   = NULL;
    LTERM227_tree   = NULL;
    char_literal228_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:309:2: ( '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? )
        // .//Emerson.g:309:4: '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}'
        {
            char_literal222 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_caseBlock2266); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal222, NULL); }


            // .//Emerson.g:309:8: ( ( LTERM )* case1= caseClause )*

            for (;;)
            {
                int alt112=2;
                alt112 = cdfa112.predict(ctx, RECOGNIZER, ISTREAM, &cdfa112);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt112) 
                {
            	case 1:
            	    // .//Emerson.g:309:9: ( LTERM )* case1= caseClause
            	    {

            	        // .//Emerson.g:309:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt111=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA111_0 = LA(1);
            	                if ( (LA111_0 == LTERM) ) 
            	                {
            	                    alt111=1;
            	                }

            	            }
            	            switch (alt111) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM223 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2269); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM223, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop111;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop111: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2274);
            	        case1=caseClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case1.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop112;	/* break out of the loop */
            	    break;
                }
            }
            loop112: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:309:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
            {
                int alt116=2;
                alt116 = cdfa116.predict(ctx, RECOGNIZER, ISTREAM, &cdfa116);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt116) 
                {
            	case 1:
            	    // .//Emerson.g:309:36: ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )*
            	    {

            	        // .//Emerson.g:309:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt113=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA113_0 = LA(1);
            	                if ( (LA113_0 == LTERM) ) 
            	                {
            	                    alt113=1;
            	                }

            	            }
            	            switch (alt113) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM224 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2279); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM224, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop113;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop113: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2282);
            	        defaultClause225=defaultClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, defaultClause225.tree, NULL); }

            	        // .//Emerson.g:309:57: ( ( LTERM )* case2= caseClause )*

            	        for (;;)
            	        {
            	            int alt115=2;
            	            alt115 = cdfa115.predict(ctx, RECOGNIZER, ISTREAM, &cdfa115);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulecaseBlockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt115) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:309:58: ( LTERM )* case2= caseClause
            	        	    {

            	        	        // .//Emerson.g:309:58: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt114=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA114_0 = LA(1);
            	        	                if ( (LA114_0 == LTERM) ) 
            	        	                {
            	        	                    alt114=1;
            	        	                }

            	        	            }
            	        	            switch (alt114) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM226 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2285); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulecaseBlockEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM226, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop114;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop114: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2290);
            	        	        case2=caseClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case2.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop115;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop115: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:309:86: ( LTERM )*

            for (;;)
            {
                int alt117=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA117_0 = LA(1);
                    if ( (LA117_0 == LTERM) ) 
                    {
                        alt117=1;
                    }

                }
                switch (alt117) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM227 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2296); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM227, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop117;	/* break out of the loop */
            	    break;
                }
            }
            loop117: ; /* Jump out to here if this rule does not match */

            char_literal228 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_caseBlock2299); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal228, NULL); }


             
            /* AST REWRITE
             * elements          : case1, defaultClause, case2
             * token labels      : 
             * rule labels       : case2, retval, case1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case1;

            	stream_case2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case2", case2.tree != NULL ? case2.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_case1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case1", case1.tree != NULL ? case1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 309:97: -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )?
            	{
            	    // .//Emerson.g:309:101: ( ^( $case1) )*
            	    {
            	    	while ( (stream_case1 != NULL && stream_case1->hasNext(stream_case1))  )
            	    	{
            	    		// .//Emerson.g:309:101: ^( $case1)
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case1 == NULL ? NULL : stream_case1->nextNode(stream_case1), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_case1 != NULL) stream_case1->reset(stream_case1);

            	    }
            	    // .//Emerson.g:309:112: ( ( ^( defaultClause ) )* )?
            	    {
            	    	if ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    	{
            	    		// .//Emerson.g:309:113: ( ^( defaultClause ) )*
            	    		{
            	    			while ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    			{
            	    				// .//Emerson.g:309:113: ^( defaultClause )
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_defaultClause == NULL ? NULL : stream_defaultClause->nextNode(stream_defaultClause), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    		}

            	    	}
            	    	if ( stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    }
            	    // .//Emerson.g:309:133: ( ( ^( $case2) )* )?
            	    {
            	    	if ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    	{
            	    		// .//Emerson.g:309:134: ( ^( $case2) )*
            	    		{
            	    			while ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    			{
            	    				// .//Emerson.g:309:134: ^( $case2)
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case2 == NULL ? NULL : stream_case2->nextNode(stream_case2), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    		}

            	    	}
            	    	if ( stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_case2 != NULL) stream_case2->free(stream_case2);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_case1 != NULL) stream_case1->free(stream_case1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, caseBlock_StartIndex); }
    return retval;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//Emerson.g:312:1: caseClause : 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) ;
 */
static EmersonParser_caseClause_return
caseClause(pEmersonParser ctx)
{   
    EmersonParser_caseClause_return retval;
    ANTLR3_UINT32 caseClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal229;
    pANTLR3_COMMON_TOKEN    LTERM230;
    pANTLR3_COMMON_TOKEN    LTERM232;
    pANTLR3_COMMON_TOKEN    char_literal233;
    pANTLR3_COMMON_TOKEN    LTERM234;
    EmersonParser_expression_return expression231;
    #undef	RETURN_TYPE_expression231
    #define	RETURN_TYPE_expression231 EmersonParser_expression_return

    EmersonParser_statementList_return statementList235;
    #undef	RETURN_TYPE_statementList235
    #define	RETURN_TYPE_statementList235 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal229_tree;
    pANTLR3_BASE_TREE LTERM230_tree;
    pANTLR3_BASE_TREE LTERM232_tree;
    pANTLR3_BASE_TREE char_literal233_tree;
    pANTLR3_BASE_TREE LTERM234_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    caseClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal229       = NULL;
    LTERM230       = NULL;
    LTERM232       = NULL;
    char_literal233       = NULL;
    LTERM234       = NULL;
    expression231.tree = NULL;

    statementList235.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal229_tree   = NULL;
    LTERM230_tree   = NULL;
    LTERM232_tree   = NULL;
    char_literal233_tree   = NULL;
    LTERM234_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:313:2: ( 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) )
        // .//Emerson.g:313:4: 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal229 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_caseClause2336); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal229, NULL); }


            // .//Emerson.g:313:11: ( LTERM )*

            for (;;)
            {
                int alt118=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA118_0 = LA(1);
                    if ( (LA118_0 == LTERM) ) 
                    {
                        alt118=1;
                    }

                }
                switch (alt118) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM230 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2338); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM230, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop118;	/* break out of the loop */
            	    break;
                }
            }
            loop118: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_caseClause2341);
            expression231=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression231.tree, NULL); }

            // .//Emerson.g:313:29: ( LTERM )*

            for (;;)
            {
                int alt119=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA119_0 = LA(1);
                    if ( (LA119_0 == LTERM) ) 
                    {
                        alt119=1;
                    }

                }
                switch (alt119) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM232 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2343); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM232, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop119;	/* break out of the loop */
            	    break;
                }
            }
            loop119: ; /* Jump out to here if this rule does not match */

            char_literal233 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_caseClause2346); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal233, NULL); }


            // .//Emerson.g:313:40: ( LTERM )*

            for (;;)
            {
                int alt120=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA120_0 = LA(1);
                    if ( (LA120_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA120_2 = LA(2);
                            if ( (synpred137_Emerson(ctx)) ) 
                            {
                                alt120=1;
                            }

                        }
                    }

                }
                switch (alt120) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM234 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2348); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM234, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop120;	/* break out of the loop */
            	    break;
                }
            }
            loop120: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:313:47: ( statementList )?
            {
                int alt121=2;
                {
                    int LA121_0 = LA(1);
                    if ( (((LA121_0 >= Identifier) && (LA121_0 <= NumericLiteral)) || ((LA121_0 >= 125) && (LA121_0 <= 126)) || LA121_0 == 129 || ((LA121_0 >= 131) && (LA121_0 <= 132)) || LA121_0 == 134 || LA121_0 == 137 || ((LA121_0 >= 139) && (LA121_0 <= 141)) || ((LA121_0 >= 143) && (LA121_0 <= 146)) || LA121_0 == 148 || ((LA121_0 >= 151) && (LA121_0 <= 152)) || ((LA121_0 >= 157) && (LA121_0 <= 158)) || ((LA121_0 >= 190) && (LA121_0 <= 191)) || ((LA121_0 >= 195) && (LA121_0 <= 205))) ) 
                    {
                        alt121=1;
                    }
                }
                switch (alt121) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2351);
            	        statementList235=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList235.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 313:62: -> ^( CASE expression ( statementList )? )
            	{
            	    // .//Emerson.g:313:65: ^( CASE expression ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        // .//Emerson.g:313:84: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, caseClause_StartIndex); }
    return retval;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//Emerson.g:316:1: defaultClause : 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) ;
 */
static EmersonParser_defaultClause_return
defaultClause(pEmersonParser ctx)
{   
    EmersonParser_defaultClause_return retval;
    ANTLR3_UINT32 defaultClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal236;
    pANTLR3_COMMON_TOKEN    LTERM237;
    pANTLR3_COMMON_TOKEN    char_literal238;
    pANTLR3_COMMON_TOKEN    LTERM239;
    EmersonParser_statementList_return statementList240;
    #undef	RETURN_TYPE_statementList240
    #define	RETURN_TYPE_statementList240 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal236_tree;
    pANTLR3_BASE_TREE LTERM237_tree;
    pANTLR3_BASE_TREE char_literal238_tree;
    pANTLR3_BASE_TREE LTERM239_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    defaultClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal236       = NULL;
    LTERM237       = NULL;
    char_literal238       = NULL;
    LTERM239       = NULL;
    statementList240.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal236_tree   = NULL;
    LTERM237_tree   = NULL;
    char_literal238_tree   = NULL;
    LTERM239_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:317:2: ( 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) )
        // .//Emerson.g:317:4: 'default' ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal236 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_defaultClause2376); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal236, NULL); }


            // .//Emerson.g:317:14: ( LTERM )*

            for (;;)
            {
                int alt122=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA122_0 = LA(1);
                    if ( (LA122_0 == LTERM) ) 
                    {
                        alt122=1;
                    }

                }
                switch (alt122) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM237 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2378); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM237, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop122;	/* break out of the loop */
            	    break;
                }
            }
            loop122: ; /* Jump out to here if this rule does not match */

            char_literal238 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_defaultClause2381); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal238, NULL); }


            // .//Emerson.g:317:25: ( LTERM )*

            for (;;)
            {
                int alt123=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA123_0 = LA(1);
                    if ( (LA123_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA123_2 = LA(2);
                            if ( (synpred140_Emerson(ctx)) ) 
                            {
                                alt123=1;
                            }

                        }
                    }

                }
                switch (alt123) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM239 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2383); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM239, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop123;	/* break out of the loop */
            	    break;
                }
            }
            loop123: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:317:32: ( statementList )?
            {
                int alt124=2;
                {
                    int LA124_0 = LA(1);
                    if ( (((LA124_0 >= Identifier) && (LA124_0 <= NumericLiteral)) || ((LA124_0 >= 125) && (LA124_0 <= 126)) || LA124_0 == 129 || ((LA124_0 >= 131) && (LA124_0 <= 132)) || LA124_0 == 134 || LA124_0 == 137 || ((LA124_0 >= 139) && (LA124_0 <= 141)) || ((LA124_0 >= 143) && (LA124_0 <= 146)) || LA124_0 == 148 || ((LA124_0 >= 151) && (LA124_0 <= 152)) || ((LA124_0 >= 157) && (LA124_0 <= 158)) || ((LA124_0 >= 190) && (LA124_0 <= 191)) || ((LA124_0 >= 195) && (LA124_0 <= 205))) ) 
                    {
                        alt124=1;
                    }
                }
                switch (alt124) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause2386);
            	        statementList240=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList240.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 317:47: -> ^( DEFAULT ( statementList )? )
            	{
            	    // .//Emerson.g:317:50: ^( DEFAULT ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"), root_1));

            	        // .//Emerson.g:317:60: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, defaultClause_StartIndex); }
    return retval;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start throwStatement
 * .//Emerson.g:320:1: throwStatement : 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) ;
 */
static EmersonParser_throwStatement_return
throwStatement(pEmersonParser ctx)
{   
    EmersonParser_throwStatement_return retval;
    ANTLR3_UINT32 throwStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal241;
    pANTLR3_COMMON_TOKEN    LTERM243;
    pANTLR3_COMMON_TOKEN    char_literal244;
    EmersonParser_expression_return expression242;
    #undef	RETURN_TYPE_expression242
    #define	RETURN_TYPE_expression242 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal241_tree;
    pANTLR3_BASE_TREE LTERM243_tree;
    pANTLR3_BASE_TREE char_literal244_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    throwStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal241       = NULL;
    LTERM243       = NULL;
    char_literal244       = NULL;
    expression242.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal241_tree   = NULL;
    LTERM243_tree   = NULL;
    char_literal244_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:321:2: ( 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) )
        // .//Emerson.g:321:4: 'throw' expression ( LTERM | ';' )
        {
            string_literal241 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_throwStatement2408); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal241, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_throwStatement2410);
            expression242=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression242.tree, NULL); }

            // .//Emerson.g:321:23: ( LTERM | ';' )
            {
                int alt125=2;

                {
                    int LA125_0 = LA(1);
                    if ( (LA125_0 == LTERM) ) 
                    {
                        alt125=1;
                    }
                    else if ( (LA125_0 == 132) ) 
                    {
                        alt125=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 125;
                        EXCEPTION->state        = 0;


                        goto rulethrowStatementEx;
                    }
                }
                switch (alt125) 
                {
            	case 1:
            	    // .//Emerson.g:321:24: LTERM
            	    {
            	        LTERM243 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_throwStatement2413); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM243, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:321:32: ';'
            	    {
            	        char_literal244 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_throwStatement2417); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal244, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 321:37: -> ^( THROW expression )
            	{
            	    // .//Emerson.g:321:40: ^( THROW expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THROW, (pANTLR3_UINT8)"THROW"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, throwStatement_StartIndex); }
    return retval;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//Emerson.g:324:1: tryStatement : ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) ;
 */
static EmersonParser_tryStatement_return
tryStatement(pEmersonParser ctx)
{   
    EmersonParser_tryStatement_return retval;
    ANTLR3_UINT32 tryStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal245;
    pANTLR3_COMMON_TOKEN    LTERM246;
    pANTLR3_COMMON_TOKEN    LTERM248;
    pANTLR3_COMMON_TOKEN    LTERM251;
    EmersonParser_statementBlock_return statementBlock247;
    #undef	RETURN_TYPE_statementBlock247
    #define	RETURN_TYPE_statementBlock247 EmersonParser_statementBlock_return

    EmersonParser_finallyClause_return finallyClause249;
    #undef	RETURN_TYPE_finallyClause249
    #define	RETURN_TYPE_finallyClause249 EmersonParser_finallyClause_return

    EmersonParser_catchClause_return catchClause250;
    #undef	RETURN_TYPE_catchClause250
    #define	RETURN_TYPE_catchClause250 EmersonParser_catchClause_return

    EmersonParser_finallyClause_return finallyClause252;
    #undef	RETURN_TYPE_finallyClause252
    #define	RETURN_TYPE_finallyClause252 EmersonParser_finallyClause_return

    pANTLR3_BASE_TREE string_literal245_tree;
    pANTLR3_BASE_TREE LTERM246_tree;
    pANTLR3_BASE_TREE LTERM248_tree;
    pANTLR3_BASE_TREE LTERM251_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_finallyClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    tryStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal245       = NULL;
    LTERM246       = NULL;
    LTERM248       = NULL;
    LTERM251       = NULL;
    statementBlock247.tree = NULL;

    finallyClause249.tree = NULL;

    catchClause250.tree = NULL;

    finallyClause252.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal245_tree   = NULL;
    LTERM246_tree   = NULL;
    LTERM248_tree   = NULL;
    LTERM251_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_finallyClause   = NULL;
    #define CREATE_stream_finallyClause  if (stream_finallyClause == NULL) {stream_finallyClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule finallyClause"); }
    stream_catchClause   = NULL;
    #define CREATE_stream_catchClause  if (stream_catchClause == NULL) {stream_catchClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchClause"); }
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:325:2: ( ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) )
        // .//Emerson.g:325:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
        {
            // .//Emerson.g:325:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) )
            // .//Emerson.g:325:5: 'try' ( LTERM )* statementBlock ( LTERM )*
            {
                string_literal245 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_tryStatement2438); 
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, string_literal245, NULL); }


                // .//Emerson.g:325:11: ( LTERM )*

                for (;;)
                {
                    int alt126=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA126_0 = LA(1);
                        if ( (LA126_0 == LTERM) ) 
                        {
                            alt126=1;
                        }

                    }
                    switch (alt126) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM246 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2440); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM246, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop126;	/* break out of the loop */
                	    break;
                    }
                }
                loop126: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement2443);
                statementBlock247=statementBlock(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock247.tree, NULL); }

                // .//Emerson.g:325:33: ( LTERM )*

                for (;;)
                {
                    int alt127=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA127_0 = LA(1);
                        if ( (LA127_0 == LTERM) ) 
                        {
                            alt127=1;
                        }

                    }
                    switch (alt127) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM248 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2445); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM248, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop127;	/* break out of the loop */
                	    break;
                    }
                }
                loop127: ; /* Jump out to here if this rule does not match */


                 
                /* AST REWRITE
                 * elements          : statementBlock
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 325:40: -> ^( TRY statementBlock )
                	{
                	    // .//Emerson.g:325:43: ^( TRY statementBlock )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRY, (pANTLR3_UINT8)"TRY"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:325:65: ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
            {
                int alt130=2;

                {
                    int LA130_0 = LA(1);
                    if ( (LA130_0 == 154) ) 
                    {
                        alt130=1;
                    }
                    else if ( (LA130_0 == 153) ) 
                    {
                        alt130=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 130;
                        EXCEPTION->state        = 0;


                        goto ruletryStatementEx;
                    }
                }
                switch (alt130) 
                {
            	case 1:
            	    // .//Emerson.g:325:66: finallyClause
            	    {
            	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2457);
            	        finallyClause249=finallyClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause249.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : tryStatement, finallyClause
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 325:80: -> ^( $tryStatement finallyClause )
            	        	{
            	        	    // .//Emerson.g:325:83: ^( $tryStatement finallyClause )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:325:115: catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	    {
            	        FOLLOWPUSH(FOLLOW_catchClause_in_tryStatement2469);
            	        catchClause250=catchClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_catchClause; stream_catchClause->add(stream_catchClause, catchClause250.tree, NULL); }

            	        // .//Emerson.g:325:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	        {
            	            int alt129=2;
            	            alt129 = cdfa129.predict(ctx, RECOGNIZER, ISTREAM, &cdfa129);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruletryStatementEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt129) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:325:128: ( LTERM )* finallyClause
            	        	    {

            	        	        // .//Emerson.g:325:128: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt128=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA128_0 = LA(1);
            	        	                if ( (LA128_0 == LTERM) ) 
            	        	                {
            	        	                    alt128=1;
            	        	                }

            	        	            }
            	        	            switch (alt128) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM251 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2472); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruletryStatementEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM251, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop128;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop128: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2475);
            	        	        finallyClause252=finallyClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletryStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause252.tree, NULL); }

            	        	         
            	        	        /* AST REWRITE
            	        	         * elements          : finallyClause, catchClause, tryStatement
            	        	         * token labels      : 
            	        	         * rule labels       : retval
            	        	         * token list labels : 
            	        	         * rule list labels  : 
            	        	         */
            	        	        if ( BACKTRACKING==0 ) 
            	        	        {
            	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	retval.tree    = root_0;
            	        	        	// 325:149: -> ^( $tryStatement catchClause finallyClause )
            	        	        	{
            	        	        	    // .//Emerson.g:325:152: ^( $tryStatement catchClause finallyClause )
            	        	        	    {
            	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_catchClause == NULL ? NULL : stream_catchClause->nextTree(stream_catchClause));
            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.tree = root_0; // set result root
            	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        	        }
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_finallyClause != NULL) stream_finallyClause->free(stream_finallyClause);
        if (stream_catchClause != NULL) stream_catchClause->free(stream_catchClause);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, tryStatement_StartIndex); }
    return retval;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchClause
 * .//Emerson.g:328:1: catchClause : 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) ;
 */
static EmersonParser_catchClause_return
catchClause(pEmersonParser ctx)
{   
    EmersonParser_catchClause_return retval;
    ANTLR3_UINT32 catchClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal253;
    pANTLR3_COMMON_TOKEN    LTERM254;
    pANTLR3_COMMON_TOKEN    char_literal255;
    pANTLR3_COMMON_TOKEN    LTERM256;
    pANTLR3_COMMON_TOKEN    Identifier257;
    pANTLR3_COMMON_TOKEN    LTERM258;
    pANTLR3_COMMON_TOKEN    char_literal259;
    pANTLR3_COMMON_TOKEN    LTERM260;
    EmersonParser_statementBlock_return statementBlock261;
    #undef	RETURN_TYPE_statementBlock261
    #define	RETURN_TYPE_statementBlock261 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal253_tree;
    pANTLR3_BASE_TREE LTERM254_tree;
    pANTLR3_BASE_TREE char_literal255_tree;
    pANTLR3_BASE_TREE LTERM256_tree;
    pANTLR3_BASE_TREE Identifier257_tree;
    pANTLR3_BASE_TREE LTERM258_tree;
    pANTLR3_BASE_TREE char_literal259_tree;
    pANTLR3_BASE_TREE LTERM260_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    catchClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal253       = NULL;
    LTERM254       = NULL;
    char_literal255       = NULL;
    LTERM256       = NULL;
    Identifier257       = NULL;
    LTERM258       = NULL;
    char_literal259       = NULL;
    LTERM260       = NULL;
    statementBlock261.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal253_tree   = NULL;
    LTERM254_tree   = NULL;
    char_literal255_tree   = NULL;
    LTERM256_tree   = NULL;
    Identifier257_tree   = NULL;
    LTERM258_tree   = NULL;
    char_literal259_tree   = NULL;
    LTERM260_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:329:2: ( 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) )
        // .//Emerson.g:329:4: 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock
        {
            string_literal253 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_catchClause2508); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal253, NULL); }


            // .//Emerson.g:329:12: ( LTERM )*

            for (;;)
            {
                int alt131=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA131_0 = LA(1);
                    if ( (LA131_0 == LTERM) ) 
                    {
                        alt131=1;
                    }

                }
                switch (alt131) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM254 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2510); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM254, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop131;	/* break out of the loop */
            	    break;
                }
            }
            loop131: ; /* Jump out to here if this rule does not match */

            char_literal255 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_catchClause2513); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal255, NULL); }


            // .//Emerson.g:329:23: ( LTERM )*

            for (;;)
            {
                int alt132=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA132_0 = LA(1);
                    if ( (LA132_0 == LTERM) ) 
                    {
                        alt132=1;
                    }

                }
                switch (alt132) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM256 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2515); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM256, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop132;	/* break out of the loop */
            	    break;
                }
            }
            loop132: ; /* Jump out to here if this rule does not match */

            Identifier257 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause2518); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier257, NULL); }


            // .//Emerson.g:329:41: ( LTERM )*

            for (;;)
            {
                int alt133=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA133_0 = LA(1);
                    if ( (LA133_0 == LTERM) ) 
                    {
                        alt133=1;
                    }

                }
                switch (alt133) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM258 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2520); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM258, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop133;	/* break out of the loop */
            	    break;
                }
            }
            loop133: ; /* Jump out to here if this rule does not match */

            char_literal259 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_catchClause2523); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal259, NULL); }


            // .//Emerson.g:329:52: ( LTERM )*

            for (;;)
            {
                int alt134=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA134_0 = LA(1);
                    if ( (LA134_0 == LTERM) ) 
                    {
                        alt134=1;
                    }

                }
                switch (alt134) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM260 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2525); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM260, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop134;	/* break out of the loop */
            	    break;
                }
            }
            loop134: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause2528);
            statementBlock261=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock261.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 329:74: -> ^( CATCH Identifier statementBlock )
            	{
            	    // .//Emerson.g:329:77: ^( CATCH Identifier statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CATCH, (pANTLR3_UINT8)"CATCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, catchClause_StartIndex); }
    return retval;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//Emerson.g:332:1: finallyClause : 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) ;
 */
static EmersonParser_finallyClause_return
finallyClause(pEmersonParser ctx)
{   
    EmersonParser_finallyClause_return retval;
    ANTLR3_UINT32 finallyClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal262;
    pANTLR3_COMMON_TOKEN    LTERM263;
    EmersonParser_statementBlock_return statementBlock264;
    #undef	RETURN_TYPE_statementBlock264
    #define	RETURN_TYPE_statementBlock264 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal262_tree;
    pANTLR3_BASE_TREE LTERM263_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    finallyClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal262       = NULL;
    LTERM263       = NULL;
    statementBlock264.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal262_tree   = NULL;
    LTERM263_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:333:2: ( 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) )
        // .//Emerson.g:333:4: 'finally' ( LTERM )* statementBlock
        {
            string_literal262 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_finallyClause2550); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal262, NULL); }


            // .//Emerson.g:333:14: ( LTERM )*

            for (;;)
            {
                int alt135=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA135_0 = LA(1);
                    if ( (LA135_0 == LTERM) ) 
                    {
                        alt135=1;
                    }

                }
                switch (alt135) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM263 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_finallyClause2552); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefinallyClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM263, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop135;	/* break out of the loop */
            	    break;
                }
            }
            loop135: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause2555);
            statementBlock264=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock264.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 333:36: -> ^( FINALLY statementBlock )
            	{
            	    // .//Emerson.g:333:39: ^( FINALLY statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FINALLY, (pANTLR3_UINT8)"FINALLY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_154 != NULL) stream_154->free(stream_154);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, finallyClause_StartIndex); }
    return retval;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start msgSendStatement
 * .//Emerson.g:337:1: msgSendStatement : (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? ;
 */
static EmersonParser_msgSendStatement_return
msgSendStatement(pEmersonParser ctx)
{   
    EmersonParser_msgSendStatement_return retval;
    ANTLR3_UINT32 msgSendStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM265;
    pANTLR3_COMMON_TOKEN    string_literal266;
    pANTLR3_COMMON_TOKEN    LTERM267;
    pANTLR3_COMMON_TOKEN    char_literal268;
    pANTLR3_COMMON_TOKEN    string_literal269;
    EmersonParser_leftHandSideExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memberExpression_return memberExpression270;
    #undef	RETURN_TYPE_memberExpression270
    #define	RETURN_TYPE_memberExpression270 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM265_tree;
    pANTLR3_BASE_TREE string_literal266_tree;
    pANTLR3_BASE_TREE LTERM267_tree;
    pANTLR3_BASE_TREE char_literal268_tree;
    pANTLR3_BASE_TREE string_literal269_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgSendStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM265       = NULL;
    string_literal266       = NULL;
    LTERM267       = NULL;
    char_literal268       = NULL;
    string_literal269       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    memberExpression270.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM265_tree   = NULL;
    string_literal266_tree   = NULL;
    LTERM267_tree   = NULL;
    char_literal268_tree   = NULL;
    string_literal269_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:338:2: ( (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? )
        // .//Emerson.g:338:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
        {
            // .//Emerson.g:338:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) )
            // .//Emerson.g:338:5: e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' )
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2580);
                e1=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e1.tree, NULL); }

                // .//Emerson.g:338:32: ( LTERM )*

                for (;;)
                {
                    int alt136=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA136_0 = LA(1);
                        if ( (LA136_0 == LTERM) ) 
                        {
                            alt136=1;
                        }

                    }
                    switch (alt136) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM265 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2583); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM265, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop136;	/* break out of the loop */
                	    break;
                    }
                }
                loop136: ; /* Jump out to here if this rule does not match */

                string_literal266 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgSendStatement2586); 
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal266, NULL); }

                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2591);
                e2=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

                // .//Emerson.g:338:71: ( LTERM | ';' )
                {
                    int alt137=2;

                    {
                        int LA137_0 = LA(1);
                        if ( (LA137_0 == LTERM) ) 
                        {
                            alt137=1;
                        }
                        else if ( (LA137_0 == 132) ) 
                        {
                            alt137=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 137;
                            EXCEPTION->state        = 0;


                            goto rulemsgSendStatementEx;
                        }
                    }
                    switch (alt137) 
                    {
                	case 1:
                	    // .//Emerson.g:338:72: LTERM
                	    {
                	        LTERM267 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2594); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM267, NULL); }


                	    }
                	    break;
                	case 2:
                	    // .//Emerson.g:338:80: ';'
                	    {
                	        char_literal268 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_msgSendStatement2598); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal268, NULL); }


                	    }
                	    break;

                    }
                }

                 
                /* AST REWRITE
                 * elements          : e1, e2
                 * token labels      : 
                 * rule labels       : retval, e1, e2
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
                	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 338:85: -> ^( MESSAGE_SEND $e1 $e2)
                	{
                	    // .//Emerson.g:338:88: ^( MESSAGE_SEND $e1 $e2)
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_SEND, (pANTLR3_UINT8)"MESSAGE_SEND"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_e1 != NULL) stream_e1->free(stream_e1);
                	if (stream_e2 != NULL) stream_e2->free(stream_e2);


                }
            }


            // .//Emerson.g:338:114: ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
            {
                int alt138=2;
                {
                    int LA138_0 = LA(1);
                    if ( (LA138_0 == 155) ) 
                    {
                        alt138=1;
                    }
                }
                switch (alt138) 
                {
            	case 1:
            	    // .//Emerson.g:338:116: '->' memberExpression
            	    {
            	        string_literal269 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgSendStatement2617); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal269, NULL); }

            	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement2619);
            	        memberExpression270=memberExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression270.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : msgSendStatement, memberExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 338:138: -> ^( $msgSendStatement memberExpression )
            	        	{
            	        	    // .//Emerson.g:338:141: ^( $msgSendStatement memberExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSendStatementEx; /* Prevent compiler warnings */
    rulemsgSendStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, msgSendStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgSendStatement */

/** 
 * $ANTLR start msgRecvStatement
 * .//Emerson.g:345:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static EmersonParser_msgRecvStatement_return
msgRecvStatement(pEmersonParser ctx)
{   
    EmersonParser_msgRecvStatement_return retval;
    ANTLR3_UINT32 msgRecvStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM271;
    pANTLR3_COMMON_TOKEN    string_literal272;
    pANTLR3_COMMON_TOKEN    LTERM273;
    pANTLR3_COMMON_TOKEN    char_literal274;
    pANTLR3_COMMON_TOKEN    LTERM275;
    pANTLR3_COMMON_TOKEN    string_literal276;
    pANTLR3_COMMON_TOKEN    LTERM277;
    pANTLR3_COMMON_TOKEN    string_literal278;
    pANTLR3_COMMON_TOKEN    LTERM279;
    pANTLR3_COMMON_TOKEN    char_literal280;
    EmersonParser_memberExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_memberExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memberExpression_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM271_tree;
    pANTLR3_BASE_TREE string_literal272_tree;
    pANTLR3_BASE_TREE LTERM273_tree;
    pANTLR3_BASE_TREE char_literal274_tree;
    pANTLR3_BASE_TREE LTERM275_tree;
    pANTLR3_BASE_TREE string_literal276_tree;
    pANTLR3_BASE_TREE LTERM277_tree;
    pANTLR3_BASE_TREE string_literal278_tree;
    pANTLR3_BASE_TREE LTERM279_tree;
    pANTLR3_BASE_TREE char_literal280_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgRecvStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM271       = NULL;
    string_literal272       = NULL;
    LTERM273       = NULL;
    char_literal274       = NULL;
    LTERM275       = NULL;
    string_literal276       = NULL;
    LTERM277       = NULL;
    string_literal278       = NULL;
    LTERM279       = NULL;
    char_literal280       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM271_tree   = NULL;
    string_literal272_tree   = NULL;
    LTERM273_tree   = NULL;
    char_literal274_tree   = NULL;
    LTERM275_tree   = NULL;
    string_literal276_tree   = NULL;
    LTERM277_tree   = NULL;
    string_literal278_tree   = NULL;
    LTERM279_tree   = NULL;
    char_literal280_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:346:2: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) )
            
            ANTLR3_UINT32 alt144;

            alt144=2;

            alt144 = cdfa144.predict(ctx, RECOGNIZER, ISTREAM, &cdfa144);
            if  (HASEXCEPTION())
            {
                goto rulemsgRecvStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt144) 
            {
        	case 1:
        	    // .//Emerson.g:346:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2647);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//Emerson.g:346:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt139=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA139_0 = LA(1);
        	                if ( (LA139_0 == LTERM) ) 
        	                {
        	                    alt139=1;
        	                }

        	            }
        	            switch (alt139) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM271 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2649); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM271, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop139;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop139: ; /* Jump out to here if this rule does not match */

        	        string_literal272 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_msgRecvStatement2651); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal272, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2655);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:346:61: ( LTERM | ';' )
        	        {
        	            int alt140=2;

        	            {
        	                int LA140_0 = LA(1);
        	                if ( (LA140_0 == LTERM) ) 
        	                {
        	                    alt140=1;
        	                }
        	                else if ( (LA140_0 == 132) ) 
        	                {
        	                    alt140=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 140;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt140) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:346:62: LTERM
        	        	    {
        	        	        LTERM273 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2658); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM273, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:346:70: ';'
        	        	    {
        	        	        char_literal274 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_msgRecvStatement2662); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal274, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e1, e2
        	         * token labels      : 
        	         * rule labels       : retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 346:76: -> ^( MESSAGE_RECV $e1 $e2)
        	        	{
        	        	    // .//Emerson.g:346:79: ^( MESSAGE_RECV $e1 $e2)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:347:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2683);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//Emerson.g:347:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt141=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA141_0 = LA(1);
        	                if ( (LA141_0 == LTERM) ) 
        	                {
        	                    alt141=1;
        	                }

        	            }
        	            switch (alt141) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM275 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2685); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM275, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop141;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop141: ; /* Jump out to here if this rule does not match */

        	        string_literal276 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_msgRecvStatement2687); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal276, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2691);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:347:61: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt142=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA142_0 = LA(1);
        	                if ( (LA142_0 == LTERM) ) 
        	                {
        	                    alt142=1;
        	                }

        	            }
        	            switch (alt142) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM277 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2693); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM277, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop142;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop142: ; /* Jump out to here if this rule does not match */

        	        string_literal278 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_msgRecvStatement2696); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal278, NULL); }

        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2700);
        	        e3=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e3.tree, NULL); }

        	        // .//Emerson.g:347:93: ( LTERM | ';' )
        	        {
        	            int alt143=2;

        	            {
        	                int LA143_0 = LA(1);
        	                if ( (LA143_0 == LTERM) ) 
        	                {
        	                    alt143=1;
        	                }
        	                else if ( (LA143_0 == 132) ) 
        	                {
        	                    alt143=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 143;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt143) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:347:94: LTERM
        	        	    {
        	        	        LTERM279 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2703); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM279, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:347:102: ';'
        	        	    {
        	        	        char_literal280 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_msgRecvStatement2707); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal280, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e3, e1, e2
        	         * token labels      : 
        	         * rule labels       : e3, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 347:107: -> ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	{
        	        	    // .//Emerson.g:347:110: ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvStatementEx; /* Prevent compiler warnings */
    rulemsgRecvStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, msgRecvStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvStatement */

/** 
 * $ANTLR start expression
 * .//Emerson.g:351:1: expression : assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) ;
 */
static EmersonParser_expression_return
expression(pEmersonParser ctx)
{   
    EmersonParser_expression_return retval;
    ANTLR3_UINT32 expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM282;
    pANTLR3_COMMON_TOKEN    char_literal283;
    pANTLR3_COMMON_TOKEN    LTERM284;
    EmersonParser_assignmentExpression_return assignmentExpression281;
    #undef	RETURN_TYPE_assignmentExpression281
    #define	RETURN_TYPE_assignmentExpression281 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression285;
    #undef	RETURN_TYPE_assignmentExpression285
    #define	RETURN_TYPE_assignmentExpression285 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM282_tree;
    pANTLR3_BASE_TREE char_literal283_tree;
    pANTLR3_BASE_TREE LTERM284_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM282       = NULL;
    char_literal283       = NULL;
    LTERM284       = NULL;
    assignmentExpression281.tree = NULL;

    assignmentExpression285.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM282_tree   = NULL;
    char_literal283_tree   = NULL;
    LTERM284_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:352:2: ( assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) )
        // .//Emerson.g:352:4: assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2734);
            assignmentExpression281=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression281.tree, NULL); }

            // .//Emerson.g:352:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*

            for (;;)
            {
                int alt147=2;
                alt147 = cdfa147.predict(ctx, RECOGNIZER, ISTREAM, &cdfa147);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt147) 
                {
            	case 1:
            	    // .//Emerson.g:352:26: ( LTERM )* ',' ( LTERM )* assignmentExpression
            	    {

            	        // .//Emerson.g:352:26: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt145=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA145_0 = LA(1);
            	                if ( (LA145_0 == LTERM) ) 
            	                {
            	                    alt145=1;
            	                }

            	            }
            	            switch (alt145) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM282 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2737); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM282, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop145;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop145: ; /* Jump out to here if this rule does not match */

            	        char_literal283 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_expression2740); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal283, NULL); }


            	        // .//Emerson.g:352:37: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt146=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA146_0 = LA(1);
            	                if ( (LA146_0 == LTERM) ) 
            	                {
            	                    alt146=1;
            	                }

            	            }
            	            switch (alt146) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM284 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2742); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM284, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop146;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop146: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2745);
            	        assignmentExpression285=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression285.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop147;	/* break out of the loop */
            	    break;
                }
            }
            loop147: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 352:67: -> ^( EXPR_LIST ( assignmentExpression )+ )
            	{
            	    // .//Emerson.g:352:71: ^( EXPR_LIST ( assignmentExpression )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpression == NULL || !stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpression->hasNext(stream_assignmentExpression))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, expression_StartIndex); }
    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//Emerson.g:355:1: expressionNoIn : assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) ;
 */
static EmersonParser_expressionNoIn_return
expressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_expressionNoIn_return retval;
    ANTLR3_UINT32 expressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM287;
    pANTLR3_COMMON_TOKEN    char_literal288;
    pANTLR3_COMMON_TOKEN    LTERM289;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn286;
    #undef	RETURN_TYPE_assignmentExpressionNoIn286
    #define	RETURN_TYPE_assignmentExpressionNoIn286 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn290;
    #undef	RETURN_TYPE_assignmentExpressionNoIn290
    #define	RETURN_TYPE_assignmentExpressionNoIn290 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM287_tree;
    pANTLR3_BASE_TREE char_literal288_tree;
    pANTLR3_BASE_TREE LTERM289_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    expressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM287       = NULL;
    char_literal288       = NULL;
    LTERM289       = NULL;
    assignmentExpressionNoIn286.tree = NULL;

    assignmentExpressionNoIn290.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM287_tree   = NULL;
    char_literal288_tree   = NULL;
    LTERM289_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:356:2: ( assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) )
        // .//Emerson.g:356:4: assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2769);
            assignmentExpressionNoIn286=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn286.tree, NULL); }

            // .//Emerson.g:356:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*

            for (;;)
            {
                int alt150=2;
                alt150 = cdfa150.predict(ctx, RECOGNIZER, ISTREAM, &cdfa150);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt150) 
                {
            	case 1:
            	    // .//Emerson.g:356:30: ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:356:30: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt148=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA148_0 = LA(1);
            	                if ( (LA148_0 == LTERM) ) 
            	                {
            	                    alt148=1;
            	                }

            	            }
            	            switch (alt148) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM287 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2772); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM287, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop148;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop148: ; /* Jump out to here if this rule does not match */

            	        char_literal288 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_expressionNoIn2775); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal288, NULL); }


            	        // .//Emerson.g:356:41: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt149=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA149_0 = LA(1);
            	                if ( (LA149_0 == LTERM) ) 
            	                {
            	                    alt149=1;
            	                }

            	            }
            	            switch (alt149) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM289 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2777); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM289, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop149;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop149: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2780);
            	        assignmentExpressionNoIn290=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn290.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop150;	/* break out of the loop */
            	    break;
                }
            }
            loop150: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 356:75: -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	{
            	    // .//Emerson.g:356:78: ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpressionNoIn == NULL || !stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	        	}
            	        	stream_assignmentExpressionNoIn->reset(stream_assignmentExpressionNoIn);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, expressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//Emerson.g:360:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static EmersonParser_assignmentExpression_return
assignmentExpression(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpression_return retval;
    ANTLR3_UINT32 assignmentExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM293;
    pANTLR3_COMMON_TOKEN    LTERM295;
    EmersonParser_conditionalExpression_return conditionalExpression291;
    #undef	RETURN_TYPE_conditionalExpression291
    #define	RETURN_TYPE_conditionalExpression291 EmersonParser_conditionalExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression292;
    #undef	RETURN_TYPE_leftHandSideExpression292
    #define	RETURN_TYPE_leftHandSideExpression292 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator294;
    #undef	RETURN_TYPE_assignmentOperator294
    #define	RETURN_TYPE_assignmentOperator294 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpression_return assignmentExpression296;
    #undef	RETURN_TYPE_assignmentExpression296
    #define	RETURN_TYPE_assignmentExpression296 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM293_tree;
    pANTLR3_BASE_TREE LTERM295_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpression;
    /* Initialize rule variables
     */
    assignmentExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM293       = NULL;
    LTERM295       = NULL;
    conditionalExpression291.tree = NULL;

    leftHandSideExpression292.tree = NULL;

    assignmentOperator294.tree = NULL;

    assignmentExpression296.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM293_tree   = NULL;
    LTERM295_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_conditionalExpression   = NULL;
    #define CREATE_stream_conditionalExpression  if (stream_conditionalExpression == NULL) {stream_conditionalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:361:2: ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt153;

            alt153=2;

            alt153 = cdfa153.predict(ctx, RECOGNIZER, ISTREAM, &cdfa153);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt153) 
            {
        	case 1:
        	    // .//Emerson.g:361:4: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression2804);
        	        conditionalExpression291=conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpression; stream_conditionalExpression->add(stream_conditionalExpression, conditionalExpression291.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 361:26: -> ^( COND_EXPR conditionalExpression )
        	        	{
        	        	    // .//Emerson.g:361:29: ^( COND_EXPR conditionalExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR, (pANTLR3_UINT8)"COND_EXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpression == NULL ? NULL : stream_conditionalExpression->nextTree(stream_conditionalExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:362:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression2817);
        	        leftHandSideExpression292=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression292.tree, NULL); }

        	        // .//Emerson.g:362:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt151=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA151_0 = LA(1);
        	                if ( (LA151_0 == LTERM) ) 
        	                {
        	                    alt151=1;
        	                }

        	            }
        	            switch (alt151) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM293 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2819); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM293, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop151;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop151: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpression2822);
        	        assignmentOperator294=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator294.tree, NULL); }

        	        // .//Emerson.g:362:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt152=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA152_0 = LA(1);
        	                if ( (LA152_0 == LTERM) ) 
        	                {
        	                    alt152=1;
        	                }

        	            }
        	            switch (alt152) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM295 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2824); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM295, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop152;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop152: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression2827);
        	        assignmentExpression296=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression296.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, leftHandSideExpression, assignmentOperator
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 362:81: -> ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	{
        	        	    // .//Emerson.g:362:85: ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_conditionalExpression != NULL) stream_conditionalExpression->free(stream_conditionalExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, assignmentExpression_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//Emerson.g:365:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static EmersonParser_assignmentExpressionNoIn_return
assignmentExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpressionNoIn_return retval;
    ANTLR3_UINT32 assignmentExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM299;
    pANTLR3_COMMON_TOKEN    LTERM301;
    EmersonParser_conditionalExpressionNoIn_return conditionalExpressionNoIn297;
    #undef	RETURN_TYPE_conditionalExpressionNoIn297
    #define	RETURN_TYPE_conditionalExpressionNoIn297 EmersonParser_conditionalExpressionNoIn_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression298;
    #undef	RETURN_TYPE_leftHandSideExpression298
    #define	RETURN_TYPE_leftHandSideExpression298 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator300;
    #undef	RETURN_TYPE_assignmentOperator300
    #define	RETURN_TYPE_assignmentOperator300 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn302;
    #undef	RETURN_TYPE_assignmentExpressionNoIn302
    #define	RETURN_TYPE_assignmentExpressionNoIn302 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM299_tree;
    pANTLR3_BASE_TREE LTERM301_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpressionNoIn;
    /* Initialize rule variables
     */
    assignmentExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM299       = NULL;
    LTERM301       = NULL;
    conditionalExpressionNoIn297.tree = NULL;

    leftHandSideExpression298.tree = NULL;

    assignmentOperator300.tree = NULL;

    assignmentExpressionNoIn302.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM299_tree   = NULL;
    LTERM301_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_conditionalExpressionNoIn   = NULL;
    #define CREATE_stream_conditionalExpressionNoIn  if (stream_conditionalExpressionNoIn == NULL) {stream_conditionalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:366:2: ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt156;

            alt156=2;

            alt156 = cdfa156.predict(ctx, RECOGNIZER, ISTREAM, &cdfa156);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt156) 
            {
        	case 1:
        	    // .//Emerson.g:366:4: conditionalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2851);
        	        conditionalExpressionNoIn297=conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpressionNoIn; stream_conditionalExpressionNoIn->add(stream_conditionalExpressionNoIn, conditionalExpressionNoIn297.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 366:30: -> ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:366:33: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR_NOIN, (pANTLR3_UINT8)"COND_EXPR_NOIN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpressionNoIn == NULL ? NULL : stream_conditionalExpressionNoIn->nextTree(stream_conditionalExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:367:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2864);
        	        leftHandSideExpression298=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression298.tree, NULL); }

        	        // .//Emerson.g:367:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt154=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA154_0 = LA(1);
        	                if ( (LA154_0 == LTERM) ) 
        	                {
        	                    alt154=1;
        	                }

        	            }
        	            switch (alt154) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM299 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2866); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM299, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop154;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop154: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2869);
        	        assignmentOperator300=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator300.tree, NULL); }

        	        // .//Emerson.g:367:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt155=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA155_0 = LA(1);
        	                if ( (LA155_0 == LTERM) ) 
        	                {
        	                    alt155=1;
        	                }

        	            }
        	            switch (alt155) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM301 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2871); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM301, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop155;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop155: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2874);
        	        assignmentExpressionNoIn302=assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn302.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentOperator, leftHandSideExpression, assignmentExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 367:85: -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:367:89: ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_conditionalExpressionNoIn != NULL) stream_conditionalExpressionNoIn->free(stream_conditionalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, assignmentExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//Emerson.g:370:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static EmersonParser_leftHandSideExpression_return
leftHandSideExpression(pEmersonParser ctx)
{   
    EmersonParser_leftHandSideExpression_return retval;
    ANTLR3_UINT32 leftHandSideExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression303;
    #undef	RETURN_TYPE_callExpression303
    #define	RETURN_TYPE_callExpression303 EmersonParser_callExpression_return

    EmersonParser_newExpression_return newExpression304;
    #undef	RETURN_TYPE_newExpression304
    #define	RETURN_TYPE_newExpression304 EmersonParser_newExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    leftHandSideExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(51)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression303.tree = NULL;

    newExpression304.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:371:2: ( callExpression -> callExpression | newExpression -> newExpression )
            
            ANTLR3_UINT32 alt157;

            alt157=2;

            alt157 = cdfa157.predict(ctx, RECOGNIZER, ISTREAM, &cdfa157);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt157) 
            {
        	case 1:
        	    // .//Emerson.g:371:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression2899);
        	        callExpression303=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression303.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 371:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:372:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression2908);
        	        newExpression304=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression304.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 372:18: -> newExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(51, leftHandSideExpression_StartIndex); }
    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//Emerson.g:375:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static EmersonParser_newExpression_return
newExpression(pEmersonParser ctx)
{   
    EmersonParser_newExpression_return retval;
    ANTLR3_UINT32 newExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal306;
    pANTLR3_COMMON_TOKEN    LTERM307;
    EmersonParser_memberExpression_return memberExpression305;
    #undef	RETURN_TYPE_memberExpression305
    #define	RETURN_TYPE_memberExpression305 EmersonParser_memberExpression_return

    EmersonParser_newExpression_return newExpression308;
    #undef	RETURN_TYPE_newExpression308
    #define	RETURN_TYPE_newExpression308 EmersonParser_newExpression_return

    pANTLR3_BASE_TREE string_literal306_tree;
    pANTLR3_BASE_TREE LTERM307_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    newExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(52)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal306       = NULL;
    LTERM307       = NULL;
    memberExpression305.tree = NULL;

    newExpression308.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal306_tree   = NULL;
    LTERM307_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:376:2: ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt159;

            alt159=2;

            alt159 = cdfa159.predict(ctx, RECOGNIZER, ISTREAM, &cdfa159);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt159) 
            {
        	case 1:
        	    // .//Emerson.g:376:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression2924);
        	        memberExpression305=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression305.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 376:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:377:4: 'new' ( LTERM )* newExpression
        	    {
        	        string_literal306 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_newExpression2933); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal306, NULL); }


        	        // .//Emerson.g:377:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt158=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA158_0 = LA(1);
        	                if ( (LA158_0 == LTERM) ) 
        	                {
        	                    alt158=1;
        	                }

        	            }
        	            switch (alt158) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM307 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_newExpression2935); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenewExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM307, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop158;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop158: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression2938);
        	        newExpression308=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression308.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 377:31: -> ^( NEW newExpression )
        	        	{
        	        	    // .//Emerson.g:377:34: ^( NEW newExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(52, newExpression_StartIndex); }
    return retval;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start indexSuffix1
 * .//Emerson.g:381:1: indexSuffix1 : '[' ( LTERM )* expression ( LTERM )* ']' -> expression ;
 */
static EmersonParser_indexSuffix1_return
indexSuffix1(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix1_return retval;
    ANTLR3_UINT32 indexSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal309;
    pANTLR3_COMMON_TOKEN    LTERM310;
    pANTLR3_COMMON_TOKEN    LTERM312;
    pANTLR3_COMMON_TOKEN    char_literal313;
    EmersonParser_expression_return expression311;
    #undef	RETURN_TYPE_expression311
    #define	RETURN_TYPE_expression311 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal309_tree;
    pANTLR3_BASE_TREE LTERM310_tree;
    pANTLR3_BASE_TREE LTERM312_tree;
    pANTLR3_BASE_TREE char_literal313_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(53)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal309       = NULL;
    LTERM310       = NULL;
    LTERM312       = NULL;
    char_literal313       = NULL;
    expression311.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal309_tree   = NULL;
    LTERM310_tree   = NULL;
    LTERM312_tree   = NULL;
    char_literal313_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:382:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> expression )
        // .//Emerson.g:382:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal309 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_indexSuffix12960); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal309, NULL); }


            // .//Emerson.g:382:8: ( LTERM )*

            for (;;)
            {
                int alt160=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA160_0 = LA(1);
                    if ( (LA160_0 == LTERM) ) 
                    {
                        alt160=1;
                    }

                }
                switch (alt160) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM310 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix12962); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM310, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop160;	/* break out of the loop */
            	    break;
                }
            }
            loop160: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix12965);
            expression311=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression311.tree, NULL); }

            // .//Emerson.g:382:26: ( LTERM )*

            for (;;)
            {
                int alt161=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA161_0 = LA(1);
                    if ( (LA161_0 == LTERM) ) 
                    {
                        alt161=1;
                    }

                }
                switch (alt161) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM312 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix12967); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM312, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop161;	/* break out of the loop */
            	    break;
                }
            }
            loop161: ; /* Jump out to here if this rule does not match */

            char_literal313 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_indexSuffix12970); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal313, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 382:37: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(53, indexSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//Emerson.g:386:1: propertyReferenceSuffix1 : '.' ( LTERM )* Identifier -> Identifier ;
 */
static EmersonParser_propertyReferenceSuffix1_return
propertyReferenceSuffix1(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix1_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal314;
    pANTLR3_COMMON_TOKEN    LTERM315;
    pANTLR3_COMMON_TOKEN    Identifier316;

    pANTLR3_BASE_TREE char_literal314_tree;
    pANTLR3_BASE_TREE LTERM315_tree;
    pANTLR3_BASE_TREE Identifier316_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(54)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal314       = NULL;
    LTERM315       = NULL;
    Identifier316       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal314_tree   = NULL;
    LTERM315_tree   = NULL;
    Identifier316_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:387:2: ( '.' ( LTERM )* Identifier -> Identifier )
        // .//Emerson.g:387:4: '.' ( LTERM )* Identifier
        {
            char_literal314 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_propertyReferenceSuffix12987); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal314, NULL); }


            // .//Emerson.g:387:8: ( LTERM )*

            for (;;)
            {
                int alt162=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA162_0 = LA(1);
                    if ( (LA162_0 == LTERM) ) 
                    {
                        alt162=1;
                    }

                }
                switch (alt162) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM315 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix12989); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM315, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop162;	/* break out of the loop */
            	    break;
                }
            }
            loop162: ; /* Jump out to here if this rule does not match */

            Identifier316 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix12992); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier316, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 387:26: -> Identifier
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(54, propertyReferenceSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//Emerson.g:391:1: memberExpression : ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* );
 */
static EmersonParser_memberExpression_return
memberExpression(pEmersonParser ctx)
{   
    EmersonParser_memberExpression_return retval;
    ANTLR3_UINT32 memberExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM318;
    pANTLR3_COMMON_TOKEN    LTERM320;
    pANTLR3_COMMON_TOKEN    LTERM323;
    pANTLR3_COMMON_TOKEN    LTERM325;
    pANTLR3_COMMON_TOKEN    string_literal327;
    pANTLR3_COMMON_TOKEN    LTERM328;
    pANTLR3_COMMON_TOKEN    LTERM329;
    pANTLR3_COMMON_TOKEN    LTERM331;
    pANTLR3_COMMON_TOKEN    LTERM333;
    EmersonParser_memberExpression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr EmersonParser_memberExpression_return

    EmersonParser_primaryExpression_return primaryExpression317;
    #undef	RETURN_TYPE_primaryExpression317
    #define	RETURN_TYPE_primaryExpression317 EmersonParser_primaryExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1319;
    #undef	RETURN_TYPE_propertyReferenceSuffix1319
    #define	RETURN_TYPE_propertyReferenceSuffix1319 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1321;
    #undef	RETURN_TYPE_indexSuffix1321
    #define	RETURN_TYPE_indexSuffix1321 EmersonParser_indexSuffix1_return

    EmersonParser_functionExpression_return functionExpression322;
    #undef	RETURN_TYPE_functionExpression322
    #define	RETURN_TYPE_functionExpression322 EmersonParser_functionExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1324;
    #undef	RETURN_TYPE_propertyReferenceSuffix1324
    #define	RETURN_TYPE_propertyReferenceSuffix1324 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1326;
    #undef	RETURN_TYPE_indexSuffix1326
    #define	RETURN_TYPE_indexSuffix1326 EmersonParser_indexSuffix1_return

    EmersonParser_arguments_return arguments330;
    #undef	RETURN_TYPE_arguments330
    #define	RETURN_TYPE_arguments330 EmersonParser_arguments_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1332;
    #undef	RETURN_TYPE_propertyReferenceSuffix1332
    #define	RETURN_TYPE_propertyReferenceSuffix1332 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1334;
    #undef	RETURN_TYPE_indexSuffix1334
    #define	RETURN_TYPE_indexSuffix1334 EmersonParser_indexSuffix1_return

    pANTLR3_BASE_TREE LTERM318_tree;
    pANTLR3_BASE_TREE LTERM320_tree;
    pANTLR3_BASE_TREE LTERM323_tree;
    pANTLR3_BASE_TREE LTERM325_tree;
    pANTLR3_BASE_TREE string_literal327_tree;
    pANTLR3_BASE_TREE LTERM328_tree;
    pANTLR3_BASE_TREE LTERM329_tree;
    pANTLR3_BASE_TREE LTERM331_tree;
    pANTLR3_BASE_TREE LTERM333_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primaryExpression;
    /* Initialize rule variables
     */
    memberExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(55)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM318       = NULL;
    LTERM320       = NULL;
    LTERM323       = NULL;
    LTERM325       = NULL;
    string_literal327       = NULL;
    LTERM328       = NULL;
    LTERM329       = NULL;
    LTERM331       = NULL;
    LTERM333       = NULL;
    expr.tree = NULL;

    primaryExpression317.tree = NULL;

    propertyReferenceSuffix1319.tree = NULL;

    indexSuffix1321.tree = NULL;

    functionExpression322.tree = NULL;

    propertyReferenceSuffix1324.tree = NULL;

    indexSuffix1326.tree = NULL;

    arguments330.tree = NULL;

    propertyReferenceSuffix1332.tree = NULL;

    indexSuffix1334.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM318_tree   = NULL;
    LTERM320_tree   = NULL;
    LTERM323_tree   = NULL;
    LTERM325_tree   = NULL;
    string_literal327_tree   = NULL;
    LTERM328_tree   = NULL;
    LTERM329_tree   = NULL;
    LTERM331_tree   = NULL;
    LTERM333_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_functionExpression   = NULL;
    #define CREATE_stream_functionExpression  if (stream_functionExpression == NULL) {stream_functionExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }
    stream_primaryExpression   = NULL;
    #define CREATE_stream_primaryExpression  if (stream_primaryExpression == NULL) {stream_primaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primaryExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:393:2: ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* )
            
            ANTLR3_UINT32 alt174;

            alt174=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 126:
            case 129:
            case 158:
            case 202:
            case 203:
            case 204:
            case 205:
            	{
            		alt174=1;
            	}
                break;
            case 125:
            	{
            		alt174=2;
            	}
                break;
            case 157:
            	{
            		alt174=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 174;
                EXCEPTION->state        = 0;


                goto rulememberExpressionEx;
            }

            switch (alt174) 
            {
        	case 1:
        	    // .//Emerson.g:393:4: ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:393:4: ( primaryExpression -> primaryExpression )
        	        // .//Emerson.g:393:5: primaryExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression3011);
        	            primaryExpression317=primaryExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_primaryExpression; stream_primaryExpression->add(stream_primaryExpression, primaryExpression317.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : primaryExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 393:23: -> primaryExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primaryExpression == NULL ? NULL : stream_primaryExpression->nextTree(stream_primaryExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:393:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt165=3;
        	            alt165 = cdfa165.predict(ctx, RECOGNIZER, ISTREAM, &cdfa165);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt165) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:393:47: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:393:47: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt163=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA163_0 = LA(1);
        	        	                if ( (LA163_0 == LTERM) ) 
        	        	                {
        	        	                    alt163=1;
        	        	                }

        	        	            }
        	        	            switch (alt163) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM318 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3020); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM318, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop163;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop163: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3023);
        	        	        propertyReferenceSuffix1319=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1319.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 393:79: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:393:82: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:393:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:393:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt164=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA164_0 = LA(1);
        	        	                if ( (LA164_0 == LTERM) ) 
        	        	                {
        	        	                    alt164=1;
        	        	                }

        	        	            }
        	        	            switch (alt164) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM320 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3040); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM320, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop164;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop164: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3043);
        	        	        indexSuffix1321=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1321.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 393:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:393:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop165;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop165: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:394:4: ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:394:4: ( functionExpression -> functionExpression )
        	        // .//Emerson.g:394:5: functionExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression3062);
        	            functionExpression322=functionExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_functionExpression; stream_functionExpression->add(stream_functionExpression, functionExpression322.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : functionExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 394:24: -> functionExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionExpression == NULL ? NULL : stream_functionExpression->nextTree(stream_functionExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:394:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt168=3;
        	            alt168 = cdfa168.predict(ctx, RECOGNIZER, ISTREAM, &cdfa168);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt168) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:394:48: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:394:48: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt166=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA166_0 = LA(1);
        	        	                if ( (LA166_0 == LTERM) ) 
        	        	                {
        	        	                    alt166=1;
        	        	                }

        	        	            }
        	        	            switch (alt166) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM323 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3070); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM323, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop166;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop166: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3073);
        	        	        propertyReferenceSuffix1324=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1324.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : propertyReferenceSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 394:80: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:394:83: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:394:137: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:394:137: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt167=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA167_0 = LA(1);
        	        	                if ( (LA167_0 == LTERM) ) 
        	        	                {
        	        	                    alt167=1;
        	        	                }

        	        	            }
        	        	            switch (alt167) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM325 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3090); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM325, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop167;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop167: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3093);
        	        	        indexSuffix1326=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1326.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 394:157: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:394:160: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop168;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop168: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:395:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:395:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) )
        	        // .//Emerson.g:395:5: 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments
        	        {
        	            string_literal327 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_memberExpression3112); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal327, NULL); }


        	            // .//Emerson.g:395:11: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt169=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA169_0 = LA(1);
        	                    if ( (LA169_0 == LTERM) ) 
        	                    {
        	                        alt169=1;
        	                    }

        	                }
        	                switch (alt169) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM328 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3114); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM328, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop169;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop169: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression3119);
        	            expr=memberExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, expr.tree, NULL); }

        	            // .//Emerson.g:395:40: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt170=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA170_0 = LA(1);
        	                    if ( (LA170_0 == LTERM) ) 
        	                    {
        	                        alt170=1;
        	                    }

        	                }
        	                switch (alt170) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM329 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3121); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM329, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop170;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop170: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_arguments_in_memberExpression3124);
        	            arguments330=arguments(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments330.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : arguments, expr
        	             * token labels      : 
        	             * rule labels       : retval, expr
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 395:57: -> ^( NEW $expr arguments )
        	            	{
        	            	    // .//Emerson.g:395:60: ^( NEW $expr arguments )
        	            	    {
        	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	            	if (stream_expr != NULL) stream_expr->free(stream_expr);


        	            }
        	        }


        	        // .//Emerson.g:395:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt173=3;
        	            alt173 = cdfa173.predict(ctx, RECOGNIZER, ISTREAM, &cdfa173);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt173) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:395:85: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:395:85: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt171=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA171_0 = LA(1);
        	        	                if ( (LA171_0 == LTERM) ) 
        	        	                {
        	        	                    alt171=1;
        	        	                }

        	        	            }
        	        	            switch (alt171) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM331 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3139); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM331, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop171;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop171: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3142);
        	        	        propertyReferenceSuffix1332=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1332.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 395:117: -> ^( DOT $memberExpression)
        	        	        	{
        	        	        	    // .//Emerson.g:395:120: ^( DOT $memberExpression)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:395:147: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:395:147: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt172=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA172_0 = LA(1);
        	        	                if ( (LA172_0 == LTERM) ) 
        	        	                {
        	        	                    alt172=1;
        	        	                }

        	        	            }
        	        	            switch (alt172) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM333 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3155); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM333, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop172;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop172: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3158);
        	        	        indexSuffix1334=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1334.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 395:167: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:395:170: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop173;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop173: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_functionExpression != NULL) stream_functionExpression->free(stream_functionExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
        if (stream_primaryExpression != NULL) stream_primaryExpression->free(stream_primaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(55, memberExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//Emerson.g:398:1: memberExpressionSuffix : ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_memberExpressionSuffix_return
memberExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_memberExpressionSuffix_return retval;
    ANTLR3_UINT32 memberExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_indexSuffix_return indexSuffix335;
    #undef	RETURN_TYPE_indexSuffix335
    #define	RETURN_TYPE_indexSuffix335 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix336;
    #undef	RETURN_TYPE_propertyReferenceSuffix336
    #define	RETURN_TYPE_propertyReferenceSuffix336 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    memberExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(56)) )
    {
    	retval.start = 0;

        return retval; 
    }
    indexSuffix335.tree = NULL;

    propertyReferenceSuffix336.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:399:2: ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt175;

            alt175=2;


            {
                int LA175_0 = LA(1);
                if ( (LA175_0 == 158) ) 
                {
                    alt175=1;
                }
                else if ( (LA175_0 == 160) ) 
                {
                    alt175=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 175;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt175) 
            {
        	case 1:
        	    // .//Emerson.g:399:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix3187);
        	        indexSuffix335=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix335.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 399:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:400:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3197);
        	        propertyReferenceSuffix336=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix336.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 400:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(56, memberExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//Emerson.g:403:1: callExpression : ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* ;
 */
static EmersonParser_callExpression_return
callExpression(pEmersonParser ctx)
{   
    EmersonParser_callExpression_return retval;
    ANTLR3_UINT32 callExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM338;
    pANTLR3_COMMON_TOKEN    LTERM340;
    pANTLR3_COMMON_TOKEN    LTERM342;
    pANTLR3_COMMON_TOKEN    LTERM344;
    EmersonParser_memberExpression_return memberExpression337;
    #undef	RETURN_TYPE_memberExpression337
    #define	RETURN_TYPE_memberExpression337 EmersonParser_memberExpression_return

    EmersonParser_arguments_return arguments339;
    #undef	RETURN_TYPE_arguments339
    #define	RETURN_TYPE_arguments339 EmersonParser_arguments_return

    EmersonParser_arguments_return arguments341;
    #undef	RETURN_TYPE_arguments341
    #define	RETURN_TYPE_arguments341 EmersonParser_arguments_return

    EmersonParser_indexSuffix1_return indexSuffix1343;
    #undef	RETURN_TYPE_indexSuffix1343
    #define	RETURN_TYPE_indexSuffix1343 EmersonParser_indexSuffix1_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1345;
    #undef	RETURN_TYPE_propertyReferenceSuffix1345
    #define	RETURN_TYPE_propertyReferenceSuffix1345 EmersonParser_propertyReferenceSuffix1_return

    pANTLR3_BASE_TREE LTERM338_tree;
    pANTLR3_BASE_TREE LTERM340_tree;
    pANTLR3_BASE_TREE LTERM342_tree;
    pANTLR3_BASE_TREE LTERM344_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    /* Initialize rule variables
     */
    callExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(57)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM338       = NULL;
    LTERM340       = NULL;
    LTERM342       = NULL;
    LTERM344       = NULL;
    memberExpression337.tree = NULL;

    arguments339.tree = NULL;

    arguments341.tree = NULL;

    indexSuffix1343.tree = NULL;

    propertyReferenceSuffix1345.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM338_tree   = NULL;
    LTERM340_tree   = NULL;
    LTERM342_tree   = NULL;
    LTERM344_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:404:5: ( ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* )
        // .//Emerson.g:404:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
        {
            // .//Emerson.g:404:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) )
            // .//Emerson.g:404:8: memberExpression ( LTERM )* arguments
            {
                FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression3217);
                memberExpression337=memberExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression337.tree, NULL); }

                // .//Emerson.g:404:25: ( LTERM )*

                for (;;)
                {
                    int alt176=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA176_0 = LA(1);
                        if ( (LA176_0 == LTERM) ) 
                        {
                            alt176=1;
                        }

                    }
                    switch (alt176) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM338 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3219); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecallExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM338, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop176;	/* break out of the loop */
                	    break;
                    }
                }
                loop176: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_arguments_in_callExpression3222);
                arguments339=arguments(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments339.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : arguments, memberExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 404:42: -> ^( CALL memberExpression arguments )
                	{
                	    // .//Emerson.g:404:45: ^( CALL memberExpression arguments )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:404:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*

            for (;;)
            {
                int alt180=4;
                alt180 = cdfa180.predict(ctx, RECOGNIZER, ISTREAM, &cdfa180);
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt180) 
                {
            	case 1:
            	    // .//Emerson.g:404:82: ( LTERM )* arguments
            	    {

            	        // .//Emerson.g:404:82: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt177=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA177_0 = LA(1);
            	                if ( (LA177_0 == LTERM) ) 
            	                {
            	                    alt177=1;
            	                }

            	            }
            	            switch (alt177) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM340 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3236); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM340, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop177;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop177: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression3239);
            	        arguments341=arguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments341.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : arguments
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 404:99: -> arguments
            	        	{
            	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:404:114: ( LTERM )* indexSuffix1
            	    {

            	        // .//Emerson.g:404:114: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt178=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA178_0 = LA(1);
            	                if ( (LA178_0 == LTERM) ) 
            	                {
            	                    alt178=1;
            	                }

            	            }
            	            switch (alt178) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM342 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3247); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM342, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop178;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop178: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression3250);
            	        indexSuffix1343=indexSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1343.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : indexSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 404:134: -> ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	{
            	        	    // .//Emerson.g:404:137: ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // .//Emerson.g:404:183: ( LTERM )* propertyReferenceSuffix1
            	    {

            	        // .//Emerson.g:404:183: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt179=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA179_0 = LA(1);
            	                if ( (LA179_0 == LTERM) ) 
            	                {
            	                    alt179=1;
            	                }

            	            }
            	            switch (alt179) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM344 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3265); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM344, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop179;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop179: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression3268);
            	        propertyReferenceSuffix1345=propertyReferenceSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1345.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : callExpression, propertyReferenceSuffix1
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 404:215: -> ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	{
            	        	    // .//Emerson.g:404:218: ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop180;	/* break out of the loop */
            	    break;
                }
            }
            loop180: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(57, callExpression_StartIndex); }
    return retval;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//Emerson.g:407:1: callExpressionSuffix : ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_callExpressionSuffix_return
callExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_callExpressionSuffix_return retval;
    ANTLR3_UINT32 callExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_arguments_return arguments346;
    #undef	RETURN_TYPE_arguments346
    #define	RETURN_TYPE_arguments346 EmersonParser_arguments_return

    EmersonParser_indexSuffix_return indexSuffix347;
    #undef	RETURN_TYPE_indexSuffix347
    #define	RETURN_TYPE_indexSuffix347 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix348;
    #undef	RETURN_TYPE_propertyReferenceSuffix348
    #define	RETURN_TYPE_propertyReferenceSuffix348 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    callExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(58)) )
    {
    	retval.start = 0;

        return retval; 
    }
    arguments346.tree = NULL;

    indexSuffix347.tree = NULL;

    propertyReferenceSuffix348.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:408:2: ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt181;

            alt181=3;

            switch ( LA(1) ) 
            {
            case 126:
            	{
            		alt181=1;
            	}
                break;
            case 158:
            	{
            		alt181=2;
            	}
                break;
            case 160:
            	{
            		alt181=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 181;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt181) 
            {
        	case 1:
        	    // .//Emerson.g:408:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix3295);
        	        arguments346=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments346.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : arguments
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 408:14: -> arguments
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:409:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix3304);
        	        indexSuffix347=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix347.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 409:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:410:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3313);
        	        propertyReferenceSuffix348=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix348.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 410:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(58, callExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//Emerson.g:413:1: arguments : '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )* ) ;
 */
static EmersonParser_arguments_return
arguments(pEmersonParser ctx)
{   
    EmersonParser_arguments_return retval;
    ANTLR3_UINT32 arguments_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal349;
    pANTLR3_COMMON_TOKEN    LTERM350;
    pANTLR3_COMMON_TOKEN    LTERM352;
    pANTLR3_COMMON_TOKEN    char_literal353;
    pANTLR3_COMMON_TOKEN    LTERM354;
    pANTLR3_COMMON_TOKEN    LTERM356;
    pANTLR3_COMMON_TOKEN    char_literal357;
    EmersonParser_assignmentExpression_return assignmentExpression351;
    #undef	RETURN_TYPE_assignmentExpression351
    #define	RETURN_TYPE_assignmentExpression351 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression355;
    #undef	RETURN_TYPE_assignmentExpression355
    #define	RETURN_TYPE_assignmentExpression355 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal349_tree;
    pANTLR3_BASE_TREE LTERM350_tree;
    pANTLR3_BASE_TREE LTERM352_tree;
    pANTLR3_BASE_TREE char_literal353_tree;
    pANTLR3_BASE_TREE LTERM354_tree;
    pANTLR3_BASE_TREE LTERM356_tree;
    pANTLR3_BASE_TREE char_literal357_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arguments_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(59)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal349       = NULL;
    LTERM350       = NULL;
    LTERM352       = NULL;
    char_literal353       = NULL;
    LTERM354       = NULL;
    LTERM356       = NULL;
    char_literal357       = NULL;
    assignmentExpression351.tree = NULL;

    assignmentExpression355.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal349_tree   = NULL;
    LTERM350_tree   = NULL;
    LTERM352_tree   = NULL;
    char_literal353_tree   = NULL;
    LTERM354_tree   = NULL;
    LTERM356_tree   = NULL;
    char_literal357_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:414:2: ( '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )* ) )
        // .//Emerson.g:414:4: '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')'
        {
            char_literal349 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_arguments3328); 
            if  (HASEXCEPTION())
            {
                goto ruleargumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal349, NULL); }


            // .//Emerson.g:414:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?
            {
                int alt186=2;
                alt186 = cdfa186.predict(ctx, RECOGNIZER, ISTREAM, &cdfa186);
                if  (HASEXCEPTION())
                {
                    goto ruleargumentsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt186) 
                {
            	case 1:
            	    // .//Emerson.g:414:9: ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
            	    {

            	        // .//Emerson.g:414:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt182=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA182_0 = LA(1);
            	                if ( (LA182_0 == LTERM) ) 
            	                {
            	                    alt182=1;
            	                }

            	            }
            	            switch (alt182) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM350 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3331); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM350, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop182;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop182: ; /* Jump out to here if this rule does not match */

            	        // .//Emerson.g:414:16: ( assignmentExpression )
            	        // .//Emerson.g:414:17: assignmentExpression
            	        {
            	            FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3335);
            	            assignmentExpression351=assignmentExpression(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleargumentsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression351.tree, NULL); }

            	        }


            	        // .//Emerson.g:414:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*

            	        for (;;)
            	        {
            	            int alt185=2;
            	            alt185 = cdfa185.predict(ctx, RECOGNIZER, ISTREAM, &cdfa185);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleargumentsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt185) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:414:40: ( LTERM )* ',' ( LTERM )* assignmentExpression
            	        	    {

            	        	        // .//Emerson.g:414:40: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt183=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA183_0 = LA(1);
            	        	                if ( (LA183_0 == LTERM) ) 
            	        	                {
            	        	                    alt183=1;
            	        	                }

            	        	            }
            	        	            switch (alt183) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM352 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3339); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleargumentsEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM352, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop183;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop183: ; /* Jump out to here if this rule does not match */

            	        	        char_literal353 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_arguments3342); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal353, NULL); }


            	        	        // .//Emerson.g:414:51: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt184=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA184_0 = LA(1);
            	        	                if ( (LA184_0 == LTERM) ) 
            	        	                {
            	        	                    alt184=1;
            	        	                }

            	        	            }
            	        	            switch (alt184) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM354 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3344); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleargumentsEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM354, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop184;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop184: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3347);
            	        	        assignmentExpression355=assignmentExpression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression355.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop185;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop185: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:414:83: ( LTERM )*

            for (;;)
            {
                int alt187=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA187_0 = LA(1);
                    if ( (LA187_0 == LTERM) ) 
                    {
                        alt187=1;
                    }

                }
                switch (alt187) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM356 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3353); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargumentsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM356, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop187;	/* break out of the loop */
            	    break;
                }
            }
            loop187: ; /* Jump out to here if this rule does not match */

            char_literal357 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_arguments3356); 
            if  (HASEXCEPTION())
            {
                goto ruleargumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal357, NULL); }


             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 414:94: -> ^( ARGLIST ( assignmentExpression )* )
            	{
            	    // .//Emerson.g:414:97: ^( ARGLIST ( assignmentExpression )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

            	        // .//Emerson.g:414:107: ( assignmentExpression )*
            	        {
            	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(59, arguments_StartIndex); }
    return retval;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//Emerson.g:418:1: indexSuffix : '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) ;
 */
static EmersonParser_indexSuffix_return
indexSuffix(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix_return retval;
    ANTLR3_UINT32 indexSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal358;
    pANTLR3_COMMON_TOKEN    LTERM359;
    pANTLR3_COMMON_TOKEN    LTERM361;
    pANTLR3_COMMON_TOKEN    char_literal362;
    EmersonParser_expression_return expression360;
    #undef	RETURN_TYPE_expression360
    #define	RETURN_TYPE_expression360 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal358_tree;
    pANTLR3_BASE_TREE LTERM359_tree;
    pANTLR3_BASE_TREE LTERM361_tree;
    pANTLR3_BASE_TREE char_literal362_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(60)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal358       = NULL;
    LTERM359       = NULL;
    LTERM361       = NULL;
    char_literal362       = NULL;
    expression360.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal358_tree   = NULL;
    LTERM359_tree   = NULL;
    LTERM361_tree   = NULL;
    char_literal362_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:419:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) )
        // .//Emerson.g:419:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal358 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_indexSuffix3379); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal358, NULL); }


            // .//Emerson.g:419:8: ( LTERM )*

            for (;;)
            {
                int alt188=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA188_0 = LA(1);
                    if ( (LA188_0 == LTERM) ) 
                    {
                        alt188=1;
                    }

                }
                switch (alt188) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM359 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3381); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM359, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop188;	/* break out of the loop */
            	    break;
                }
            }
            loop188: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix3384);
            expression360=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression360.tree, NULL); }

            // .//Emerson.g:419:26: ( LTERM )*

            for (;;)
            {
                int alt189=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA189_0 = LA(1);
                    if ( (LA189_0 == LTERM) ) 
                    {
                        alt189=1;
                    }

                }
                switch (alt189) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM361 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3386); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM361, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop189;	/* break out of the loop */
            	    break;
                }
            }
            loop189: ; /* Jump out to here if this rule does not match */

            char_literal362 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_indexSuffix3389); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal362, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 419:37: -> ^( ARRAY_INDEX expression )
            	{
            	    // .//Emerson.g:419:40: ^( ARRAY_INDEX expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(60, indexSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//Emerson.g:422:1: propertyReferenceSuffix : '.' ( LTERM )* Identifier -> ^( DOT Identifier ) ;
 */
static EmersonParser_propertyReferenceSuffix_return
propertyReferenceSuffix(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal363;
    pANTLR3_COMMON_TOKEN    LTERM364;
    pANTLR3_COMMON_TOKEN    Identifier365;

    pANTLR3_BASE_TREE char_literal363_tree;
    pANTLR3_BASE_TREE LTERM364_tree;
    pANTLR3_BASE_TREE Identifier365_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(61)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal363       = NULL;
    LTERM364       = NULL;
    Identifier365       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal363_tree   = NULL;
    LTERM364_tree   = NULL;
    Identifier365_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:423:2: ( '.' ( LTERM )* Identifier -> ^( DOT Identifier ) )
        // .//Emerson.g:423:4: '.' ( LTERM )* Identifier
        {
            char_literal363 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_propertyReferenceSuffix3410); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal363, NULL); }


            // .//Emerson.g:423:8: ( LTERM )*

            for (;;)
            {
                int alt190=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA190_0 = LA(1);
                    if ( (LA190_0 == LTERM) ) 
                    {
                        alt190=1;
                    }

                }
                switch (alt190) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM364 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix3412); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM364, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop190;	/* break out of the loop */
            	    break;
                }
            }
            loop190: ; /* Jump out to here if this rule does not match */

            Identifier365 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix3415); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier365, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 423:26: -> ^( DOT Identifier )
            	{
            	    // .//Emerson.g:423:29: ^( DOT Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(61, propertyReferenceSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//Emerson.g:426:1: assignmentOperator : ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) );
 */
static EmersonParser_assignmentOperator_return
assignmentOperator(pEmersonParser ctx)
{   
    EmersonParser_assignmentOperator_return retval;
    ANTLR3_UINT32 assignmentOperator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal366;
    pANTLR3_COMMON_TOKEN    string_literal367;
    pANTLR3_COMMON_TOKEN    string_literal368;
    pANTLR3_COMMON_TOKEN    string_literal369;
    pANTLR3_COMMON_TOKEN    string_literal370;
    pANTLR3_COMMON_TOKEN    string_literal371;
    pANTLR3_COMMON_TOKEN    string_literal372;
    pANTLR3_COMMON_TOKEN    string_literal373;
    pANTLR3_COMMON_TOKEN    string_literal374;
    pANTLR3_COMMON_TOKEN    string_literal375;
    pANTLR3_COMMON_TOKEN    string_literal376;
    pANTLR3_COMMON_TOKEN    string_literal377;

    pANTLR3_BASE_TREE char_literal366_tree;
    pANTLR3_BASE_TREE string_literal367_tree;
    pANTLR3_BASE_TREE string_literal368_tree;
    pANTLR3_BASE_TREE string_literal369_tree;
    pANTLR3_BASE_TREE string_literal370_tree;
    pANTLR3_BASE_TREE string_literal371_tree;
    pANTLR3_BASE_TREE string_literal372_tree;
    pANTLR3_BASE_TREE string_literal373_tree;
    pANTLR3_BASE_TREE string_literal374_tree;
    pANTLR3_BASE_TREE string_literal375_tree;
    pANTLR3_BASE_TREE string_literal376_tree;
    pANTLR3_BASE_TREE string_literal377_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_163;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;

    /* Initialize rule variables
     */
    assignmentOperator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(62)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal366       = NULL;
    string_literal367       = NULL;
    string_literal368       = NULL;
    string_literal369       = NULL;
    string_literal370       = NULL;
    string_literal371       = NULL;
    string_literal372       = NULL;
    string_literal373       = NULL;
    string_literal374       = NULL;
    string_literal375       = NULL;
    string_literal376       = NULL;
    string_literal377       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal366_tree   = NULL;
    string_literal367_tree   = NULL;
    string_literal368_tree   = NULL;
    string_literal369_tree   = NULL;
    string_literal370_tree   = NULL;
    string_literal371_tree   = NULL;
    string_literal372_tree   = NULL;
    string_literal373_tree   = NULL;
    string_literal374_tree   = NULL;
    string_literal375_tree   = NULL;
    string_literal376_tree   = NULL;
    string_literal377_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_163   = NULL;
    #define CREATE_stream_163  if (stream_163 == NULL) {stream_163 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 163"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:427:2: ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) )
            
            ANTLR3_UINT32 alt191;

            alt191=12;

            switch ( LA(1) ) 
            {
            case 133:
            	{
            		alt191=1;
            	}
                break;
            case 161:
            	{
            		alt191=2;
            	}
                break;
            case 162:
            	{
            		alt191=3;
            	}
                break;
            case 163:
            	{
            		alt191=4;
            	}
                break;
            case 164:
            	{
            		alt191=5;
            	}
                break;
            case 165:
            	{
            		alt191=6;
            	}
                break;
            case 166:
            	{
            		alt191=7;
            	}
                break;
            case 167:
            	{
            		alt191=8;
            	}
                break;
            case 168:
            	{
            		alt191=9;
            	}
                break;
            case 169:
            	{
            		alt191=10;
            	}
                break;
            case 170:
            	{
            		alt191=11;
            	}
                break;
            case 171:
            	{
            		alt191=12;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 191;
                EXCEPTION->state        = 0;


                goto ruleassignmentOperatorEx;
            }

            switch (alt191) 
            {
        	case 1:
        	    // .//Emerson.g:427:4: '='
        	    {
        	        char_literal366 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_assignmentOperator3435); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal366, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:8: -> ^( ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:11: ^( ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:427:22: '*='
        	    {
        	        string_literal367 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_assignmentOperator3444); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal367, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:27: -> ^( MULT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:30: ^( MULT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT_ASSIGN, (pANTLR3_UINT8)"MULT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:427:46: '/='
        	    {
        	        string_literal368 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_assignmentOperator3453); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, string_literal368, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:51: -> ^( DIV_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:54: ^( DIV_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV_ASSIGN, (pANTLR3_UINT8)"DIV_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:427:70: '%='
        	    {
        	        string_literal369 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_assignmentOperator3463); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal369, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:75: -> ^( MOD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:78: ^( MOD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD_ASSIGN, (pANTLR3_UINT8)"MOD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:427:93: '+='
        	    {
        	        string_literal370 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_assignmentOperator3472); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal370, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:98: -> ^( ADD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:101: ^( ADD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_ASSIGN, (pANTLR3_UINT8)"ADD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:427:116: '-='
        	    {
        	        string_literal371 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_assignmentOperator3481); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, string_literal371, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:121: -> ^( SUB_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:124: ^( SUB_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB_ASSIGN, (pANTLR3_UINT8)"SUB_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:427:139: '<<='
        	    {
        	        string_literal372 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_assignmentOperator3490); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, string_literal372, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:145: -> ^( LEFT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:148: ^( LEFT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT_ASSIGN, (pANTLR3_UINT8)"LEFT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:427:170: '>>='
        	    {
        	        string_literal373 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_assignmentOperator3499); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, string_literal373, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:176: -> ^( RIGHT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:179: ^( RIGHT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT_ASSIGN, (pANTLR3_UINT8)"RIGHT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:427:202: '>>>='
        	    {
        	        string_literal374 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_assignmentOperator3508); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, string_literal374, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:209: -> ^( TRIPLE_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:212: ^( TRIPLE_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT_ASSIGN, (pANTLR3_UINT8)"TRIPLE_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:427:236: '&='
        	    {
        	        string_literal375 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_assignmentOperator3517); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, string_literal375, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:240: -> ^( AND_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:243: ^( AND_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND_ASSIGN, (pANTLR3_UINT8)"AND_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:427:258: '^='
        	    {
        	        string_literal376 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_assignmentOperator3525); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, string_literal376, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:262: -> ^( EXP_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:265: ^( EXP_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP_ASSIGN, (pANTLR3_UINT8)"EXP_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:427:281: '|='
        	    {
        	        string_literal377 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_assignmentOperator3534); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, string_literal377, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:286: -> ^( OR_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:427:289: ^( OR_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR_ASSIGN, (pANTLR3_UINT8)"OR_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_163 != NULL) stream_163->free(stream_163);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_167 != NULL) stream_167->free(stream_167);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(62, assignmentOperator_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//Emerson.g:430:1: conditionalExpression : ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpression_return
conditionalExpression(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpression_return retval;
    ANTLR3_UINT32 conditionalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM379;
    pANTLR3_COMMON_TOKEN    char_literal380;
    pANTLR3_COMMON_TOKEN    LTERM381;
    pANTLR3_COMMON_TOKEN    LTERM382;
    pANTLR3_COMMON_TOKEN    char_literal383;
    pANTLR3_COMMON_TOKEN    LTERM384;
    EmersonParser_assignmentExpression_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return

    EmersonParser_logicalORExpression_return logicalORExpression378;
    #undef	RETURN_TYPE_logicalORExpression378
    #define	RETURN_TYPE_logicalORExpression378 EmersonParser_logicalORExpression_return

    pANTLR3_BASE_TREE LTERM379_tree;
    pANTLR3_BASE_TREE char_literal380_tree;
    pANTLR3_BASE_TREE LTERM381_tree;
    pANTLR3_BASE_TREE LTERM382_tree;
    pANTLR3_BASE_TREE char_literal383_tree;
    pANTLR3_BASE_TREE LTERM384_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpression;
    /* Initialize rule variables
     */
    conditionalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(63)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM379       = NULL;
    char_literal380       = NULL;
    LTERM381       = NULL;
    LTERM382       = NULL;
    char_literal383       = NULL;
    LTERM384       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpression378.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM379_tree   = NULL;
    char_literal380_tree   = NULL;
    LTERM381_tree   = NULL;
    LTERM382_tree   = NULL;
    char_literal383_tree   = NULL;
    LTERM384_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_logicalORExpression   = NULL;
    #define CREATE_stream_logicalORExpression  if (stream_logicalORExpression == NULL) {stream_logicalORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:431:2: ( ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? )
        // .//Emerson.g:431:4: ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
        {
            // .//Emerson.g:431:4: ( logicalORExpression -> logicalORExpression )
            // .//Emerson.g:431:5: logicalORExpression
            {
                FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression3552);
                logicalORExpression378=logicalORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpression; stream_logicalORExpression->add(stream_logicalORExpression, logicalORExpression378.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 431:25: -> logicalORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpression == NULL ? NULL : stream_logicalORExpression->nextTree(stream_logicalORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:431:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
            {
                int alt196=2;
                alt196 = cdfa196.predict(ctx, RECOGNIZER, ISTREAM, &cdfa196);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt196) 
                {
            	case 1:
            	    // .//Emerson.g:431:50: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
            	    {

            	        // .//Emerson.g:431:50: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt192=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA192_0 = LA(1);
            	                if ( (LA192_0 == LTERM) ) 
            	                {
            	                    alt192=1;
            	                }

            	            }
            	            switch (alt192) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM379 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3560); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM379, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop192;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop192: ; /* Jump out to here if this rule does not match */

            	        char_literal380 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_conditionalExpression3563); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, char_literal380, NULL); }


            	        // .//Emerson.g:431:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt193=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA193_0 = LA(1);
            	                if ( (LA193_0 == LTERM) ) 
            	                {
            	                    alt193=1;
            	                }

            	            }
            	            switch (alt193) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM381 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3565); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM381, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop193;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop193: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3570);
            	        expr1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr1.tree, NULL); }

            	        // .//Emerson.g:431:95: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt194=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA194_0 = LA(1);
            	                if ( (LA194_0 == LTERM) ) 
            	                {
            	                    alt194=1;
            	                }

            	            }
            	            switch (alt194) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM382 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3572); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM382, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop194;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop194: ; /* Jump out to here if this rule does not match */

            	        char_literal383 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_conditionalExpression3575); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal383, NULL); }


            	        // .//Emerson.g:431:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt195=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA195_0 = LA(1);
            	                if ( (LA195_0 == LTERM) ) 
            	                {
            	                    alt195=1;
            	                }

            	            }
            	            switch (alt195) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM384 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3577); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM384, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop195;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop195: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3582);
            	        expr2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr2, conditionalExpression, expr1
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 431:140: -> ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:431:143: ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_logicalORExpression != NULL) stream_logicalORExpression->free(stream_logicalORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(63, conditionalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//Emerson.g:434:1: conditionalExpressionNoIn : ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpressionNoIn_return
conditionalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpressionNoIn_return retval;
    ANTLR3_UINT32 conditionalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM386;
    pANTLR3_COMMON_TOKEN    char_literal387;
    pANTLR3_COMMON_TOKEN    LTERM388;
    pANTLR3_COMMON_TOKEN    LTERM389;
    pANTLR3_COMMON_TOKEN    char_literal390;
    pANTLR3_COMMON_TOKEN    LTERM391;
    EmersonParser_assignmentExpressionNoIn_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_logicalORExpressionNoIn_return logicalORExpressionNoIn385;
    #undef	RETURN_TYPE_logicalORExpressionNoIn385
    #define	RETURN_TYPE_logicalORExpressionNoIn385 EmersonParser_logicalORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM386_tree;
    pANTLR3_BASE_TREE char_literal387_tree;
    pANTLR3_BASE_TREE LTERM388_tree;
    pANTLR3_BASE_TREE LTERM389_tree;
    pANTLR3_BASE_TREE char_literal390_tree;
    pANTLR3_BASE_TREE LTERM391_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpressionNoIn;
    /* Initialize rule variables
     */
    conditionalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(64)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM386       = NULL;
    char_literal387       = NULL;
    LTERM388       = NULL;
    LTERM389       = NULL;
    char_literal390       = NULL;
    LTERM391       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpressionNoIn385.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM386_tree   = NULL;
    char_literal387_tree   = NULL;
    LTERM388_tree   = NULL;
    LTERM389_tree   = NULL;
    char_literal390_tree   = NULL;
    LTERM391_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_logicalORExpressionNoIn   = NULL;
    #define CREATE_stream_logicalORExpressionNoIn  if (stream_logicalORExpressionNoIn == NULL) {stream_logicalORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:435:2: ( ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? )
        // .//Emerson.g:435:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
        {
            // .//Emerson.g:435:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn )
            // .//Emerson.g:435:5: logicalORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3613);
                logicalORExpressionNoIn385=logicalORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpressionNoIn; stream_logicalORExpressionNoIn->add(stream_logicalORExpressionNoIn, logicalORExpressionNoIn385.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 435:29: -> logicalORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpressionNoIn == NULL ? NULL : stream_logicalORExpressionNoIn->nextTree(stream_logicalORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:435:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
            {
                int alt201=2;
                alt201 = cdfa201.predict(ctx, RECOGNIZER, ISTREAM, &cdfa201);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt201) 
                {
            	case 1:
            	    // .//Emerson.g:435:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:435:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt197=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA197_0 = LA(1);
            	                if ( (LA197_0 == LTERM) ) 
            	                {
            	                    alt197=1;
            	                }

            	            }
            	            switch (alt197) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM386 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3620); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM386, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop197;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop197: ; /* Jump out to here if this rule does not match */

            	        char_literal387 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_conditionalExpressionNoIn3623); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, char_literal387, NULL); }


            	        // .//Emerson.g:435:68: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt198=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA198_0 = LA(1);
            	                if ( (LA198_0 == LTERM) ) 
            	                {
            	                    alt198=1;
            	                }

            	            }
            	            switch (alt198) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM388 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3625); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM388, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop198;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop198: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630);
            	        expr1=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr1.tree, NULL); }

            	        // .//Emerson.g:435:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt199=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA199_0 = LA(1);
            	                if ( (LA199_0 == LTERM) ) 
            	                {
            	                    alt199=1;
            	                }

            	            }
            	            switch (alt199) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM389 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3632); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM389, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop199;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop199: ; /* Jump out to here if this rule does not match */

            	        char_literal390 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_conditionalExpressionNoIn3635); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal390, NULL); }


            	        // .//Emerson.g:435:117: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt200=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA200_0 = LA(1);
            	                if ( (LA200_0 == LTERM) ) 
            	                {
            	                    alt200=1;
            	                }

            	            }
            	            switch (alt200) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM391 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3637); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM391, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop200;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop200: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3642);
            	        expr2=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr2, conditionalExpressionNoIn, expr1
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 435:155: -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:435:158: ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_logicalORExpressionNoIn != NULL) stream_logicalORExpressionNoIn->free(stream_logicalORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(64, conditionalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start logicalORExpression
 * .//Emerson.g:439:1: logicalORExpression : ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* ;
 */
static EmersonParser_logicalORExpression_return
logicalORExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpression_return retval;
    ANTLR3_UINT32 logicalORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM393;
    pANTLR3_COMMON_TOKEN    string_literal394;
    pANTLR3_COMMON_TOKEN    LTERM395;
    EmersonParser_logicalANDExpression_return logicalANDExpression392;
    #undef	RETURN_TYPE_logicalANDExpression392
    #define	RETURN_TYPE_logicalANDExpression392 EmersonParser_logicalANDExpression_return

    EmersonParser_logicalANDExpression_return logicalANDExpression396;
    #undef	RETURN_TYPE_logicalANDExpression396
    #define	RETURN_TYPE_logicalANDExpression396 EmersonParser_logicalANDExpression_return

    pANTLR3_BASE_TREE LTERM393_tree;
    pANTLR3_BASE_TREE string_literal394_tree;
    pANTLR3_BASE_TREE LTERM395_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpression;
    /* Initialize rule variables
     */
    logicalORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(65)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM393       = NULL;
    string_literal394       = NULL;
    LTERM395       = NULL;
    logicalANDExpression392.tree = NULL;

    logicalANDExpression396.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM393_tree   = NULL;
    string_literal394_tree   = NULL;
    LTERM395_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_logicalANDExpression   = NULL;
    #define CREATE_stream_logicalANDExpression  if (stream_logicalANDExpression == NULL) {stream_logicalANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:440:2: ( ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* )
        // .//Emerson.g:440:4: ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
        {
            // .//Emerson.g:440:4: ( logicalANDExpression -> logicalANDExpression )
            // .//Emerson.g:440:5: logicalANDExpression
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3672);
                logicalANDExpression392=logicalANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression392.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 440:26: -> logicalANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:440:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*

            for (;;)
            {
                int alt204=2;
                alt204 = cdfa204.predict(ctx, RECOGNIZER, ISTREAM, &cdfa204);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt204) 
                {
            	case 1:
            	    // .//Emerson.g:440:51: ( LTERM )* '||' ( LTERM )* logicalANDExpression
            	    {

            	        // .//Emerson.g:440:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt202=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA202_0 = LA(1);
            	                if ( (LA202_0 == LTERM) ) 
            	                {
            	                    alt202=1;
            	                }

            	            }
            	            switch (alt202) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM393 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3679); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM393, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop202;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop202: ; /* Jump out to here if this rule does not match */

            	        string_literal394 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_logicalORExpression3682); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal394, NULL); }


            	        // .//Emerson.g:440:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt203=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA203_0 = LA(1);
            	                if ( (LA203_0 == LTERM) ) 
            	                {
            	                    alt203=1;
            	                }

            	            }
            	            switch (alt203) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM395 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3684); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM395, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop203;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop203: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3687);
            	        logicalANDExpression396=logicalANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression396.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalORExpression, logicalANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 440:91: -> ^( OR $logicalORExpression logicalANDExpression )
            	        	{
            	        	    // .//Emerson.g:440:94: ^( OR $logicalORExpression logicalANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop204;	/* break out of the loop */
            	    break;
                }
            }
            loop204: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_logicalANDExpression != NULL) stream_logicalANDExpression->free(stream_logicalANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(65, logicalORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalANDExpression
 * .//Emerson.g:443:1: logicalANDExpression : ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* ;
 */
static EmersonParser_logicalANDExpression_return
logicalANDExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpression_return retval;
    ANTLR3_UINT32 logicalANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM398;
    pANTLR3_COMMON_TOKEN    string_literal399;
    pANTLR3_COMMON_TOKEN    LTERM400;
    EmersonParser_bitwiseORExpression_return bitwiseORExpression397;
    #undef	RETURN_TYPE_bitwiseORExpression397
    #define	RETURN_TYPE_bitwiseORExpression397 EmersonParser_bitwiseORExpression_return

    EmersonParser_bitwiseORExpression_return bitwiseORExpression401;
    #undef	RETURN_TYPE_bitwiseORExpression401
    #define	RETURN_TYPE_bitwiseORExpression401 EmersonParser_bitwiseORExpression_return

    pANTLR3_BASE_TREE LTERM398_tree;
    pANTLR3_BASE_TREE string_literal399_tree;
    pANTLR3_BASE_TREE LTERM400_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpression;
    /* Initialize rule variables
     */
    logicalANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(66)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM398       = NULL;
    string_literal399       = NULL;
    LTERM400       = NULL;
    bitwiseORExpression397.tree = NULL;

    bitwiseORExpression401.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM398_tree   = NULL;
    string_literal399_tree   = NULL;
    LTERM400_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_bitwiseORExpression   = NULL;
    #define CREATE_stream_bitwiseORExpression  if (stream_bitwiseORExpression == NULL) {stream_bitwiseORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:444:2: ( ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* )
        // .//Emerson.g:444:4: ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
        {
            // .//Emerson.g:444:4: ( bitwiseORExpression -> bitwiseORExpression )
            // .//Emerson.g:444:5: bitwiseORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3714);
                bitwiseORExpression397=bitwiseORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression397.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 444:25: -> bitwiseORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:444:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*

            for (;;)
            {
                int alt207=2;
                alt207 = cdfa207.predict(ctx, RECOGNIZER, ISTREAM, &cdfa207);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt207) 
                {
            	case 1:
            	    // .//Emerson.g:444:49: ( LTERM )* '&&' ( LTERM )* bitwiseORExpression
            	    {

            	        // .//Emerson.g:444:49: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt205=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA205_0 = LA(1);
            	                if ( (LA205_0 == LTERM) ) 
            	                {
            	                    alt205=1;
            	                }

            	            }
            	            switch (alt205) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM398 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3721); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM398, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop205;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop205: ; /* Jump out to here if this rule does not match */

            	        string_literal399 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_logicalANDExpression3724); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, string_literal399, NULL); }


            	        // .//Emerson.g:444:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt206=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA206_0 = LA(1);
            	                if ( (LA206_0 == LTERM) ) 
            	                {
            	                    alt206=1;
            	                }

            	            }
            	            switch (alt206) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM400 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3726); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM400, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop206;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop206: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3729);
            	        bitwiseORExpression401=bitwiseORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression401.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, logicalANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 444:89: -> ^( AND $logicalANDExpression bitwiseORExpression )
            	        	{
            	        	    // .//Emerson.g:444:92: ^( AND $logicalANDExpression bitwiseORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop207;	/* break out of the loop */
            	    break;
                }
            }
            loop207: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_bitwiseORExpression != NULL) stream_bitwiseORExpression->free(stream_bitwiseORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(66, logicalANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//Emerson.g:447:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* ;
 */
static EmersonParser_logicalORExpressionNoIn_return
logicalORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM403;
    pANTLR3_COMMON_TOKEN    string_literal404;
    pANTLR3_COMMON_TOKEN    LTERM405;
    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn402;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn402
    #define	RETURN_TYPE_logicalANDExpressionNoIn402 EmersonParser_logicalANDExpressionNoIn_return

    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn406;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn406
    #define	RETURN_TYPE_logicalANDExpressionNoIn406 EmersonParser_logicalANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM403_tree;
    pANTLR3_BASE_TREE string_literal404_tree;
    pANTLR3_BASE_TREE LTERM405_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpressionNoIn;
    /* Initialize rule variables
     */
    logicalORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(67)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM403       = NULL;
    string_literal404       = NULL;
    LTERM405       = NULL;
    logicalANDExpressionNoIn402.tree = NULL;

    logicalANDExpressionNoIn406.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM403_tree   = NULL;
    string_literal404_tree   = NULL;
    LTERM405_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_logicalANDExpressionNoIn   = NULL;
    #define CREATE_stream_logicalANDExpressionNoIn  if (stream_logicalANDExpressionNoIn == NULL) {stream_logicalANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:448:2: ( ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* )
        // .//Emerson.g:448:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
        {
            // .//Emerson.g:448:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn )
            // .//Emerson.g:448:5: logicalANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3757);
                logicalANDExpressionNoIn402=logicalANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn402.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 448:30: -> logicalANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:448:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*

            for (;;)
            {
                int alt210=2;
                alt210 = cdfa210.predict(ctx, RECOGNIZER, ISTREAM, &cdfa210);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt210) 
                {
            	case 1:
            	    // .//Emerson.g:448:59: ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn
            	    {

            	        // .//Emerson.g:448:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt208=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA208_0 = LA(1);
            	                if ( (LA208_0 == LTERM) ) 
            	                {
            	                    alt208=1;
            	                }

            	            }
            	            switch (alt208) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM403 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3764); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM403, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop208;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop208: ; /* Jump out to here if this rule does not match */

            	        string_literal404 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_logicalORExpressionNoIn3767); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal404, NULL); }


            	        // .//Emerson.g:448:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt209=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA209_0 = LA(1);
            	                if ( (LA209_0 == LTERM) ) 
            	                {
            	                    alt209=1;
            	                }

            	            }
            	            switch (alt209) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM405 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3769); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM405, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop209;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop209: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3772);
            	        logicalANDExpressionNoIn406=logicalANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn406.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, logicalORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 448:103: -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:448:106: ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop210;	/* break out of the loop */
            	    break;
                }
            }
            loop210: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_logicalANDExpressionNoIn != NULL) stream_logicalANDExpressionNoIn->free(stream_logicalANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(67, logicalORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//Emerson.g:452:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* ;
 */
static EmersonParser_logicalANDExpressionNoIn_return
logicalANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM408;
    pANTLR3_COMMON_TOKEN    string_literal409;
    pANTLR3_COMMON_TOKEN    LTERM410;
    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn407;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn407
    #define	RETURN_TYPE_bitwiseORExpressionNoIn407 EmersonParser_bitwiseORExpressionNoIn_return

    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn411;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn411
    #define	RETURN_TYPE_bitwiseORExpressionNoIn411 EmersonParser_bitwiseORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM408_tree;
    pANTLR3_BASE_TREE string_literal409_tree;
    pANTLR3_BASE_TREE LTERM410_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpressionNoIn;
    /* Initialize rule variables
     */
    logicalANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(68)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM408       = NULL;
    string_literal409       = NULL;
    LTERM410       = NULL;
    bitwiseORExpressionNoIn407.tree = NULL;

    bitwiseORExpressionNoIn411.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM408_tree   = NULL;
    string_literal409_tree   = NULL;
    LTERM410_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_bitwiseORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseORExpressionNoIn  if (stream_bitwiseORExpressionNoIn == NULL) {stream_bitwiseORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:453:2: ( ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* )
        // .//Emerson.g:453:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
        {
            // .//Emerson.g:453:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn )
            // .//Emerson.g:453:5: bitwiseORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3801);
                bitwiseORExpressionNoIn407=bitwiseORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn407.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 453:29: -> bitwiseORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:453:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*

            for (;;)
            {
                int alt213=2;
                alt213 = cdfa213.predict(ctx, RECOGNIZER, ISTREAM, &cdfa213);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt213) 
                {
            	case 1:
            	    // .//Emerson.g:453:58: ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn
            	    {

            	        // .//Emerson.g:453:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt211=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA211_0 = LA(1);
            	                if ( (LA211_0 == LTERM) ) 
            	                {
            	                    alt211=1;
            	                }

            	            }
            	            switch (alt211) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM408 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3809); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM408, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop211;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop211: ; /* Jump out to here if this rule does not match */

            	        string_literal409 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_logicalANDExpressionNoIn3812); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, string_literal409, NULL); }


            	        // .//Emerson.g:453:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt212=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA212_0 = LA(1);
            	                if ( (LA212_0 == LTERM) ) 
            	                {
            	                    alt212=1;
            	                }

            	            }
            	            switch (alt212) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM410 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3814); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM410, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop212;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop212: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3817);
            	        bitwiseORExpressionNoIn411=bitwiseORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn411.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, logicalANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 453:101: -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:453:104: ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop213;	/* break out of the loop */
            	    break;
                }
            }
            loop213: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_bitwiseORExpressionNoIn != NULL) stream_bitwiseORExpressionNoIn->free(stream_bitwiseORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(68, logicalANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//Emerson.g:456:1: bitwiseORExpression : ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* ;
 */
static EmersonParser_bitwiseORExpression_return
bitwiseORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpression_return retval;
    ANTLR3_UINT32 bitwiseORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM413;
    pANTLR3_COMMON_TOKEN    char_literal414;
    pANTLR3_COMMON_TOKEN    LTERM415;
    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression412;
    #undef	RETURN_TYPE_bitwiseXORExpression412
    #define	RETURN_TYPE_bitwiseXORExpression412 EmersonParser_bitwiseXORExpression_return

    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression416;
    #undef	RETURN_TYPE_bitwiseXORExpression416
    #define	RETURN_TYPE_bitwiseXORExpression416 EmersonParser_bitwiseXORExpression_return

    pANTLR3_BASE_TREE LTERM413_tree;
    pANTLR3_BASE_TREE char_literal414_tree;
    pANTLR3_BASE_TREE LTERM415_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpression;
    /* Initialize rule variables
     */
    bitwiseORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(69)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM413       = NULL;
    char_literal414       = NULL;
    LTERM415       = NULL;
    bitwiseXORExpression412.tree = NULL;

    bitwiseXORExpression416.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM413_tree   = NULL;
    char_literal414_tree   = NULL;
    LTERM415_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_bitwiseXORExpression   = NULL;
    #define CREATE_stream_bitwiseXORExpression  if (stream_bitwiseXORExpression == NULL) {stream_bitwiseXORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:457:2: ( ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* )
        // .//Emerson.g:457:4: ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
        {
            // .//Emerson.g:457:4: ( bitwiseXORExpression -> bitwiseXORExpression )
            // .//Emerson.g:457:5: bitwiseXORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3844);
                bitwiseXORExpression412=bitwiseXORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression412.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 457:26: -> bitwiseXORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:457:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*

            for (;;)
            {
                int alt216=2;
                alt216 = cdfa216.predict(ctx, RECOGNIZER, ISTREAM, &cdfa216);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt216) 
                {
            	case 1:
            	    // .//Emerson.g:457:52: ( LTERM )* '|' ( LTERM )* bitwiseXORExpression
            	    {

            	        // .//Emerson.g:457:52: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt214=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA214_0 = LA(1);
            	                if ( (LA214_0 == LTERM) ) 
            	                {
            	                    alt214=1;
            	                }

            	            }
            	            switch (alt214) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM413 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3852); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM413, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop214;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop214: ; /* Jump out to here if this rule does not match */

            	        char_literal414 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_bitwiseORExpression3855); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal414, NULL); }


            	        // .//Emerson.g:457:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt215=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA215_0 = LA(1);
            	                if ( (LA215_0 == LTERM) ) 
            	                {
            	                    alt215=1;
            	                }

            	            }
            	            switch (alt215) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM415 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3857); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM415, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop215;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop215: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3860);
            	        bitwiseXORExpression416=bitwiseXORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression416.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 457:91: -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	{
            	        	    // .//Emerson.g:457:94: ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop216;	/* break out of the loop */
            	    break;
                }
            }
            loop216: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_bitwiseXORExpression != NULL) stream_bitwiseXORExpression->free(stream_bitwiseXORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(69, bitwiseORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//Emerson.g:460:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseORExpressionNoIn_return
bitwiseORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM418;
    pANTLR3_COMMON_TOKEN    char_literal419;
    pANTLR3_COMMON_TOKEN    LTERM420;
    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn417;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn417
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn417 EmersonParser_bitwiseXORExpressionNoIn_return

    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn421;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn421
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn421 EmersonParser_bitwiseXORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM418_tree;
    pANTLR3_BASE_TREE char_literal419_tree;
    pANTLR3_BASE_TREE LTERM420_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(70)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM418       = NULL;
    char_literal419       = NULL;
    LTERM420       = NULL;
    bitwiseXORExpressionNoIn417.tree = NULL;

    bitwiseXORExpressionNoIn421.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM418_tree   = NULL;
    char_literal419_tree   = NULL;
    LTERM420_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_bitwiseXORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseXORExpressionNoIn  if (stream_bitwiseXORExpressionNoIn == NULL) {stream_bitwiseXORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:461:2: ( ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* )
        // .//Emerson.g:461:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
        {
            // .//Emerson.g:461:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn )
            // .//Emerson.g:461:5: bitwiseXORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3887);
                bitwiseXORExpressionNoIn417=bitwiseXORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn417.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 461:30: -> bitwiseXORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:461:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*

            for (;;)
            {
                int alt219=2;
                alt219 = cdfa219.predict(ctx, RECOGNIZER, ISTREAM, &cdfa219);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt219) 
                {
            	case 1:
            	    // .//Emerson.g:461:60: ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn
            	    {

            	        // .//Emerson.g:461:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt217=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA217_0 = LA(1);
            	                if ( (LA217_0 == LTERM) ) 
            	                {
            	                    alt217=1;
            	                }

            	            }
            	            switch (alt217) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM418 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn3895); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM418, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop217;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop217: ; /* Jump out to here if this rule does not match */

            	        char_literal419 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_bitwiseORExpressionNoIn3898); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal419, NULL); }


            	        // .//Emerson.g:461:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt218=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA218_0 = LA(1);
            	                if ( (LA218_0 == LTERM) ) 
            	                {
            	                    alt218=1;
            	                }

            	            }
            	            switch (alt218) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM420 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn3900); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM420, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop218;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop218: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3903);
            	        bitwiseXORExpressionNoIn421=bitwiseXORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn421.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpressionNoIn, bitwiseORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 461:103: -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:461:106: ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop219;	/* break out of the loop */
            	    break;
                }
            }
            loop219: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_bitwiseXORExpressionNoIn != NULL) stream_bitwiseXORExpressionNoIn->free(stream_bitwiseXORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(70, bitwiseORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//Emerson.g:464:1: bitwiseXORExpression : ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* ;
 */
static EmersonParser_bitwiseXORExpression_return
bitwiseXORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpression_return retval;
    ANTLR3_UINT32 bitwiseXORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM423;
    pANTLR3_COMMON_TOKEN    char_literal424;
    pANTLR3_COMMON_TOKEN    LTERM425;
    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression422;
    #undef	RETURN_TYPE_bitwiseANDExpression422
    #define	RETURN_TYPE_bitwiseANDExpression422 EmersonParser_bitwiseANDExpression_return

    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression426;
    #undef	RETURN_TYPE_bitwiseANDExpression426
    #define	RETURN_TYPE_bitwiseANDExpression426 EmersonParser_bitwiseANDExpression_return

    pANTLR3_BASE_TREE LTERM423_tree;
    pANTLR3_BASE_TREE char_literal424_tree;
    pANTLR3_BASE_TREE LTERM425_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpression;
    /* Initialize rule variables
     */
    bitwiseXORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(71)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM423       = NULL;
    char_literal424       = NULL;
    LTERM425       = NULL;
    bitwiseANDExpression422.tree = NULL;

    bitwiseANDExpression426.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM423_tree   = NULL;
    char_literal424_tree   = NULL;
    LTERM425_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_bitwiseANDExpression   = NULL;
    #define CREATE_stream_bitwiseANDExpression  if (stream_bitwiseANDExpression == NULL) {stream_bitwiseANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:465:1: ( ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* )
        // .//Emerson.g:465:3: ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
        {
            // .//Emerson.g:465:3: ( bitwiseANDExpression -> bitwiseANDExpression )
            // .//Emerson.g:465:4: bitwiseANDExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3929);
                bitwiseANDExpression422=bitwiseANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression422.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 465:25: -> bitwiseANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:465:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*

            for (;;)
            {
                int alt222=2;
                alt222 = cdfa222.predict(ctx, RECOGNIZER, ISTREAM, &cdfa222);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt222) 
                {
            	case 1:
            	    // .//Emerson.g:465:51: ( LTERM )* '^' ( LTERM )* bitwiseANDExpression
            	    {

            	        // .//Emerson.g:465:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt220=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA220_0 = LA(1);
            	                if ( (LA220_0 == LTERM) ) 
            	                {
            	                    alt220=1;
            	                }

            	            }
            	            switch (alt220) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM423 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression3937); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM423, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop220;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop220: ; /* Jump out to here if this rule does not match */

            	        char_literal424 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_bitwiseXORExpression3940); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal424, NULL); }


            	        // .//Emerson.g:465:62: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt221=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA221_0 = LA(1);
            	                if ( (LA221_0 == LTERM) ) 
            	                {
            	                    alt221=1;
            	                }

            	            }
            	            switch (alt221) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM425 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression3942); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM425, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop221;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop221: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3945);
            	        bitwiseANDExpression426=bitwiseANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression426.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 465:90: -> ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	{
            	        	    // .//Emerson.g:465:93: ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop222;	/* break out of the loop */
            	    break;
                }
            }
            loop222: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_bitwiseANDExpression != NULL) stream_bitwiseANDExpression->free(stream_bitwiseANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(71, bitwiseXORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//Emerson.g:468:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseXORExpressionNoIn_return
bitwiseXORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseXORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM428;
    pANTLR3_COMMON_TOKEN    char_literal429;
    pANTLR3_COMMON_TOKEN    LTERM430;
    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn427;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn427
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn427 EmersonParser_bitwiseANDExpressionNoIn_return

    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn431;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn431
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn431 EmersonParser_bitwiseANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM428_tree;
    pANTLR3_BASE_TREE char_literal429_tree;
    pANTLR3_BASE_TREE LTERM430_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseXORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(72)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM428       = NULL;
    char_literal429       = NULL;
    LTERM430       = NULL;
    bitwiseANDExpressionNoIn427.tree = NULL;

    bitwiseANDExpressionNoIn431.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM428_tree   = NULL;
    char_literal429_tree   = NULL;
    LTERM430_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_bitwiseANDExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseANDExpressionNoIn  if (stream_bitwiseANDExpressionNoIn == NULL) {stream_bitwiseANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:469:2: ( ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* )
        // .//Emerson.g:469:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
        {
            // .//Emerson.g:469:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn )
            // .//Emerson.g:469:5: bitwiseANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3972);
                bitwiseANDExpressionNoIn427=bitwiseANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn427.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 469:30: -> bitwiseANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:469:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*

            for (;;)
            {
                int alt225=2;
                alt225 = cdfa225.predict(ctx, RECOGNIZER, ISTREAM, &cdfa225);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt225) 
                {
            	case 1:
            	    // .//Emerson.g:469:59: ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn
            	    {

            	        // .//Emerson.g:469:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt223=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA223_0 = LA(1);
            	                if ( (LA223_0 == LTERM) ) 
            	                {
            	                    alt223=1;
            	                }

            	            }
            	            switch (alt223) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM428 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3979); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM428, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop223;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop223: ; /* Jump out to here if this rule does not match */

            	        char_literal429 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_bitwiseXORExpressionNoIn3982); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal429, NULL); }


            	        // .//Emerson.g:469:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt224=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA224_0 = LA(1);
            	                if ( (LA224_0 == LTERM) ) 
            	                {
            	                    alt224=1;
            	                }

            	            }
            	            switch (alt224) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM430 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3984); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM430, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop224;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop224: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3987);
            	        bitwiseANDExpressionNoIn431=bitwiseANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn431.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpressionNoIn, bitwiseANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 469:102: -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:469:105: ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop225;	/* break out of the loop */
            	    break;
                }
            }
            loop225: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_bitwiseANDExpressionNoIn != NULL) stream_bitwiseANDExpressionNoIn->free(stream_bitwiseANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(72, bitwiseXORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//Emerson.g:472:1: bitwiseANDExpression : ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* ;
 */
static EmersonParser_bitwiseANDExpression_return
bitwiseANDExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpression_return retval;
    ANTLR3_UINT32 bitwiseANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM433;
    pANTLR3_COMMON_TOKEN    char_literal434;
    pANTLR3_COMMON_TOKEN    LTERM435;
    EmersonParser_equalityExpression_return equalityExpression432;
    #undef	RETURN_TYPE_equalityExpression432
    #define	RETURN_TYPE_equalityExpression432 EmersonParser_equalityExpression_return

    EmersonParser_equalityExpression_return equalityExpression436;
    #undef	RETURN_TYPE_equalityExpression436
    #define	RETURN_TYPE_equalityExpression436 EmersonParser_equalityExpression_return

    pANTLR3_BASE_TREE LTERM433_tree;
    pANTLR3_BASE_TREE char_literal434_tree;
    pANTLR3_BASE_TREE LTERM435_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpression;
    /* Initialize rule variables
     */
    bitwiseANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(73)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM433       = NULL;
    char_literal434       = NULL;
    LTERM435       = NULL;
    equalityExpression432.tree = NULL;

    equalityExpression436.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM433_tree   = NULL;
    char_literal434_tree   = NULL;
    LTERM435_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_equalityExpression   = NULL;
    #define CREATE_stream_equalityExpression  if (stream_equalityExpression == NULL) {stream_equalityExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:473:2: ( ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* )
        // .//Emerson.g:473:4: ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
        {
            // .//Emerson.g:473:4: ( equalityExpression -> equalityExpression )
            // .//Emerson.g:473:5: equalityExpression
            {
                FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4015);
                equalityExpression432=equalityExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression432.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 473:24: -> equalityExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:473:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*

            for (;;)
            {
                int alt228=2;
                alt228 = cdfa228.predict(ctx, RECOGNIZER, ISTREAM, &cdfa228);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt228) 
                {
            	case 1:
            	    // .//Emerson.g:473:48: ( LTERM )* '&' ( LTERM )* equalityExpression
            	    {

            	        // .//Emerson.g:473:48: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt226=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA226_0 = LA(1);
            	                if ( (LA226_0 == LTERM) ) 
            	                {
            	                    alt226=1;
            	                }

            	            }
            	            switch (alt226) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM433 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4023); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM433, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop226;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop226: ; /* Jump out to here if this rule does not match */

            	        char_literal434 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_bitwiseANDExpression4026); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, char_literal434, NULL); }


            	        // .//Emerson.g:473:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt227=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA227_0 = LA(1);
            	                if ( (LA227_0 == LTERM) ) 
            	                {
            	                    alt227=1;
            	                }

            	            }
            	            switch (alt227) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM435 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4028); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM435, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop227;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop227: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4031);
            	        equalityExpression436=equalityExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression436.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 473:85: -> ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	{
            	        	    // .//Emerson.g:473:88: ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop228;	/* break out of the loop */
            	    break;
                }
            }
            loop228: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_equalityExpression != NULL) stream_equalityExpression->free(stream_equalityExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(73, bitwiseANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//Emerson.g:476:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseANDExpressionNoIn_return
bitwiseANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM438;
    pANTLR3_COMMON_TOKEN    char_literal439;
    pANTLR3_COMMON_TOKEN    LTERM440;
    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn437;
    #undef	RETURN_TYPE_equalityExpressionNoIn437
    #define	RETURN_TYPE_equalityExpressionNoIn437 EmersonParser_equalityExpressionNoIn_return

    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn441;
    #undef	RETURN_TYPE_equalityExpressionNoIn441
    #define	RETURN_TYPE_equalityExpressionNoIn441 EmersonParser_equalityExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM438_tree;
    pANTLR3_BASE_TREE char_literal439_tree;
    pANTLR3_BASE_TREE LTERM440_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(74)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM438       = NULL;
    char_literal439       = NULL;
    LTERM440       = NULL;
    equalityExpressionNoIn437.tree = NULL;

    equalityExpressionNoIn441.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM438_tree   = NULL;
    char_literal439_tree   = NULL;
    LTERM440_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_equalityExpressionNoIn   = NULL;
    #define CREATE_stream_equalityExpressionNoIn  if (stream_equalityExpressionNoIn == NULL) {stream_equalityExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:477:2: ( ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* )
        // .//Emerson.g:477:4: ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
        {
            // .//Emerson.g:477:4: ( equalityExpressionNoIn -> equalityExpressionNoIn )
            // .//Emerson.g:477:5: equalityExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4059);
                equalityExpressionNoIn437=equalityExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn437.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 477:28: -> equalityExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:477:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*

            for (;;)
            {
                int alt231=2;
                alt231 = cdfa231.predict(ctx, RECOGNIZER, ISTREAM, &cdfa231);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt231) 
                {
            	case 1:
            	    // .//Emerson.g:477:56: ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn
            	    {

            	        // .//Emerson.g:477:56: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt229=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA229_0 = LA(1);
            	                if ( (LA229_0 == LTERM) ) 
            	                {
            	                    alt229=1;
            	                }

            	            }
            	            switch (alt229) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM438 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4067); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM438, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop229;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop229: ; /* Jump out to here if this rule does not match */

            	        char_literal439 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_bitwiseANDExpressionNoIn4070); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, char_literal439, NULL); }


            	        // .//Emerson.g:477:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt230=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA230_0 = LA(1);
            	                if ( (LA230_0 == LTERM) ) 
            	                {
            	                    alt230=1;
            	                }

            	            }
            	            switch (alt230) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM440 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4072); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM440, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop230;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop230: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4075);
            	        equalityExpressionNoIn441=equalityExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn441.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, equalityExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 477:97: -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:477:100: ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop231;	/* break out of the loop */
            	    break;
                }
            }
            loop231: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_equalityExpressionNoIn != NULL) stream_equalityExpressionNoIn->free(stream_equalityExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(74, bitwiseANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//Emerson.g:480:1: equalityExpression : ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* ;
 */
static EmersonParser_equalityExpression_return
equalityExpression(pEmersonParser ctx)
{   
    EmersonParser_equalityExpression_return retval;
    ANTLR3_UINT32 equalityExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM443;
    pANTLR3_COMMON_TOKEN    LTERM445;
    EmersonParser_relationalExpression_return relationalExpression442;
    #undef	RETURN_TYPE_relationalExpression442
    #define	RETURN_TYPE_relationalExpression442 EmersonParser_relationalExpression_return

    EmersonParser_equalityOps_return equalityOps444;
    #undef	RETURN_TYPE_equalityOps444
    #define	RETURN_TYPE_equalityOps444 EmersonParser_equalityOps_return

    EmersonParser_relationalExpression_return relationalExpression446;
    #undef	RETURN_TYPE_relationalExpression446
    #define	RETURN_TYPE_relationalExpression446 EmersonParser_relationalExpression_return

    pANTLR3_BASE_TREE LTERM443_tree;
    pANTLR3_BASE_TREE LTERM445_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    /* Initialize rule variables
     */
    equalityExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(75)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM443       = NULL;
    LTERM445       = NULL;
    relationalExpression442.tree = NULL;

    equalityOps444.tree = NULL;

    relationalExpression446.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM443_tree   = NULL;
    LTERM445_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalExpression   = NULL;
    #define CREATE_stream_relationalExpression  if (stream_relationalExpression == NULL) {stream_relationalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpression"); }
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:481:2: ( ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* )
        // .//Emerson.g:481:4: ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
        {
            // .//Emerson.g:481:4: ( relationalExpression -> relationalExpression )
            // .//Emerson.g:481:5: relationalExpression
            {
                FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4102);
                relationalExpression442=relationalExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression442.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 481:26: -> relationalExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:481:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*

            for (;;)
            {
                int alt234=2;
                alt234 = cdfa234.predict(ctx, RECOGNIZER, ISTREAM, &cdfa234);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt234) 
                {
            	case 1:
            	    // .//Emerson.g:481:51: ( LTERM )* equalityOps ( LTERM )* relationalExpression
            	    {

            	        // .//Emerson.g:481:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt232=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA232_0 = LA(1);
            	                if ( (LA232_0 == LTERM) ) 
            	                {
            	                    alt232=1;
            	                }

            	            }
            	            switch (alt232) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM443 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4109); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM443, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop232;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop232: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpression4112);
            	        equalityOps444=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps444.tree, NULL); }

            	        // .//Emerson.g:481:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt233=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA233_0 = LA(1);
            	                if ( (LA233_0 == LTERM) ) 
            	                {
            	                    alt233=1;
            	                }

            	            }
            	            switch (alt233) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM445 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4114); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM445, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop233;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop233: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4117);
            	        relationalExpression446=relationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression446.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpression, relationalExpression, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 481:98: -> ^( equalityOps $equalityExpression relationalExpression )
            	        	{
            	        	    // .//Emerson.g:481:101: ^( equalityOps $equalityExpression relationalExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop234;	/* break out of the loop */
            	    break;
                }
            }
            loop234: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalExpression != NULL) stream_relationalExpression->free(stream_relationalExpression);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(75, equalityExpression_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityOps
 * .//Emerson.g:484:1: equalityOps : ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) );
 */
static EmersonParser_equalityOps_return
equalityOps(pEmersonParser ctx)
{   
    EmersonParser_equalityOps_return retval;
    ANTLR3_UINT32 equalityOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal447;
    pANTLR3_COMMON_TOKEN    string_literal448;
    pANTLR3_COMMON_TOKEN    string_literal449;
    pANTLR3_COMMON_TOKEN    string_literal450;

    pANTLR3_BASE_TREE string_literal447_tree;
    pANTLR3_BASE_TREE string_literal448_tree;
    pANTLR3_BASE_TREE string_literal449_tree;
    pANTLR3_BASE_TREE string_literal450_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;

    /* Initialize rule variables
     */
    equalityOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(76)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal447       = NULL;
    string_literal448       = NULL;
    string_literal449       = NULL;
    string_literal450       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal447_tree   = NULL;
    string_literal448_tree   = NULL;
    string_literal449_tree   = NULL;
    string_literal450_tree   = NULL;

    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:485:1: ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) )
            
            ANTLR3_UINT32 alt235;

            alt235=4;

            switch ( LA(1) ) 
            {
            case 178:
            	{
            		alt235=1;
            	}
                break;
            case 179:
            	{
            		alt235=2;
            	}
                break;
            case 180:
            	{
            		alt235=3;
            	}
                break;
            case 181:
            	{
            		alt235=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 235;
                EXCEPTION->state        = 0;


                goto ruleequalityOpsEx;
            }

            switch (alt235) 
            {
        	case 1:
        	    // .//Emerson.g:485:4: '=='
        	    {
        	        string_literal447 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_equalityOps4142); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal447, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 485:9: -> ^( EQUALS )
        	        	{
        	        	    // .//Emerson.g:485:12: ^( EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:486:3: '!='
        	    {
        	        string_literal448 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_equalityOps4152); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal448, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 486:8: -> ^( NOT_EQUALS )
        	        	{
        	        	    // .//Emerson.g:486:11: ^( NOT_EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_EQUALS, (pANTLR3_UINT8)"NOT_EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:487:3: '==='
        	    {
        	        string_literal449 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_equalityOps4162); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal449, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 487:9: -> ^( IDENT )
        	        	{
        	        	    // .//Emerson.g:487:12: ^( IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENT, (pANTLR3_UINT8)"IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:488:3: '!=='
        	    {
        	        string_literal450 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_equalityOps4172); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, string_literal450, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 488:9: -> ^( NOT_IDENT )
        	        	{
        	        	    // .//Emerson.g:488:12: ^( NOT_IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_IDENT, (pANTLR3_UINT8)"NOT_IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityOpsEx; /* Prevent compiler warnings */
    ruleequalityOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_178 != NULL) stream_178->free(stream_178);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(76, equalityOps_StartIndex); }
    return retval;
}
/* $ANTLR end equalityOps */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//Emerson.g:491:1: equalityExpressionNoIn : ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* ;
 */
static EmersonParser_equalityExpressionNoIn_return
equalityExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_equalityExpressionNoIn_return retval;
    ANTLR3_UINT32 equalityExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM452;
    pANTLR3_COMMON_TOKEN    LTERM454;
    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn451;
    #undef	RETURN_TYPE_relationalExpressionNoIn451
    #define	RETURN_TYPE_relationalExpressionNoIn451 EmersonParser_relationalExpressionNoIn_return

    EmersonParser_equalityOps_return equalityOps453;
    #undef	RETURN_TYPE_equalityOps453
    #define	RETURN_TYPE_equalityOps453 EmersonParser_equalityOps_return

    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn455;
    #undef	RETURN_TYPE_relationalExpressionNoIn455
    #define	RETURN_TYPE_relationalExpressionNoIn455 EmersonParser_relationalExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM452_tree;
    pANTLR3_BASE_TREE LTERM454_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpressionNoIn;
    /* Initialize rule variables
     */
    equalityExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(77)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM452       = NULL;
    LTERM454       = NULL;
    relationalExpressionNoIn451.tree = NULL;

    equalityOps453.tree = NULL;

    relationalExpressionNoIn455.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM452_tree   = NULL;
    LTERM454_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }
    stream_relationalExpressionNoIn   = NULL;
    #define CREATE_stream_relationalExpressionNoIn  if (stream_relationalExpressionNoIn == NULL) {stream_relationalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:492:2: ( ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* )
        // .//Emerson.g:492:4: ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
        {
            // .//Emerson.g:492:4: ( relationalExpressionNoIn -> relationalExpressionNoIn )
            // .//Emerson.g:492:5: relationalExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4189);
                relationalExpressionNoIn451=relationalExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn451.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 492:30: -> relationalExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:492:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*

            for (;;)
            {
                int alt238=2;
                alt238 = cdfa238.predict(ctx, RECOGNIZER, ISTREAM, &cdfa238);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt238) 
                {
            	case 1:
            	    // .//Emerson.g:492:59: ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn
            	    {

            	        // .//Emerson.g:492:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt236=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA236_0 = LA(1);
            	                if ( (LA236_0 == LTERM) ) 
            	                {
            	                    alt236=1;
            	                }

            	            }
            	            switch (alt236) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM452 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4196); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM452, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop236;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop236: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpressionNoIn4199);
            	        equalityOps453=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps453.tree, NULL); }

            	        // .//Emerson.g:492:78: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt237=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA237_0 = LA(1);
            	                if ( (LA237_0 == LTERM) ) 
            	                {
            	                    alt237=1;
            	                }

            	            }
            	            switch (alt237) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM454 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4201); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM454, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop237;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop237: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4204);
            	        relationalExpressionNoIn455=relationalExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn455.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpressionNoIn, equalityExpressionNoIn, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 492:110: -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:492:113: ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop238;	/* break out of the loop */
            	    break;
                }
            }
            loop238: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
        if (stream_relationalExpressionNoIn != NULL) stream_relationalExpressionNoIn->free(stream_relationalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(77, equalityExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//Emerson.g:496:1: relationalOps : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) );
 */
static EmersonParser_relationalOps_return
relationalOps(pEmersonParser ctx)
{   
    EmersonParser_relationalOps_return retval;
    ANTLR3_UINT32 relationalOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal456;
    pANTLR3_COMMON_TOKEN    char_literal457;
    pANTLR3_COMMON_TOKEN    string_literal458;
    pANTLR3_COMMON_TOKEN    string_literal459;
    pANTLR3_COMMON_TOKEN    string_literal460;
    pANTLR3_COMMON_TOKEN    string_literal461;

    pANTLR3_BASE_TREE char_literal456_tree;
    pANTLR3_BASE_TREE char_literal457_tree;
    pANTLR3_BASE_TREE string_literal458_tree;
    pANTLR3_BASE_TREE string_literal459_tree;
    pANTLR3_BASE_TREE string_literal460_tree;
    pANTLR3_BASE_TREE string_literal461_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;

    /* Initialize rule variables
     */
    relationalOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(78)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal456       = NULL;
    char_literal457       = NULL;
    string_literal458       = NULL;
    string_literal459       = NULL;
    string_literal460       = NULL;
    string_literal461       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal456_tree   = NULL;
    char_literal457_tree   = NULL;
    string_literal458_tree   = NULL;
    string_literal459_tree   = NULL;
    string_literal460_tree   = NULL;
    string_literal461_tree   = NULL;

    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:497:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) )
            
            ANTLR3_UINT32 alt239;

            alt239=6;

            switch ( LA(1) ) 
            {
            case 182:
            	{
            		alt239=1;
            	}
                break;
            case 183:
            	{
            		alt239=2;
            	}
                break;
            case 184:
            	{
            		alt239=3;
            	}
                break;
            case 185:
            	{
            		alt239=4;
            	}
                break;
            case 186:
            	{
            		alt239=5;
            	}
                break;
            case 142:
            	{
            		alt239=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 239;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt239) 
            {
        	case 1:
        	    // .//Emerson.g:497:3: '<'
        	    {
        	        char_literal456 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_relationalOps4229); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal456, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 497:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:497:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:498:3: '>'
        	    {
        	        char_literal457 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_relationalOps4240); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal457, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 498:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:498:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:499:3: '<='
        	    {
        	        string_literal458 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_relationalOps4251); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal458, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 499:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:499:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:500:3: '>='
        	    {
        	        string_literal459 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_relationalOps4261); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal459, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 500:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:500:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:501:3: 'instanceof'
        	    {
        	        string_literal460 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_relationalOps4271); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, string_literal460, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 501:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:501:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:502:3: 'in'
        	    {
        	        string_literal461 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_relationalOps4281); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal461, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 502:16: -> ^( IN )
        	        	{
        	        	    // .//Emerson.g:502:19: ^( IN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IN, (pANTLR3_UINT8)"IN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_142 != NULL) stream_142->free(stream_142);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(78, relationalOps_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//Emerson.g:505:1: relationalExpression : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* ;
 */
static EmersonParser_relationalExpression_return
relationalExpression(pEmersonParser ctx)
{   
    EmersonParser_relationalExpression_return retval;
    ANTLR3_UINT32 relationalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM463;
    pANTLR3_COMMON_TOKEN    LTERM465;
    EmersonParser_shiftExpression_return shiftExpression462;
    #undef	RETURN_TYPE_shiftExpression462
    #define	RETURN_TYPE_shiftExpression462 EmersonParser_shiftExpression_return

    EmersonParser_relationalOps_return relationalOps464;
    #undef	RETURN_TYPE_relationalOps464
    #define	RETURN_TYPE_relationalOps464 EmersonParser_relationalOps_return

    EmersonParser_shiftExpression_return shiftExpression466;
    #undef	RETURN_TYPE_shiftExpression466
    #define	RETURN_TYPE_shiftExpression466 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM463_tree;
    pANTLR3_BASE_TREE LTERM465_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOps;
    /* Initialize rule variables
     */
    relationalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(79)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM463       = NULL;
    LTERM465       = NULL;
    shiftExpression462.tree = NULL;

    relationalOps464.tree = NULL;

    shiftExpression466.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM463_tree   = NULL;
    LTERM465_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }
    stream_relationalOps   = NULL;
    #define CREATE_stream_relationalOps  if (stream_relationalOps == NULL) {stream_relationalOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:506:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* )
        // .//Emerson.g:506:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
        {
            // .//Emerson.g:506:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:506:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4306);
                shiftExpression462=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression462.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 506:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:506:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*

            for (;;)
            {
                int alt242=2;
                alt242 = cdfa242.predict(ctx, RECOGNIZER, ISTREAM, &cdfa242);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt242) 
                {
            	case 1:
            	    // .//Emerson.g:506:42: ( LTERM )* relationalOps ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:506:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt240=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA240_0 = LA(1);
            	                if ( (LA240_0 == LTERM) ) 
            	                {
            	                    alt240=1;
            	                }

            	            }
            	            switch (alt240) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM463 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4314); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM463, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop240;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop240: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression4317);
            	        relationalOps464=relationalOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOps; stream_relationalOps->add(stream_relationalOps, relationalOps464.tree, NULL); }

            	        // .//Emerson.g:506:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt241=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA241_0 = LA(1);
            	                if ( (LA241_0 == LTERM) ) 
            	                {
            	                    alt241=1;
            	                }

            	            }
            	            switch (alt241) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM465 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4319); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM465, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop241;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop241: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4322);
            	        shiftExpression466=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression466.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpression, shiftExpression, relationalOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 506:86: -> ^( relationalOps $relationalExpression shiftExpression )
            	        	{
            	        	    // .//Emerson.g:506:89: ^( relationalOps $relationalExpression shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOps == NULL ? NULL : stream_relationalOps->nextNode(stream_relationalOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop242;	/* break out of the loop */
            	    break;
                }
            }
            loop242: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
        if (stream_relationalOps != NULL) stream_relationalOps->free(stream_relationalOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(79, relationalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//Emerson.g:509:1: relationalOpsNoIn : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) );
 */
static EmersonParser_relationalOpsNoIn_return
relationalOpsNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalOpsNoIn_return retval;
    ANTLR3_UINT32 relationalOpsNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal467;
    pANTLR3_COMMON_TOKEN    char_literal468;
    pANTLR3_COMMON_TOKEN    string_literal469;
    pANTLR3_COMMON_TOKEN    string_literal470;
    pANTLR3_COMMON_TOKEN    string_literal471;

    pANTLR3_BASE_TREE char_literal467_tree;
    pANTLR3_BASE_TREE char_literal468_tree;
    pANTLR3_BASE_TREE string_literal469_tree;
    pANTLR3_BASE_TREE string_literal470_tree;
    pANTLR3_BASE_TREE string_literal471_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;

    /* Initialize rule variables
     */
    relationalOpsNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(80)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal467       = NULL;
    char_literal468       = NULL;
    string_literal469       = NULL;
    string_literal470       = NULL;
    string_literal471       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal467_tree   = NULL;
    char_literal468_tree   = NULL;
    string_literal469_tree   = NULL;
    string_literal470_tree   = NULL;
    string_literal471_tree   = NULL;

    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:510:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) )
            
            ANTLR3_UINT32 alt243;

            alt243=5;

            switch ( LA(1) ) 
            {
            case 182:
            	{
            		alt243=1;
            	}
                break;
            case 183:
            	{
            		alt243=2;
            	}
                break;
            case 184:
            	{
            		alt243=3;
            	}
                break;
            case 185:
            	{
            		alt243=4;
            	}
                break;
            case 186:
            	{
            		alt243=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 243;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt243) 
            {
        	case 1:
        	    // .//Emerson.g:510:3: '<'
        	    {
        	        char_literal467 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_relationalOpsNoIn4346); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal467, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 510:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:510:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:511:3: '>'
        	    {
        	        char_literal468 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_relationalOpsNoIn4357); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal468, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 511:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:511:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:512:3: '<='
        	    {
        	        string_literal469 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_relationalOpsNoIn4368); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal469, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 512:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:512:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:513:3: '>='
        	    {
        	        string_literal470 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_relationalOpsNoIn4378); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal470, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 513:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:513:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:514:3: 'instanceof'
        	    {
        	        string_literal471 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_relationalOpsNoIn4388); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, string_literal471, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 514:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:514:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_186 != NULL) stream_186->free(stream_186);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(80, relationalOpsNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//Emerson.g:517:1: relationalExpressionNoIn : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* ;
 */
static EmersonParser_relationalExpressionNoIn_return
relationalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalExpressionNoIn_return retval;
    ANTLR3_UINT32 relationalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM473;
    pANTLR3_COMMON_TOKEN    LTERM475;
    EmersonParser_shiftExpression_return shiftExpression472;
    #undef	RETURN_TYPE_shiftExpression472
    #define	RETURN_TYPE_shiftExpression472 EmersonParser_shiftExpression_return

    EmersonParser_relationalOpsNoIn_return relationalOpsNoIn474;
    #undef	RETURN_TYPE_relationalOpsNoIn474
    #define	RETURN_TYPE_relationalOpsNoIn474 EmersonParser_relationalOpsNoIn_return

    EmersonParser_shiftExpression_return shiftExpression476;
    #undef	RETURN_TYPE_shiftExpression476
    #define	RETURN_TYPE_shiftExpression476 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM473_tree;
    pANTLR3_BASE_TREE LTERM475_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOpsNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    /* Initialize rule variables
     */
    relationalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(81)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM473       = NULL;
    LTERM475       = NULL;
    shiftExpression472.tree = NULL;

    relationalOpsNoIn474.tree = NULL;

    shiftExpression476.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM473_tree   = NULL;
    LTERM475_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalOpsNoIn   = NULL;
    #define CREATE_stream_relationalOpsNoIn  if (stream_relationalOpsNoIn == NULL) {stream_relationalOpsNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOpsNoIn"); }
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:518:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* )
        // .//Emerson.g:518:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
        {
            // .//Emerson.g:518:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:518:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4405);
                shiftExpression472=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression472.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 518:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:518:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*

            for (;;)
            {
                int alt246=2;
                alt246 = cdfa246.predict(ctx, RECOGNIZER, ISTREAM, &cdfa246);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt246) 
                {
            	case 1:
            	    // .//Emerson.g:518:42: ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:518:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt244=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA244_0 = LA(1);
            	                if ( (LA244_0 == LTERM) ) 
            	                {
            	                    alt244=1;
            	                }

            	            }
            	            switch (alt244) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM473 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4413); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM473, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop244;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop244: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4416);
            	        relationalOpsNoIn474=relationalOpsNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOpsNoIn; stream_relationalOpsNoIn->add(stream_relationalOpsNoIn, relationalOpsNoIn474.tree, NULL); }

            	        // .//Emerson.g:518:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt245=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA245_0 = LA(1);
            	                if ( (LA245_0 == LTERM) ) 
            	                {
            	                    alt245=1;
            	                }

            	            }
            	            switch (alt245) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM475 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4418); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM475, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop245;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop245: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4421);
            	        shiftExpression476=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression476.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : shiftExpression, relationalExpressionNoIn, relationalOpsNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 518:90: -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	{
            	        	    // .//Emerson.g:518:93: ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOpsNoIn == NULL ? NULL : stream_relationalOpsNoIn->nextNode(stream_relationalOpsNoIn), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop246;	/* break out of the loop */
            	    break;
                }
            }
            loop246: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalOpsNoIn != NULL) stream_relationalOpsNoIn->free(stream_relationalOpsNoIn);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(81, relationalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start shiftOps
 * .//Emerson.g:521:1: shiftOps : ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) );
 */
static EmersonParser_shiftOps_return
shiftOps(pEmersonParser ctx)
{   
    EmersonParser_shiftOps_return retval;
    ANTLR3_UINT32 shiftOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal477;
    pANTLR3_COMMON_TOKEN    string_literal478;
    pANTLR3_COMMON_TOKEN    string_literal479;

    pANTLR3_BASE_TREE string_literal477_tree;
    pANTLR3_BASE_TREE string_literal478_tree;
    pANTLR3_BASE_TREE string_literal479_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;

    /* Initialize rule variables
     */
    shiftOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(82)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal477       = NULL;
    string_literal478       = NULL;
    string_literal479       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal477_tree   = NULL;
    string_literal478_tree   = NULL;
    string_literal479_tree   = NULL;

    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:522:1: ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) )
            
            ANTLR3_UINT32 alt247;

            alt247=3;

            switch ( LA(1) ) 
            {
            case 187:
            	{
            		alt247=1;
            	}
                break;
            case 188:
            	{
            		alt247=2;
            	}
                break;
            case 189:
            	{
            		alt247=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 247;
                EXCEPTION->state        = 0;


                goto ruleshiftOpsEx;
            }

            switch (alt247) 
            {
        	case 1:
        	    // .//Emerson.g:522:2: '<<'
        	    {
        	        string_literal477 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_shiftOps4444); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, string_literal477, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 522:7: -> ^( LEFT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:522:10: ^( LEFT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT, (pANTLR3_UINT8)"LEFT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:523:3: '>>'
        	    {
        	        string_literal478 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_shiftOps4454); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, string_literal478, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 523:7: -> ^( RIGHT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:523:10: ^( RIGHT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT, (pANTLR3_UINT8)"RIGHT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:524:3: '>>>'
        	    {
        	        string_literal479 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_shiftOps4463); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, string_literal479, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 524:9: -> ^( TRIPLE_SHIFT )
        	        	{
        	        	    // .//Emerson.g:524:12: ^( TRIPLE_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT, (pANTLR3_UINT8)"TRIPLE_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftOpsEx; /* Prevent compiler warnings */
    ruleshiftOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_187 != NULL) stream_187->free(stream_187);
        if (stream_189 != NULL) stream_189->free(stream_189);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(82, shiftOps_StartIndex); }
    return retval;
}
/* $ANTLR end shiftOps */

/** 
 * $ANTLR start shiftExpression
 * .//Emerson.g:527:1: shiftExpression : ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* ;
 */
static EmersonParser_shiftExpression_return
shiftExpression(pEmersonParser ctx)
{   
    EmersonParser_shiftExpression_return retval;
    ANTLR3_UINT32 shiftExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM481;
    pANTLR3_COMMON_TOKEN    LTERM483;
    EmersonParser_additiveExpression_return additiveExpression480;
    #undef	RETURN_TYPE_additiveExpression480
    #define	RETURN_TYPE_additiveExpression480 EmersonParser_additiveExpression_return

    EmersonParser_shiftOps_return shiftOps482;
    #undef	RETURN_TYPE_shiftOps482
    #define	RETURN_TYPE_shiftOps482 EmersonParser_shiftOps_return

    EmersonParser_additiveExpression_return additiveExpression484;
    #undef	RETURN_TYPE_additiveExpression484
    #define	RETURN_TYPE_additiveExpression484 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM481_tree;
    pANTLR3_BASE_TREE LTERM483_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    /* Initialize rule variables
     */
    shiftExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(83)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM481       = NULL;
    LTERM483       = NULL;
    additiveExpression480.tree = NULL;

    shiftOps482.tree = NULL;

    additiveExpression484.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM481_tree   = NULL;
    LTERM483_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftOps   = NULL;
    #define CREATE_stream_shiftOps  if (stream_shiftOps == NULL) {stream_shiftOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftOps"); }
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:528:2: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* )
        // .//Emerson.g:528:4: ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
        {
            // .//Emerson.g:528:4: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:528:5: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4480);
                additiveExpression480=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression480.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 528:24: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:528:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*

            for (;;)
            {
                int alt250=2;
                alt250 = cdfa250.predict(ctx, RECOGNIZER, ISTREAM, &cdfa250);
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt250) 
                {
            	case 1:
            	    // .//Emerson.g:528:47: ( LTERM )* shiftOps ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:528:47: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt248=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA248_0 = LA(1);
            	                if ( (LA248_0 == LTERM) ) 
            	                {
            	                    alt248=1;
            	                }

            	            }
            	            switch (alt248) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM481 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4487); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM481, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop248;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop248: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftOps_in_shiftExpression4490);
            	        shiftOps482=shiftOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftOps; stream_shiftOps->add(stream_shiftOps, shiftOps482.tree, NULL); }

            	        // .//Emerson.g:528:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt249=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA249_0 = LA(1);
            	                if ( (LA249_0 == LTERM) ) 
            	                {
            	                    alt249=1;
            	                }

            	            }
            	            switch (alt249) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM483 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4492); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM483, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop249;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop249: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4495);
            	        additiveExpression484=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression484.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : shiftOps, shiftExpression, additiveExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 528:89: -> ^( shiftOps $shiftExpression additiveExpression )
            	        	{
            	        	    // .//Emerson.g:528:92: ^( shiftOps $shiftExpression additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_shiftOps == NULL ? NULL : stream_shiftOps->nextNode(stream_shiftOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop250;	/* break out of the loop */
            	    break;
                }
            }
            loop250: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftExpressionEx; /* Prevent compiler warnings */
    ruleshiftExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftOps != NULL) stream_shiftOps->free(stream_shiftOps);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(83, shiftExpression_StartIndex); }
    return retval;
}
/* $ANTLR end shiftExpression */

/** 
 * $ANTLR start addOps
 * .//Emerson.g:532:1: addOps : ( '+' -> ^( ADD ) | '-' -> ^( SUB ) );
 */
static EmersonParser_addOps_return
addOps(pEmersonParser ctx)
{   
    EmersonParser_addOps_return retval;
    ANTLR3_UINT32 addOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal485;
    pANTLR3_COMMON_TOKEN    char_literal486;

    pANTLR3_BASE_TREE char_literal485_tree;
    pANTLR3_BASE_TREE char_literal486_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;

    /* Initialize rule variables
     */
    addOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(84)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal485       = NULL;
    char_literal486       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal485_tree   = NULL;
    char_literal486_tree   = NULL;

    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:533:1: ( '+' -> ^( ADD ) | '-' -> ^( SUB ) )
            
            ANTLR3_UINT32 alt251;

            alt251=2;


            {
                int LA251_0 = LA(1);
                if ( (LA251_0 == 190) ) 
                {
                    alt251=1;
                }
                else if ( (LA251_0 == 191) ) 
                {
                    alt251=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 251;
                    EXCEPTION->state        = 0;


                    goto ruleaddOpsEx;
                }
            }
            switch (alt251) 
            {
        	case 1:
        	    // .//Emerson.g:533:3: '+'
        	    {
        	        char_literal485 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_addOps4521); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal485, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 533:7: -> ^( ADD )
        	        	{
        	        	    // .//Emerson.g:533:10: ^( ADD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:534:3: '-'
        	    {
        	        char_literal486 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_addOps4531); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal486, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 534:7: -> ^( SUB )
        	        	{
        	        	    // .//Emerson.g:534:10: ^( SUB )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleaddOpsEx; /* Prevent compiler warnings */
    ruleaddOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(84, addOps_StartIndex); }
    return retval;
}
/* $ANTLR end addOps */

/** 
 * $ANTLR start additiveExpression
 * .//Emerson.g:538:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* ;
 */
static EmersonParser_additiveExpression_return
additiveExpression(pEmersonParser ctx)
{   
    EmersonParser_additiveExpression_return retval;
    ANTLR3_UINT32 additiveExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM488;
    pANTLR3_COMMON_TOKEN    LTERM490;
    EmersonParser_multiplicativeExpression_return multiplicativeExpression487;
    #undef	RETURN_TYPE_multiplicativeExpression487
    #define	RETURN_TYPE_multiplicativeExpression487 EmersonParser_multiplicativeExpression_return

    EmersonParser_addOps_return addOps489;
    #undef	RETURN_TYPE_addOps489
    #define	RETURN_TYPE_addOps489 EmersonParser_addOps_return

    EmersonParser_multiplicativeExpression_return multiplicativeExpression491;
    #undef	RETURN_TYPE_multiplicativeExpression491
    #define	RETURN_TYPE_multiplicativeExpression491 EmersonParser_multiplicativeExpression_return

    pANTLR3_BASE_TREE LTERM488_tree;
    pANTLR3_BASE_TREE LTERM490_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_addOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicativeExpression;
    /* Initialize rule variables
     */
    additiveExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(85)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM488       = NULL;
    LTERM490       = NULL;
    multiplicativeExpression487.tree = NULL;

    addOps489.tree = NULL;

    multiplicativeExpression491.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM488_tree   = NULL;
    LTERM490_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_addOps   = NULL;
    #define CREATE_stream_addOps  if (stream_addOps == NULL) {stream_addOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule addOps"); }
    stream_multiplicativeExpression   = NULL;
    #define CREATE_stream_multiplicativeExpression  if (stream_multiplicativeExpression == NULL) {stream_multiplicativeExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicativeExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:539:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* )
        // .//Emerson.g:539:4: ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
        {
            // .//Emerson.g:539:4: ( multiplicativeExpression -> multiplicativeExpression )
            // .//Emerson.g:539:5: multiplicativeExpression
            {
                FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4549);
                multiplicativeExpression487=multiplicativeExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression487.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : multiplicativeExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 539:30: -> multiplicativeExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:539:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*

            for (;;)
            {
                int alt254=2;
                alt254 = cdfa254.predict(ctx, RECOGNIZER, ISTREAM, &cdfa254);
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt254) 
                {
            	case 1:
            	    // .//Emerson.g:539:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
            	    {

            	        // .//Emerson.g:539:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt252=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA252_0 = LA(1);
            	                if ( (LA252_0 == LTERM) ) 
            	                {
            	                    alt252=1;
            	                }

            	            }
            	            switch (alt252) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM488 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4556); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM488, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop252;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop252: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_addOps_in_additiveExpression4559);
            	        addOps489=addOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_addOps; stream_addOps->add(stream_addOps, addOps489.tree, NULL); }

            	        // .//Emerson.g:539:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt253=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA253_0 = LA(1);
            	                if ( (LA253_0 == LTERM) ) 
            	                {
            	                    alt253=1;
            	                }

            	            }
            	            switch (alt253) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM490 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4561); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM490, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop253;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop253: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4564);
            	        multiplicativeExpression491=multiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression491.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : additiveExpression, addOps, multiplicativeExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 539:105: -> ^( addOps $additiveExpression multiplicativeExpression )
            	        	{
            	        	    // .//Emerson.g:539:108: ^( addOps $additiveExpression multiplicativeExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_addOps == NULL ? NULL : stream_addOps->nextNode(stream_addOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop254;	/* break out of the loop */
            	    break;
                }
            }
            loop254: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_addOps != NULL) stream_addOps->free(stream_addOps);
        if (stream_multiplicativeExpression != NULL) stream_multiplicativeExpression->free(stream_multiplicativeExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(85, additiveExpression_StartIndex); }
    return retval;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multOps
 * .//Emerson.g:542:1: multOps : ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) );
 */
static EmersonParser_multOps_return
multOps(pEmersonParser ctx)
{   
    EmersonParser_multOps_return retval;
    ANTLR3_UINT32 multOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal492;
    pANTLR3_COMMON_TOKEN    char_literal493;
    pANTLR3_COMMON_TOKEN    char_literal494;

    pANTLR3_BASE_TREE char_literal492_tree;
    pANTLR3_BASE_TREE char_literal493_tree;
    pANTLR3_BASE_TREE char_literal494_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    multOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(86)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal492       = NULL;
    char_literal493       = NULL;
    char_literal494       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal492_tree   = NULL;
    char_literal493_tree   = NULL;
    char_literal494_tree   = NULL;

    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:543:1: ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) )
            
            ANTLR3_UINT32 alt255;

            alt255=3;

            switch ( LA(1) ) 
            {
            case 192:
            	{
            		alt255=1;
            	}
                break;
            case 193:
            	{
            		alt255=2;
            	}
                break;
            case 194:
            	{
            		alt255=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 255;
                EXCEPTION->state        = 0;


                goto rulemultOpsEx;
            }

            switch (alt255) 
            {
        	case 1:
        	    // .//Emerson.g:543:3: '*'
        	    {
        	        char_literal492 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_multOps4589); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal492, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 543:7: -> ^( MULT )
        	        	{
        	        	    // .//Emerson.g:543:10: ^( MULT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT, (pANTLR3_UINT8)"MULT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:544:3: '/'
        	    {
        	        char_literal493 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_multOps4599); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal493, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 544:7: -> ^( DIV )
        	        	{
        	        	    // .//Emerson.g:544:10: ^( DIV )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:545:3: '%'
        	    {
        	        char_literal494 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_multOps4609); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal494, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 545:7: -> ^( MOD )
        	        	{
        	        	    // .//Emerson.g:545:10: ^( MOD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultOpsEx; /* Prevent compiler warnings */
    rulemultOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(86, multOps_StartIndex); }
    return retval;
}
/* $ANTLR end multOps */

/** 
 * $ANTLR start multiplicativeExpression
 * .//Emerson.g:548:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* ;
 */
static EmersonParser_multiplicativeExpression_return
multiplicativeExpression(pEmersonParser ctx)
{   
    EmersonParser_multiplicativeExpression_return retval;
    ANTLR3_UINT32 multiplicativeExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM496;
    pANTLR3_COMMON_TOKEN    LTERM498;
    EmersonParser_unaryExpression_return unaryExpression495;
    #undef	RETURN_TYPE_unaryExpression495
    #define	RETURN_TYPE_unaryExpression495 EmersonParser_unaryExpression_return

    EmersonParser_multOps_return multOps497;
    #undef	RETURN_TYPE_multOps497
    #define	RETURN_TYPE_multOps497 EmersonParser_multOps_return

    EmersonParser_unaryExpression_return unaryExpression499;
    #undef	RETURN_TYPE_unaryExpression499
    #define	RETURN_TYPE_unaryExpression499 EmersonParser_unaryExpression_return

    pANTLR3_BASE_TREE LTERM496_tree;
    pANTLR3_BASE_TREE LTERM498_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    /* Initialize rule variables
     */
    multiplicativeExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(87)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM496       = NULL;
    LTERM498       = NULL;
    unaryExpression495.tree = NULL;

    multOps497.tree = NULL;

    unaryExpression499.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM496_tree   = NULL;
    LTERM498_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_multOps   = NULL;
    #define CREATE_stream_multOps  if (stream_multOps == NULL) {stream_multOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multOps"); }
    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:549:2: ( ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* )
        // .//Emerson.g:549:4: ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
        {
            // .//Emerson.g:549:4: ( unaryExpression -> unaryExpression )
            // .//Emerson.g:549:5: unaryExpression
            {
                FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4626);
                unaryExpression495=unaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression495.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : unaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 549:21: -> unaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:549:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*

            for (;;)
            {
                int alt258=2;
                alt258 = cdfa258.predict(ctx, RECOGNIZER, ISTREAM, &cdfa258);
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt258) 
                {
            	case 1:
            	    // .//Emerson.g:549:42: ( LTERM )* multOps ( LTERM )* unaryExpression
            	    {

            	        // .//Emerson.g:549:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt256=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA256_0 = LA(1);
            	                if ( (LA256_0 == LTERM) ) 
            	                {
            	                    alt256=1;
            	                }

            	            }
            	            switch (alt256) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM496 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4634); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM496, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop256;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop256: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multOps_in_multiplicativeExpression4637);
            	        multOps497=multOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multOps; stream_multOps->add(stream_multOps, multOps497.tree, NULL); }

            	        // .//Emerson.g:549:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt257=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA257_0 = LA(1);
            	                if ( (LA257_0 == LTERM) ) 
            	                {
            	                    alt257=1;
            	                }

            	            }
            	            switch (alt257) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM498 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4639); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM498, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop257;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop257: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4642);
            	        unaryExpression499=unaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression499.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : multiplicativeExpression, multOps, unaryExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 549:80: -> ^( multOps $multiplicativeExpression unaryExpression )
            	        	{
            	        	    // .//Emerson.g:549:83: ^( multOps $multiplicativeExpression unaryExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_multOps == NULL ? NULL : stream_multOps->nextNode(stream_multOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop258;	/* break out of the loop */
            	    break;
                }
            }
            loop258: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_multOps != NULL) stream_multOps->free(stream_multOps);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(87, multiplicativeExpression_StartIndex); }
    return retval;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start postfixExpression
 * .//Emerson.g:553:1: postfixExpression : ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )? ;
 */
static EmersonParser_postfixExpression_return
postfixExpression(pEmersonParser ctx)
{   
    EmersonParser_postfixExpression_return retval;
    ANTLR3_UINT32 postfixExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal501;
    pANTLR3_COMMON_TOKEN    string_literal502;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression500;
    #undef	RETURN_TYPE_leftHandSideExpression500
    #define	RETURN_TYPE_leftHandSideExpression500 EmersonParser_leftHandSideExpression_return

    pANTLR3_BASE_TREE string_literal501_tree;
    pANTLR3_BASE_TREE string_literal502_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    postfixExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(88)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal501       = NULL;
    string_literal502       = NULL;
    leftHandSideExpression500.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal501_tree   = NULL;
    string_literal502_tree   = NULL;

    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:554:2: ( ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )? )
        // .//Emerson.g:554:3: ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
        {
            // .//Emerson.g:554:3: ( leftHandSideExpression -> leftHandSideExpression )
            // .//Emerson.g:554:4: leftHandSideExpression
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression4667);
                leftHandSideExpression500=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulepostfixExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression500.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : leftHandSideExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 554:27: -> leftHandSideExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:554:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
            {
                int alt259=3;
                alt259 = cdfa259.predict(ctx, RECOGNIZER, ISTREAM, &cdfa259);
                if  (HASEXCEPTION())
                {
                    goto rulepostfixExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt259) 
                {
            	case 1:
            	    // .//Emerson.g:554:55: ( '--' -> $postfixExpression '--' )
            	    {
            	        // .//Emerson.g:554:55: ( '--' -> $postfixExpression '--' )
            	        // .//Emerson.g:554:56: '--'
            	        {
            	            string_literal501 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_postfixExpression4676); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulepostfixExpressionEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal501, NULL); }


            	             
            	            /* AST REWRITE
            	             * elements          : postfixExpression, 195
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 554:61: -> $postfixExpression '--'
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_195 == NULL ? NULL : stream_195->nextNode(stream_195));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:554:91: ( '++' -> $postfixExpression '++' )
            	    {
            	        // .//Emerson.g:554:91: ( '++' -> $postfixExpression '++' )
            	        // .//Emerson.g:554:92: '++'
            	        {
            	            string_literal502 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_postfixExpression4689); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulepostfixExpressionEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, string_literal502, NULL); }


            	             
            	            /* AST REWRITE
            	             * elements          : 196, postfixExpression
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 554:97: -> $postfixExpression '++'
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_196 == NULL ? NULL : stream_196->nextNode(stream_196));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_196 != NULL) stream_196->free(stream_196);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(88, postfixExpression_StartIndex); }
    return retval;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start unaryOps
 * .//Emerson.g:558:1: unaryOps : ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) );
 */
static EmersonParser_unaryOps_return
unaryOps(pEmersonParser ctx)
{   
    EmersonParser_unaryOps_return retval;
    ANTLR3_UINT32 unaryOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal503;
    pANTLR3_COMMON_TOKEN    string_literal504;
    pANTLR3_COMMON_TOKEN    string_literal505;
    pANTLR3_COMMON_TOKEN    string_literal506;
    pANTLR3_COMMON_TOKEN    string_literal507;
    pANTLR3_COMMON_TOKEN    char_literal508;
    pANTLR3_COMMON_TOKEN    char_literal509;
    pANTLR3_COMMON_TOKEN    char_literal510;
    pANTLR3_COMMON_TOKEN    char_literal511;

    pANTLR3_BASE_TREE string_literal503_tree;
    pANTLR3_BASE_TREE string_literal504_tree;
    pANTLR3_BASE_TREE string_literal505_tree;
    pANTLR3_BASE_TREE string_literal506_tree;
    pANTLR3_BASE_TREE string_literal507_tree;
    pANTLR3_BASE_TREE char_literal508_tree;
    pANTLR3_BASE_TREE char_literal509_tree;
    pANTLR3_BASE_TREE char_literal510_tree;
    pANTLR3_BASE_TREE char_literal511_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_200;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_201;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;

    /* Initialize rule variables
     */
    unaryOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(89)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal503       = NULL;
    string_literal504       = NULL;
    string_literal505       = NULL;
    string_literal506       = NULL;
    string_literal507       = NULL;
    char_literal508       = NULL;
    char_literal509       = NULL;
    char_literal510       = NULL;
    char_literal511       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal503_tree   = NULL;
    string_literal504_tree   = NULL;
    string_literal505_tree   = NULL;
    string_literal506_tree   = NULL;
    string_literal507_tree   = NULL;
    char_literal508_tree   = NULL;
    char_literal509_tree   = NULL;
    char_literal510_tree   = NULL;
    char_literal511_tree   = NULL;

    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 
    stream_200   = NULL;
    #define CREATE_stream_200  if (stream_200 == NULL) {stream_200 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 200"); } 
    stream_201   = NULL;
    #define CREATE_stream_201  if (stream_201 == NULL) {stream_201 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 201"); } 
    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:559:1: ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) )
            
            ANTLR3_UINT32 alt260;

            alt260=9;

            switch ( LA(1) ) 
            {
            case 197:
            	{
            		alt260=1;
            	}
                break;
            case 198:
            	{
            		alt260=2;
            	}
                break;
            case 199:
            	{
            		alt260=3;
            	}
                break;
            case 196:
            	{
            		alt260=4;
            	}
                break;
            case 195:
            	{
            		alt260=5;
            	}
                break;
            case 190:
            	{
            		alt260=6;
            	}
                break;
            case 191:
            	{
            		alt260=7;
            	}
                break;
            case 200:
            	{
            		alt260=8;
            	}
                break;
            case 201:
            	{
            		alt260=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 260;
                EXCEPTION->state        = 0;


                goto ruleunaryOpsEx;
            }

            switch (alt260) 
            {
        	case 1:
        	    // .//Emerson.g:559:2: 'delete'
        	    {
        	        string_literal503 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_unaryOps4709); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, string_literal503, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 559:11: -> ^( DELETE )
        	        	{
        	        	    // .//Emerson.g:559:14: ^( DELETE )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELETE, (pANTLR3_UINT8)"DELETE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:560:3: 'void'
        	    {
        	        string_literal504 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_unaryOps4719); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, string_literal504, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 560:10: -> ^( VOID )
        	        	{
        	        	    // .//Emerson.g:560:13: ^( VOID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VOID, (pANTLR3_UINT8)"VOID"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:561:3: 'typeof'
        	    {
        	        string_literal505 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_unaryOps4729); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, string_literal505, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 561:12: -> ^( TYPEOF )
        	        	{
        	        	    // .//Emerson.g:561:15: ^( TYPEOF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TYPEOF, (pANTLR3_UINT8)"TYPEOF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:562:3: '++'
        	    {
        	        string_literal506 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_unaryOps4739); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, string_literal506, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 562:9: -> ^( PLUSPLUS )
        	        	{
        	        	    // .//Emerson.g:562:12: ^( PLUSPLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:563:3: '--'
        	    {
        	        string_literal507 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_unaryOps4750); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal507, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 563:9: -> ^( MINUSMINUS )
        	        	{
        	        	    // .//Emerson.g:563:12: ^( MINUSMINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:564:3: '+'
        	    {
        	        char_literal508 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_unaryOps4761); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal508, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 564:9: -> ^( UNARY_PLUS )
        	        	{
        	        	    // .//Emerson.g:564:12: ^( UNARY_PLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_PLUS, (pANTLR3_UINT8)"UNARY_PLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:565:3: '-'
        	    {
        	        char_literal509 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_unaryOps4773); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal509, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 565:9: -> ^( UNARY_MINUS )
        	        	{
        	        	    // .//Emerson.g:565:12: ^( UNARY_MINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_MINUS, (pANTLR3_UINT8)"UNARY_MINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:566:3: '~'
        	    {
        	        char_literal510 = (pANTLR3_COMMON_TOKEN) MATCHT(200, &FOLLOW_200_in_unaryOps4785); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_200; stream_200->add(stream_200, char_literal510, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 566:9: -> ^( COMPLEMENT )
        	        	{
        	        	    // .//Emerson.g:566:12: ^( COMPLEMENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMPLEMENT, (pANTLR3_UINT8)"COMPLEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:567:3: '!'
        	    {
        	        char_literal511 = (pANTLR3_COMMON_TOKEN) MATCHT(201, &FOLLOW_201_in_unaryOps4797); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_201; stream_201->add(stream_201, char_literal511, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 567:9: -> ^( NOT )
        	        	{
        	        	    // .//Emerson.g:567:12: ^( NOT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_199 != NULL) stream_199->free(stream_199);
        if (stream_200 != NULL) stream_200->free(stream_200);
        if (stream_201 != NULL) stream_201->free(stream_201);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_196 != NULL) stream_196->free(stream_196);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(89, unaryOps_StartIndex); }
    return retval;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//Emerson.g:571:1: unaryExpression : ( postfixExpression -> ^( POSTEXPR postfixExpression ) | unaryOps e= unaryExpression -> ^( unaryOps $e) );
 */
static EmersonParser_unaryExpression_return
unaryExpression(pEmersonParser ctx)
{   
    EmersonParser_unaryExpression_return retval;
    ANTLR3_UINT32 unaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_unaryExpression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e EmersonParser_unaryExpression_return

    EmersonParser_postfixExpression_return postfixExpression512;
    #undef	RETURN_TYPE_postfixExpression512
    #define	RETURN_TYPE_postfixExpression512 EmersonParser_postfixExpression_return

    EmersonParser_unaryOps_return unaryOps513;
    #undef	RETURN_TYPE_unaryOps513
    #define	RETURN_TYPE_unaryOps513 EmersonParser_unaryOps_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_postfixExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryOps;
    /* Initialize rule variables
     */
    unaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(90)) )
    {
    	retval.start = 0;

        return retval; 
    }
    e.tree = NULL;

    postfixExpression512.tree = NULL;

    unaryOps513.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }
    stream_postfixExpression   = NULL;
    #define CREATE_stream_postfixExpression  if (stream_postfixExpression == NULL) {stream_postfixExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule postfixExpression"); }
    stream_unaryOps   = NULL;
    #define CREATE_stream_unaryOps  if (stream_unaryOps == NULL) {stream_unaryOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryOps"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:572:2: ( postfixExpression -> ^( POSTEXPR postfixExpression ) | unaryOps e= unaryExpression -> ^( unaryOps $e) )
            
            ANTLR3_UINT32 alt261;

            alt261=2;


            {
                int LA261_0 = LA(1);
                if ( (((LA261_0 >= Identifier) && (LA261_0 <= NumericLiteral)) || ((LA261_0 >= 125) && (LA261_0 <= 126)) || LA261_0 == 129 || ((LA261_0 >= 157) && (LA261_0 <= 158)) || ((LA261_0 >= 202) && (LA261_0 <= 205))) ) 
                {
                    alt261=1;
                }
                else if ( (((LA261_0 >= 190) && (LA261_0 <= 191)) || ((LA261_0 >= 195) && (LA261_0 <= 201))) ) 
                {
                    alt261=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 261;
                    EXCEPTION->state        = 0;


                    goto ruleunaryExpressionEx;
                }
            }
            switch (alt261) 
            {
        	case 1:
        	    // .//Emerson.g:572:4: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression4816);
        	        postfixExpression512=postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_postfixExpression; stream_postfixExpression->add(stream_postfixExpression, postfixExpression512.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : postfixExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 572:22: -> ^( POSTEXPR postfixExpression )
        	        	{
        	        	    // .//Emerson.g:572:25: ^( POSTEXPR postfixExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POSTEXPR, (pANTLR3_UINT8)"POSTEXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_postfixExpression == NULL ? NULL : stream_postfixExpression->nextTree(stream_postfixExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:573:4: unaryOps e= unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryOps_in_unaryExpression4829);
        	        unaryOps513=unaryOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryOps; stream_unaryOps->add(stream_unaryOps, unaryOps513.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression4833);
        	        e=unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : unaryOps, e
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 573:31: -> ^( unaryOps $e)
        	        	{
        	        	    // .//Emerson.g:573:34: ^( unaryOps $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_unaryOps == NULL ? NULL : stream_unaryOps->nextNode(stream_unaryOps), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
        if (stream_postfixExpression != NULL) stream_postfixExpression->free(stream_postfixExpression);
        if (stream_unaryOps != NULL) stream_unaryOps->free(stream_unaryOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(90, unaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start primaryExpression
 * .//Emerson.g:577:1: primaryExpression : ( 'this' | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static EmersonParser_primaryExpression_return
primaryExpression(pEmersonParser ctx)
{   
    EmersonParser_primaryExpression_return retval;
    ANTLR3_UINT32 primaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal514;
    pANTLR3_COMMON_TOKEN    Identifier515;
    pANTLR3_COMMON_TOKEN    char_literal519;
    pANTLR3_COMMON_TOKEN    LTERM520;
    pANTLR3_COMMON_TOKEN    LTERM522;
    pANTLR3_COMMON_TOKEN    char_literal523;
    EmersonParser_literal_return literal516;
    #undef	RETURN_TYPE_literal516
    #define	RETURN_TYPE_literal516 EmersonParser_literal_return

    EmersonParser_arrayLiteral_return arrayLiteral517;
    #undef	RETURN_TYPE_arrayLiteral517
    #define	RETURN_TYPE_arrayLiteral517 EmersonParser_arrayLiteral_return

    EmersonParser_objectLiteral_return objectLiteral518;
    #undef	RETURN_TYPE_objectLiteral518
    #define	RETURN_TYPE_objectLiteral518 EmersonParser_objectLiteral_return

    EmersonParser_expression_return expression521;
    #undef	RETURN_TYPE_expression521
    #define	RETURN_TYPE_expression521 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal514_tree;
    pANTLR3_BASE_TREE Identifier515_tree;
    pANTLR3_BASE_TREE char_literal519_tree;
    pANTLR3_BASE_TREE LTERM520_tree;
    pANTLR3_BASE_TREE LTERM522_tree;
    pANTLR3_BASE_TREE char_literal523_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    primaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(91)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal514       = NULL;
    Identifier515       = NULL;
    char_literal519       = NULL;
    LTERM520       = NULL;
    LTERM522       = NULL;
    char_literal523       = NULL;
    literal516.tree = NULL;

    arrayLiteral517.tree = NULL;

    objectLiteral518.tree = NULL;

    expression521.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal514_tree   = NULL;
    Identifier515_tree   = NULL;
    char_literal519_tree   = NULL;
    LTERM520_tree   = NULL;
    LTERM522_tree   = NULL;
    char_literal523_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:578:2: ( 'this' | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) )
            
            ANTLR3_UINT32 alt264;

            alt264=6;

            switch ( LA(1) ) 
            {
            case 202:
            	{
            		alt264=1;
            	}
                break;
            case Identifier:
            	{
            		alt264=2;
            	}
                break;
            case StringLiteral:
            case NumericLiteral:
            case 203:
            case 204:
            case 205:
            	{
            		alt264=3;
            	}
                break;
            case 158:
            	{
            		alt264=4;
            	}
                break;
            case 129:
            	{
            		alt264=5;
            	}
                break;
            case 126:
            	{
            		alt264=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 264;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt264) 
            {
        	case 1:
        	    // .//Emerson.g:578:4: 'this'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal514 = (pANTLR3_COMMON_TOKEN) MATCHT(202, &FOLLOW_202_in_primaryExpression4855); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal514_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal514));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal514_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:579:4: Identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Identifier515 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression4860); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Identifier515_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Identifier515));
        	        ADAPTOR->addChild(ADAPTOR, root_0, Identifier515_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:580:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression4865);
        	        literal516=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal516.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:581:4: arrayLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression4870);
        	        arrayLiteral517=arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arrayLiteral517.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:582:4: objectLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression4875);
        	        objectLiteral518=objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, objectLiteral518.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:583:4: '(' ( LTERM )* expression ( LTERM )* ')'
        	    {
        	        char_literal519 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_primaryExpression4880); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal519, NULL); }


        	        // .//Emerson.g:583:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt262=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA262_0 = LA(1);
        	                if ( (LA262_0 == LTERM) ) 
        	                {
        	                    alt262=1;
        	                }

        	            }
        	            switch (alt262) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM520 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression4882); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM520, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop262;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop262: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression4885);
        	        expression521=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression521.tree, NULL); }

        	        // .//Emerson.g:583:26: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt263=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA263_0 = LA(1);
        	                if ( (LA263_0 == LTERM) ) 
        	                {
        	                    alt263=1;
        	                }

        	            }
        	            switch (alt263) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM522 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression4887); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM522, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop263;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop263: ; /* Jump out to here if this rule does not match */

        	        char_literal523 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_primaryExpression4890); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal523, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 583:37: -> ^( PAREN expression )
        	        	{
        	        	    // .//Emerson.g:583:40: ^( PAREN expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAREN, (pANTLR3_UINT8)"PAREN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(91, primaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//Emerson.g:587:1: arrayLiteral : ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) );
 */
static EmersonParser_arrayLiteral_return
arrayLiteral(pEmersonParser ctx)
{   
    EmersonParser_arrayLiteral_return retval;
    ANTLR3_UINT32 arrayLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal524;
    pANTLR3_COMMON_TOKEN    LTERM525;
    pANTLR3_COMMON_TOKEN    LTERM527;
    pANTLR3_COMMON_TOKEN    char_literal528;
    pANTLR3_COMMON_TOKEN    char_literal529;
    pANTLR3_COMMON_TOKEN    LTERM530;
    pANTLR3_COMMON_TOKEN    char_literal531;
    pANTLR3_COMMON_TOKEN    LTERM532;
    pANTLR3_COMMON_TOKEN    LTERM533;
    pANTLR3_COMMON_TOKEN    char_literal534;
    EmersonParser_assignmentExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression526;
    #undef	RETURN_TYPE_assignmentExpression526
    #define	RETURN_TYPE_assignmentExpression526 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal524_tree;
    pANTLR3_BASE_TREE LTERM525_tree;
    pANTLR3_BASE_TREE LTERM527_tree;
    pANTLR3_BASE_TREE char_literal528_tree;
    pANTLR3_BASE_TREE char_literal529_tree;
    pANTLR3_BASE_TREE LTERM530_tree;
    pANTLR3_BASE_TREE char_literal531_tree;
    pANTLR3_BASE_TREE LTERM532_tree;
    pANTLR3_BASE_TREE LTERM533_tree;
    pANTLR3_BASE_TREE char_literal534_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arrayLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(92)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal524       = NULL;
    LTERM525       = NULL;
    LTERM527       = NULL;
    char_literal528       = NULL;
    char_literal529       = NULL;
    LTERM530       = NULL;
    char_literal531       = NULL;
    LTERM532       = NULL;
    LTERM533       = NULL;
    char_literal534       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    assignmentExpression526.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal524_tree   = NULL;
    LTERM525_tree   = NULL;
    LTERM527_tree   = NULL;
    char_literal528_tree   = NULL;
    char_literal529_tree   = NULL;
    LTERM530_tree   = NULL;
    char_literal531_tree   = NULL;
    LTERM532_tree   = NULL;
    LTERM533_tree   = NULL;
    char_literal534_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:588:3: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt272;

            alt272=2;


            {
                int LA272_0 = LA(1);
                if ( (LA272_0 == 158) ) 
                {

                    {
                        int LA272_1 = LA(2);
                        if ( (synpred325_Emerson(ctx)) ) 
                        {
                            alt272=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt272=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 272;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 272;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt272) 
            {
        	case 1:
        	    // .//Emerson.g:588:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
        	    {
        	        char_literal524 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_arrayLiteral4914); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal524, NULL); }


        	        // .//Emerson.g:588:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt265=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA265_0 = LA(1);
        	                if ( (LA265_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA265_2 = LA(2);
        	                        if ( (synpred322_Emerson(ctx)) ) 
        	                        {
        	                            alt265=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt265) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM525 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4916); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM525, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop265;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop265: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:588:16: ( assignmentExpression )?
        	        {
        	            int alt266=2;
        	            {
        	                int LA266_0 = LA(1);
        	                if ( (((LA266_0 >= Identifier) && (LA266_0 <= NumericLiteral)) || ((LA266_0 >= 125) && (LA266_0 <= 126)) || LA266_0 == 129 || ((LA266_0 >= 157) && (LA266_0 <= 158)) || ((LA266_0 >= 190) && (LA266_0 <= 191)) || ((LA266_0 >= 195) && (LA266_0 <= 205))) ) 
        	                {
        	                    alt266=1;
        	                }
        	            }
        	            switch (alt266) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:588:17: assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4920);
        	        	        assignmentExpression526=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression526.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:588:40: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt267=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA267_0 = LA(1);
        	                if ( (LA267_0 == LTERM) ) 
        	                {
        	                    alt267=1;
        	                }

        	            }
        	            switch (alt267) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM527 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4924); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM527, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop267;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop267: ; /* Jump out to here if this rule does not match */

        	        char_literal528 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_arrayLiteral4927); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal528, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 588:51: -> ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	{
        	        	    // .//Emerson.g:588:54: ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        // .//Emerson.g:588:70: ( assignmentExpression )?
        	        	        {
        	        	        	if ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if ( stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:589:4: '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']'
        	    {
        	        char_literal529 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_arrayLiteral4941); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal529, NULL); }


        	        // .//Emerson.g:589:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt268=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA268_0 = LA(1);
        	                if ( (LA268_0 == LTERM) ) 
        	                {
        	                    alt268=1;
        	                }

        	            }
        	            switch (alt268) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM530 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4943); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM530, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop268;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop268: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4948);
        	        e1=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e1.tree, NULL); }

        	        // .//Emerson.g:589:39: ( ',' ( LTERM )* e2= assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt270=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA270_0 = LA(1);
        	                if ( (LA270_0 == 127) ) 
        	                {
        	                    alt270=1;
        	                }

        	            }
        	            switch (alt270) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:589:40: ',' ( LTERM )* e2= assignmentExpression
        	        	    {
        	        	        char_literal531 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_arrayLiteral4951); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal531, NULL); }


        	        	        // .//Emerson.g:589:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt269=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA269_0 = LA(1);
        	        	                if ( (LA269_0 == LTERM) ) 
        	        	                {
        	        	                    alt269=1;
        	        	                }

        	        	            }
        	        	            switch (alt269) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM532 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4953); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulearrayLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM532, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop269;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop269: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4958);
        	        	        e2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop270;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop270: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:589:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt271=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA271_0 = LA(1);
        	                if ( (LA271_0 == LTERM) ) 
        	                {
        	                    alt271=1;
        	                }

        	            }
        	            switch (alt271) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM533 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4962); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM533, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop271;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop271: ; /* Jump out to here if this rule does not match */

        	        char_literal534 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_arrayLiteral4965); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal534, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 589:88: -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	{
        	        	    // .//Emerson.g:589:91: ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
        	        	        // .//Emerson.g:589:128: ( assignmentExpression )*
        	        	        {
        	        	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(92, arrayLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//Emerson.g:593:1: objectLiteral : ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static EmersonParser_objectLiteral_return
objectLiteral(pEmersonParser ctx)
{   
    EmersonParser_objectLiteral_return retval;
    ANTLR3_UINT32 objectLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal535;
    pANTLR3_COMMON_TOKEN    LTERM536;
    pANTLR3_COMMON_TOKEN    LTERM538;
    pANTLR3_COMMON_TOKEN    char_literal539;
    pANTLR3_COMMON_TOKEN    char_literal540;
    pANTLR3_COMMON_TOKEN    LTERM541;
    pANTLR3_COMMON_TOKEN    char_literal542;
    pANTLR3_COMMON_TOKEN    LTERM543;
    pANTLR3_COMMON_TOKEN    LTERM544;
    pANTLR3_COMMON_TOKEN    char_literal545;
    EmersonParser_propertyNameAndValue_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return propertyNameAndValue537;
    #undef	RETURN_TYPE_propertyNameAndValue537
    #define	RETURN_TYPE_propertyNameAndValue537 EmersonParser_propertyNameAndValue_return

    pANTLR3_BASE_TREE char_literal535_tree;
    pANTLR3_BASE_TREE LTERM536_tree;
    pANTLR3_BASE_TREE LTERM538_tree;
    pANTLR3_BASE_TREE char_literal539_tree;
    pANTLR3_BASE_TREE char_literal540_tree;
    pANTLR3_BASE_TREE LTERM541_tree;
    pANTLR3_BASE_TREE char_literal542_tree;
    pANTLR3_BASE_TREE LTERM543_tree;
    pANTLR3_BASE_TREE LTERM544_tree;
    pANTLR3_BASE_TREE char_literal545_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyNameAndValue;
    /* Initialize rule variables
     */
    objectLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(93)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal535       = NULL;
    LTERM536       = NULL;
    LTERM538       = NULL;
    char_literal539       = NULL;
    char_literal540       = NULL;
    LTERM541       = NULL;
    char_literal542       = NULL;
    LTERM543       = NULL;
    LTERM544       = NULL;
    char_literal545       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    propertyNameAndValue537.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal535_tree   = NULL;
    LTERM536_tree   = NULL;
    LTERM538_tree   = NULL;
    char_literal539_tree   = NULL;
    char_literal540_tree   = NULL;
    LTERM541_tree   = NULL;
    char_literal542_tree   = NULL;
    LTERM543_tree   = NULL;
    LTERM544_tree   = NULL;
    char_literal545_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_propertyNameAndValue   = NULL;
    #define CREATE_stream_propertyNameAndValue  if (stream_propertyNameAndValue == NULL) {stream_propertyNameAndValue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyNameAndValue"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:594:3: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt280;

            alt280=2;


            {
                int LA280_0 = LA(1);
                if ( (LA280_0 == 129) ) 
                {

                    {
                        int LA280_1 = LA(2);
                        if ( (synpred333_Emerson(ctx)) ) 
                        {
                            alt280=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt280=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 280;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 280;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt280) 
            {
        	case 1:
        	    // .//Emerson.g:594:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
        	    {
        	        char_literal535 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_objectLiteral4996); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal535, NULL); }


        	        // .//Emerson.g:594:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt273=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA273_0 = LA(1);
        	                if ( (LA273_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA273_2 = LA(2);
        	                        if ( (synpred330_Emerson(ctx)) ) 
        	                        {
        	                            alt273=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt273) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM536 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4998); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM536, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop273;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop273: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:594:16: ( propertyNameAndValue )?
        	        {
        	            int alt274=2;
        	            {
        	                int LA274_0 = LA(1);
        	                if ( (((LA274_0 >= Identifier) && (LA274_0 <= NumericLiteral))) ) 
        	                {
        	                    alt274=1;
        	                }
        	            }
        	            switch (alt274) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: propertyNameAndValue
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5001);
        	        	        propertyNameAndValue537=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, propertyNameAndValue537.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:594:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt275=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA275_0 = LA(1);
        	                if ( (LA275_0 == LTERM) ) 
        	                {
        	                    alt275=1;
        	                }

        	            }
        	            switch (alt275) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM538 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5004); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM538, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop275;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop275: ; /* Jump out to here if this rule does not match */

        	        char_literal539 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_objectLiteral5007); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal539, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 594:49: -> ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	{
        	        	    // .//Emerson.g:594:52: ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        // .//Emerson.g:594:66: ( propertyNameAndValue )?
        	        	        {
        	        	        	if ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if ( stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:595:4: '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}'
        	    {
        	        char_literal540 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_objectLiteral5021); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal540, NULL); }


        	        // .//Emerson.g:595:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt276=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA276_0 = LA(1);
        	                if ( (LA276_0 == LTERM) ) 
        	                {
        	                    alt276=1;
        	                }

        	            }
        	            switch (alt276) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM541 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5023); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM541, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop276;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop276: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5028);
        	        p1=propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p1.tree, NULL); }

        	        // .//Emerson.g:595:39: ( ',' ( LTERM )* p2= propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt278=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA278_0 = LA(1);
        	                if ( (LA278_0 == 127) ) 
        	                {
        	                    alt278=1;
        	                }

        	            }
        	            switch (alt278) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:595:40: ',' ( LTERM )* p2= propertyNameAndValue
        	        	    {
        	        	        char_literal542 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_objectLiteral5031); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal542, NULL); }


        	        	        // .//Emerson.g:595:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt277=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA277_0 = LA(1);
        	        	                if ( (LA277_0 == LTERM) ) 
        	        	                {
        	        	                    alt277=1;
        	        	                }

        	        	            }
        	        	            switch (alt277) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM543 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5033); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleobjectLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM543, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop277;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop277: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5038);
        	        	        p2=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop278;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop278: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:595:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt279=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA279_0 = LA(1);
        	                if ( (LA279_0 == LTERM) ) 
        	                {
        	                    alt279=1;
        	                }

        	            }
        	            switch (alt279) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM544 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5042); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM544, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop279;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop279: ; /* Jump out to here if this rule does not match */

        	        char_literal545 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_objectLiteral5049); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal545, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue, propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 595:92: -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	{
        	        	    // .//Emerson.g:595:95: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));
        	        	        // .//Emerson.g:595:130: ( propertyNameAndValue )*
        	        	        {
        	        	        	while ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->free(stream_propertyNameAndValue);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(93, objectLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start propertyNameAndValue
 * .//Emerson.g:598:1: propertyNameAndValue : propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) ;
 */
static EmersonParser_propertyNameAndValue_return
propertyNameAndValue(pEmersonParser ctx)
{   
    EmersonParser_propertyNameAndValue_return retval;
    ANTLR3_UINT32 propertyNameAndValue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM547;
    pANTLR3_COMMON_TOKEN    char_literal548;
    pANTLR3_COMMON_TOKEN    LTERM549;
    EmersonParser_propertyName_return propertyName546;
    #undef	RETURN_TYPE_propertyName546
    #define	RETURN_TYPE_propertyName546 EmersonParser_propertyName_return

    EmersonParser_assignmentExpression_return assignmentExpression550;
    #undef	RETURN_TYPE_assignmentExpression550
    #define	RETURN_TYPE_assignmentExpression550 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM547_tree;
    pANTLR3_BASE_TREE char_literal548_tree;
    pANTLR3_BASE_TREE LTERM549_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    propertyNameAndValue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(94)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM547       = NULL;
    char_literal548       = NULL;
    LTERM549       = NULL;
    propertyName546.tree = NULL;

    assignmentExpression550.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM547_tree   = NULL;
    char_literal548_tree   = NULL;
    LTERM549_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:599:2: ( propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) )
        // .//Emerson.g:599:4: propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue5073);
            propertyName546=propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName546.tree, NULL); }

            // .//Emerson.g:599:17: ( LTERM )*

            for (;;)
            {
                int alt281=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA281_0 = LA(1);
                    if ( (LA281_0 == LTERM) ) 
                    {
                        alt281=1;
                    }

                }
                switch (alt281) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM547 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue5075); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM547, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop281;	/* break out of the loop */
            	    break;
                }
            }
            loop281: ; /* Jump out to here if this rule does not match */

            char_literal548 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_propertyNameAndValue5078); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal548, NULL); }


            // .//Emerson.g:599:28: ( LTERM )*

            for (;;)
            {
                int alt282=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA282_0 = LA(1);
                    if ( (LA282_0 == LTERM) ) 
                    {
                        alt282=1;
                    }

                }
                switch (alt282) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM549 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue5080); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM549, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop282;	/* break out of the loop */
            	    break;
                }
            }
            loop282: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_propertyNameAndValue5083);
            assignmentExpression550=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression550.tree, NULL); }

             
            /* AST REWRITE
             * elements          : propertyName, assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 599:56: -> ^( NAME_VALUE propertyName assignmentExpression )
            	{
            	    // .//Emerson.g:599:59: ^( NAME_VALUE propertyName assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE, (pANTLR3_UINT8)"NAME_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(94, propertyNameAndValue_StartIndex); }
    return retval;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start propertyName
 * .//Emerson.g:602:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static EmersonParser_propertyName_return
propertyName(pEmersonParser ctx)
{   
    EmersonParser_propertyName_return retval;
    ANTLR3_UINT32 propertyName_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set551;

    pANTLR3_BASE_TREE set551_tree;

    /* Initialize rule variables
     */
    propertyName_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(95)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set551       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set551_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:603:2: ( Identifier | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set551=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Identifier) && (LA(1) <= NumericLiteral)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set551)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_propertyName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_propertyName0);    goto rulepropertyNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(95, propertyName_StartIndex); }
    return retval;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//Emerson.g:609:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static EmersonParser_literal_return
literal(pEmersonParser ctx)
{   
    EmersonParser_literal_return retval;
    ANTLR3_UINT32 literal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set552;

    pANTLR3_BASE_TREE set552_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(96)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set552       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set552_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:610:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set552=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= StringLiteral) && (LA(1) <= NumericLiteral)) || ((LA(1) >= 203) && (LA(1) <= 205)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set552)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(96, literal_StartIndex); }
    return retval;
}
/* $ANTLR end literal */

// $ANTLR start synpred5_Emerson
static void synpred5_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:139:4: ( functionDeclaration )
    // .//Emerson.g:139:4: functionDeclaration
    {
        FOLLOWPUSH(FOLLOW_functionDeclaration_in_synpred5_Emerson834);
        functionDeclaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred5_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred5_EmersonEx; /* Prevent compiler warnings */
rulesynpred5_EmersonEx: ;

}
// $ANTLR end synpred5_Emerson

// $ANTLR start synpred9_Emerson
static void synpred9_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:149:15: ( LTERM )
    // .//Emerson.g:149:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred9_Emerson901); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred9_EmersonEx; /* Prevent compiler warnings */
rulesynpred9_EmersonEx: ;

}
// $ANTLR end synpred9_Emerson

// $ANTLR start synpred23_Emerson
static void synpred23_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:163:4: ( statementBlock )
    // .//Emerson.g:163:4: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred23_Emerson1042);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred23_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred23_EmersonEx; /* Prevent compiler warnings */
rulesynpred23_EmersonEx: ;

}
// $ANTLR end synpred23_Emerson

// $ANTLR start synpred26_Emerson
static void synpred26_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:166:4: ( expressionStatement )
    // .//Emerson.g:166:4: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred26_Emerson1057);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_EmersonEx; /* Prevent compiler warnings */
rulesynpred26_EmersonEx: ;

}
// $ANTLR end synpred26_Emerson

// $ANTLR start synpred33_Emerson
static void synpred33_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:173:4: ( labelledStatement )
    // .//Emerson.g:173:4: labelledStatement
    {
        FOLLOWPUSH(FOLLOW_labelledStatement_in_synpred33_Emerson1092);
        labelledStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred33_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred33_EmersonEx; /* Prevent compiler warnings */
rulesynpred33_EmersonEx: ;

}
// $ANTLR end synpred33_Emerson

// $ANTLR start synpred38_Emerson
static void synpred38_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:178:4: ( msgSendStatement )
    // .//Emerson.g:178:4: msgSendStatement
    {
        FOLLOWPUSH(FOLLOW_msgSendStatement_in_synpred38_Emerson1120);
        msgSendStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred38_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred38_EmersonEx; /* Prevent compiler warnings */
rulesynpred38_EmersonEx: ;

}
// $ANTLR end synpred38_Emerson

// $ANTLR start synpred53_Emerson
static void synpred53_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:204:15: ( LTERM )
    // .//Emerson.g:204:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred53_Emerson1299); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred53_EmersonEx; /* Prevent compiler warnings */
rulesynpred53_EmersonEx: ;

}
// $ANTLR end synpred53_Emerson

// $ANTLR start synpred55_Emerson
static void synpred55_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:208:15: ( LTERM )
    // .//Emerson.g:208:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred55_Emerson1328); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred55_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred55_EmersonEx; /* Prevent compiler warnings */
rulesynpred55_EmersonEx: ;

}
// $ANTLR end synpred55_Emerson

// $ANTLR start synpred67_Emerson
static void synpred67_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:239:21: ( LTERM )
    // .//Emerson.g:239:21: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred67_Emerson1550); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred67_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred67_EmersonEx; /* Prevent compiler warnings */
rulesynpred67_EmersonEx: ;

}
// $ANTLR end synpred67_Emerson

// $ANTLR start synpred70_Emerson
static void synpred70_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:243:21: ( LTERM )
    // .//Emerson.g:243:21: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred70_Emerson1600); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred70_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred70_EmersonEx; /* Prevent compiler warnings */
rulesynpred70_EmersonEx: ;

}
// $ANTLR end synpred70_Emerson

// $ANTLR start synpred72_Emerson
static void synpred72_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_whenCheckedListSubsequent_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_whenCheckedListSubsequent_return

    // .//Emerson.g:243:29: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )
    // .//Emerson.g:243:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
    {
         MATCHT(127, &FOLLOW_127_in_synpred72_Emerson1604); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred72_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:243:33: ( LTERM )*

        for (;;)
        {
            int alt298=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA298_0 = LA(1);
                if ( (LA298_0 == LTERM) ) 
                {
                    alt298=1;
                }

            }
            switch (alt298) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred72_Emerson1606); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred72_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop298;	/* break out of the loop */
        	    break;
            }
        }
        loop298: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1611);
        s2=whenCheckedListSubsequent(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred72_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred72_EmersonEx; /* Prevent compiler warnings */
rulesynpred72_EmersonEx: ;

}
// $ANTLR end synpred72_Emerson

// $ANTLR start synpred79_Emerson
static void synpred79_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_statement_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_statement_return

    // .//Emerson.g:248:73: ( ( LTERM )* 'else' ( LTERM )* s2= statement )
    // .//Emerson.g:248:73: ( LTERM )* 'else' ( LTERM )* s2= statement
    {

        // .//Emerson.g:248:73: ( LTERM )*

        for (;;)
        {
            int alt299=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA299_0 = LA(1);
                if ( (LA299_0 == LTERM) ) 
                {
                    alt299=1;
                }

            }
            switch (alt299) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred79_Emerson1673); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred79_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop299;	/* break out of the loop */
        	    break;
            }
        }
        loop299: ; /* Jump out to here if this rule does not match */

         MATCHT(138, &FOLLOW_138_in_synpred79_Emerson1676); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred79_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:248:87: ( LTERM )*

        for (;;)
        {
            int alt300=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA300_0 = LA(1);
                if ( (LA300_0 == LTERM) ) 
                {
                    alt300=1;
                }

            }
            switch (alt300) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred79_Emerson1678); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred79_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop300;	/* break out of the loop */
        	    break;
            }
        }
        loop300: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_statement_in_synpred79_Emerson1683);
        s2=statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred79_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred79_EmersonEx; /* Prevent compiler warnings */
rulesynpred79_EmersonEx: ;

}
// $ANTLR end synpred79_Emerson

// $ANTLR start synpred82_Emerson
static void synpred82_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:254:4: ( forStatement )
    // .//Emerson.g:254:4: forStatement
    {
        FOLLOWPUSH(FOLLOW_forStatement_in_synpred82_Emerson1722);
        forStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred82_EmersonEx; /* Prevent compiler warnings */
rulesynpred82_EmersonEx: ;

}
// $ANTLR end synpred82_Emerson

// $ANTLR start synpred137_Emerson
static void synpred137_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:313:40: ( LTERM )
    // .//Emerson.g:313:40: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred137_Emerson2348); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred137_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred137_EmersonEx; /* Prevent compiler warnings */
rulesynpred137_EmersonEx: ;

}
// $ANTLR end synpred137_Emerson

// $ANTLR start synpred140_Emerson
static void synpred140_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:317:25: ( LTERM )
    // .//Emerson.g:317:25: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred140_Emerson2383); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred140_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred140_EmersonEx; /* Prevent compiler warnings */
rulesynpred140_EmersonEx: ;

}
// $ANTLR end synpred140_Emerson

// $ANTLR start synpred158_Emerson
static void synpred158_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_memberExpression_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_memberExpression_return

	EmersonParser_leftHandSideExpression_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return




    // .//Emerson.g:346:4: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) )
    // .//Emerson.g:346:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred158_Emerson2647);
        e1=memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred158_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:346:24: ( LTERM )*

        for (;;)
        {
            int alt310=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA310_0 = LA(1);
                if ( (LA310_0 == LTERM) ) 
                {
                    alt310=1;
                }

            }
            switch (alt310) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred158_Emerson2649); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred158_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop310;	/* break out of the loop */
        	    break;
            }
        }
        loop310: ; /* Jump out to here if this rule does not match */

         MATCHT(156, &FOLLOW_156_in_synpred158_Emerson2651); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred158_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred158_Emerson2655);
        e2=leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred158_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        if ( LA(1) == LTERM || LA(1) == 132 )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred158_Emerson2657;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred158_Emerson2657);    goto rulesynpred158_EmersonEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred158_EmersonEx; /* Prevent compiler warnings */
rulesynpred158_EmersonEx: ;

}
// $ANTLR end synpred158_Emerson

// $ANTLR start synpred164_Emerson
static void synpred164_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:352:26: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )
    // .//Emerson.g:352:26: ( LTERM )* ',' ( LTERM )* assignmentExpression
    {

        // .//Emerson.g:352:26: ( LTERM )*

        for (;;)
        {
            int alt311=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA311_0 = LA(1);
                if ( (LA311_0 == LTERM) ) 
                {
                    alt311=1;
                }

            }
            switch (alt311) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred164_Emerson2737); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred164_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop311;	/* break out of the loop */
        	    break;
            }
        }
        loop311: ; /* Jump out to here if this rule does not match */

         MATCHT(127, &FOLLOW_127_in_synpred164_Emerson2740); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred164_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:352:37: ( LTERM )*

        for (;;)
        {
            int alt312=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA312_0 = LA(1);
                if ( (LA312_0 == LTERM) ) 
                {
                    alt312=1;
                }

            }
            switch (alt312) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred164_Emerson2742); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred164_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop312;	/* break out of the loop */
        	    break;
            }
        }
        loop312: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred164_Emerson2745);
        assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred164_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred164_EmersonEx; /* Prevent compiler warnings */
rulesynpred164_EmersonEx: ;

}
// $ANTLR end synpred164_Emerson

// $ANTLR start synpred168_Emerson
static void synpred168_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:361:4: ( conditionalExpression )
    // .//Emerson.g:361:4: conditionalExpression
    {
        FOLLOWPUSH(FOLLOW_conditionalExpression_in_synpred168_Emerson2804);
        conditionalExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred168_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred168_EmersonEx; /* Prevent compiler warnings */
rulesynpred168_EmersonEx: ;

}
// $ANTLR end synpred168_Emerson

// $ANTLR start synpred171_Emerson
static void synpred171_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:366:4: ( conditionalExpressionNoIn )
    // .//Emerson.g:366:4: conditionalExpressionNoIn
    {
        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_synpred171_Emerson2851);
        conditionalExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred171_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred171_EmersonEx; /* Prevent compiler warnings */
rulesynpred171_EmersonEx: ;

}
// $ANTLR end synpred171_Emerson

// $ANTLR start synpred174_Emerson
static void synpred174_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:371:4: ( callExpression )
    // .//Emerson.g:371:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred174_Emerson2899);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred174_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred174_EmersonEx; /* Prevent compiler warnings */
rulesynpred174_EmersonEx: ;

}
// $ANTLR end synpred174_Emerson

// $ANTLR start synpred175_Emerson
static void synpred175_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:376:4: ( memberExpression )
    // .//Emerson.g:376:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred175_Emerson2924);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred175_EmersonEx; /* Prevent compiler warnings */
rulesynpred175_EmersonEx: ;

}
// $ANTLR end synpred175_Emerson

// $ANTLR start synpred181_Emerson
static void synpred181_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:393:47: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:393:47: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:393:47: ( LTERM )*

        for (;;)
        {
            int alt315=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA315_0 = LA(1);
                if ( (LA315_0 == LTERM) ) 
                {
                    alt315=1;
                }

            }
            switch (alt315) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred181_Emerson3020); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred181_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop315;	/* break out of the loop */
        	    break;
            }
        }
        loop315: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3023);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred181_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred181_EmersonEx; /* Prevent compiler warnings */
rulesynpred181_EmersonEx: ;

}
// $ANTLR end synpred181_Emerson

// $ANTLR start synpred183_Emerson
static void synpred183_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:393:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:393:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:393:136: ( LTERM )*

        for (;;)
        {
            int alt316=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA316_0 = LA(1);
                if ( (LA316_0 == LTERM) ) 
                {
                    alt316=1;
                }

            }
            switch (alt316) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred183_Emerson3040); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred183_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop316;	/* break out of the loop */
        	    break;
            }
        }
        loop316: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred183_Emerson3043);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred183_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred183_EmersonEx; /* Prevent compiler warnings */
rulesynpred183_EmersonEx: ;

}
// $ANTLR end synpred183_Emerson

// $ANTLR start synpred186_Emerson
static void synpred186_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:394:48: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:394:48: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:394:48: ( LTERM )*

        for (;;)
        {
            int alt320=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA320_0 = LA(1);
                if ( (LA320_0 == LTERM) ) 
                {
                    alt320=1;
                }

            }
            switch (alt320) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred186_Emerson3070); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred186_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop320;	/* break out of the loop */
        	    break;
            }
        }
        loop320: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred186_Emerson3073);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred186_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred186_EmersonEx; /* Prevent compiler warnings */
rulesynpred186_EmersonEx: ;

}
// $ANTLR end synpred186_Emerson

// $ANTLR start synpred188_Emerson
static void synpred188_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:394:137: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:394:137: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:394:137: ( LTERM )*

        for (;;)
        {
            int alt321=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA321_0 = LA(1);
                if ( (LA321_0 == LTERM) ) 
                {
                    alt321=1;
                }

            }
            switch (alt321) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred188_Emerson3090); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred188_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop321;	/* break out of the loop */
        	    break;
            }
        }
        loop321: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred188_Emerson3093);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred188_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred188_EmersonEx; /* Prevent compiler warnings */
rulesynpred188_EmersonEx: ;

}
// $ANTLR end synpred188_Emerson

// $ANTLR start synpred193_Emerson
static void synpred193_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:395:85: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:395:85: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:395:85: ( LTERM )*

        for (;;)
        {
            int alt325=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA325_0 = LA(1);
                if ( (LA325_0 == LTERM) ) 
                {
                    alt325=1;
                }

            }
            switch (alt325) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred193_Emerson3139); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred193_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop325;	/* break out of the loop */
        	    break;
            }
        }
        loop325: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred193_Emerson3142);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred193_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred193_EmersonEx; /* Prevent compiler warnings */
rulesynpred193_EmersonEx: ;

}
// $ANTLR end synpred193_Emerson

// $ANTLR start synpred195_Emerson
static void synpred195_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:395:147: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:395:147: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:395:147: ( LTERM )*

        for (;;)
        {
            int alt326=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA326_0 = LA(1);
                if ( (LA326_0 == LTERM) ) 
                {
                    alt326=1;
                }

            }
            switch (alt326) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred195_Emerson3155); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred195_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop326;	/* break out of the loop */
        	    break;
            }
        }
        loop326: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred195_Emerson3158);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred195_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred195_EmersonEx; /* Prevent compiler warnings */
rulesynpred195_EmersonEx: ;

}
// $ANTLR end synpred195_Emerson

// $ANTLR start synpred199_Emerson
static void synpred199_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:404:82: ( ( LTERM )* arguments )
    // .//Emerson.g:404:82: ( LTERM )* arguments
    {

        // .//Emerson.g:404:82: ( LTERM )*

        for (;;)
        {
            int alt327=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA327_0 = LA(1);
                if ( (LA327_0 == LTERM) ) 
                {
                    alt327=1;
                }

            }
            switch (alt327) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred199_Emerson3236); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred199_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop327;	/* break out of the loop */
        	    break;
            }
        }
        loop327: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_arguments_in_synpred199_Emerson3239);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred199_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred199_EmersonEx; /* Prevent compiler warnings */
rulesynpred199_EmersonEx: ;

}
// $ANTLR end synpred199_Emerson

// $ANTLR start synpred201_Emerson
static void synpred201_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:404:114: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:404:114: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:404:114: ( LTERM )*

        for (;;)
        {
            int alt328=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA328_0 = LA(1);
                if ( (LA328_0 == LTERM) ) 
                {
                    alt328=1;
                }

            }
            switch (alt328) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred201_Emerson3247); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred201_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop328;	/* break out of the loop */
        	    break;
            }
        }
        loop328: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred201_Emerson3250);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred201_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred201_EmersonEx; /* Prevent compiler warnings */
rulesynpred201_EmersonEx: ;

}
// $ANTLR end synpred201_Emerson

// $ANTLR start synpred203_Emerson
static void synpred203_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:404:183: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:404:183: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:404:183: ( LTERM )*

        for (;;)
        {
            int alt329=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA329_0 = LA(1);
                if ( (LA329_0 == LTERM) ) 
                {
                    alt329=1;
                }

            }
            switch (alt329) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred203_Emerson3265); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred203_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop329;	/* break out of the loop */
        	    break;
            }
        }
        loop329: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred203_Emerson3268);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred203_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred203_EmersonEx; /* Prevent compiler warnings */
rulesynpred203_EmersonEx: ;

}
// $ANTLR end synpred203_Emerson

// $ANTLR start synpred298_Emerson
static void synpred298_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:539:59: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression )
    // .//Emerson.g:539:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
    {

        // .//Emerson.g:539:59: ( LTERM )*

        for (;;)
        {
            int alt374=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA374_0 = LA(1);
                if ( (LA374_0 == LTERM) ) 
                {
                    alt374=1;
                }

            }
            switch (alt374) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred298_Emerson4556); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred298_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop374;	/* break out of the loop */
        	    break;
            }
        }
        loop374: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_addOps_in_synpred298_Emerson4559);
        addOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred298_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:539:73: ( LTERM )*

        for (;;)
        {
            int alt375=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA375_0 = LA(1);
                if ( (LA375_0 == LTERM) ) 
                {
                    alt375=1;
                }

            }
            switch (alt375) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred298_Emerson4561); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred298_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop375;	/* break out of the loop */
        	    break;
            }
        }
        loop375: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_synpred298_Emerson4564);
        multiplicativeExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred298_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred298_EmersonEx; /* Prevent compiler warnings */
rulesynpred298_EmersonEx: ;

}
// $ANTLR end synpred298_Emerson

// $ANTLR start synpred304_Emerson
static void synpred304_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:554:55: ( ( '--' ) )
    // .//Emerson.g:554:55: ( '--' )
    {
        // .//Emerson.g:554:55: ( '--' )
        // .//Emerson.g:554:56: '--'
        {
             MATCHT(195, &FOLLOW_195_in_synpred304_Emerson4676); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred304_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


    }

// This is where rules clean up and exit
//
goto rulesynpred304_EmersonEx; /* Prevent compiler warnings */
rulesynpred304_EmersonEx: ;

}
// $ANTLR end synpred304_Emerson

// $ANTLR start synpred305_Emerson
static void synpred305_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:554:91: ( ( '++' ) )
    // .//Emerson.g:554:91: ( '++' )
    {
        // .//Emerson.g:554:91: ( '++' )
        // .//Emerson.g:554:92: '++'
        {
             MATCHT(196, &FOLLOW_196_in_synpred305_Emerson4689); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred305_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


    }

// This is where rules clean up and exit
//
goto rulesynpred305_EmersonEx; /* Prevent compiler warnings */
rulesynpred305_EmersonEx: ;

}
// $ANTLR end synpred305_Emerson

// $ANTLR start synpred322_Emerson
static void synpred322_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:588:9: ( LTERM )
    // .//Emerson.g:588:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred322_Emerson4916); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred322_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred322_EmersonEx; /* Prevent compiler warnings */
rulesynpred322_EmersonEx: ;

}
// $ANTLR end synpred322_Emerson

// $ANTLR start synpred325_Emerson
static void synpred325_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:588:5: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' )
    // .//Emerson.g:588:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
    {
         MATCHT(158, &FOLLOW_158_in_synpred325_Emerson4914); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred325_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:588:9: ( LTERM )*

        for (;;)
        {
            int alt378=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA378_0 = LA(1);
                if ( (LA378_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA378_2 = LA(2);
                        if ( (synpred322_Emerson(ctx)) ) 
                        {
                            alt378=1;
                        }

                    }
                }

            }
            switch (alt378) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred325_Emerson4916); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred325_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop378;	/* break out of the loop */
        	    break;
            }
        }
        loop378: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:588:16: ( assignmentExpression )?
        {
            int alt379=2;
            {
                int LA379_0 = LA(1);
                if ( (((LA379_0 >= Identifier) && (LA379_0 <= NumericLiteral)) || ((LA379_0 >= 125) && (LA379_0 <= 126)) || LA379_0 == 129 || ((LA379_0 >= 157) && (LA379_0 <= 158)) || ((LA379_0 >= 190) && (LA379_0 <= 191)) || ((LA379_0 >= 195) && (LA379_0 <= 205))) ) 
                {
                    alt379=1;
                }
            }
            switch (alt379) 
            {
        	case 1:
        	    // .//Emerson.g:588:17: assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred325_Emerson4920);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred325_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:588:40: ( LTERM )*

        for (;;)
        {
            int alt380=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA380_0 = LA(1);
                if ( (LA380_0 == LTERM) ) 
                {
                    alt380=1;
                }

            }
            switch (alt380) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred325_Emerson4924); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred325_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop380;	/* break out of the loop */
        	    break;
            }
        }
        loop380: ; /* Jump out to here if this rule does not match */

         MATCHT(159, &FOLLOW_159_in_synpred325_Emerson4927); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred325_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred325_EmersonEx; /* Prevent compiler warnings */
rulesynpred325_EmersonEx: ;

}
// $ANTLR end synpred325_Emerson

// $ANTLR start synpred330_Emerson
static void synpred330_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:594:9: ( LTERM )
    // .//Emerson.g:594:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred330_Emerson4998); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred330_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred330_EmersonEx; /* Prevent compiler warnings */
rulesynpred330_EmersonEx: ;

}
// $ANTLR end synpred330_Emerson

// $ANTLR start synpred333_Emerson
static void synpred333_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:594:5: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' )
    // .//Emerson.g:594:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
    {
         MATCHT(129, &FOLLOW_129_in_synpred333_Emerson4996); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred333_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:594:9: ( LTERM )*

        for (;;)
        {
            int alt382=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA382_0 = LA(1);
                if ( (LA382_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA382_2 = LA(2);
                        if ( (synpred330_Emerson(ctx)) ) 
                        {
                            alt382=1;
                        }

                    }
                }

            }
            switch (alt382) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred333_Emerson4998); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred333_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop382;	/* break out of the loop */
        	    break;
            }
        }
        loop382: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:594:16: ( propertyNameAndValue )?
        {
            int alt383=2;
            {
                int LA383_0 = LA(1);
                if ( (((LA383_0 >= Identifier) && (LA383_0 <= NumericLiteral))) ) 
                {
                    alt383=1;
                }
            }
            switch (alt383) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: propertyNameAndValue
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred333_Emerson5001);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred333_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:594:38: ( LTERM )*

        for (;;)
        {
            int alt384=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA384_0 = LA(1);
                if ( (LA384_0 == LTERM) ) 
                {
                    alt384=1;
                }

            }
            switch (alt384) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred333_Emerson5004); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred333_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop384;	/* break out of the loop */
        	    break;
            }
        }
        loop384: ; /* Jump out to here if this rule does not match */

         MATCHT(130, &FOLLOW_130_in_synpred333_Emerson5007); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred333_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred333_EmersonEx; /* Prevent compiler warnings */
rulesynpred333_EmersonEx: ;

}
// $ANTLR end synpred333_Emerson
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred26_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred79_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred79_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred333_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred333_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred53_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred53_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred140_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred140_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred188_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred188_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred33_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred33_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred158_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred158_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred186_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred186_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred201_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred201_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred195_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred195_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred67_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred67_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred9_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred9_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred168_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred168_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred203_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred203_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred137_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred137_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred330_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred330_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred181_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred181_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred325_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred325_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred175_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred175_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred305_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred305_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred199_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred199_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred193_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred193_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred72_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred72_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred70_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred70_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred55_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred55_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred164_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred164_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred304_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred304_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred5_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred5_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred23_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred23_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred322_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred322_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred171_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred171_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred298_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred298_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred82_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred82_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred183_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred183_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred174_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred174_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred38_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred38_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
