/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//Emerson.g
 *     -                            On : 2011-08-04 18:33:12
 *     -                for the parser : EmersonParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

  #include <stdlib.h>
  #include <stdio.h>
  #include "Util.h"

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonParserTokenNames[209+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "VECTOR",
        (pANTLR3_UINT8) "QUATERNION",
        (pANTLR3_UINT8) "QUATERNION_AXISANGLE",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_BLOCK",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "ADD_OP",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE_OP",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "TERNARYOP_NO_IN",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "PATTERN_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE_PROTO",
        (pANTLR3_UINT8) "BLANK_NAME_VAL_PROT",
        (pANTLR3_UINT8) "NAME",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "EXPR",
        (pANTLR3_UINT8) "EXPR_NO_IN",
        (pANTLR3_UINT8) "VERBATIM",
        (pANTLR3_UINT8) "SEND_CONSTRUCT",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT",
        (pANTLR3_UINT8) "SEND_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "VerbatimStringCharacter",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'#'",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static EmersonParser_program_return	program    (pEmersonParser ctx);
static EmersonParser_sourceElements_return	sourceElements    (pEmersonParser ctx);
static EmersonParser_sourceElement_return	sourceElement    (pEmersonParser ctx);
static EmersonParser_functionDeclaration_return	functionDeclaration    (pEmersonParser ctx);
static EmersonParser_functionExpression_return	functionExpression    (pEmersonParser ctx);
static EmersonParser_formalParameterList_return	formalParameterList    (pEmersonParser ctx);
static EmersonParser_functionBody_return	functionBody    (pEmersonParser ctx);
static EmersonParser_statement_return	statement    (pEmersonParser ctx);
static EmersonParser_statementBlock_return	statementBlock    (pEmersonParser ctx);
static EmersonParser_noOpStatement_return	noOpStatement    (pEmersonParser ctx);
static EmersonParser_statementList_return	statementList    (pEmersonParser ctx);
static EmersonParser_variableStatement_return	variableStatement    (pEmersonParser ctx);
static EmersonParser_variableDeclarationList_return	variableDeclarationList    (pEmersonParser ctx);
static EmersonParser_variableDeclarationListNoIn_return	variableDeclarationListNoIn    (pEmersonParser ctx);
static EmersonParser_variableDeclaration_return	variableDeclaration    (pEmersonParser ctx);
static EmersonParser_variableDeclarationNoIn_return	variableDeclarationNoIn    (pEmersonParser ctx);
static EmersonParser_initialiser_return	initialiser    (pEmersonParser ctx);
static EmersonParser_initialiserNoIn_return	initialiserNoIn    (pEmersonParser ctx);
static EmersonParser_emptyStatement_return	emptyStatement    (pEmersonParser ctx);
static EmersonParser_expressionStatement_return	expressionStatement    (pEmersonParser ctx);
static EmersonParser_ifStatement_return	ifStatement    (pEmersonParser ctx);
static EmersonParser_iterationStatement_return	iterationStatement    (pEmersonParser ctx);
static EmersonParser_doWhileStatement_return	doWhileStatement    (pEmersonParser ctx);
static EmersonParser_whileStatement_return	whileStatement    (pEmersonParser ctx);
static EmersonParser_forStatement_return	forStatement    (pEmersonParser ctx);
static EmersonParser_forStatementInitialiserPart_return	forStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_forInStatement_return	forInStatement    (pEmersonParser ctx);
static EmersonParser_forInStatementInitialiserPart_return	forInStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_continueStatement_return	continueStatement    (pEmersonParser ctx);
static EmersonParser_breakStatement_return	breakStatement    (pEmersonParser ctx);
static EmersonParser_returnStatement_return	returnStatement    (pEmersonParser ctx);
static EmersonParser_withStatement_return	withStatement    (pEmersonParser ctx);
static EmersonParser_switchStatement_return	switchStatement    (pEmersonParser ctx);
static EmersonParser_caseBlock_return	caseBlock    (pEmersonParser ctx);
static EmersonParser_caseClause_return	caseClause    (pEmersonParser ctx);
static EmersonParser_defaultClause_return	defaultClause    (pEmersonParser ctx);
static EmersonParser_caseClauseSeenDefault_return	caseClauseSeenDefault    (pEmersonParser ctx);
static EmersonParser_throwStatement_return	throwStatement    (pEmersonParser ctx);
static EmersonParser_tryStatement_return	tryStatement    (pEmersonParser ctx);
static EmersonParser_catchFinallyBlock_return	catchFinallyBlock    (pEmersonParser ctx);
static EmersonParser_catchBlock_return	catchBlock    (pEmersonParser ctx);
static EmersonParser_finallyBlock_return	finallyBlock    (pEmersonParser ctx);
static EmersonParser_memAndCallExpression_return	memAndCallExpression    (pEmersonParser ctx);
static EmersonParser_expression_return	expression    (pEmersonParser ctx);
static EmersonParser_expressionNoIn_return	expressionNoIn    (pEmersonParser ctx);
static EmersonParser_assignmentExpression_return	assignmentExpression    (pEmersonParser ctx);
static EmersonParser_assignmentExpressionNoIn_return	assignmentExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_leftHandSideExpression_return	leftHandSideExpression    (pEmersonParser ctx);
static EmersonParser_newExpression_return	newExpression    (pEmersonParser ctx);
static EmersonParser_indexSuffix1_return	indexSuffix1    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix1_return	propertyReferenceSuffix1    (pEmersonParser ctx);
static EmersonParser_memberExpression_return	memberExpression    (pEmersonParser ctx);
static EmersonParser_memberExpressionSuffix_return	memberExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_callExpression_return	callExpression    (pEmersonParser ctx);
static EmersonParser_callExpressionSuffix_return	callExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_arguments_return	arguments    (pEmersonParser ctx);
static EmersonParser_indexSuffix_return	indexSuffix    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix_return	propertyReferenceSuffix    (pEmersonParser ctx);
static EmersonParser_assignmentOperator_return	assignmentOperator    (pEmersonParser ctx);
static EmersonParser_conditionalExpression_return	conditionalExpression    (pEmersonParser ctx);
static EmersonParser_msgRecvConstruct_return	msgRecvConstruct    (pEmersonParser ctx);
static EmersonParser_msgConstruct_return	msgConstruct    (pEmersonParser ctx);
static EmersonParser_msgSenderConstruct_return	msgSenderConstruct    (pEmersonParser ctx);
static EmersonParser_ternaryExpression_return	ternaryExpression    (pEmersonParser ctx);
static EmersonParser_conditionalExpressionNoIn_return	conditionalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_msgRecvConstructNoIn_return	msgRecvConstructNoIn    (pEmersonParser ctx);
static EmersonParser_msgConstructNoIn_return	msgConstructNoIn    (pEmersonParser ctx);
static EmersonParser_msgSenderConstructNoIn_return	msgSenderConstructNoIn    (pEmersonParser ctx);
static EmersonParser_ternaryExpressionNoIn_return	ternaryExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalORExpression_return	logicalORExpression    (pEmersonParser ctx);
static EmersonParser_logicalANDExpression_return	logicalANDExpression    (pEmersonParser ctx);
static EmersonParser_logicalORExpressionNoIn_return	logicalORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalANDExpressionNoIn_return	logicalANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpression_return	bitwiseORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpressionNoIn_return	bitwiseORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpression_return	bitwiseXORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpressionNoIn_return	bitwiseXORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpression_return	bitwiseANDExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpressionNoIn_return	bitwiseANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_equalityExpression_return	equalityExpression    (pEmersonParser ctx);
static EmersonParser_equalityOps_return	equalityOps    (pEmersonParser ctx);
static EmersonParser_equalityExpressionNoIn_return	equalityExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_relationalOps_return	relationalOps    (pEmersonParser ctx);
static EmersonParser_relationalExpression_return	relationalExpression    (pEmersonParser ctx);
static EmersonParser_relationalOpsNoIn_return	relationalOpsNoIn    (pEmersonParser ctx);
static EmersonParser_addOps_return	addOps    (pEmersonParser ctx);
static EmersonParser_relationalExpressionNoIn_return	relationalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_additiveExpression_return	additiveExpression    (pEmersonParser ctx);
static EmersonParser_multOps_return	multOps    (pEmersonParser ctx);
static EmersonParser_multiplicativeExpression_return	multiplicativeExpression    (pEmersonParser ctx);
static EmersonParser_postfixExpression_return	postfixExpression    (pEmersonParser ctx);
static EmersonParser_unaryOps_return	unaryOps    (pEmersonParser ctx);
static EmersonParser_unaryExpression_return	unaryExpression    (pEmersonParser ctx);
static EmersonParser_primaryExpression_return	primaryExpression    (pEmersonParser ctx);
static EmersonParser_vectorLiteral_return	vectorLiteral    (pEmersonParser ctx);
static EmersonParser_quaternionLiteral_return	quaternionLiteral    (pEmersonParser ctx);
static EmersonParser_vectorLiteralField_return	vectorLiteralField    (pEmersonParser ctx);
static EmersonParser_dollarExpression_return	dollarExpression    (pEmersonParser ctx);
static EmersonParser_arrayLiteral_return	arrayLiteral    (pEmersonParser ctx);
static EmersonParser_objectLiteral_return	objectLiteral    (pEmersonParser ctx);
static EmersonParser_patternLiteral_return	patternLiteral    (pEmersonParser ctx);
static EmersonParser_propertyNameAndValue_return	propertyNameAndValue    (pEmersonParser ctx);
static EmersonParser_nameValueProto_return	nameValueProto    (pEmersonParser ctx);
static EmersonParser_propertyName_return	propertyName    (pEmersonParser ctx);
static EmersonParser_literal_return	literal    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred1_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred4_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred8_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred11_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred14_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred22_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred24_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred25_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred26_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred28_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred29_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred39_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred41_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred51_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred53_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred62_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred64_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred65_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred68_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred69_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred76_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred87_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred95_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred107_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred112_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred120_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred123_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred126_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred128_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred131_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred133_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred137_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred139_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred144_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred152_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred154_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred156_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred157_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred160_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred163_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred164_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred170_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred172_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred175_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred177_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred182_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred184_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred188_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred190_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred192_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred195_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred198_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred216_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred219_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred222_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred225_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred230_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred233_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred236_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred238_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred240_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred245_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred292_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred300_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred303_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred309_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred310_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred321_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred322_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred327_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred328_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred345_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred354_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred359_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred360_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred361_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred364_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred367_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred373_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred376_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred382_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred385_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred386_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred387_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred396_Emerson    (pEmersonParser ctx);
static void	EmersonParserFree(pEmersonParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//Emerson.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonParserNewSSD(instream, NULL);
}

/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonParser) ANTLR3_CALLOC(1, sizeof(EmersonParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our EmersonParser interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->statementBlock	= statementBlock;
    ctx->noOpStatement	= noOpStatement;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->emptyStatement	= emptyStatement;
    ctx->expressionStatement	= expressionStatement;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->caseClauseSeenDefault	= caseClauseSeenDefault;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchFinallyBlock	= catchFinallyBlock;
    ctx->catchBlock	= catchBlock;
    ctx->finallyBlock	= finallyBlock;
    ctx->memAndCallExpression	= memAndCallExpression;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->msgRecvConstruct	= msgRecvConstruct;
    ctx->msgConstruct	= msgConstruct;
    ctx->msgSenderConstruct	= msgSenderConstruct;
    ctx->ternaryExpression	= ternaryExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->msgRecvConstructNoIn	= msgRecvConstructNoIn;
    ctx->msgConstructNoIn	= msgConstructNoIn;
    ctx->msgSenderConstructNoIn	= msgSenderConstructNoIn;
    ctx->ternaryExpressionNoIn	= ternaryExpressionNoIn;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityOps	= equalityOps;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->addOps	= addOps;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->additiveExpression	= additiveExpression;
    ctx->multOps	= multOps;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->vectorLiteral	= vectorLiteral;
    ctx->quaternionLiteral	= quaternionLiteral;
    ctx->vectorLiteralField	= vectorLiteralField;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->patternLiteral	= patternLiteral;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->nameValueProto	= nameValueProto;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred1_Emerson	= synpred1_Emerson;
    ctx->synpred4_Emerson	= synpred4_Emerson;
    ctx->synpred8_Emerson	= synpred8_Emerson;
    ctx->synpred11_Emerson	= synpred11_Emerson;
    ctx->synpred14_Emerson	= synpred14_Emerson;
    ctx->synpred22_Emerson	= synpred22_Emerson;
    ctx->synpred24_Emerson	= synpred24_Emerson;
    ctx->synpred25_Emerson	= synpred25_Emerson;
    ctx->synpred26_Emerson	= synpred26_Emerson;
    ctx->synpred28_Emerson	= synpred28_Emerson;
    ctx->synpred29_Emerson	= synpred29_Emerson;
    ctx->synpred39_Emerson	= synpred39_Emerson;
    ctx->synpred41_Emerson	= synpred41_Emerson;
    ctx->synpred51_Emerson	= synpred51_Emerson;
    ctx->synpred53_Emerson	= synpred53_Emerson;
    ctx->synpred62_Emerson	= synpred62_Emerson;
    ctx->synpred64_Emerson	= synpred64_Emerson;
    ctx->synpred65_Emerson	= synpred65_Emerson;
    ctx->synpred68_Emerson	= synpred68_Emerson;
    ctx->synpred69_Emerson	= synpred69_Emerson;
    ctx->synpred76_Emerson	= synpred76_Emerson;
    ctx->synpred87_Emerson	= synpred87_Emerson;
    ctx->synpred95_Emerson	= synpred95_Emerson;
    ctx->synpred107_Emerson	= synpred107_Emerson;
    ctx->synpred112_Emerson	= synpred112_Emerson;
    ctx->synpred120_Emerson	= synpred120_Emerson;
    ctx->synpred123_Emerson	= synpred123_Emerson;
    ctx->synpred126_Emerson	= synpred126_Emerson;
    ctx->synpred128_Emerson	= synpred128_Emerson;
    ctx->synpred131_Emerson	= synpred131_Emerson;
    ctx->synpred133_Emerson	= synpred133_Emerson;
    ctx->synpred137_Emerson	= synpred137_Emerson;
    ctx->synpred139_Emerson	= synpred139_Emerson;
    ctx->synpred144_Emerson	= synpred144_Emerson;
    ctx->synpred152_Emerson	= synpred152_Emerson;
    ctx->synpred154_Emerson	= synpred154_Emerson;
    ctx->synpred156_Emerson	= synpred156_Emerson;
    ctx->synpred157_Emerson	= synpred157_Emerson;
    ctx->synpred160_Emerson	= synpred160_Emerson;
    ctx->synpred163_Emerson	= synpred163_Emerson;
    ctx->synpred164_Emerson	= synpred164_Emerson;
    ctx->synpred170_Emerson	= synpred170_Emerson;
    ctx->synpred172_Emerson	= synpred172_Emerson;
    ctx->synpred175_Emerson	= synpred175_Emerson;
    ctx->synpred177_Emerson	= synpred177_Emerson;
    ctx->synpred182_Emerson	= synpred182_Emerson;
    ctx->synpred184_Emerson	= synpred184_Emerson;
    ctx->synpred188_Emerson	= synpred188_Emerson;
    ctx->synpred190_Emerson	= synpred190_Emerson;
    ctx->synpred192_Emerson	= synpred192_Emerson;
    ctx->synpred195_Emerson	= synpred195_Emerson;
    ctx->synpred198_Emerson	= synpred198_Emerson;
    ctx->synpred216_Emerson	= synpred216_Emerson;
    ctx->synpred219_Emerson	= synpred219_Emerson;
    ctx->synpred222_Emerson	= synpred222_Emerson;
    ctx->synpred225_Emerson	= synpred225_Emerson;
    ctx->synpred230_Emerson	= synpred230_Emerson;
    ctx->synpred233_Emerson	= synpred233_Emerson;
    ctx->synpred236_Emerson	= synpred236_Emerson;
    ctx->synpred238_Emerson	= synpred238_Emerson;
    ctx->synpred240_Emerson	= synpred240_Emerson;
    ctx->synpred245_Emerson	= synpred245_Emerson;
    ctx->synpred292_Emerson	= synpred292_Emerson;
    ctx->synpred300_Emerson	= synpred300_Emerson;
    ctx->synpred303_Emerson	= synpred303_Emerson;
    ctx->synpred309_Emerson	= synpred309_Emerson;
    ctx->synpred310_Emerson	= synpred310_Emerson;
    ctx->synpred321_Emerson	= synpred321_Emerson;
    ctx->synpred322_Emerson	= synpred322_Emerson;
    ctx->synpred327_Emerson	= synpred327_Emerson;
    ctx->synpred328_Emerson	= synpred328_Emerson;
    ctx->synpred345_Emerson	= synpred345_Emerson;
    ctx->synpred354_Emerson	= synpred354_Emerson;
    ctx->synpred359_Emerson	= synpred359_Emerson;
    ctx->synpred360_Emerson	= synpred360_Emerson;
    ctx->synpred361_Emerson	= synpred361_Emerson;
    ctx->synpred364_Emerson	= synpred364_Emerson;
    ctx->synpred367_Emerson	= synpred367_Emerson;
    ctx->synpred373_Emerson	= synpred373_Emerson;
    ctx->synpred376_Emerson	= synpred376_Emerson;
    ctx->synpred382_Emerson	= synpred382_Emerson;
    ctx->synpred385_Emerson	= synpred385_Emerson;
    ctx->synpred386_Emerson	= synpred386_Emerson;
    ctx->synpred387_Emerson	= synpred387_Emerson;
    ctx->synpred396_Emerson	= synpred396_Emerson;
    ctx->free			= EmersonParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonParserFree(pEmersonParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program895  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program895_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program895	= { FOLLOW_LTERM_in_program895_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program899  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program899	= { FOLLOW_sourceElements_in_program899_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program902  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program902	= { FOLLOW_LTERM_in_program902_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_program905  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_program905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_program905	= { FOLLOW_EOF_in_program905_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements926  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements926	= { FOLLOW_sourceElement_in_sourceElements926_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_sourceElements929  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_sourceElements929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_sourceElements929	= { FOLLOW_LTERM_in_sourceElements929_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements932  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements932_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements932	= { FOLLOW_sourceElement_in_sourceElements932_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement953  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement953	= { FOLLOW_functionDeclaration_in_sourceElement953_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement962  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement962	= { FOLLOW_statement_in_sourceElement962_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_functionDeclaration979  */
static	ANTLR3_BITWORD FOLLOW_139_in_functionDeclaration979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_functionDeclaration979	= { FOLLOW_139_in_functionDeclaration979_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration981  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration981	= { FOLLOW_LTERM_in_functionDeclaration981_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration984  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration984	= { FOLLOW_Identifier_in_functionDeclaration984_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration986  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration986	= { FOLLOW_LTERM_in_functionDeclaration986_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration990  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration990	= { FOLLOW_formalParameterList_in_functionDeclaration990_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration993  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration993	= { FOLLOW_LTERM_in_functionDeclaration993_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration996  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration996	= { FOLLOW_functionBody_in_functionDeclaration996_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_functionExpression1021  */
static	ANTLR3_BITWORD FOLLOW_139_in_functionExpression1021_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_functionExpression1021	= { FOLLOW_139_in_functionExpression1021_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1023  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1023	= { FOLLOW_LTERM_in_functionExpression1023_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression1026  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression1026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression1026	= { FOLLOW_Identifier_in_functionExpression1026_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1029  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1029_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1029	= { FOLLOW_LTERM_in_functionExpression1029_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_functionExpression1032  */
static	ANTLR3_BITWORD FOLLOW_140_in_functionExpression1032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_functionExpression1032	= { FOLLOW_140_in_functionExpression1032_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1034  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1034	= { FOLLOW_LTERM_in_functionExpression1034_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression1037  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression1037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression1037	= { FOLLOW_formalParameterList_in_functionExpression1037_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1040  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1040	= { FOLLOW_LTERM_in_functionExpression1040_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_functionExpression1043  */
static	ANTLR3_BITWORD FOLLOW_141_in_functionExpression1043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_functionExpression1043	= { FOLLOW_141_in_functionExpression1043_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1045  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1045	= { FOLLOW_LTERM_in_functionExpression1045_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression1048  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression1048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression1048	= { FOLLOW_functionBody_in_functionExpression1048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList1076  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList1076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList1076	= { FOLLOW_Identifier_in_formalParameterList1076_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_formalParameterList1079  */
static	ANTLR3_BITWORD FOLLOW_142_in_formalParameterList1079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_formalParameterList1079	= { FOLLOW_142_in_formalParameterList1079_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList1081  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList1081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList1081	= { FOLLOW_LTERM_in_formalParameterList1081_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList1084  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList1084_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList1084	= { FOLLOW_Identifier_in_formalParameterList1084_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_functionBody1107  */
static	ANTLR3_BITWORD FOLLOW_143_in_functionBody1107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_functionBody1107	= { FOLLOW_143_in_functionBody1107_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1109  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1109	= { FOLLOW_LTERM_in_functionBody1109_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_functionBody1112  */
static	ANTLR3_BITWORD FOLLOW_144_in_functionBody1112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_functionBody1112	= { FOLLOW_144_in_functionBody1112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_functionBody1123  */
static	ANTLR3_BITWORD FOLLOW_143_in_functionBody1123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_functionBody1123	= { FOLLOW_143_in_functionBody1123_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1125  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1125	= { FOLLOW_LTERM_in_functionBody1125_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody1129  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody1129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody1129	= { FOLLOW_sourceElements_in_functionBody1129_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1136  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1136	= { FOLLOW_LTERM_in_functionBody1136_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_functionBody1139  */
static	ANTLR3_BITWORD FOLLOW_144_in_functionBody1139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_functionBody1139	= { FOLLOW_144_in_functionBody1139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_statement1151  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_statement1151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_statement1151	= { FOLLOW_noOpStatement_in_statement1151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement1169  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement1169_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement1169	= { FOLLOW_switchStatement_in_statement1169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement1181  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement1181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement1181	= { FOLLOW_statementBlock_in_statement1181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement1186  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement1186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement1186	= { FOLLOW_variableStatement_in_statement1186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_statement1191  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_statement1191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_statement1191	= { FOLLOW_emptyStatement_in_statement1191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement1196  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement1196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement1196	= { FOLLOW_expressionStatement_in_statement1196_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement1201  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement1201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement1201	= { FOLLOW_ifStatement_in_statement1201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement1206  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement1206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement1206	= { FOLLOW_iterationStatement_in_statement1206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement1211  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement1211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement1211	= { FOLLOW_continueStatement_in_statement1211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement1216  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement1216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement1216	= { FOLLOW_breakStatement_in_statement1216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1221  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1221	= { FOLLOW_returnStatement_in_statement1221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement1226  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement1226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement1226	= { FOLLOW_withStatement_in_statement1226_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement1231  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement1231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement1231	= { FOLLOW_throwStatement_in_statement1231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement1236  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement1236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement1236	= { FOLLOW_tryStatement_in_statement1236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_statementBlock1255  */
static	ANTLR3_BITWORD FOLLOW_143_in_statementBlock1255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_statementBlock1255	= { FOLLOW_143_in_statementBlock1255_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1257  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1257	= { FOLLOW_LTERM_in_statementBlock1257_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_statementBlock1260  */
static	ANTLR3_BITWORD FOLLOW_144_in_statementBlock1260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_statementBlock1260	= { FOLLOW_144_in_statementBlock1260_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_statementBlock1273  */
static	ANTLR3_BITWORD FOLLOW_143_in_statementBlock1273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_statementBlock1273	= { FOLLOW_143_in_statementBlock1273_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1275  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1275	= { FOLLOW_LTERM_in_statementBlock1275_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock1279  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock1279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock1279	= { FOLLOW_statementList_in_statementBlock1279_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1284  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1284	= { FOLLOW_LTERM_in_statementBlock1284_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_statementBlock1287  */
static	ANTLR3_BITWORD FOLLOW_144_in_statementBlock1287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_statementBlock1287	= { FOLLOW_144_in_statementBlock1287_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_noOpStatement1307  */
static	ANTLR3_BITWORD FOLLOW_145_in_noOpStatement1307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_noOpStatement1307	= { FOLLOW_145_in_noOpStatement1307_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementList1349  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementList1349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementList1349	= { FOLLOW_LTERM_in_statementList1349_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1352  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1352	= { FOLLOW_statement_in_statementList1352_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_variableStatement1375  */
static	ANTLR3_BITWORD FOLLOW_146_in_variableStatement1375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_variableStatement1375	= { FOLLOW_146_in_variableStatement1375_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1377  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1377	= { FOLLOW_LTERM_in_variableStatement1377_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1380  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1380	= { FOLLOW_variableDeclarationList_in_variableStatement1380_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1383  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1383	= { FOLLOW_LTERM_in_variableStatement1383_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_variableStatement1387  */
static	ANTLR3_BITWORD FOLLOW_145_in_variableStatement1387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_variableStatement1387	= { FOLLOW_145_in_variableStatement1387_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1409  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1409	= { FOLLOW_variableDeclaration_in_variableDeclarationList1409_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1412  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1412	= { FOLLOW_LTERM_in_variableDeclarationList1412_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_variableDeclarationList1415  */
static	ANTLR3_BITWORD FOLLOW_142_in_variableDeclarationList1415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_variableDeclarationList1415	= { FOLLOW_142_in_variableDeclarationList1415_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1417  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1417	= { FOLLOW_LTERM_in_variableDeclarationList1417_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1420  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1420	= { FOLLOW_variableDeclaration_in_variableDeclarationList1420_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1439  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1439	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1439_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1442  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1442	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1442_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_variableDeclarationListNoIn1445  */
static	ANTLR3_BITWORD FOLLOW_142_in_variableDeclarationListNoIn1445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_variableDeclarationListNoIn1445	= { FOLLOW_142_in_variableDeclarationListNoIn1445_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1447  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1447	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1447_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1450  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1450	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1450_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1469  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1469	= { FOLLOW_Identifier_in_variableDeclaration1469_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclaration1471  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclaration1471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclaration1471	= { FOLLOW_LTERM_in_variableDeclaration1471_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1474  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1474	= { FOLLOW_initialiser_in_variableDeclaration1474_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1498  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1498	= { FOLLOW_Identifier_in_variableDeclarationNoIn1498_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationNoIn1500  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationNoIn1500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationNoIn1500	= { FOLLOW_LTERM_in_variableDeclarationNoIn1500_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1503  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1503_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1503	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1503_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_initialiser1528  */
static	ANTLR3_BITWORD FOLLOW_147_in_initialiser1528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_initialiser1528	= { FOLLOW_147_in_initialiser1528_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiser1530  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiser1530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiser1530	= { FOLLOW_LTERM_in_initialiser1530_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_initialiser1533  */
static	ANTLR3_BITWORD FOLLOW_expression_in_initialiser1533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_initialiser1533	= { FOLLOW_expression_in_initialiser1533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_initialiserNoIn1550  */
static	ANTLR3_BITWORD FOLLOW_147_in_initialiserNoIn1550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_initialiserNoIn1550	= { FOLLOW_147_in_initialiserNoIn1550_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiserNoIn1552  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiserNoIn1552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiserNoIn1552	= { FOLLOW_LTERM_in_initialiserNoIn1552_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_initialiserNoIn1555  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_initialiserNoIn1555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_initialiserNoIn1555	= { FOLLOW_expressionNoIn_in_initialiserNoIn1555_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_emptyStatement1578  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_emptyStatement1578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_emptyStatement1578	= { FOLLOW_LTERM_in_emptyStatement1578_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_emptyStatement1581  */
static	ANTLR3_BITWORD FOLLOW_145_in_emptyStatement1581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_emptyStatement1581	= { FOLLOW_145_in_emptyStatement1581_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1593  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1593_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1593	= { FOLLOW_expression_in_expressionStatement1593_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionStatement1596  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionStatement1596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionStatement1596	= { FOLLOW_LTERM_in_expressionStatement1596_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_expressionStatement1600  */
static	ANTLR3_BITWORD FOLLOW_145_in_expressionStatement1600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_expressionStatement1600	= { FOLLOW_145_in_expressionStatement1600_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_ifStatement1620  */
static	ANTLR3_BITWORD FOLLOW_148_in_ifStatement1620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_ifStatement1620	= { FOLLOW_148_in_ifStatement1620_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1622  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1622	= { FOLLOW_LTERM_in_ifStatement1622_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_ifStatement1625  */
static	ANTLR3_BITWORD FOLLOW_140_in_ifStatement1625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_ifStatement1625	= { FOLLOW_140_in_ifStatement1625_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1627  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1627	= { FOLLOW_LTERM_in_ifStatement1627_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1630  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1630	= { FOLLOW_expression_in_ifStatement1630_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1632  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1632	= { FOLLOW_LTERM_in_ifStatement1632_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_ifStatement1635  */
static	ANTLR3_BITWORD FOLLOW_141_in_ifStatement1635_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_ifStatement1635	= { FOLLOW_141_in_ifStatement1635_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1637  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1637	= { FOLLOW_LTERM_in_ifStatement1637_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1642  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1642	= { FOLLOW_statement_in_ifStatement1642_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1645  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1645_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1645	= { FOLLOW_LTERM_in_ifStatement1645_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_ifStatement1648  */
static	ANTLR3_BITWORD FOLLOW_149_in_ifStatement1648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_ifStatement1648	= { FOLLOW_149_in_ifStatement1648_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1650  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1650	= { FOLLOW_LTERM_in_ifStatement1650_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1655  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1655	= { FOLLOW_statement_in_ifStatement1655_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1687  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1687	= { FOLLOW_doWhileStatement_in_iterationStatement1687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1692  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1692_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1692	= { FOLLOW_whileStatement_in_iterationStatement1692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1697  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1697	= { FOLLOW_forStatement_in_iterationStatement1697_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1702  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1702	= { FOLLOW_forInStatement_in_iterationStatement1702_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_doWhileStatement1714  */
static	ANTLR3_BITWORD FOLLOW_150_in_doWhileStatement1714_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_doWhileStatement1714	= { FOLLOW_150_in_doWhileStatement1714_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1716  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1716	= { FOLLOW_LTERM_in_doWhileStatement1716_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1719  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1719	= { FOLLOW_statement_in_doWhileStatement1719_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1721  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1721	= { FOLLOW_LTERM_in_doWhileStatement1721_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_doWhileStatement1724  */
static	ANTLR3_BITWORD FOLLOW_151_in_doWhileStatement1724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_doWhileStatement1724	= { FOLLOW_151_in_doWhileStatement1724_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1726  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1726	= { FOLLOW_LTERM_in_doWhileStatement1726_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_doWhileStatement1729  */
static	ANTLR3_BITWORD FOLLOW_140_in_doWhileStatement1729_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_doWhileStatement1729	= { FOLLOW_140_in_doWhileStatement1729_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1731  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1731_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1731	= { FOLLOW_expression_in_doWhileStatement1731_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_doWhileStatement1733  */
static	ANTLR3_BITWORD FOLLOW_141_in_doWhileStatement1733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_doWhileStatement1733	= { FOLLOW_141_in_doWhileStatement1733_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1736  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1736_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1736	= { FOLLOW_LTERM_in_doWhileStatement1736_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_doWhileStatement1740  */
static	ANTLR3_BITWORD FOLLOW_145_in_doWhileStatement1740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_doWhileStatement1740	= { FOLLOW_145_in_doWhileStatement1740_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_whileStatement1766  */
static	ANTLR3_BITWORD FOLLOW_151_in_whileStatement1766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_whileStatement1766	= { FOLLOW_151_in_whileStatement1766_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1768  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1768_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1768	= { FOLLOW_LTERM_in_whileStatement1768_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_whileStatement1771  */
static	ANTLR3_BITWORD FOLLOW_140_in_whileStatement1771_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_whileStatement1771	= { FOLLOW_140_in_whileStatement1771_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1773  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1773	= { FOLLOW_LTERM_in_whileStatement1773_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1776  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1776	= { FOLLOW_expression_in_whileStatement1776_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1778  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1778	= { FOLLOW_LTERM_in_whileStatement1778_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_whileStatement1781  */
static	ANTLR3_BITWORD FOLLOW_141_in_whileStatement1781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_whileStatement1781	= { FOLLOW_141_in_whileStatement1781_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1783  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1783	= { FOLLOW_LTERM_in_whileStatement1783_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1786  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1786	= { FOLLOW_statement_in_whileStatement1786_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_forStatement1809  */
static	ANTLR3_BITWORD FOLLOW_152_in_forStatement1809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_forStatement1809	= { FOLLOW_152_in_forStatement1809_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1811  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1811	= { FOLLOW_LTERM_in_forStatement1811_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_forStatement1814  */
static	ANTLR3_BITWORD FOLLOW_140_in_forStatement1814_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000069800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_forStatement1814	= { FOLLOW_140_in_forStatement1814_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1817  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000049800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1817	= { FOLLOW_LTERM_in_forStatement1817_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement1822  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement1822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement1822	= { FOLLOW_forStatementInitialiserPart_in_forStatement1822_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1826  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1826	= { FOLLOW_LTERM_in_forStatement1826_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_forStatement1829  */
static	ANTLR3_BITWORD FOLLOW_145_in_forStatement1829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000029800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_forStatement1829	= { FOLLOW_145_in_forStatement1829_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1832  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1832	= { FOLLOW_LTERM_in_forStatement1832_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1837  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1837	= { FOLLOW_expression_in_forStatement1837_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1841  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1841	= { FOLLOW_LTERM_in_forStatement1841_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_forStatement1844  */
static	ANTLR3_BITWORD FOLLOW_145_in_forStatement1844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C00000B800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_forStatement1844	= { FOLLOW_145_in_forStatement1844_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1847  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1847	= { FOLLOW_LTERM_in_forStatement1847_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1852  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1852	= { FOLLOW_expression_in_forStatement1852_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1856  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1856	= { FOLLOW_LTERM_in_forStatement1856_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forStatement1859  */
static	ANTLR3_BITWORD FOLLOW_141_in_forStatement1859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forStatement1859	= { FOLLOW_141_in_forStatement1859_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1861  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1861	= { FOLLOW_LTERM_in_forStatement1861_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement1864  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement1864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement1864	= { FOLLOW_statement_in_forStatement1864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart1913  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart1913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart1913	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart1913_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_forStatementInitialiserPart1918  */
static	ANTLR3_BITWORD FOLLOW_146_in_forStatementInitialiserPart1918_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_forStatementInitialiserPart1918	= { FOLLOW_146_in_forStatementInitialiserPart1918_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatementInitialiserPart1920  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatementInitialiserPart1920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatementInitialiserPart1920	= { FOLLOW_LTERM_in_forStatementInitialiserPart1920_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1923  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1923	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1923_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_forInStatement1943  */
static	ANTLR3_BITWORD FOLLOW_152_in_forInStatement1943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_forInStatement1943	= { FOLLOW_152_in_forInStatement1943_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1945  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1945	= { FOLLOW_LTERM_in_forInStatement1945_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_forInStatement1948  */
static	ANTLR3_BITWORD FOLLOW_140_in_forInStatement1948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000049800), ANTLR3_UINT64_LIT(0x00000000001F0000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_forInStatement1948	= { FOLLOW_140_in_forInStatement1948_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1950  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000049800), ANTLR3_UINT64_LIT(0x00000000001F0000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1950	= { FOLLOW_LTERM_in_forInStatement1950_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement1953  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement1953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement1953	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement1953_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1955  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1955	= { FOLLOW_LTERM_in_forInStatement1955_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_forInStatement1958  */
static	ANTLR3_BITWORD FOLLOW_153_in_forInStatement1958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_forInStatement1958	= { FOLLOW_153_in_forInStatement1958_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1960  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1960	= { FOLLOW_LTERM_in_forInStatement1960_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement1963  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement1963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement1963	= { FOLLOW_expression_in_forInStatement1963_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1965  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1965_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1965	= { FOLLOW_LTERM_in_forInStatement1965_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forInStatement1968  */
static	ANTLR3_BITWORD FOLLOW_141_in_forInStatement1968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forInStatement1968	= { FOLLOW_141_in_forInStatement1968_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1970  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1970	= { FOLLOW_LTERM_in_forInStatement1970_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement1973  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement1973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement1973	= { FOLLOW_statement_in_forInStatement1973_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1997  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1997_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1997	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1997_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_forInStatementInitialiserPart2006  */
static	ANTLR3_BITWORD FOLLOW_146_in_forInStatementInitialiserPart2006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_forInStatementInitialiserPart2006	= { FOLLOW_146_in_forInStatementInitialiserPart2006_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatementInitialiserPart2008  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatementInitialiserPart2008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatementInitialiserPart2008	= { FOLLOW_LTERM_in_forInStatementInitialiserPart2008_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2011  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2011	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_continueStatement2030  */
static	ANTLR3_BITWORD FOLLOW_154_in_continueStatement2030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_continueStatement2030	= { FOLLOW_154_in_continueStatement2030_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2032  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2032	= { FOLLOW_Identifier_in_continueStatement2032_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_continueStatement2036  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_continueStatement2036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_continueStatement2036	= { FOLLOW_LTERM_in_continueStatement2036_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_continueStatement2040  */
static	ANTLR3_BITWORD FOLLOW_145_in_continueStatement2040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_continueStatement2040	= { FOLLOW_145_in_continueStatement2040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_breakStatement2062  */
static	ANTLR3_BITWORD FOLLOW_155_in_breakStatement2062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_breakStatement2062	= { FOLLOW_155_in_breakStatement2062_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2064  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2064	= { FOLLOW_Identifier_in_breakStatement2064_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_breakStatement2068  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_breakStatement2068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_breakStatement2068	= { FOLLOW_LTERM_in_breakStatement2068_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_breakStatement2072  */
static	ANTLR3_BITWORD FOLLOW_145_in_breakStatement2072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_breakStatement2072	= { FOLLOW_145_in_breakStatement2072_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_returnStatement2093  */
static	ANTLR3_BITWORD FOLLOW_156_in_returnStatement2093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000029800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_returnStatement2093	= { FOLLOW_156_in_returnStatement2093_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2095  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2095	= { FOLLOW_expression_in_returnStatement2095_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_returnStatement2099  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_returnStatement2099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_returnStatement2099	= { FOLLOW_LTERM_in_returnStatement2099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_returnStatement2103  */
static	ANTLR3_BITWORD FOLLOW_145_in_returnStatement2103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_returnStatement2103	= { FOLLOW_145_in_returnStatement2103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_withStatement2125  */
static	ANTLR3_BITWORD FOLLOW_157_in_withStatement2125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_withStatement2125	= { FOLLOW_157_in_withStatement2125_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2127  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2127	= { FOLLOW_LTERM_in_withStatement2127_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_withStatement2130  */
static	ANTLR3_BITWORD FOLLOW_140_in_withStatement2130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_withStatement2130	= { FOLLOW_140_in_withStatement2130_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2132  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2132	= { FOLLOW_LTERM_in_withStatement2132_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2135  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2135	= { FOLLOW_expression_in_withStatement2135_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2137  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2137	= { FOLLOW_LTERM_in_withStatement2137_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_withStatement2140  */
static	ANTLR3_BITWORD FOLLOW_141_in_withStatement2140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_withStatement2140	= { FOLLOW_141_in_withStatement2140_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2142  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2142	= { FOLLOW_LTERM_in_withStatement2142_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2145  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2145_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2145	= { FOLLOW_statement_in_withStatement2145_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_switchStatement2168  */
static	ANTLR3_BITWORD FOLLOW_158_in_switchStatement2168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_switchStatement2168	= { FOLLOW_158_in_switchStatement2168_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2170  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2170	= { FOLLOW_LTERM_in_switchStatement2170_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_switchStatement2173  */
static	ANTLR3_BITWORD FOLLOW_140_in_switchStatement2173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_switchStatement2173	= { FOLLOW_140_in_switchStatement2173_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2175  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2175	= { FOLLOW_LTERM_in_switchStatement2175_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2178  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2178	= { FOLLOW_expression_in_switchStatement2178_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2180  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2180	= { FOLLOW_LTERM_in_switchStatement2180_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_switchStatement2183  */
static	ANTLR3_BITWORD FOLLOW_141_in_switchStatement2183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_switchStatement2183	= { FOLLOW_141_in_switchStatement2183_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2185  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2185_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2185	= { FOLLOW_LTERM_in_switchStatement2185_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2188  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2188	= { FOLLOW_caseBlock_in_switchStatement2188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_caseBlock2219  */
static	ANTLR3_BITWORD FOLLOW_143_in_caseBlock2219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000080010000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_caseBlock2219	= { FOLLOW_143_in_caseBlock2219_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2221  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000080010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2221	= { FOLLOW_LTERM_in_caseBlock2221_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2226  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2226	= { FOLLOW_caseClause_in_caseBlock2226_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2229  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2229	= { FOLLOW_LTERM_in_caseBlock2229_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_caseBlock2232  */
static	ANTLR3_BITWORD FOLLOW_144_in_caseBlock2232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_caseBlock2232	= { FOLLOW_144_in_caseBlock2232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_caseBlock2255  */
static	ANTLR3_BITWORD FOLLOW_143_in_caseBlock2255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_caseBlock2255	= { FOLLOW_143_in_caseBlock2255_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2257  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2257	= { FOLLOW_LTERM_in_caseBlock2257_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2262  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2262	= { FOLLOW_defaultClause_in_caseBlock2262_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2264  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2264	= { FOLLOW_LTERM_in_caseBlock2264_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_caseBlock2267  */
static	ANTLR3_BITWORD FOLLOW_144_in_caseBlock2267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_caseBlock2267	= { FOLLOW_144_in_caseBlock2267_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_caseClause2311  */
static	ANTLR3_BITWORD FOLLOW_159_in_caseClause2311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_caseClause2311	= { FOLLOW_159_in_caseClause2311_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2313  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2313	= { FOLLOW_LTERM_in_caseClause2313_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2318  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2318_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2318	= { FOLLOW_ternaryExpression_in_caseClause2318_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2320  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2320	= { FOLLOW_LTERM_in_caseClause2320_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_caseClause2323  */
static	ANTLR3_BITWORD FOLLOW_160_in_caseClause2323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CE7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_caseClause2323	= { FOLLOW_160_in_caseClause2323_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2325  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CE7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2325	= { FOLLOW_LTERM_in_caseClause2325_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2328  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2328	= { FOLLOW_statementList_in_caseClause2328_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2331  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2331	= { FOLLOW_LTERM_in_caseClause2331_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseClause2334  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseClause2334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseClause2334	= { FOLLOW_defaultClause_in_caseClause2334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_caseClause2361  */
static	ANTLR3_BITWORD FOLLOW_159_in_caseClause2361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_caseClause2361	= { FOLLOW_159_in_caseClause2361_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2363  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2363	= { FOLLOW_LTERM_in_caseClause2363_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2368  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2368_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2368	= { FOLLOW_ternaryExpression_in_caseClause2368_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2370  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2370	= { FOLLOW_LTERM_in_caseClause2370_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_caseClause2373  */
static	ANTLR3_BITWORD FOLLOW_160_in_caseClause2373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CCFDD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_caseClause2373	= { FOLLOW_160_in_caseClause2373_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2375  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CCFDD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2375	= { FOLLOW_LTERM_in_caseClause2375_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2378  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2378	= { FOLLOW_statementList_in_caseClause2378_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2381  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2381	= { FOLLOW_LTERM_in_caseClause2381_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseClause2384  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseClause2384_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseClause2384	= { FOLLOW_caseClause_in_caseClause2384_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_defaultClause2413  */
static	ANTLR3_BITWORD FOLLOW_161_in_defaultClause2413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_defaultClause2413	= { FOLLOW_161_in_defaultClause2413_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2415  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2415	= { FOLLOW_LTERM_in_defaultClause2415_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_defaultClause2418  */
static	ANTLR3_BITWORD FOLLOW_160_in_defaultClause2418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CCFDD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_defaultClause2418	= { FOLLOW_160_in_defaultClause2418_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2420  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CCFDD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2420	= { FOLLOW_LTERM_in_defaultClause2420_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause2423  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause2423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause2423	= { FOLLOW_statementList_in_defaultClause2423_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2426  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2426	= { FOLLOW_LTERM_in_defaultClause2426_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_defaultClause2429  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_defaultClause2429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_defaultClause2429	= { FOLLOW_caseClauseSeenDefault_in_defaultClause2429_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_caseClauseSeenDefault2469  */
static	ANTLR3_BITWORD FOLLOW_159_in_caseClauseSeenDefault2469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_caseClauseSeenDefault2469	= { FOLLOW_159_in_caseClauseSeenDefault2469_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2471  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2471	= { FOLLOW_LTERM_in_caseClauseSeenDefault2471_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClauseSeenDefault2476  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClauseSeenDefault2476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClauseSeenDefault2476	= { FOLLOW_ternaryExpression_in_caseClauseSeenDefault2476_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2478  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2478	= { FOLLOW_LTERM_in_caseClauseSeenDefault2478_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_caseClauseSeenDefault2481  */
static	ANTLR3_BITWORD FOLLOW_160_in_caseClauseSeenDefault2481_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CCFDD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_caseClauseSeenDefault2481	= { FOLLOW_160_in_caseClauseSeenDefault2481_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2483  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CCFDD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2483	= { FOLLOW_LTERM_in_caseClauseSeenDefault2483_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClauseSeenDefault2486  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClauseSeenDefault2486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClauseSeenDefault2486	= { FOLLOW_statementList_in_caseClauseSeenDefault2486_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2489  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2489_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2489	= { FOLLOW_LTERM_in_caseClauseSeenDefault2489_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2492  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2492	= { FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_throwStatement2554  */
static	ANTLR3_BITWORD FOLLOW_162_in_throwStatement2554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_throwStatement2554	= { FOLLOW_162_in_throwStatement2554_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement2556  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement2556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement2556	= { FOLLOW_expression_in_throwStatement2556_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_throwStatement2559  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_throwStatement2559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_throwStatement2559	= { FOLLOW_LTERM_in_throwStatement2559_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_throwStatement2563  */
static	ANTLR3_BITWORD FOLLOW_145_in_throwStatement2563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_throwStatement2563	= { FOLLOW_145_in_throwStatement2563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_tryStatement2591  */
static	ANTLR3_BITWORD FOLLOW_163_in_tryStatement2591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_tryStatement2591	= { FOLLOW_163_in_tryStatement2591_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2593  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2593_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2593	= { FOLLOW_LTERM_in_tryStatement2593_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement2596  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement2596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement2596	= { FOLLOW_statementBlock_in_tryStatement2596_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2598  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2598_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2598	= { FOLLOW_LTERM_in_tryStatement2598_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchFinallyBlock_in_tryStatement2601  */
static	ANTLR3_BITWORD FOLLOW_catchFinallyBlock_in_tryStatement2601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_catchFinallyBlock_in_tryStatement2601	= { FOLLOW_catchFinallyBlock_in_tryStatement2601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchBlock_in_catchFinallyBlock2636  */
static	ANTLR3_BITWORD FOLLOW_catchBlock_in_catchFinallyBlock2636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_catchBlock_in_catchFinallyBlock2636	= { FOLLOW_catchBlock_in_catchFinallyBlock2636_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchFinallyBlock2638  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchFinallyBlock2638_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchFinallyBlock2638	= { FOLLOW_LTERM_in_catchFinallyBlock2638_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock2641  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock2641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock2641	= { FOLLOW_finallyBlock_in_catchFinallyBlock2641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock2662  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock2662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock2662	= { FOLLOW_finallyBlock_in_catchFinallyBlock2662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_catchBlock2711  */
static	ANTLR3_BITWORD FOLLOW_164_in_catchBlock2711_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_catchBlock2711	= { FOLLOW_164_in_catchBlock2711_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2713  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2713	= { FOLLOW_LTERM_in_catchBlock2713_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_catchBlock2716  */
static	ANTLR3_BITWORD FOLLOW_140_in_catchBlock2716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_catchBlock2716	= { FOLLOW_140_in_catchBlock2716_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2718  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2718	= { FOLLOW_LTERM_in_catchBlock2718_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchBlock2721  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchBlock2721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchBlock2721	= { FOLLOW_Identifier_in_catchBlock2721_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2723  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2723_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2723	= { FOLLOW_LTERM_in_catchBlock2723_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_catchBlock2726  */
static	ANTLR3_BITWORD FOLLOW_141_in_catchBlock2726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_catchBlock2726	= { FOLLOW_141_in_catchBlock2726_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2728  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2728	= { FOLLOW_LTERM_in_catchBlock2728_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchBlock2731  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchBlock2731_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchBlock2731	= { FOLLOW_statementBlock_in_catchBlock2731_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_finallyBlock2767  */
static	ANTLR3_BITWORD FOLLOW_165_in_finallyBlock2767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_finallyBlock2767	= { FOLLOW_165_in_finallyBlock2767_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_finallyBlock2769  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_finallyBlock2769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_finallyBlock2769	= { FOLLOW_LTERM_in_finallyBlock2769_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyBlock2773  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyBlock2773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyBlock2773	= { FOLLOW_statementBlock_in_finallyBlock2773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_memAndCallExpression2817  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_memAndCallExpression2817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_memAndCallExpression2817	= { FOLLOW_callExpression_in_memAndCallExpression2817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memAndCallExpression2833  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memAndCallExpression2833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memAndCallExpression2833	= { FOLLOW_memberExpression_in_memAndCallExpression2833_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2873  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2873	= { FOLLOW_assignmentExpression_in_expression2873_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_expression2877  */
static	ANTLR3_BITWORD FOLLOW_142_in_expression2877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_expression2877	= { FOLLOW_142_in_expression2877_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2879  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2879	= { FOLLOW_LTERM_in_expression2879_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2882  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2882	= { FOLLOW_assignmentExpression_in_expression2882_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2920  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2920	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2920_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_expressionNoIn2924  */
static	ANTLR3_BITWORD FOLLOW_142_in_expressionNoIn2924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_expressionNoIn2924	= { FOLLOW_142_in_expressionNoIn2924_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2926  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2926	= { FOLLOW_LTERM_in_expressionNoIn2926_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2929  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2929	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2929_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression2968  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression2968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression2968	= { FOLLOW_conditionalExpression_in_assignmentExpression2968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression2980  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression2980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0003FC0000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression2980	= { FOLLOW_leftHandSideExpression_in_assignmentExpression2980_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2982  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0003FC0000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2982	= { FOLLOW_LTERM_in_assignmentExpression2982_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpression2985  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpression2985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpression2985	= { FOLLOW_assignmentOperator_in_assignmentExpression2985_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2987  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2987	= { FOLLOW_LTERM_in_assignmentExpression2987_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression2990  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression2990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression2990	= { FOLLOW_assignmentExpression_in_assignmentExpression2990_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3035  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3035	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3047  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0003FC0000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3047	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3047_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn3049  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn3049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0003FC0000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn3049	= { FOLLOW_LTERM_in_assignmentExpressionNoIn3049_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3052  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3052	= { FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3052_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn3054  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn3054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn3054	= { FOLLOW_LTERM_in_assignmentExpressionNoIn3054_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3057  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3057	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression3105  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression3105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression3105	= { FOLLOW_callExpression_in_leftHandSideExpression3105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression3114  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression3114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression3114	= { FOLLOW_newExpression_in_leftHandSideExpression3114_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression3130  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression3130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression3130	= { FOLLOW_memberExpression_in_newExpression3130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_newExpression3139  */
static	ANTLR3_BITWORD FOLLOW_166_in_newExpression3139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001F0000) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_newExpression3139	= { FOLLOW_166_in_newExpression3139_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_newExpression3141  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_newExpression3141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001F0000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_newExpression3141	= { FOLLOW_LTERM_in_newExpression3141_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression3144  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression3144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression3144	= { FOLLOW_newExpression_in_newExpression3144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_indexSuffix13166  */
static	ANTLR3_BITWORD FOLLOW_167_in_indexSuffix13166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_indexSuffix13166	= { FOLLOW_167_in_indexSuffix13166_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13168  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13168	= { FOLLOW_LTERM_in_indexSuffix13168_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix13171  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix13171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix13171	= { FOLLOW_expression_in_indexSuffix13171_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13173  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13173	= { FOLLOW_LTERM_in_indexSuffix13173_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_indexSuffix13176  */
static	ANTLR3_BITWORD FOLLOW_168_in_indexSuffix13176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_indexSuffix13176	= { FOLLOW_168_in_indexSuffix13176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_propertyReferenceSuffix13193  */
static	ANTLR3_BITWORD FOLLOW_169_in_propertyReferenceSuffix13193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_propertyReferenceSuffix13193	= { FOLLOW_169_in_propertyReferenceSuffix13193_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix13195  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix13195_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix13195	= { FOLLOW_LTERM_in_propertyReferenceSuffix13195_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix13198  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix13198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix13198	= { FOLLOW_Identifier_in_propertyReferenceSuffix13198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression3215  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression3215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression3215	= { FOLLOW_primaryExpression_in_memberExpression3215_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3224  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3224	= { FOLLOW_LTERM_in_memberExpression3224_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3227  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3227	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3227_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3244  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3244	= { FOLLOW_LTERM_in_memberExpression3244_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3247  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3247	= { FOLLOW_indexSuffix1_in_memberExpression3247_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression3266  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression3266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression3266	= { FOLLOW_functionExpression_in_memberExpression3266_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3274  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3274	= { FOLLOW_LTERM_in_memberExpression3274_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3277  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3277	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3277_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3293  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3293	= { FOLLOW_LTERM_in_memberExpression3293_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3296  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3296	= { FOLLOW_indexSuffix1_in_memberExpression3296_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_memberExpression3315  */
static	ANTLR3_BITWORD FOLLOW_166_in_memberExpression3315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001F0000) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_memberExpression3315	= { FOLLOW_166_in_memberExpression3315_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3317  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001F0000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3317	= { FOLLOW_LTERM_in_memberExpression3317_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression3322  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression3322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression3322	= { FOLLOW_memberExpression_in_memberExpression3322_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3324  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3324	= { FOLLOW_LTERM_in_memberExpression3324_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression3327  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression3327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression3327	= { FOLLOW_arguments_in_memberExpression3327_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3342  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3342	= { FOLLOW_LTERM_in_memberExpression3342_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3345  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3345	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3345_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3360  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3360	= { FOLLOW_LTERM_in_memberExpression3360_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3363  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3363	= { FOLLOW_indexSuffix1_in_memberExpression3363_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix3400  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix3400_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix3400	= { FOLLOW_indexSuffix_in_memberExpressionSuffix3400_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3410  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3410	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3410_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression3430  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression3430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression3430	= { FOLLOW_memberExpression_in_callExpression3430_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3432  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3432	= { FOLLOW_LTERM_in_callExpression3432_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3435  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3435	= { FOLLOW_arguments_in_callExpression3435_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3449  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3449	= { FOLLOW_LTERM_in_callExpression3449_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3452  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3452	= { FOLLOW_arguments_in_callExpression3452_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3467  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3467	= { FOLLOW_LTERM_in_callExpression3467_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression3470  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression3470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression3470	= { FOLLOW_indexSuffix1_in_callExpression3470_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3485  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3485	= { FOLLOW_LTERM_in_callExpression3485_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression3488  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression3488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression3488	= { FOLLOW_propertyReferenceSuffix1_in_callExpression3488_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix3515  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix3515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix3515	= { FOLLOW_arguments_in_callExpressionSuffix3515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix3524  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix3524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix3524	= { FOLLOW_indexSuffix_in_callExpressionSuffix3524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3533  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3533	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_arguments3555  */
static	ANTLR3_BITWORD FOLLOW_140_in_arguments3555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C00000B800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_arguments3555	= { FOLLOW_140_in_arguments3555_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3557  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C00000B800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3557	= { FOLLOW_LTERM_in_arguments3557_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments3561  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments3561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments3561	= { FOLLOW_expression_in_arguments3561_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3565  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3565	= { FOLLOW_LTERM_in_arguments3565_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_arguments3568  */
static	ANTLR3_BITWORD FOLLOW_141_in_arguments3568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_arguments3568	= { FOLLOW_141_in_arguments3568_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_arguments3582  */
static	ANTLR3_BITWORD FOLLOW_140_in_arguments3582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_arguments3582	= { FOLLOW_140_in_arguments3582_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3584  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3584	= { FOLLOW_LTERM_in_arguments3584_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments3587  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments3587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000006000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments3587	= { FOLLOW_expression_in_arguments3587_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_arguments3590  */
static	ANTLR3_BITWORD FOLLOW_142_in_arguments3590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_arguments3590	= { FOLLOW_142_in_arguments3590_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3592  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3592_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3592	= { FOLLOW_LTERM_in_arguments3592_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments3595  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments3595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000006000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments3595	= { FOLLOW_expression_in_arguments3595_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3599  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3599	= { FOLLOW_LTERM_in_arguments3599_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_arguments3602  */
static	ANTLR3_BITWORD FOLLOW_141_in_arguments3602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_arguments3602	= { FOLLOW_141_in_arguments3602_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_indexSuffix3636  */
static	ANTLR3_BITWORD FOLLOW_167_in_indexSuffix3636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_indexSuffix3636	= { FOLLOW_167_in_indexSuffix3636_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3638  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3638_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3638	= { FOLLOW_LTERM_in_indexSuffix3638_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix3641  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix3641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix3641	= { FOLLOW_expression_in_indexSuffix3641_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3643  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3643	= { FOLLOW_LTERM_in_indexSuffix3643_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_indexSuffix3646  */
static	ANTLR3_BITWORD FOLLOW_168_in_indexSuffix3646_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_indexSuffix3646	= { FOLLOW_168_in_indexSuffix3646_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_propertyReferenceSuffix3667  */
static	ANTLR3_BITWORD FOLLOW_169_in_propertyReferenceSuffix3667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_propertyReferenceSuffix3667	= { FOLLOW_169_in_propertyReferenceSuffix3667_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix3669  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix3669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix3669	= { FOLLOW_LTERM_in_propertyReferenceSuffix3669_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix3672  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix3672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix3672	= { FOLLOW_Identifier_in_propertyReferenceSuffix3672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_assignmentOperator3700  */
static	ANTLR3_BITWORD FOLLOW_147_in_assignmentOperator3700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_assignmentOperator3700	= { FOLLOW_147_in_assignmentOperator3700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_assignmentOperator3709  */
static	ANTLR3_BITWORD FOLLOW_170_in_assignmentOperator3709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_assignmentOperator3709	= { FOLLOW_170_in_assignmentOperator3709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_assignmentOperator3718  */
static	ANTLR3_BITWORD FOLLOW_171_in_assignmentOperator3718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_assignmentOperator3718	= { FOLLOW_171_in_assignmentOperator3718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_assignmentOperator3728  */
static	ANTLR3_BITWORD FOLLOW_172_in_assignmentOperator3728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_assignmentOperator3728	= { FOLLOW_172_in_assignmentOperator3728_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_assignmentOperator3737  */
static	ANTLR3_BITWORD FOLLOW_173_in_assignmentOperator3737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_assignmentOperator3737	= { FOLLOW_173_in_assignmentOperator3737_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_assignmentOperator3746  */
static	ANTLR3_BITWORD FOLLOW_174_in_assignmentOperator3746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_assignmentOperator3746	= { FOLLOW_174_in_assignmentOperator3746_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_assignmentOperator3756  */
static	ANTLR3_BITWORD FOLLOW_175_in_assignmentOperator3756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_assignmentOperator3756	= { FOLLOW_175_in_assignmentOperator3756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_assignmentOperator3764  */
static	ANTLR3_BITWORD FOLLOW_176_in_assignmentOperator3764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_assignmentOperator3764	= { FOLLOW_176_in_assignmentOperator3764_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_assignmentOperator3773  */
static	ANTLR3_BITWORD FOLLOW_177_in_assignmentOperator3773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_assignmentOperator3773	= { FOLLOW_177_in_assignmentOperator3773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstruct_in_conditionalExpression3806  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstruct_in_conditionalExpression3806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstruct_in_conditionalExpression3806	= { FOLLOW_msgRecvConstruct_in_conditionalExpression3806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3844  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3844	= { FOLLOW_msgConstruct_in_msgRecvConstruct3844_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3863  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3863	= { FOLLOW_LTERM_in_msgRecvConstruct3863_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_msgRecvConstruct3866  */
static	ANTLR3_BITWORD FOLLOW_178_in_msgRecvConstruct3866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_msgRecvConstruct3866	= { FOLLOW_178_in_msgRecvConstruct3866_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3868  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3868	= { FOLLOW_LTERM_in_msgRecvConstruct3868_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3873  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3873	= { FOLLOW_msgConstruct_in_msgRecvConstruct3873_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_msgRecvConstruct3875  */
static	ANTLR3_BITWORD FOLLOW_178_in_msgRecvConstruct3875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_msgRecvConstruct3875	= { FOLLOW_178_in_msgRecvConstruct3875_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3879  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3879	= { FOLLOW_msgConstruct_in_msgRecvConstruct3879_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3910  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3910	= { FOLLOW_LTERM_in_msgRecvConstruct3910_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_msgRecvConstruct3913  */
static	ANTLR3_BITWORD FOLLOW_178_in_msgRecvConstruct3913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_msgRecvConstruct3913	= { FOLLOW_178_in_msgRecvConstruct3913_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3915  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3915	= { FOLLOW_LTERM_in_msgRecvConstruct3915_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3920  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3920	= { FOLLOW_msgConstruct_in_msgRecvConstruct3920_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct3962  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct3962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct3962	= { FOLLOW_msgSenderConstruct_in_msgConstruct3962_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgConstruct3980  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgConstruct3980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgConstruct3980	= { FOLLOW_LTERM_in_msgConstruct3980_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_msgConstruct3983  */
static	ANTLR3_BITWORD FOLLOW_179_in_msgConstruct3983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_msgConstruct3983	= { FOLLOW_179_in_msgConstruct3983_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgConstruct3985  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgConstruct3985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgConstruct3985	= { FOLLOW_LTERM_in_msgConstruct3985_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct3990  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct3990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct3990	= { FOLLOW_msgSenderConstruct_in_msgConstruct3990_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct4030  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct4030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct4030	= { FOLLOW_ternaryExpression_in_msgSenderConstruct4030_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSenderConstruct4048  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSenderConstruct4048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSenderConstruct4048	= { FOLLOW_LTERM_in_msgSenderConstruct4048_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_msgSenderConstruct4051  */
static	ANTLR3_BITWORD FOLLOW_180_in_msgSenderConstruct4051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_msgSenderConstruct4051	= { FOLLOW_180_in_msgSenderConstruct4051_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSenderConstruct4053  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSenderConstruct4053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSenderConstruct4053	= { FOLLOW_LTERM_in_msgSenderConstruct4053_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct4058  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct4058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct4058	= { FOLLOW_ternaryExpression_in_msgSenderConstruct4058_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_ternaryExpression4099  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_ternaryExpression4099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_ternaryExpression4099	= { FOLLOW_logicalORExpression_in_ternaryExpression4099_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4107  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4107	= { FOLLOW_LTERM_in_ternaryExpression4107_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_ternaryExpression4110  */
static	ANTLR3_BITWORD FOLLOW_181_in_ternaryExpression4110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_ternaryExpression4110	= { FOLLOW_181_in_ternaryExpression4110_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4112  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4112	= { FOLLOW_LTERM_in_ternaryExpression4112_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression4117  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression4117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression4117	= { FOLLOW_assignmentExpression_in_ternaryExpression4117_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4119  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4119	= { FOLLOW_LTERM_in_ternaryExpression4119_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_ternaryExpression4122  */
static	ANTLR3_BITWORD FOLLOW_160_in_ternaryExpression4122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_ternaryExpression4122	= { FOLLOW_160_in_ternaryExpression4122_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4124  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4124	= { FOLLOW_LTERM_in_ternaryExpression4124_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression4129  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression4129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression4129	= { FOLLOW_assignmentExpression_in_ternaryExpression4129_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4172  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4172	= { FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4199  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800400C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4199	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4199_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4218  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4218	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4218_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_msgRecvConstructNoIn4221  */
static	ANTLR3_BITWORD FOLLOW_178_in_msgRecvConstructNoIn4221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_msgRecvConstructNoIn4221	= { FOLLOW_178_in_msgRecvConstructNoIn4221_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4223  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4223	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4223_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4228  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4228	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4228_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_msgRecvConstructNoIn4230  */
static	ANTLR3_BITWORD FOLLOW_178_in_msgRecvConstructNoIn4230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_msgRecvConstructNoIn4230	= { FOLLOW_178_in_msgRecvConstructNoIn4230_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4234  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4234	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4234_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4267  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4267	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4267_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4269  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4269	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4269_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_msgRecvConstructNoIn4272  */
static	ANTLR3_BITWORD FOLLOW_178_in_msgRecvConstructNoIn4272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_msgRecvConstructNoIn4272	= { FOLLOW_178_in_msgRecvConstructNoIn4272_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4274  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4274	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4274_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4279  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4279	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4279_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4332  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4332	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4332_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgConstructNoIn4350  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgConstructNoIn4350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgConstructNoIn4350	= { FOLLOW_LTERM_in_msgConstructNoIn4350_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_msgConstructNoIn4353  */
static	ANTLR3_BITWORD FOLLOW_179_in_msgConstructNoIn4353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_msgConstructNoIn4353	= { FOLLOW_179_in_msgConstructNoIn4353_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4357  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4357	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4357_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4405  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4405	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4405_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSenderConstructNoIn4423  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSenderConstructNoIn4423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSenderConstructNoIn4423	= { FOLLOW_LTERM_in_msgSenderConstructNoIn4423_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_msgSenderConstructNoIn4426  */
static	ANTLR3_BITWORD FOLLOW_180_in_msgSenderConstructNoIn4426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_msgSenderConstructNoIn4426	= { FOLLOW_180_in_msgSenderConstructNoIn4426_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4430  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4430	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4430_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4496  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4496	= { FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4496_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4504  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4504	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4504_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_ternaryExpressionNoIn4507  */
static	ANTLR3_BITWORD FOLLOW_181_in_ternaryExpressionNoIn4507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_ternaryExpressionNoIn4507	= { FOLLOW_181_in_ternaryExpressionNoIn4507_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4509  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4509	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4509_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4514  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4514	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4514_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4516  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4516	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4516_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_ternaryExpressionNoIn4519  */
static	ANTLR3_BITWORD FOLLOW_160_in_ternaryExpressionNoIn4519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_ternaryExpressionNoIn4519	= { FOLLOW_160_in_ternaryExpressionNoIn4519_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4521  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4521_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4521	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4521_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4526  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4526	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4526_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression4579  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression4579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression4579	= { FOLLOW_logicalANDExpression_in_logicalORExpression4579_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression4586  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression4586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression4586	= { FOLLOW_LTERM_in_logicalORExpression4586_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_logicalORExpression4589  */
static	ANTLR3_BITWORD FOLLOW_182_in_logicalORExpression4589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_logicalORExpression4589	= { FOLLOW_182_in_logicalORExpression4589_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression4591  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression4591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression4591	= { FOLLOW_LTERM_in_logicalORExpression4591_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression4594  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression4594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression4594	= { FOLLOW_logicalANDExpression_in_logicalORExpression4594_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression4621  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression4621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression4621	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression4621_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression4628  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression4628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression4628	= { FOLLOW_LTERM_in_logicalANDExpression4628_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_logicalANDExpression4631  */
static	ANTLR3_BITWORD FOLLOW_183_in_logicalANDExpression4631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_logicalANDExpression4631	= { FOLLOW_183_in_logicalANDExpression4631_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression4633  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression4633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression4633	= { FOLLOW_LTERM_in_logicalANDExpression4633_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression4636  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression4636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression4636	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression4636_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4664  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4664	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4664_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn4671  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn4671_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn4671	= { FOLLOW_LTERM_in_logicalORExpressionNoIn4671_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_logicalORExpressionNoIn4674  */
static	ANTLR3_BITWORD FOLLOW_182_in_logicalORExpressionNoIn4674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_logicalORExpressionNoIn4674	= { FOLLOW_182_in_logicalORExpressionNoIn4674_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn4676  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn4676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn4676	= { FOLLOW_LTERM_in_logicalORExpressionNoIn4676_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4679  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4679	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4679_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4708  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4708	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4708_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn4716  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn4716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn4716	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn4716_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_logicalANDExpressionNoIn4719  */
static	ANTLR3_BITWORD FOLLOW_183_in_logicalANDExpressionNoIn4719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_logicalANDExpressionNoIn4719	= { FOLLOW_183_in_logicalANDExpressionNoIn4719_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn4721  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn4721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn4721	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn4721_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4724  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4724	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4724_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4751  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4751	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4751_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression4759  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression4759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression4759	= { FOLLOW_LTERM_in_bitwiseORExpression4759_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_bitwiseORExpression4762  */
static	ANTLR3_BITWORD FOLLOW_184_in_bitwiseORExpression4762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_bitwiseORExpression4762	= { FOLLOW_184_in_bitwiseORExpression4762_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression4764  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression4764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression4764	= { FOLLOW_LTERM_in_bitwiseORExpression4764_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4767  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4767	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4767_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4794  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4794	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4794_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4802  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4802_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4802	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4802_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_bitwiseORExpressionNoIn4805  */
static	ANTLR3_BITWORD FOLLOW_184_in_bitwiseORExpressionNoIn4805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_bitwiseORExpressionNoIn4805	= { FOLLOW_184_in_bitwiseORExpressionNoIn4805_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4807  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4807	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4807_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4810  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4810	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4810_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4836  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4836	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4836_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4844  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4844	= { FOLLOW_LTERM_in_bitwiseXORExpression4844_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_bitwiseXORExpression4847  */
static	ANTLR3_BITWORD FOLLOW_185_in_bitwiseXORExpression4847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_bitwiseXORExpression4847	= { FOLLOW_185_in_bitwiseXORExpression4847_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4849  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4849	= { FOLLOW_LTERM_in_bitwiseXORExpression4849_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4852  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4852	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4852_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4879  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4879	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4879_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4886  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4886	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4886_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_bitwiseXORExpressionNoIn4889  */
static	ANTLR3_BITWORD FOLLOW_185_in_bitwiseXORExpressionNoIn4889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_bitwiseXORExpressionNoIn4889	= { FOLLOW_185_in_bitwiseXORExpressionNoIn4889_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4891  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4891	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4891_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4894  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4894	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4894_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4922  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4922	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4922_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4930  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4930	= { FOLLOW_LTERM_in_bitwiseANDExpression4930_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_bitwiseANDExpression4933  */
static	ANTLR3_BITWORD FOLLOW_186_in_bitwiseANDExpression4933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_bitwiseANDExpression4933	= { FOLLOW_186_in_bitwiseANDExpression4933_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4935  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4935	= { FOLLOW_LTERM_in_bitwiseANDExpression4935_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4938  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4938	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4938_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4966  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4966	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4966_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4974  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4974	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4974_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_bitwiseANDExpressionNoIn4977  */
static	ANTLR3_BITWORD FOLLOW_186_in_bitwiseANDExpressionNoIn4977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_bitwiseANDExpressionNoIn4977	= { FOLLOW_186_in_bitwiseANDExpressionNoIn4977_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4979  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4979	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4979_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4982  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4982	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4982_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression5009  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression5009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x7800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression5009	= { FOLLOW_relationalExpression_in_equalityExpression5009_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression5016  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression5016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x7800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression5016	= { FOLLOW_LTERM_in_equalityExpression5016_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpression5019  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpression5019_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpression5019	= { FOLLOW_equalityOps_in_equalityExpression5019_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression5021  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression5021_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression5021	= { FOLLOW_LTERM_in_equalityExpression5021_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression5024  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression5024_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x7800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression5024	= { FOLLOW_relationalExpression_in_equalityExpression5024_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_equalityOps5050  */
static	ANTLR3_BITWORD FOLLOW_187_in_equalityOps5050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_equalityOps5050	= { FOLLOW_187_in_equalityOps5050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_equalityOps5060  */
static	ANTLR3_BITWORD FOLLOW_188_in_equalityOps5060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_equalityOps5060	= { FOLLOW_188_in_equalityOps5060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_equalityOps5070  */
static	ANTLR3_BITWORD FOLLOW_189_in_equalityOps5070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_equalityOps5070	= { FOLLOW_189_in_equalityOps5070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_equalityOps5080  */
static	ANTLR3_BITWORD FOLLOW_190_in_equalityOps5080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_equalityOps5080	= { FOLLOW_190_in_equalityOps5080_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5104  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x7800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5104	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5104_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn5111  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn5111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x7800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn5111	= { FOLLOW_LTERM_in_equalityExpressionNoIn5111_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpressionNoIn5114  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpressionNoIn5114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpressionNoIn5114	= { FOLLOW_equalityOps_in_equalityExpressionNoIn5114_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn5116  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn5116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn5116	= { FOLLOW_LTERM_in_equalityExpressionNoIn5116_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5119  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x7800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5119	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5119_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_relationalOps5151  */
static	ANTLR3_BITWORD FOLLOW_191_in_relationalOps5151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_relationalOps5151	= { FOLLOW_191_in_relationalOps5151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_relationalOps5162  */
static	ANTLR3_BITWORD FOLLOW_192_in_relationalOps5162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_relationalOps5162	= { FOLLOW_192_in_relationalOps5162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_relationalOps5173  */
static	ANTLR3_BITWORD FOLLOW_193_in_relationalOps5173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_relationalOps5173	= { FOLLOW_193_in_relationalOps5173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_relationalOps5183  */
static	ANTLR3_BITWORD FOLLOW_194_in_relationalOps5183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_relationalOps5183	= { FOLLOW_194_in_relationalOps5183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_relationalOps5193  */
static	ANTLR3_BITWORD FOLLOW_195_in_relationalOps5193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_relationalOps5193	= { FOLLOW_195_in_relationalOps5193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_relationalOps5203  */
static	ANTLR3_BITWORD FOLLOW_153_in_relationalOps5203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_relationalOps5203	= { FOLLOW_153_in_relationalOps5203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression5236  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression5236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x8000000002000000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression5236	= { FOLLOW_additiveExpression_in_relationalExpression5236_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression5244  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression5244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x8000000002000000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression5244	= { FOLLOW_LTERM_in_relationalExpression5244_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression5247  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression5247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression5247	= { FOLLOW_relationalOps_in_relationalExpression5247_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression5249  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression5249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression5249	= { FOLLOW_LTERM_in_relationalExpression5249_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression5252  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression5252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x8000000002000000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression5252	= { FOLLOW_additiveExpression_in_relationalExpression5252_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_relationalOpsNoIn5283  */
static	ANTLR3_BITWORD FOLLOW_191_in_relationalOpsNoIn5283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_relationalOpsNoIn5283	= { FOLLOW_191_in_relationalOpsNoIn5283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_relationalOpsNoIn5294  */
static	ANTLR3_BITWORD FOLLOW_192_in_relationalOpsNoIn5294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_relationalOpsNoIn5294	= { FOLLOW_192_in_relationalOpsNoIn5294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_relationalOpsNoIn5305  */
static	ANTLR3_BITWORD FOLLOW_193_in_relationalOpsNoIn5305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_relationalOpsNoIn5305	= { FOLLOW_193_in_relationalOpsNoIn5305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_relationalOpsNoIn5315  */
static	ANTLR3_BITWORD FOLLOW_194_in_relationalOpsNoIn5315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_relationalOpsNoIn5315	= { FOLLOW_194_in_relationalOpsNoIn5315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_relationalOpsNoIn5325  */
static	ANTLR3_BITWORD FOLLOW_195_in_relationalOpsNoIn5325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_relationalOpsNoIn5325	= { FOLLOW_195_in_relationalOpsNoIn5325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_addOps5340  */
static	ANTLR3_BITWORD FOLLOW_196_in_addOps5340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_addOps5340	= { FOLLOW_196_in_addOps5340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_addOps5350  */
static	ANTLR3_BITWORD FOLLOW_197_in_addOps5350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_addOps5350	= { FOLLOW_197_in_addOps5350_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn5375  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn5375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn5375	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn5375_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn5383  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn5383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn5383	= { FOLLOW_LTERM_in_relationalExpressionNoIn5383_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5386  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5386	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5386_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn5388  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn5388_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn5388	= { FOLLOW_LTERM_in_relationalExpressionNoIn5388_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn5391  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn5391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn5391	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn5391_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression5418  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression5418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000030) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression5418	= { FOLLOW_multiplicativeExpression_in_additiveExpression5418_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression5425  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression5425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000030) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression5425	= { FOLLOW_LTERM_in_additiveExpression5425_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_additiveExpression5428  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_additiveExpression5428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_additiveExpression5428	= { FOLLOW_addOps_in_additiveExpression5428_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression5430  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression5430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression5430	= { FOLLOW_LTERM_in_additiveExpression5430_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression5433  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression5433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000030) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression5433	= { FOLLOW_multiplicativeExpression_in_additiveExpression5433_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_multOps5458  */
static	ANTLR3_BITWORD FOLLOW_198_in_multOps5458_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_multOps5458	= { FOLLOW_198_in_multOps5458_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_multOps5468  */
static	ANTLR3_BITWORD FOLLOW_199_in_multOps5468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_multOps5468	= { FOLLOW_199_in_multOps5468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_multOps5478  */
static	ANTLR3_BITWORD FOLLOW_200_in_multOps5478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_multOps5478	= { FOLLOW_200_in_multOps5478_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression5497  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression5497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000001C0) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression5497	= { FOLLOW_unaryExpression_in_multiplicativeExpression5497_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression5506  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression5506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000001C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression5506	= { FOLLOW_LTERM_in_multiplicativeExpression5506_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multOps_in_multiplicativeExpression5509  */
static	ANTLR3_BITWORD FOLLOW_multOps_in_multiplicativeExpression5509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_multOps_in_multiplicativeExpression5509	= { FOLLOW_multOps_in_multiplicativeExpression5509_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression5511  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression5511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression5511	= { FOLLOW_LTERM_in_multiplicativeExpression5511_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression5514  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression5514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000001C0) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression5514	= { FOLLOW_unaryExpression_in_multiplicativeExpression5514_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5541  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5541	= { FOLLOW_leftHandSideExpression_in_postfixExpression5541_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_postfixExpression5543  */
static	ANTLR3_BITWORD FOLLOW_201_in_postfixExpression5543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_postfixExpression5543	= { FOLLOW_201_in_postfixExpression5543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5557  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5557	= { FOLLOW_leftHandSideExpression_in_postfixExpression5557_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_postfixExpression5559  */
static	ANTLR3_BITWORD FOLLOW_202_in_postfixExpression5559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_postfixExpression5559	= { FOLLOW_202_in_postfixExpression5559_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5572  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5572	= { FOLLOW_leftHandSideExpression_in_postfixExpression5572_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_unaryOps5586  */
static	ANTLR3_BITWORD FOLLOW_203_in_unaryOps5586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_unaryOps5586	= { FOLLOW_203_in_unaryOps5586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_204_in_unaryOps5596  */
static	ANTLR3_BITWORD FOLLOW_204_in_unaryOps5596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_204_in_unaryOps5596	= { FOLLOW_204_in_unaryOps5596_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_205_in_unaryOps5606  */
static	ANTLR3_BITWORD FOLLOW_205_in_unaryOps5606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_205_in_unaryOps5606	= { FOLLOW_205_in_unaryOps5606_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_unaryOps5616  */
static	ANTLR3_BITWORD FOLLOW_202_in_unaryOps5616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_unaryOps5616	= { FOLLOW_202_in_unaryOps5616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_unaryOps5627  */
static	ANTLR3_BITWORD FOLLOW_201_in_unaryOps5627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_unaryOps5627	= { FOLLOW_201_in_unaryOps5627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_unaryOps5638  */
static	ANTLR3_BITWORD FOLLOW_196_in_unaryOps5638_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_unaryOps5638	= { FOLLOW_196_in_unaryOps5638_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_unaryOps5650  */
static	ANTLR3_BITWORD FOLLOW_197_in_unaryOps5650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_unaryOps5650	= { FOLLOW_197_in_unaryOps5650_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_206_in_unaryOps5662  */
static	ANTLR3_BITWORD FOLLOW_206_in_unaryOps5662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_206_in_unaryOps5662	= { FOLLOW_206_in_unaryOps5662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_207_in_unaryOps5674  */
static	ANTLR3_BITWORD FOLLOW_207_in_unaryOps5674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_207_in_unaryOps5674	= { FOLLOW_207_in_unaryOps5674_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression5700  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression5700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression5700	= { FOLLOW_postfixExpression_in_unaryExpression5700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryOps_in_unaryExpression5716  */
static	ANTLR3_BITWORD FOLLOW_unaryOps_in_unaryExpression5716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryOps_in_unaryExpression5716	= { FOLLOW_unaryOps_in_unaryExpression5716_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression5720  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression5720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression5720	= { FOLLOW_unaryExpression_in_unaryExpression5720_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_208_in_primaryExpression5749  */
static	ANTLR3_BITWORD FOLLOW_208_in_primaryExpression5749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_208_in_primaryExpression5749	= { FOLLOW_208_in_primaryExpression5749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_primaryExpression5767  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_primaryExpression5767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_primaryExpression5767	= { FOLLOW_vectorLiteral_in_primaryExpression5767_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_quaternionLiteral_in_primaryExpression5785  */
static	ANTLR3_BITWORD FOLLOW_quaternionLiteral_in_primaryExpression5785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_quaternionLiteral_in_primaryExpression5785	= { FOLLOW_quaternionLiteral_in_primaryExpression5785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression5790  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression5790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression5790	= { FOLLOW_Identifier_in_primaryExpression5790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression5802  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression5802_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression5802	= { FOLLOW_dollarExpression_in_primaryExpression5802_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression5807  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression5807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression5807	= { FOLLOW_literal_in_primaryExpression5807_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression5812  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression5812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression5812	= { FOLLOW_arrayLiteral_in_primaryExpression5812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression5817  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression5817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression5817	= { FOLLOW_objectLiteral_in_primaryExpression5817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_primaryExpression5829  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_primaryExpression5829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_primaryExpression5829	= { FOLLOW_patternLiteral_in_primaryExpression5829_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_primaryExpression5834  */
static	ANTLR3_BITWORD FOLLOW_140_in_primaryExpression5834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_primaryExpression5834	= { FOLLOW_140_in_primaryExpression5834_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5836  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5836	= { FOLLOW_LTERM_in_primaryExpression5836_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression5839  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression5839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression5839	= { FOLLOW_expression_in_primaryExpression5839_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5841  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5841	= { FOLLOW_LTERM_in_primaryExpression5841_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_primaryExpression5844  */
static	ANTLR3_BITWORD FOLLOW_141_in_primaryExpression5844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_primaryExpression5844	= { FOLLOW_141_in_primaryExpression5844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_vectorLiteral5872  */
static	ANTLR3_BITWORD FOLLOW_191_in_vectorLiteral5872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_vectorLiteral5872	= { FOLLOW_191_in_vectorLiteral5872_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5874  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5874	= { FOLLOW_LTERM_in_vectorLiteral5874_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral5879  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral5879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral5879	= { FOLLOW_vectorLiteralField_in_vectorLiteral5879_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5881  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5881	= { FOLLOW_LTERM_in_vectorLiteral5881_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_vectorLiteral5884  */
static	ANTLR3_BITWORD FOLLOW_142_in_vectorLiteral5884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_vectorLiteral5884	= { FOLLOW_142_in_vectorLiteral5884_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5886  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5886	= { FOLLOW_LTERM_in_vectorLiteral5886_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral5891  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral5891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral5891	= { FOLLOW_vectorLiteralField_in_vectorLiteral5891_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5893  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5893_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5893	= { FOLLOW_LTERM_in_vectorLiteral5893_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_vectorLiteral5896  */
static	ANTLR3_BITWORD FOLLOW_142_in_vectorLiteral5896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_vectorLiteral5896	= { FOLLOW_142_in_vectorLiteral5896_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5898  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5898	= { FOLLOW_LTERM_in_vectorLiteral5898_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral5903  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral5903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral5903	= { FOLLOW_vectorLiteralField_in_vectorLiteral5903_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5905  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5905	= { FOLLOW_LTERM_in_vectorLiteral5905_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_vectorLiteral5908  */
static	ANTLR3_BITWORD FOLLOW_192_in_vectorLiteral5908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_vectorLiteral5908	= { FOLLOW_192_in_vectorLiteral5908_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_quaternionLiteral5948  */
static	ANTLR3_BITWORD FOLLOW_191_in_quaternionLiteral5948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_quaternionLiteral5948	= { FOLLOW_191_in_quaternionLiteral5948_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5950  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5950	= { FOLLOW_LTERM_in_quaternionLiteral5950_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral5955  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral5955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral5955	= { FOLLOW_vectorLiteralField_in_quaternionLiteral5955_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5957  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5957	= { FOLLOW_LTERM_in_quaternionLiteral5957_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_quaternionLiteral5960  */
static	ANTLR3_BITWORD FOLLOW_142_in_quaternionLiteral5960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_quaternionLiteral5960	= { FOLLOW_142_in_quaternionLiteral5960_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5962  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5962	= { FOLLOW_LTERM_in_quaternionLiteral5962_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral5967  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral5967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral5967	= { FOLLOW_vectorLiteralField_in_quaternionLiteral5967_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5969  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5969	= { FOLLOW_LTERM_in_quaternionLiteral5969_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_quaternionLiteral5972  */
static	ANTLR3_BITWORD FOLLOW_142_in_quaternionLiteral5972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_quaternionLiteral5972	= { FOLLOW_142_in_quaternionLiteral5972_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5974  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5974	= { FOLLOW_LTERM_in_quaternionLiteral5974_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral5979  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral5979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral5979	= { FOLLOW_vectorLiteralField_in_quaternionLiteral5979_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5981  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5981	= { FOLLOW_LTERM_in_quaternionLiteral5981_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_quaternionLiteral5984  */
static	ANTLR3_BITWORD FOLLOW_142_in_quaternionLiteral5984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_quaternionLiteral5984	= { FOLLOW_142_in_quaternionLiteral5984_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5986  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5986	= { FOLLOW_LTERM_in_quaternionLiteral5986_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral5991  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral5991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral5991	= { FOLLOW_vectorLiteralField_in_quaternionLiteral5991_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5993  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5993	= { FOLLOW_LTERM_in_quaternionLiteral5993_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_quaternionLiteral5995  */
static	ANTLR3_BITWORD FOLLOW_192_in_quaternionLiteral5995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_quaternionLiteral5995	= { FOLLOW_192_in_quaternionLiteral5995_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_quaternionLiteral6025  */
static	ANTLR3_BITWORD FOLLOW_191_in_quaternionLiteral6025_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_quaternionLiteral6025	= { FOLLOW_191_in_quaternionLiteral6025_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6027  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6027_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6027	= { FOLLOW_LTERM_in_quaternionLiteral6027_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6032  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6032	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6032_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6034  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6034	= { FOLLOW_LTERM_in_quaternionLiteral6034_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_quaternionLiteral6037  */
static	ANTLR3_BITWORD FOLLOW_142_in_quaternionLiteral6037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_quaternionLiteral6037	= { FOLLOW_142_in_quaternionLiteral6037_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6039  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6039	= { FOLLOW_LTERM_in_quaternionLiteral6039_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6044  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6044_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6044	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6044_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6046  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6046	= { FOLLOW_LTERM_in_quaternionLiteral6046_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_quaternionLiteral6049  */
static	ANTLR3_BITWORD FOLLOW_142_in_quaternionLiteral6049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_quaternionLiteral6049	= { FOLLOW_142_in_quaternionLiteral6049_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6051  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6051	= { FOLLOW_LTERM_in_quaternionLiteral6051_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6056  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6056	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6056_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6058  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6058	= { FOLLOW_LTERM_in_quaternionLiteral6058_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_quaternionLiteral6061  */
static	ANTLR3_BITWORD FOLLOW_145_in_quaternionLiteral6061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_quaternionLiteral6061	= { FOLLOW_145_in_quaternionLiteral6061_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6063  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6063	= { FOLLOW_LTERM_in_quaternionLiteral6063_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6068  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6068	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6068_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6070  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6070	= { FOLLOW_LTERM_in_quaternionLiteral6070_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_quaternionLiteral6072  */
static	ANTLR3_BITWORD FOLLOW_192_in_quaternionLiteral6072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_quaternionLiteral6072	= { FOLLOW_192_in_quaternionLiteral6072_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_quaternionLiteral6102  */
static	ANTLR3_BITWORD FOLLOW_191_in_quaternionLiteral6102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_quaternionLiteral6102	= { FOLLOW_191_in_quaternionLiteral6102_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6104  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6104	= { FOLLOW_LTERM_in_quaternionLiteral6104_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6109  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6109	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6109_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6111  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6111	= { FOLLOW_LTERM_in_quaternionLiteral6111_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_quaternionLiteral6114  */
static	ANTLR3_BITWORD FOLLOW_145_in_quaternionLiteral6114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_quaternionLiteral6114	= { FOLLOW_145_in_quaternionLiteral6114_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6116  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6116	= { FOLLOW_LTERM_in_quaternionLiteral6116_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6121  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6121	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6121_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6123  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6123	= { FOLLOW_LTERM_in_quaternionLiteral6123_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_quaternionLiteral6125  */
static	ANTLR3_BITWORD FOLLOW_192_in_quaternionLiteral6125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_quaternionLiteral6125	= { FOLLOW_192_in_quaternionLiteral6125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_vectorLiteralField6173  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_vectorLiteralField6173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_vectorLiteralField6173	= { FOLLOW_additiveExpression_in_vectorLiteralField6173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_vectorLiteralField6186  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_vectorLiteralField6186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_vectorLiteralField6186	= { FOLLOW_NumericLiteral_in_vectorLiteralField6186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_vectorLiteralField6198  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_vectorLiteralField6198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_vectorLiteralField6198	= { FOLLOW_callExpression_in_vectorLiteralField6198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_vectorLiteralField6211  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_vectorLiteralField6211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_vectorLiteralField6211	= { FOLLOW_memberExpression_in_vectorLiteralField6211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_209_in_dollarExpression6245  */
static	ANTLR3_BITWORD FOLLOW_209_in_dollarExpression6245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_209_in_dollarExpression6245	= { FOLLOW_209_in_dollarExpression6245_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression6247  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression6247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression6247	= { FOLLOW_LTERM_in_dollarExpression6247_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression6250  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression6250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression6250	= { FOLLOW_Identifier_in_dollarExpression6250_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression6252  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression6252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression6252	= { FOLLOW_LTERM_in_dollarExpression6252_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_209_in_dollarExpression6255  */
static	ANTLR3_BITWORD FOLLOW_209_in_dollarExpression6255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_209_in_dollarExpression6255	= { FOLLOW_209_in_dollarExpression6255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_arrayLiteral6291  */
static	ANTLR3_BITWORD FOLLOW_167_in_arrayLiteral6291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800001C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_arrayLiteral6291	= { FOLLOW_167_in_arrayLiteral6291_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6293  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800001C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6293	= { FOLLOW_LTERM_in_arrayLiteral6293_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral6297  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral6297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral6297	= { FOLLOW_expression_in_arrayLiteral6297_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6301  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6301	= { FOLLOW_LTERM_in_arrayLiteral6301_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_arrayLiteral6304  */
static	ANTLR3_BITWORD FOLLOW_168_in_arrayLiteral6304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_arrayLiteral6304	= { FOLLOW_168_in_arrayLiteral6304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_arrayLiteral6319  */
static	ANTLR3_BITWORD FOLLOW_167_in_arrayLiteral6319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_arrayLiteral6319	= { FOLLOW_167_in_arrayLiteral6319_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6321  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6321	= { FOLLOW_LTERM_in_arrayLiteral6321_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral6326  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral6326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral6326	= { FOLLOW_expression_in_arrayLiteral6326_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_arrayLiteral6329  */
static	ANTLR3_BITWORD FOLLOW_142_in_arrayLiteral6329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_arrayLiteral6329	= { FOLLOW_142_in_arrayLiteral6329_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6331  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6331	= { FOLLOW_LTERM_in_arrayLiteral6331_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral6336  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral6336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral6336	= { FOLLOW_expression_in_arrayLiteral6336_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_arrayLiteral6341  */
static	ANTLR3_BITWORD FOLLOW_142_in_arrayLiteral6341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_arrayLiteral6341	= { FOLLOW_142_in_arrayLiteral6341_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6345  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6345	= { FOLLOW_LTERM_in_arrayLiteral6345_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_arrayLiteral6348  */
static	ANTLR3_BITWORD FOLLOW_168_in_arrayLiteral6348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_arrayLiteral6348	= { FOLLOW_168_in_arrayLiteral6348_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_objectLiteral6380  */
static	ANTLR3_BITWORD FOLLOW_143_in_objectLiteral6380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_objectLiteral6380	= { FOLLOW_143_in_objectLiteral6380_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6382  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6382	= { FOLLOW_LTERM_in_objectLiteral6382_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral6385  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral6385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral6385	= { FOLLOW_propertyNameAndValue_in_objectLiteral6385_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6388  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6388_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6388	= { FOLLOW_LTERM_in_objectLiteral6388_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_objectLiteral6391  */
static	ANTLR3_BITWORD FOLLOW_144_in_objectLiteral6391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_objectLiteral6391	= { FOLLOW_144_in_objectLiteral6391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_objectLiteral6406  */
static	ANTLR3_BITWORD FOLLOW_143_in_objectLiteral6406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_objectLiteral6406	= { FOLLOW_143_in_objectLiteral6406_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6408  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6408	= { FOLLOW_LTERM_in_objectLiteral6408_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral6413  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral6413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral6413	= { FOLLOW_propertyNameAndValue_in_objectLiteral6413_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_objectLiteral6416  */
static	ANTLR3_BITWORD FOLLOW_142_in_objectLiteral6416_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_objectLiteral6416	= { FOLLOW_142_in_objectLiteral6416_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6418  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6418	= { FOLLOW_LTERM_in_objectLiteral6418_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral6423  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral6423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral6423	= { FOLLOW_propertyNameAndValue_in_objectLiteral6423_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_objectLiteral6428  */
static	ANTLR3_BITWORD FOLLOW_142_in_objectLiteral6428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_objectLiteral6428	= { FOLLOW_142_in_objectLiteral6428_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6432  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6432	= { FOLLOW_LTERM_in_objectLiteral6432_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_objectLiteral6439  */
static	ANTLR3_BITWORD FOLLOW_144_in_objectLiteral6439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_objectLiteral6439	= { FOLLOW_144_in_objectLiteral6439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_patternLiteral6465  */
static	ANTLR3_BITWORD FOLLOW_143_in_patternLiteral6465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000100010000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_patternLiteral6465	= { FOLLOW_143_in_patternLiteral6465_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6467  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000100010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6467	= { FOLLOW_LTERM_in_patternLiteral6467_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral6470  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral6470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral6470	= { FOLLOW_nameValueProto_in_patternLiteral6470_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6473  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6473	= { FOLLOW_LTERM_in_patternLiteral6473_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_patternLiteral6476  */
static	ANTLR3_BITWORD FOLLOW_144_in_patternLiteral6476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_patternLiteral6476	= { FOLLOW_144_in_patternLiteral6476_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_patternLiteral6491  */
static	ANTLR3_BITWORD FOLLOW_143_in_patternLiteral6491_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_patternLiteral6491	= { FOLLOW_143_in_patternLiteral6491_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6493  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6493	= { FOLLOW_LTERM_in_patternLiteral6493_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral6499  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral6499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral6499	= { FOLLOW_nameValueProto_in_patternLiteral6499_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_patternLiteral6502  */
static	ANTLR3_BITWORD FOLLOW_142_in_patternLiteral6502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_patternLiteral6502	= { FOLLOW_142_in_patternLiteral6502_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6504  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6504	= { FOLLOW_LTERM_in_patternLiteral6504_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral6509  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral6509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral6509	= { FOLLOW_nameValueProto_in_patternLiteral6509_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6513  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6513	= { FOLLOW_LTERM_in_patternLiteral6513_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_patternLiteral6516  */
static	ANTLR3_BITWORD FOLLOW_144_in_patternLiteral6516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_patternLiteral6516	= { FOLLOW_144_in_patternLiteral6516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue6546  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue6546_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue6546	= { FOLLOW_propertyName_in_propertyNameAndValue6546_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue6548  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue6548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue6548	= { FOLLOW_LTERM_in_propertyNameAndValue6548_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_propertyNameAndValue6551  */
static	ANTLR3_BITWORD FOLLOW_160_in_propertyNameAndValue6551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_propertyNameAndValue6551	= { FOLLOW_160_in_propertyNameAndValue6551_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue6553  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue6553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue6553	= { FOLLOW_LTERM_in_propertyNameAndValue6553_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_propertyNameAndValue6556  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_propertyNameAndValue6556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_propertyNameAndValue6556	= { FOLLOW_assignmentExpression_in_propertyNameAndValue6556_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_nameValueProto6589  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_nameValueProto6589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_nameValueProto6589	= { FOLLOW_propertyName_in_nameValueProto6589_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6591  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6591	= { FOLLOW_LTERM_in_nameValueProto6591_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_nameValueProto6595  */
static	ANTLR3_BITWORD FOLLOW_160_in_nameValueProto6595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C100009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_nameValueProto6595	= { FOLLOW_160_in_nameValueProto6595_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6598  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6598_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C100009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6598	= { FOLLOW_LTERM_in_nameValueProto6598_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_nameValueProto6604  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_nameValueProto6604_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_nameValueProto6604	= { FOLLOW_assignmentExpression_in_nameValueProto6604_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6606  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6606	= { FOLLOW_LTERM_in_nameValueProto6606_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_nameValueProto6611  */
static	ANTLR3_BITWORD FOLLOW_160_in_nameValueProto6611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_nameValueProto6611	= { FOLLOW_160_in_nameValueProto6611_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6613  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6613	= { FOLLOW_LTERM_in_nameValueProto6613_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_nameValueProto6620  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_nameValueProto6620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_nameValueProto6620	= { FOLLOW_assignmentExpression_in_nameValueProto6620_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6664  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6664	= { FOLLOW_LTERM_in_nameValueProto6664_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_nameValueProto6667  */
static	ANTLR3_BITWORD FOLLOW_160_in_nameValueProto6667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_nameValueProto6667	= { FOLLOW_160_in_nameValueProto6667_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6669  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6669	= { FOLLOW_LTERM_in_nameValueProto6669_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_nameValueProto6672  */
static	ANTLR3_BITWORD FOLLOW_160_in_nameValueProto6672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_nameValueProto6672	= { FOLLOW_160_in_nameValueProto6672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_propertyName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_propertyName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_propertyName0	= { FOLLOW_set_in_propertyName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred1_Emerson895  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred1_Emerson895_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred1_Emerson895	= { FOLLOW_LTERM_in_synpred1_Emerson895_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred4_Emerson929  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred4_Emerson929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred4_Emerson929	= { FOLLOW_LTERM_in_synpred4_Emerson929_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred8_Emerson986  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred8_Emerson986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred8_Emerson986	= { FOLLOW_LTERM_in_synpred8_Emerson986_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred11_Emerson1023  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred11_Emerson1023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred11_Emerson1023	= { FOLLOW_LTERM_in_synpred11_Emerson1023_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred14_Emerson1034  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred14_Emerson1034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred14_Emerson1034	= { FOLLOW_LTERM_in_synpred14_Emerson1034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred22_Emerson1125  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred22_Emerson1125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred22_Emerson1125	= { FOLLOW_LTERM_in_synpred22_Emerson1125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_synpred24_Emerson1151  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_synpred24_Emerson1151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_synpred24_Emerson1151	= { FOLLOW_noOpStatement_in_synpred24_Emerson1151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_synpred25_Emerson1164  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_synpred25_Emerson1164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_synpred25_Emerson1164	= { FOLLOW_switchStatement_in_synpred25_Emerson1164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred26_Emerson1181  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred26_Emerson1181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred26_Emerson1181	= { FOLLOW_statementBlock_in_synpred26_Emerson1181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_synpred28_Emerson1191  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_synpred28_Emerson1191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_synpred28_Emerson1191	= { FOLLOW_emptyStatement_in_synpred28_Emerson1191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred29_Emerson1196  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred29_Emerson1196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred29_Emerson1196	= { FOLLOW_expressionStatement_in_synpred29_Emerson1196_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred39_Emerson1275  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred39_Emerson1275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred39_Emerson1275	= { FOLLOW_LTERM_in_synpred39_Emerson1275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred41_Emerson1349  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred41_Emerson1349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred41_Emerson1349	= { FOLLOW_LTERM_in_synpred41_Emerson1349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred51_Emerson1471  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred51_Emerson1471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred51_Emerson1471	= { FOLLOW_LTERM_in_synpred51_Emerson1471_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred53_Emerson1500  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred53_Emerson1500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred53_Emerson1500	= { FOLLOW_LTERM_in_synpred53_Emerson1500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred62_Emerson1637  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred62_Emerson1637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred62_Emerson1637	= { FOLLOW_LTERM_in_synpred62_Emerson1637_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred64_Emerson1650  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred64_Emerson1650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred64_Emerson1650	= { FOLLOW_LTERM_in_synpred64_Emerson1650_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred65_Emerson1645  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred65_Emerson1645_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred65_Emerson1645	= { FOLLOW_LTERM_in_synpred65_Emerson1645_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_synpred65_Emerson1648  */
static	ANTLR3_BITWORD FOLLOW_149_in_synpred65_Emerson1648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_synpred65_Emerson1648	= { FOLLOW_149_in_synpred65_Emerson1648_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred65_Emerson1650  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred65_Emerson1650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CC7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred65_Emerson1650	= { FOLLOW_LTERM_in_synpred65_Emerson1650_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred65_Emerson1655  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred65_Emerson1655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred65_Emerson1655	= { FOLLOW_statement_in_synpred65_Emerson1655_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_synpred68_Emerson1697  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_synpred68_Emerson1697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_synpred68_Emerson1697	= { FOLLOW_forStatement_in_synpred68_Emerson1697_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred69_Emerson1716  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred69_Emerson1716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred69_Emerson1716	= { FOLLOW_LTERM_in_synpred69_Emerson1716_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred76_Emerson1783  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred76_Emerson1783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred76_Emerson1783	= { FOLLOW_LTERM_in_synpred76_Emerson1783_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred87_Emerson1861  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred87_Emerson1861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred87_Emerson1861	= { FOLLOW_LTERM_in_synpred87_Emerson1861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred95_Emerson1970  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred95_Emerson1970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred95_Emerson1970	= { FOLLOW_LTERM_in_synpred95_Emerson1970_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred107_Emerson2142  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred107_Emerson2142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred107_Emerson2142	= { FOLLOW_LTERM_in_synpred107_Emerson2142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred112_Emerson2221  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred112_Emerson2221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred112_Emerson2221	= { FOLLOW_LTERM_in_synpred112_Emerson2221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred120_Emerson2325  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred120_Emerson2325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred120_Emerson2325	= { FOLLOW_LTERM_in_synpred120_Emerson2325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_synpred123_Emerson2311  */
static	ANTLR3_BITWORD FOLLOW_159_in_synpred123_Emerson2311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_synpred123_Emerson2311	= { FOLLOW_159_in_synpred123_Emerson2311_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson2313  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson2313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson2313	= { FOLLOW_LTERM_in_synpred123_Emerson2313_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_synpred123_Emerson2318  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_synpred123_Emerson2318_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_synpred123_Emerson2318	= { FOLLOW_ternaryExpression_in_synpred123_Emerson2318_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson2320  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson2320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson2320	= { FOLLOW_LTERM_in_synpred123_Emerson2320_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_synpred123_Emerson2323  */
static	ANTLR3_BITWORD FOLLOW_160_in_synpred123_Emerson2323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CE7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_synpred123_Emerson2323	= { FOLLOW_160_in_synpred123_Emerson2323_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson2325  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson2325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000CE7DD69800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson2325	= { FOLLOW_LTERM_in_synpred123_Emerson2325_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_synpred123_Emerson2328  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_synpred123_Emerson2328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_synpred123_Emerson2328	= { FOLLOW_statementList_in_synpred123_Emerson2328_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson2331  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson2331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson2331	= { FOLLOW_LTERM_in_synpred123_Emerson2331_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_synpred123_Emerson2334  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_synpred123_Emerson2334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_synpred123_Emerson2334	= { FOLLOW_defaultClause_in_synpred123_Emerson2334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred126_Emerson2375  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred126_Emerson2375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred126_Emerson2375	= { FOLLOW_LTERM_in_synpred126_Emerson2375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred128_Emerson2381  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred128_Emerson2381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred128_Emerson2381	= { FOLLOW_LTERM_in_synpred128_Emerson2381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred131_Emerson2420  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred131_Emerson2420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred131_Emerson2420	= { FOLLOW_LTERM_in_synpred131_Emerson2420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred133_Emerson2426  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred133_Emerson2426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred133_Emerson2426	= { FOLLOW_LTERM_in_synpred133_Emerson2426_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred137_Emerson2483  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred137_Emerson2483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred137_Emerson2483	= { FOLLOW_LTERM_in_synpred137_Emerson2483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred139_Emerson2489  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred139_Emerson2489_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred139_Emerson2489	= { FOLLOW_LTERM_in_synpred139_Emerson2489_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred144_Emerson2638  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred144_Emerson2638_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred144_Emerson2638	= { FOLLOW_LTERM_in_synpred144_Emerson2638_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred152_Emerson2817  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred152_Emerson2817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred152_Emerson2817	= { FOLLOW_callExpression_in_synpred152_Emerson2817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred154_Emerson2877  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred154_Emerson2877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred154_Emerson2877	= { FOLLOW_142_in_synpred154_Emerson2877_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred154_Emerson2879  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred154_Emerson2879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred154_Emerson2879	= { FOLLOW_LTERM_in_synpred154_Emerson2879_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred154_Emerson2882  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred154_Emerson2882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred154_Emerson2882	= { FOLLOW_assignmentExpression_in_synpred154_Emerson2882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred156_Emerson2924  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred156_Emerson2924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred156_Emerson2924	= { FOLLOW_142_in_synpred156_Emerson2924_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred156_Emerson2926  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred156_Emerson2926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred156_Emerson2926	= { FOLLOW_LTERM_in_synpred156_Emerson2926_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_synpred156_Emerson2929  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_synpred156_Emerson2929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_synpred156_Emerson2929	= { FOLLOW_assignmentExpressionNoIn_in_synpred156_Emerson2929_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_synpred157_Emerson2968  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_synpred157_Emerson2968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_synpred157_Emerson2968	= { FOLLOW_conditionalExpression_in_synpred157_Emerson2968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_synpred160_Emerson3035  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_synpred160_Emerson3035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_synpred160_Emerson3035	= { FOLLOW_conditionalExpressionNoIn_in_synpred160_Emerson3035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred163_Emerson3105  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred163_Emerson3105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred163_Emerson3105	= { FOLLOW_callExpression_in_synpred163_Emerson3105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred164_Emerson3130  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred164_Emerson3130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred164_Emerson3130	= { FOLLOW_memberExpression_in_synpred164_Emerson3130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred170_Emerson3224  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred170_Emerson3224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred170_Emerson3224	= { FOLLOW_LTERM_in_synpred170_Emerson3224_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred170_Emerson3227  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred170_Emerson3227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred170_Emerson3227	= { FOLLOW_propertyReferenceSuffix1_in_synpred170_Emerson3227_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred172_Emerson3244  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred172_Emerson3244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred172_Emerson3244	= { FOLLOW_LTERM_in_synpred172_Emerson3244_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred172_Emerson3247  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred172_Emerson3247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred172_Emerson3247	= { FOLLOW_indexSuffix1_in_synpred172_Emerson3247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred175_Emerson3274  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred175_Emerson3274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred175_Emerson3274	= { FOLLOW_LTERM_in_synpred175_Emerson3274_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred175_Emerson3277  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred175_Emerson3277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred175_Emerson3277	= { FOLLOW_propertyReferenceSuffix1_in_synpred175_Emerson3277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred177_Emerson3293  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred177_Emerson3293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred177_Emerson3293	= { FOLLOW_LTERM_in_synpred177_Emerson3293_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred177_Emerson3296  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred177_Emerson3296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred177_Emerson3296	= { FOLLOW_indexSuffix1_in_synpred177_Emerson3296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred182_Emerson3342  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred182_Emerson3342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred182_Emerson3342	= { FOLLOW_LTERM_in_synpred182_Emerson3342_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson3345  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson3345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson3345	= { FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson3345_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred184_Emerson3360  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred184_Emerson3360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred184_Emerson3360	= { FOLLOW_LTERM_in_synpred184_Emerson3360_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred184_Emerson3363  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred184_Emerson3363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred184_Emerson3363	= { FOLLOW_indexSuffix1_in_synpred184_Emerson3363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred188_Emerson3449  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred188_Emerson3449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred188_Emerson3449	= { FOLLOW_LTERM_in_synpred188_Emerson3449_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred188_Emerson3452  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred188_Emerson3452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred188_Emerson3452	= { FOLLOW_arguments_in_synpred188_Emerson3452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred190_Emerson3467  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred190_Emerson3467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000028000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred190_Emerson3467	= { FOLLOW_LTERM_in_synpred190_Emerson3467_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred190_Emerson3470  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred190_Emerson3470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred190_Emerson3470	= { FOLLOW_indexSuffix1_in_synpred190_Emerson3470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred192_Emerson3485  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred192_Emerson3485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred192_Emerson3485	= { FOLLOW_LTERM_in_synpred192_Emerson3485_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3488  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3488	= { FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3488_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred195_Emerson3557  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred195_Emerson3557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred195_Emerson3557	= { FOLLOW_LTERM_in_synpred195_Emerson3557_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_synpred198_Emerson3555  */
static	ANTLR3_BITWORD FOLLOW_140_in_synpred198_Emerson3555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C00000B800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_synpred198_Emerson3555	= { FOLLOW_140_in_synpred198_Emerson3555_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred198_Emerson3557  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred198_Emerson3557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C00000B800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred198_Emerson3557	= { FOLLOW_LTERM_in_synpred198_Emerson3557_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred198_Emerson3561  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred198_Emerson3561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred198_Emerson3561	= { FOLLOW_expression_in_synpred198_Emerson3561_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred198_Emerson3565  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred198_Emerson3565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred198_Emerson3565	= { FOLLOW_LTERM_in_synpred198_Emerson3565_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_synpred198_Emerson3568  */
static	ANTLR3_BITWORD FOLLOW_141_in_synpred198_Emerson3568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_synpred198_Emerson3568	= { FOLLOW_141_in_synpred198_Emerson3568_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred216_Emerson3863  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred216_Emerson3863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred216_Emerson3863	= { FOLLOW_LTERM_in_synpred216_Emerson3863_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_synpred216_Emerson3866  */
static	ANTLR3_BITWORD FOLLOW_178_in_synpred216_Emerson3866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_synpred216_Emerson3866	= { FOLLOW_178_in_synpred216_Emerson3866_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred216_Emerson3868  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred216_Emerson3868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred216_Emerson3868	= { FOLLOW_LTERM_in_synpred216_Emerson3868_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_synpred216_Emerson3873  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_synpred216_Emerson3873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_synpred216_Emerson3873	= { FOLLOW_msgConstruct_in_synpred216_Emerson3873_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_synpred216_Emerson3875  */
static	ANTLR3_BITWORD FOLLOW_178_in_synpred216_Emerson3875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_synpred216_Emerson3875	= { FOLLOW_178_in_synpred216_Emerson3875_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_synpred216_Emerson3879  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_synpred216_Emerson3879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_synpred216_Emerson3879	= { FOLLOW_msgConstruct_in_synpred216_Emerson3879_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred219_Emerson3910  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred219_Emerson3910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred219_Emerson3910	= { FOLLOW_LTERM_in_synpred219_Emerson3910_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_synpred219_Emerson3913  */
static	ANTLR3_BITWORD FOLLOW_178_in_synpred219_Emerson3913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_synpred219_Emerson3913	= { FOLLOW_178_in_synpred219_Emerson3913_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred219_Emerson3915  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred219_Emerson3915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred219_Emerson3915	= { FOLLOW_LTERM_in_synpred219_Emerson3915_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_synpred219_Emerson3920  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_synpred219_Emerson3920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_synpred219_Emerson3920	= { FOLLOW_msgConstruct_in_synpred219_Emerson3920_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred222_Emerson3980  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred222_Emerson3980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred222_Emerson3980	= { FOLLOW_LTERM_in_synpred222_Emerson3980_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_synpred222_Emerson3983  */
static	ANTLR3_BITWORD FOLLOW_179_in_synpred222_Emerson3983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_synpred222_Emerson3983	= { FOLLOW_179_in_synpred222_Emerson3983_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred222_Emerson3985  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred222_Emerson3985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred222_Emerson3985	= { FOLLOW_LTERM_in_synpred222_Emerson3985_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_synpred222_Emerson3990  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_synpred222_Emerson3990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_synpred222_Emerson3990	= { FOLLOW_msgSenderConstruct_in_synpred222_Emerson3990_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred225_Emerson4048  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred225_Emerson4048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred225_Emerson4048	= { FOLLOW_LTERM_in_synpred225_Emerson4048_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_synpred225_Emerson4051  */
static	ANTLR3_BITWORD FOLLOW_180_in_synpred225_Emerson4051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_synpred225_Emerson4051	= { FOLLOW_180_in_synpred225_Emerson4051_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred225_Emerson4053  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred225_Emerson4053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred225_Emerson4053	= { FOLLOW_LTERM_in_synpred225_Emerson4053_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_synpred225_Emerson4058  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_synpred225_Emerson4058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_synpred225_Emerson4058	= { FOLLOW_ternaryExpression_in_synpred225_Emerson4058_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred230_Emerson4107  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred230_Emerson4107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred230_Emerson4107	= { FOLLOW_LTERM_in_synpred230_Emerson4107_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_synpred230_Emerson4110  */
static	ANTLR3_BITWORD FOLLOW_181_in_synpred230_Emerson4110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_synpred230_Emerson4110	= { FOLLOW_181_in_synpred230_Emerson4110_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred230_Emerson4112  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred230_Emerson4112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred230_Emerson4112	= { FOLLOW_LTERM_in_synpred230_Emerson4112_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred230_Emerson4117  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred230_Emerson4117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred230_Emerson4117	= { FOLLOW_assignmentExpression_in_synpred230_Emerson4117_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred230_Emerson4119  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred230_Emerson4119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred230_Emerson4119	= { FOLLOW_LTERM_in_synpred230_Emerson4119_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_synpred230_Emerson4122  */
static	ANTLR3_BITWORD FOLLOW_160_in_synpred230_Emerson4122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_synpred230_Emerson4122	= { FOLLOW_160_in_synpred230_Emerson4122_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred230_Emerson4124  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred230_Emerson4124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred230_Emerson4124	= { FOLLOW_LTERM_in_synpred230_Emerson4124_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred230_Emerson4129  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred230_Emerson4129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred230_Emerson4129	= { FOLLOW_assignmentExpression_in_synpred230_Emerson4129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred233_Emerson4218  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred233_Emerson4218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred233_Emerson4218	= { FOLLOW_LTERM_in_synpred233_Emerson4218_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_synpred233_Emerson4221  */
static	ANTLR3_BITWORD FOLLOW_178_in_synpred233_Emerson4221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_synpred233_Emerson4221	= { FOLLOW_178_in_synpred233_Emerson4221_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred233_Emerson4223  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred233_Emerson4223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred233_Emerson4223	= { FOLLOW_LTERM_in_synpred233_Emerson4223_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred233_Emerson4228  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred233_Emerson4228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred233_Emerson4228	= { FOLLOW_msgConstructNoIn_in_synpred233_Emerson4228_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_synpred233_Emerson4230  */
static	ANTLR3_BITWORD FOLLOW_178_in_synpred233_Emerson4230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_synpred233_Emerson4230	= { FOLLOW_178_in_synpred233_Emerson4230_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred233_Emerson4234  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred233_Emerson4234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred233_Emerson4234	= { FOLLOW_msgConstructNoIn_in_synpred233_Emerson4234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred236_Emerson4267  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred236_Emerson4267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred236_Emerson4267	= { FOLLOW_msgConstructNoIn_in_synpred236_Emerson4267_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred236_Emerson4269  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred236_Emerson4269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred236_Emerson4269	= { FOLLOW_LTERM_in_synpred236_Emerson4269_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_synpred236_Emerson4272  */
static	ANTLR3_BITWORD FOLLOW_178_in_synpred236_Emerson4272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_synpred236_Emerson4272	= { FOLLOW_178_in_synpred236_Emerson4272_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred236_Emerson4274  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred236_Emerson4274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred236_Emerson4274	= { FOLLOW_LTERM_in_synpred236_Emerson4274_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred236_Emerson4279  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred236_Emerson4279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred236_Emerson4279	= { FOLLOW_msgConstructNoIn_in_synpred236_Emerson4279_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred238_Emerson4350  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred238_Emerson4350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred238_Emerson4350	= { FOLLOW_LTERM_in_synpred238_Emerson4350_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_synpred238_Emerson4353  */
static	ANTLR3_BITWORD FOLLOW_179_in_synpred238_Emerson4353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_synpred238_Emerson4353	= { FOLLOW_179_in_synpred238_Emerson4353_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_synpred238_Emerson4357  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_synpred238_Emerson4357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_synpred238_Emerson4357	= { FOLLOW_msgSenderConstructNoIn_in_synpred238_Emerson4357_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred240_Emerson4423  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred240_Emerson4423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred240_Emerson4423	= { FOLLOW_LTERM_in_synpred240_Emerson4423_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_synpred240_Emerson4426  */
static	ANTLR3_BITWORD FOLLOW_180_in_synpred240_Emerson4426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007000000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_synpred240_Emerson4426	= { FOLLOW_180_in_synpred240_Emerson4426_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_synpred240_Emerson4430  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_synpred240_Emerson4430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_synpred240_Emerson4430	= { FOLLOW_ternaryExpressionNoIn_in_synpred240_Emerson4430_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred245_Emerson4504  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred245_Emerson4504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred245_Emerson4504	= { FOLLOW_LTERM_in_synpred245_Emerson4504_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_synpred245_Emerson4507  */
static	ANTLR3_BITWORD FOLLOW_181_in_synpred245_Emerson4507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_synpred245_Emerson4507	= { FOLLOW_181_in_synpred245_Emerson4507_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred245_Emerson4509  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred245_Emerson4509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred245_Emerson4509	= { FOLLOW_LTERM_in_synpred245_Emerson4509_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4514  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4514	= { FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4514_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred245_Emerson4516  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred245_Emerson4516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred245_Emerson4516	= { FOLLOW_LTERM_in_synpred245_Emerson4516_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_synpred245_Emerson4519  */
static	ANTLR3_BITWORD FOLLOW_160_in_synpred245_Emerson4519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_synpred245_Emerson4519	= { FOLLOW_160_in_synpred245_Emerson4519_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred245_Emerson4521  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred245_Emerson4521_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred245_Emerson4521	= { FOLLOW_LTERM_in_synpred245_Emerson4521_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4526  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4526	= { FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred292_Emerson5244  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred292_Emerson5244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x8000000002000000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred292_Emerson5244	= { FOLLOW_LTERM_in_synpred292_Emerson5244_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_synpred292_Emerson5247  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_synpred292_Emerson5247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_synpred292_Emerson5247	= { FOLLOW_relationalOps_in_synpred292_Emerson5247_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred292_Emerson5249  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred292_Emerson5249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred292_Emerson5249	= { FOLLOW_LTERM_in_synpred292_Emerson5249_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred292_Emerson5252  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred292_Emerson5252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred292_Emerson5252	= { FOLLOW_additiveExpression_in_synpred292_Emerson5252_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred300_Emerson5383  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred300_Emerson5383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred300_Emerson5383	= { FOLLOW_LTERM_in_synpred300_Emerson5383_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_synpred300_Emerson5386  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_synpred300_Emerson5386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_synpred300_Emerson5386	= { FOLLOW_relationalOpsNoIn_in_synpred300_Emerson5386_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred300_Emerson5388  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred300_Emerson5388_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred300_Emerson5388	= { FOLLOW_LTERM_in_synpred300_Emerson5388_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred300_Emerson5391  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred300_Emerson5391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred300_Emerson5391	= { FOLLOW_additiveExpression_in_synpred300_Emerson5391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred303_Emerson5425  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred303_Emerson5425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000030) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred303_Emerson5425	= { FOLLOW_LTERM_in_synpred303_Emerson5425_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_synpred303_Emerson5428  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_synpred303_Emerson5428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_synpred303_Emerson5428	= { FOLLOW_addOps_in_synpred303_Emerson5428_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred303_Emerson5430  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred303_Emerson5430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred303_Emerson5430	= { FOLLOW_LTERM_in_synpred303_Emerson5430_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_synpred303_Emerson5433  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_synpred303_Emerson5433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_synpred303_Emerson5433	= { FOLLOW_multiplicativeExpression_in_synpred303_Emerson5433_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred309_Emerson5541  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred309_Emerson5541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred309_Emerson5541	= { FOLLOW_leftHandSideExpression_in_synpred309_Emerson5541_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_synpred309_Emerson5543  */
static	ANTLR3_BITWORD FOLLOW_201_in_synpred309_Emerson5543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_synpred309_Emerson5543	= { FOLLOW_201_in_synpred309_Emerson5543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred310_Emerson5557  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred310_Emerson5557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred310_Emerson5557	= { FOLLOW_leftHandSideExpression_in_synpred310_Emerson5557_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_synpred310_Emerson5559  */
static	ANTLR3_BITWORD FOLLOW_202_in_synpred310_Emerson5559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_synpred310_Emerson5559	= { FOLLOW_202_in_synpred310_Emerson5559_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_synpred321_Emerson5762  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_synpred321_Emerson5762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_synpred321_Emerson5762	= { FOLLOW_vectorLiteral_in_synpred321_Emerson5762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_quaternionLiteral_in_synpred322_Emerson5780  */
static	ANTLR3_BITWORD FOLLOW_quaternionLiteral_in_synpred322_Emerson5780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_quaternionLiteral_in_synpred322_Emerson5780	= { FOLLOW_quaternionLiteral_in_synpred322_Emerson5780_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_synpred327_Emerson5817  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_synpred327_Emerson5817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_synpred327_Emerson5817	= { FOLLOW_objectLiteral_in_synpred327_Emerson5817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_synpred328_Emerson5829  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_synpred328_Emerson5829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_synpred328_Emerson5829	= { FOLLOW_patternLiteral_in_synpred328_Emerson5829_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_synpred345_Emerson5948  */
static	ANTLR3_BITWORD FOLLOW_191_in_synpred345_Emerson5948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_synpred345_Emerson5948	= { FOLLOW_191_in_synpred345_Emerson5948_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred345_Emerson5950  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred345_Emerson5950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred345_Emerson5950	= { FOLLOW_LTERM_in_synpred345_Emerson5950_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred345_Emerson5955  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred345_Emerson5955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred345_Emerson5955	= { FOLLOW_vectorLiteralField_in_synpred345_Emerson5955_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred345_Emerson5957  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred345_Emerson5957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred345_Emerson5957	= { FOLLOW_LTERM_in_synpred345_Emerson5957_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred345_Emerson5960  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred345_Emerson5960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred345_Emerson5960	= { FOLLOW_142_in_synpred345_Emerson5960_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred345_Emerson5962  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred345_Emerson5962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred345_Emerson5962	= { FOLLOW_LTERM_in_synpred345_Emerson5962_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred345_Emerson5967  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred345_Emerson5967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred345_Emerson5967	= { FOLLOW_vectorLiteralField_in_synpred345_Emerson5967_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred345_Emerson5969  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred345_Emerson5969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred345_Emerson5969	= { FOLLOW_LTERM_in_synpred345_Emerson5969_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred345_Emerson5972  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred345_Emerson5972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred345_Emerson5972	= { FOLLOW_142_in_synpred345_Emerson5972_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred345_Emerson5974  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred345_Emerson5974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred345_Emerson5974	= { FOLLOW_LTERM_in_synpred345_Emerson5974_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred345_Emerson5979  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred345_Emerson5979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred345_Emerson5979	= { FOLLOW_vectorLiteralField_in_synpred345_Emerson5979_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred345_Emerson5981  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred345_Emerson5981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred345_Emerson5981	= { FOLLOW_LTERM_in_synpred345_Emerson5981_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred345_Emerson5984  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred345_Emerson5984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred345_Emerson5984	= { FOLLOW_142_in_synpred345_Emerson5984_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred345_Emerson5986  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred345_Emerson5986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred345_Emerson5986	= { FOLLOW_LTERM_in_synpred345_Emerson5986_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred345_Emerson5991  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred345_Emerson5991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred345_Emerson5991	= { FOLLOW_vectorLiteralField_in_synpred345_Emerson5991_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred345_Emerson5993  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred345_Emerson5993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred345_Emerson5993	= { FOLLOW_LTERM_in_synpred345_Emerson5993_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_synpred345_Emerson5995  */
static	ANTLR3_BITWORD FOLLOW_192_in_synpred345_Emerson5995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_synpred345_Emerson5995	= { FOLLOW_192_in_synpred345_Emerson5995_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_synpred354_Emerson6025  */
static	ANTLR3_BITWORD FOLLOW_191_in_synpred354_Emerson6025_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_synpred354_Emerson6025	= { FOLLOW_191_in_synpred354_Emerson6025_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred354_Emerson6027  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred354_Emerson6027_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred354_Emerson6027	= { FOLLOW_LTERM_in_synpred354_Emerson6027_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred354_Emerson6032  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred354_Emerson6032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred354_Emerson6032	= { FOLLOW_vectorLiteralField_in_synpred354_Emerson6032_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred354_Emerson6034  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred354_Emerson6034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred354_Emerson6034	= { FOLLOW_LTERM_in_synpred354_Emerson6034_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred354_Emerson6037  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred354_Emerson6037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred354_Emerson6037	= { FOLLOW_142_in_synpred354_Emerson6037_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred354_Emerson6039  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred354_Emerson6039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred354_Emerson6039	= { FOLLOW_LTERM_in_synpred354_Emerson6039_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred354_Emerson6044  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred354_Emerson6044_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred354_Emerson6044	= { FOLLOW_vectorLiteralField_in_synpred354_Emerson6044_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred354_Emerson6046  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred354_Emerson6046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred354_Emerson6046	= { FOLLOW_LTERM_in_synpred354_Emerson6046_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred354_Emerson6049  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred354_Emerson6049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred354_Emerson6049	= { FOLLOW_142_in_synpred354_Emerson6049_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred354_Emerson6051  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred354_Emerson6051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred354_Emerson6051	= { FOLLOW_LTERM_in_synpred354_Emerson6051_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred354_Emerson6056  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred354_Emerson6056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred354_Emerson6056	= { FOLLOW_vectorLiteralField_in_synpred354_Emerson6056_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred354_Emerson6058  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred354_Emerson6058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred354_Emerson6058	= { FOLLOW_LTERM_in_synpred354_Emerson6058_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_synpred354_Emerson6061  */
static	ANTLR3_BITWORD FOLLOW_145_in_synpred354_Emerson6061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_synpred354_Emerson6061	= { FOLLOW_145_in_synpred354_Emerson6061_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred354_Emerson6063  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred354_Emerson6063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800000C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred354_Emerson6063	= { FOLLOW_LTERM_in_synpred354_Emerson6063_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred354_Emerson6068  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred354_Emerson6068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred354_Emerson6068	= { FOLLOW_vectorLiteralField_in_synpred354_Emerson6068_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred354_Emerson6070  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred354_Emerson6070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred354_Emerson6070	= { FOLLOW_LTERM_in_synpred354_Emerson6070_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_synpred354_Emerson6072  */
static	ANTLR3_BITWORD FOLLOW_192_in_synpred354_Emerson6072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_synpred354_Emerson6072	= { FOLLOW_192_in_synpred354_Emerson6072_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred359_Emerson6173  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred359_Emerson6173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred359_Emerson6173	= { FOLLOW_additiveExpression_in_synpred359_Emerson6173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_synpred360_Emerson6186  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_synpred360_Emerson6186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_synpred360_Emerson6186	= { FOLLOW_NumericLiteral_in_synpred360_Emerson6186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred361_Emerson6198  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred361_Emerson6198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred361_Emerson6198	= { FOLLOW_callExpression_in_synpred361_Emerson6198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred364_Emerson6293  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred364_Emerson6293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred364_Emerson6293	= { FOLLOW_LTERM_in_synpred364_Emerson6293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_synpred367_Emerson6291  */
static	ANTLR3_BITWORD FOLLOW_167_in_synpred367_Emerson6291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800001C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_synpred367_Emerson6291	= { FOLLOW_167_in_synpred367_Emerson6291_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred367_Emerson6293  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred367_Emerson6293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x800001C000009800), ANTLR3_UINT64_LIT(0x00000000001FFE30) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred367_Emerson6293	= { FOLLOW_LTERM_in_synpred367_Emerson6293_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred367_Emerson6297  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred367_Emerson6297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred367_Emerson6297	= { FOLLOW_expression_in_synpred367_Emerson6297_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred367_Emerson6301  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred367_Emerson6301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred367_Emerson6301	= { FOLLOW_LTERM_in_synpred367_Emerson6301_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_synpred367_Emerson6304  */
static	ANTLR3_BITWORD FOLLOW_168_in_synpred367_Emerson6304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_synpred367_Emerson6304	= { FOLLOW_168_in_synpred367_Emerson6304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred373_Emerson6382  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred373_Emerson6382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred373_Emerson6382	= { FOLLOW_LTERM_in_synpred373_Emerson6382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_synpred376_Emerson6380  */
static	ANTLR3_BITWORD FOLLOW_143_in_synpred376_Emerson6380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_synpred376_Emerson6380	= { FOLLOW_143_in_synpred376_Emerson6380_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred376_Emerson6382  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred376_Emerson6382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred376_Emerson6382	= { FOLLOW_LTERM_in_synpred376_Emerson6382_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred376_Emerson6385  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred376_Emerson6385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred376_Emerson6385	= { FOLLOW_propertyNameAndValue_in_synpred376_Emerson6385_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred376_Emerson6388  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred376_Emerson6388_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred376_Emerson6388	= { FOLLOW_LTERM_in_synpred376_Emerson6388_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_synpred376_Emerson6391  */
static	ANTLR3_BITWORD FOLLOW_144_in_synpred376_Emerson6391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_synpred376_Emerson6391	= { FOLLOW_144_in_synpred376_Emerson6391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred382_Emerson6467  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred382_Emerson6467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred382_Emerson6467	= { FOLLOW_LTERM_in_synpred382_Emerson6467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_synpred385_Emerson6465  */
static	ANTLR3_BITWORD FOLLOW_143_in_synpred385_Emerson6465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000100010000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_synpred385_Emerson6465	= { FOLLOW_143_in_synpred385_Emerson6465_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred385_Emerson6467  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred385_Emerson6467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0007800000000000), ANTLR3_UINT64_LIT(0x0000000100010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred385_Emerson6467	= { FOLLOW_LTERM_in_synpred385_Emerson6467_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_synpred385_Emerson6470  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_synpred385_Emerson6470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_synpred385_Emerson6470	= { FOLLOW_nameValueProto_in_synpred385_Emerson6470_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred385_Emerson6473  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred385_Emerson6473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred385_Emerson6473	= { FOLLOW_LTERM_in_synpred385_Emerson6473_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_synpred385_Emerson6476  */
static	ANTLR3_BITWORD FOLLOW_144_in_synpred385_Emerson6476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_synpred385_Emerson6476	= { FOLLOW_144_in_synpred385_Emerson6476_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred386_Emerson6493  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred386_Emerson6493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred386_Emerson6493	= { FOLLOW_LTERM_in_synpred386_Emerson6493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred387_Emerson6504  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred387_Emerson6504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred387_Emerson6504	= { FOLLOW_LTERM_in_synpred387_Emerson6504_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred396_Emerson6613  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred396_Emerson6613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred396_Emerson6613	= { FOLLOW_LTERM_in_synpred396_Emerson6613_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    144:14: ( sourceElements )?
 */
static const ANTLR3_INT32 dfa2_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_eof[4] =
    {
	3, -1, 3, -1
    };
static const ANTLR3_INT32 dfa2_min[4] =
    {
	111, -1, 111, -1
    };
static const ANTLR3_INT32 dfa2_max[4] =
    {
	212, -1, 145, -1
    };
static const ANTLR3_INT32 dfa2_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa2_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa2_T_empty	    NULL

static const ANTLR3_INT32 dfa2_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };static const ANTLR3_INT32 dfa2_T1[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa2_transitions[] =
{
    dfa2_T1, dfa2_T_empty, dfa2_T0, dfa2_T_empty	
};


/* Declare tracking structure for Cyclic DFA 2
 */
static
ANTLR3_CYCLIC_DFA cdfa2
    =	{
	    2,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"144:14: ( sourceElements )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa2_eot,	    /* EOT table			    */
	    dfa2_eof,	    /* EOF table			    */
	    dfa2_min,	    /* Minimum tokens for each state    */
	    dfa2_max,	    /* Maximum tokens for each state    */
	    dfa2_accept,	/* Accept table			    */
	    dfa2_special,	/* Special transition states	    */
	    dfa2_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 2
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 148:18: ( ( LTERM )* sourceElement )*
 */
static const ANTLR3_INT32 dfa5_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa5_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa5_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa5_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, -1, -1, 3, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 3, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T0, dfa5_T0, dfa5_T_empty, dfa5_T_empty	
};


/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 148:18: ( ( LTERM )* sourceElement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    151:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static const ANTLR3_INT32 dfa6_eot[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_eof[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_min[7] =
    {
	111, 111, -1, 111, 111, 111, -1
    };
static const ANTLR3_INT32 dfa6_max[7] =
    {
	212, 140, -1, 140, 143, 143, -1
    };
static const ANTLR3_INT32 dfa6_accept[7] =
    {
	-1, -1, 2, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa6_special[7] =
    {	
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa6_T_empty	    NULL

static const ANTLR3_INT32 dfa6_T0[] =
    {
	5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 6
    };static const ANTLR3_INT32 dfa6_T1[] =
    {
	2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa6_T2[] =
    {
	3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa6_transitions[] =
{
    dfa6_T1, dfa6_T2, dfa6_T_empty, dfa6_T2, dfa6_T0, dfa6_T0, dfa6_T_empty	
};


/* Declare tracking structure for Cyclic DFA 6
 */
static
ANTLR3_CYCLIC_DFA cdfa6
    =	{
	    6,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"151:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa6_eot,	    /* EOT table			    */
	    dfa6_eof,	    /* EOF table			    */
	    dfa6_min,	    /* Minimum tokens for each state    */
	    dfa6_max,	    /* Maximum tokens for each state    */
	    dfa6_accept,	/* Accept table			    */
	    dfa6_special,	/* Special transition states	    */
	    dfa6_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 6
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    169:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa23_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[5] =
    {
	143, 111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[5] =
    {
	143, 212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa23_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 4, 3, 3, -1, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, -1, -1, 3, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 3, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T1, dfa23_T0, dfa23_T0, dfa23_T_empty, dfa23_T_empty	
};


/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"169:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 23
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    175:1: statement : ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );
 */
static const ANTLR3_INT32 dfa24_eot[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_eof[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_min[36] =
    {
	111, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_max[36] =
    {
	212, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_accept[36] =
    {
	-1, -1, 2, -1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 7, 8, -1, -1, 9, 10, 11, 12, 13, 14, 1, 3
    };
static const ANTLR3_INT32 dfa24_special[36] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa24_T_empty	    NULL

static const ANTLR3_INT32 dfa24_T0[] =
    {
	5, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, -1, -1, 3, -1, 1, 4, -1, 24, 
	-1, 25, 25, 25, -1, 28, 29, 30, 31, 2, -1, -1, -1, 32, 33, -1, -1, 6, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 6, -1, -1, -1, -1, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6
    };static const ANTLR3_INT32 dfa24_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa24_transitions[] =
{
    dfa24_T0, dfa24_T1, dfa24_T_empty, dfa24_T1, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty	
};

static ANTLR3_INT32 dfa24_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA24_0;

    	    ANTLR3_MARKER index24_0;


    		LA24_0 = LA(1);

    	 
    	    index24_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA24_0 == 145) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA24_0 == 158) && (synpred25_Emerson(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA24_0 == 143) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA24_0 == 146) )
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA24_0 == LTERM) )
    	    {
    	        s = 5;
    	    }

    	    else if ( (((LA24_0 >= Identifier) && (LA24_0 <= StringLiteral)) || ((LA24_0 >= 139) && (LA24_0 <= 140)) || ((LA24_0 >= 166) && (LA24_0 <= 167)) || LA24_0 == 191 || ((LA24_0 >= 196) && (LA24_0 <= 197)) || ((LA24_0 >= 201) && (LA24_0 <= 212))) )
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA24_0 == 148) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (((LA24_0 >= 150) && (LA24_0 <= 152))) )
    	    {
    	        s = 25;
    	    }

    	    else if ( (LA24_0 == 154) )
    	    {
    	        s = 28;
    	    }

    	    else if ( (LA24_0 == 155) )
    	    {
    	        s = 29;
    	    }

    	    else if ( (LA24_0 == 156) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (LA24_0 == 157) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (LA24_0 == 162) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (LA24_0 == 163) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index24_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA24_1;

    	    ANTLR3_MARKER index24_1;


    		LA24_1 = LA(1);

    	 
    	    index24_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred24_Emerson(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (synpred28_Emerson(ctx)) )
    	    {
    	        s = 5;
    	    }

    	 
    		SEEK(index24_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA24_3;

    	    ANTLR3_MARKER index24_3;


    		LA24_3 = LA(1);

    	 
    	    index24_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 35;
    	    }

    	    else if ( (synpred29_Emerson(ctx)) )
    	    {
    	        s = 6;
    	    }

    	 
    		SEEK(index24_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"175:1: statement : ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );";
    EXCEPTION->decisionNum  = 24;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 24
 */
static
ANTLR3_CYCLIC_DFA cdfa24
    =	{
	    24,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"175:1: statement : ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa24_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa24_eot,	    /* EOT table			    */
	    dfa24_eof,	    /* EOF table			    */
	    dfa24_min,	    /* Minimum tokens for each state    */
	    dfa24_max,	    /* Maximum tokens for each state    */
	    dfa24_accept,	/* Accept table			    */
	    dfa24_special,	/* Special transition states	    */
	    dfa24_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 24
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    192:1: statementBlock : ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa28_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa28_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa28_min[5] =
    {
	143, 111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa28_max[5] =
    {
	143, 212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa28_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa28_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa28_T_empty	    NULL

static const ANTLR3_INT32 dfa28_T0[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 4, 3, 3, -1, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, -1, -1, 3, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 3, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3
    };static const ANTLR3_INT32 dfa28_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa28_transitions[] =
{
    dfa28_T1, dfa28_T0, dfa28_T0, dfa28_T_empty, dfa28_T_empty	
};


/* Declare tracking structure for Cyclic DFA 28
 */
static
ANTLR3_CYCLIC_DFA cdfa28
    =	{
	    28,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"192:1: statementBlock : ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa28_eot,	    /* EOT table			    */
	    dfa28_eof,	    /* EOF table			    */
	    dfa28_min,	    /* Minimum tokens for each state    */
	    dfa28_max,	    /* Maximum tokens for each state    */
	    dfa28_accept,	/* Accept table			    */
	    dfa28_special,	/* Special transition states	    */
	    dfa28_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 28
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()+ loopback of 203:4: ( ( LTERM )* statement )+
 */
static const ANTLR3_INT32 dfa30_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa30_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa30_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa30_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa30_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa30_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa30_T_empty	    NULL

static const ANTLR3_INT32 dfa30_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, 3, 2, -1, 2, 3, 3, -1, -1, 3, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 3, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa30_transitions[] =
{
    dfa30_T0, dfa30_T0, dfa30_T_empty, dfa30_T_empty	
};


/* Declare tracking structure for Cyclic DFA 30
 */
static
ANTLR3_CYCLIC_DFA cdfa30
    =	{
	    30,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()+ loopback of 203:4: ( ( LTERM )* statement )+",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa30_eot,	    /* EOT table			    */
	    dfa30_eof,	    /* EOF table			    */
	    dfa30_min,	    /* Minimum tokens for each state    */
	    dfa30_max,	    /* Maximum tokens for each state    */
	    dfa30_accept,	/* Accept table			    */
	    dfa30_special,	/* Special transition states	    */
	    dfa30_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 30
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 211:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
 */
static const ANTLR3_INT32 dfa35_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_eof[5] =
    {
	-1, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa35_min[5] =
    {
	111, 111, -1, -1, 111
    };
static const ANTLR3_INT32 dfa35_max[5] =
    {
	145, 212, -1, -1, 212
    };
static const ANTLR3_INT32 dfa35_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa35_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa35_T_empty	    NULL

static const ANTLR3_INT32 dfa35_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, 2, 2, 2, -1, 2, 2, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa35_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa35_transitions[] =
{
    dfa35_T1, dfa35_T0, dfa35_T_empty, dfa35_T_empty, dfa35_T0	
};


/* Declare tracking structure for Cyclic DFA 35
 */
static
ANTLR3_CYCLIC_DFA cdfa35
    =	{
	    35,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 211:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa35_eot,	    /* EOT table			    */
	    dfa35_eof,	    /* EOF table			    */
	    dfa35_min,	    /* Minimum tokens for each state    */
	    dfa35_max,	    /* Maximum tokens for each state    */
	    dfa35_accept,	/* Accept table			    */
	    dfa35_special,	/* Special transition states	    */
	    dfa35_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 35
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 215:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
 */
static const ANTLR3_INT32 dfa38_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa38_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa38_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa38_max[4] =
    {
	145, 145, -1, -1
    };
static const ANTLR3_INT32 dfa38_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa38_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa38_T_empty	    NULL

static const ANTLR3_INT32 dfa38_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa38_transitions[] =
{
    dfa38_T0, dfa38_T0, dfa38_T_empty, dfa38_T_empty	
};


/* Declare tracking structure for Cyclic DFA 38
 */
static
ANTLR3_CYCLIC_DFA cdfa38
    =	{
	    38,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 215:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa38_eot,	    /* EOT table			    */
	    dfa38_eof,	    /* EOF table			    */
	    dfa38_min,	    /* Minimum tokens for each state    */
	    dfa38_max,	    /* Maximum tokens for each state    */
	    dfa38_accept,	/* Accept table			    */
	    dfa38_special,	/* Special transition states	    */
	    dfa38_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 38
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    263:21: ( ( LTERM )* init= forStatementInitialiserPart )?
 */
static const ANTLR3_INT32 dfa65_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa65_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa65_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa65_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa65_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa65_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa65_T_empty	    NULL

static const ANTLR3_INT32 dfa65_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa65_transitions[] =
{
    dfa65_T0, dfa65_T0, dfa65_T_empty, dfa65_T_empty	
};


/* Declare tracking structure for Cyclic DFA 65
 */
static
ANTLR3_CYCLIC_DFA cdfa65
    =	{
	    65,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"263:21: ( ( LTERM )* init= forStatementInitialiserPart )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa65_eot,	    /* EOT table			    */
	    dfa65_eof,	    /* EOF table			    */
	    dfa65_min,	    /* Minimum tokens for each state    */
	    dfa65_max,	    /* Maximum tokens for each state    */
	    dfa65_accept,	/* Accept table			    */
	    dfa65_special,	/* Special transition states	    */
	    dfa65_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 65
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    263:75: ( ( LTERM )* cond= expression )?
 */
static const ANTLR3_INT32 dfa68_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa68_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa68_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa68_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa68_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa68_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa68_T_empty	    NULL

static const ANTLR3_INT32 dfa68_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa68_transitions[] =
{
    dfa68_T0, dfa68_T0, dfa68_T_empty, dfa68_T_empty	
};


/* Declare tracking structure for Cyclic DFA 68
 */
static
ANTLR3_CYCLIC_DFA cdfa68
    =	{
	    68,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"263:75: ( ( LTERM )* cond= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa68_eot,	    /* EOT table			    */
	    dfa68_eof,	    /* EOF table			    */
	    dfa68_min,	    /* Minimum tokens for each state    */
	    dfa68_max,	    /* Maximum tokens for each state    */
	    dfa68_accept,	/* Accept table			    */
	    dfa68_special,	/* Special transition states	    */
	    dfa68_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 68
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    263:112: ( ( LTERM )* iter= expression )?
 */
static const ANTLR3_INT32 dfa71_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa71_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa71_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa71_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa71_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa71_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa71_T_empty	    NULL

static const ANTLR3_INT32 dfa71_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa71_transitions[] =
{
    dfa71_T0, dfa71_T0, dfa71_T_empty, dfa71_T_empty	
};


/* Declare tracking structure for Cyclic DFA 71
 */
static
ANTLR3_CYCLIC_DFA cdfa71
    =	{
	    71,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"263:112: ( ( LTERM )* iter= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa71_eot,	    /* EOT table			    */
	    dfa71_eof,	    /* EOF table			    */
	    dfa71_min,	    /* Minimum tokens for each state    */
	    dfa71_max,	    /* Maximum tokens for each state    */
	    dfa71_accept,	/* Accept table			    */
	    dfa71_special,	/* Special transition states	    */
	    dfa71_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 71
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    302:1: caseBlock : ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) );
 */
static const ANTLR3_INT32 dfa103_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa103_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa103_min[5] =
    {
	143, 111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa103_max[5] =
    {
	143, 161, 161, -1, -1
    };
static const ANTLR3_INT32 dfa103_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa103_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa103_T_empty	    NULL

static const ANTLR3_INT32 dfa103_T0[] =
    {
	1
    };static const ANTLR3_INT32 dfa103_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa103_transitions[] =
{
    dfa103_T0, dfa103_T1, dfa103_T1, dfa103_T_empty, dfa103_T_empty	
};


/* Declare tracking structure for Cyclic DFA 103
 */
static
ANTLR3_CYCLIC_DFA cdfa103
    =	{
	    103,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"302:1: caseBlock : ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa103_eot,	    /* EOT table			    */
	    dfa103_eof,	    /* EOF table			    */
	    dfa103_min,	    /* Minimum tokens for each state    */
	    dfa103_max,	    /* Maximum tokens for each state    */
	    dfa103_accept,	/* Accept table			    */
	    dfa103_special,	/* Special transition states	    */
	    dfa103_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 103
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    310:56: ( statementList )?
 */
static const ANTLR3_INT32 dfa107_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa107_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa107_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa107_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa107_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa107_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa107_T_empty	    NULL

static const ANTLR3_INT32 dfa107_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, 3, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa107_transitions[] =
{
    dfa107_T0, dfa107_T0, dfa107_T_empty, dfa107_T_empty	
};


/* Declare tracking structure for Cyclic DFA 107
 */
static
ANTLR3_CYCLIC_DFA cdfa107
    =	{
	    107,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"310:56: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa107_eot,	    /* EOT table			    */
	    dfa107_eof,	    /* EOF table			    */
	    dfa107_min,	    /* Minimum tokens for each state    */
	    dfa107_max,	    /* Maximum tokens for each state    */
	    dfa107_accept,	/* Accept table			    */
	    dfa107_special,	/* Special transition states	    */
	    dfa107_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 107
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    311:64: ( statementList )?
 */
static const ANTLR3_INT32 dfa112_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa112_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa112_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa112_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa112_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa112_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa112_T_empty	    NULL

static const ANTLR3_INT32 dfa112_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, 3, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa112_transitions[] =
{
    dfa112_T0, dfa112_T0, dfa112_T_empty, dfa112_T_empty	
};


/* Declare tracking structure for Cyclic DFA 112
 */
static
ANTLR3_CYCLIC_DFA cdfa112
    =	{
	    112,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"311:64: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa112_eot,	    /* EOT table			    */
	    dfa112_eof,	    /* EOF table			    */
	    dfa112_min,	    /* Minimum tokens for each state    */
	    dfa112_max,	    /* Maximum tokens for each state    */
	    dfa112_accept,	/* Accept table			    */
	    dfa112_special,	/* Special transition states	    */
	    dfa112_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 112
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    315:32: ( statementList )?
 */
static const ANTLR3_INT32 dfa118_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa118_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa118_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa118_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa118_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa118_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa118_T_empty	    NULL

static const ANTLR3_INT32 dfa118_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, 3, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa118_transitions[] =
{
    dfa118_T0, dfa118_T0, dfa118_T_empty, dfa118_T_empty	
};


/* Declare tracking structure for Cyclic DFA 118
 */
static
ANTLR3_CYCLIC_DFA cdfa118
    =	{
	    118,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"315:32: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa118_eot,	    /* EOT table			    */
	    dfa118_eof,	    /* EOF table			    */
	    dfa118_min,	    /* Minimum tokens for each state    */
	    dfa118_max,	    /* Maximum tokens for each state    */
	    dfa118_accept,	/* Accept table			    */
	    dfa118_special,	/* Special transition states	    */
	    dfa118_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 118
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    320:64: ( statementList )?
 */
static const ANTLR3_INT32 dfa124_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa124_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa124_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa124_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa124_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa124_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa124_T_empty	    NULL

static const ANTLR3_INT32 dfa124_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, 3, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa124_transitions[] =
{
    dfa124_T0, dfa124_T0, dfa124_T_empty, dfa124_T_empty	
};


/* Declare tracking structure for Cyclic DFA 124
 */
static
ANTLR3_CYCLIC_DFA cdfa124
    =	{
	    124,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"320:64: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa124_eot,	    /* EOT table			    */
	    dfa124_eof,	    /* EOF table			    */
	    dfa124_min,	    /* Minimum tokens for each state    */
	    dfa124_max,	    /* Maximum tokens for each state    */
	    dfa124_accept,	/* Accept table			    */
	    dfa124_special,	/* Special transition states	    */
	    dfa124_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 124
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    350:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );
 */
static const ANTLR3_INT32 dfa138_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa138_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa138_min[13] =
    {
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa138_max[13] =
    {
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa138_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa138_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa138_T_empty	    NULL

static const ANTLR3_INT32 dfa138_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa138_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa138_transitions[] =
{
    dfa138_T0, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, 
    dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T_empty, dfa138_T_empty	
};

static ANTLR3_INT32 dfa138_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA138_1;

    	    ANTLR3_MARKER index138_1;


    		LA138_1 = LA(1);

    	 
    	    index138_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA138_2;

    	    ANTLR3_MARKER index138_2;


    		LA138_2 = LA(1);

    	 
    	    index138_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA138_3;

    	    ANTLR3_MARKER index138_3;


    		LA138_3 = LA(1);

    	 
    	    index138_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA138_4;

    	    ANTLR3_MARKER index138_4;


    		LA138_4 = LA(1);

    	 
    	    index138_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA138_5;

    	    ANTLR3_MARKER index138_5;


    		LA138_5 = LA(1);

    	 
    	    index138_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA138_6;

    	    ANTLR3_MARKER index138_6;


    		LA138_6 = LA(1);

    	 
    	    index138_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA138_7;

    	    ANTLR3_MARKER index138_7;


    		LA138_7 = LA(1);

    	 
    	    index138_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA138_8;

    	    ANTLR3_MARKER index138_8;


    		LA138_8 = LA(1);

    	 
    	    index138_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA138_9;

    	    ANTLR3_MARKER index138_9;


    		LA138_9 = LA(1);

    	 
    	    index138_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA138_10;

    	    ANTLR3_MARKER index138_10;


    		LA138_10 = LA(1);

    	 
    	    index138_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"350:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );";
    EXCEPTION->decisionNum  = 138;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 138
 */
static
ANTLR3_CYCLIC_DFA cdfa138
    =	{
	    138,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"350:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa138_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa138_eot,	    /* EOT table			    */
	    dfa138_eof,	    /* EOF table			    */
	    dfa138_min,	    /* Minimum tokens for each state    */
	    dfa138_max,	    /* Maximum tokens for each state    */
	    dfa138_accept,	/* Accept table			    */
	    dfa138_special,	/* Special transition states	    */
	    dfa138_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 138
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 363:36: ( ',' ( LTERM )* assignmentExpressionNoIn )*
 */
static const ANTLR3_INT32 dfa142_eot[6] =
    {
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa142_eof[6] =
    {
	1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa142_min[6] =
    {
	111, -1, 111, 111, 0, -1
    };
static const ANTLR3_INT32 dfa142_max[6] =
    {
	153, -1, 212, 212, 0, -1
    };
static const ANTLR3_INT32 dfa142_accept[6] =
    {
	-1, 2, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa142_special[6] =
    {	
	-1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa142_T_empty	    NULL

static const ANTLR3_INT32 dfa142_T0[] =
    {
	3, 4, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 5, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5, 5, -1, -1, -1, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5
    };static const ANTLR3_INT32 dfa142_T1[] =
    {
	-1
    };static const ANTLR3_INT32 dfa142_T2[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 1, -1, -1, 
	-1, -1, -1, -1, -1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa142_transitions[] =
{
    dfa142_T2, dfa142_T_empty, dfa142_T0, dfa142_T0, dfa142_T1, dfa142_T_empty	
};

static ANTLR3_INT32 dfa142_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA142_4;

    	    ANTLR3_MARKER index142_4;


    		LA142_4 = LA(1);

    	 
    	    index142_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 5;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index142_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 363:36: ( ',' ( LTERM )* assignmentExpressionNoIn )*";
    EXCEPTION->decisionNum  = 142;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 142
 */
static
ANTLR3_CYCLIC_DFA cdfa142
    =	{
	    142,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 363:36: ( ',' ( LTERM )* assignmentExpressionNoIn )*",	
	    (CDFA_SPECIAL_FUNC) dfa142_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa142_eot,	    /* EOT table			    */
	    dfa142_eof,	    /* EOF table			    */
	    dfa142_min,	    /* Minimum tokens for each state    */
	    dfa142_max,	    /* Maximum tokens for each state    */
	    dfa142_accept,	/* Accept table			    */
	    dfa142_special,	/* Special transition states	    */
	    dfa142_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 142
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    367:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static const ANTLR3_INT32 dfa145_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa145_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa145_min[21] =
    {
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa145_max[21] =
    {
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa145_accept[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa145_special[21] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa145_T_empty	    NULL

static const ANTLR3_INT32 dfa145_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, 11, -1, -1, -1, 11, 11, 11, 
	11, 11, 11, 11, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa145_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa145_transitions[] =
{
    dfa145_T0, dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T1, 
    dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T_empty, dfa145_T_empty, 
    dfa145_T_empty, dfa145_T_empty, dfa145_T_empty, dfa145_T_empty, dfa145_T_empty, 
    dfa145_T_empty, dfa145_T_empty, dfa145_T_empty	
};

static ANTLR3_INT32 dfa145_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA145_1;

    	    ANTLR3_MARKER index145_1;


    		LA145_1 = LA(1);

    	 
    	    index145_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA145_2;

    	    ANTLR3_MARKER index145_2;


    		LA145_2 = LA(1);

    	 
    	    index145_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA145_3;

    	    ANTLR3_MARKER index145_3;


    		LA145_3 = LA(1);

    	 
    	    index145_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA145_4;

    	    ANTLR3_MARKER index145_4;


    		LA145_4 = LA(1);

    	 
    	    index145_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA145_5;

    	    ANTLR3_MARKER index145_5;


    		LA145_5 = LA(1);

    	 
    	    index145_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA145_6;

    	    ANTLR3_MARKER index145_6;


    		LA145_6 = LA(1);

    	 
    	    index145_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA145_7;

    	    ANTLR3_MARKER index145_7;


    		LA145_7 = LA(1);

    	 
    	    index145_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA145_8;

    	    ANTLR3_MARKER index145_8;


    		LA145_8 = LA(1);

    	 
    	    index145_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA145_9;

    	    ANTLR3_MARKER index145_9;


    		LA145_9 = LA(1);

    	 
    	    index145_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA145_10;

    	    ANTLR3_MARKER index145_10;


    		LA145_10 = LA(1);

    	 
    	    index145_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index145_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"367:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );";
    EXCEPTION->decisionNum  = 145;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 145
 */
static
ANTLR3_CYCLIC_DFA cdfa145
    =	{
	    145,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"367:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa145_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa145_eot,	    /* EOT table			    */
	    dfa145_eof,	    /* EOF table			    */
	    dfa145_min,	    /* Minimum tokens for each state    */
	    dfa145_max,	    /* Maximum tokens for each state    */
	    dfa145_accept,	/* Accept table			    */
	    dfa145_special,	/* Special transition states	    */
	    dfa145_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 145
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    372:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static const ANTLR3_INT32 dfa148_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa148_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa148_min[21] =
    {
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa148_max[21] =
    {
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa148_accept[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa148_special[21] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa148_T_empty	    NULL

static const ANTLR3_INT32 dfa148_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, 11, -1, -1, -1, 11, 11, 11, 
	11, 11, 11, 11, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa148_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa148_transitions[] =
{
    dfa148_T0, dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T1, 
    dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T_empty, dfa148_T_empty, 
    dfa148_T_empty, dfa148_T_empty, dfa148_T_empty, dfa148_T_empty, dfa148_T_empty, 
    dfa148_T_empty, dfa148_T_empty, dfa148_T_empty	
};

static ANTLR3_INT32 dfa148_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA148_1;

    	    ANTLR3_MARKER index148_1;


    		LA148_1 = LA(1);

    	 
    	    index148_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA148_2;

    	    ANTLR3_MARKER index148_2;


    		LA148_2 = LA(1);

    	 
    	    index148_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA148_3;

    	    ANTLR3_MARKER index148_3;


    		LA148_3 = LA(1);

    	 
    	    index148_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA148_4;

    	    ANTLR3_MARKER index148_4;


    		LA148_4 = LA(1);

    	 
    	    index148_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA148_5;

    	    ANTLR3_MARKER index148_5;


    		LA148_5 = LA(1);

    	 
    	    index148_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA148_6;

    	    ANTLR3_MARKER index148_6;


    		LA148_6 = LA(1);

    	 
    	    index148_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA148_7;

    	    ANTLR3_MARKER index148_7;


    		LA148_7 = LA(1);

    	 
    	    index148_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA148_8;

    	    ANTLR3_MARKER index148_8;


    		LA148_8 = LA(1);

    	 
    	    index148_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA148_9;

    	    ANTLR3_MARKER index148_9;


    		LA148_9 = LA(1);

    	 
    	    index148_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA148_10;

    	    ANTLR3_MARKER index148_10;


    		LA148_10 = LA(1);

    	 
    	    index148_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index148_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"372:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );";
    EXCEPTION->decisionNum  = 148;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 148
 */
static
ANTLR3_CYCLIC_DFA cdfa148
    =	{
	    148,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"372:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );",	
	    (CDFA_SPECIAL_FUNC) dfa148_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa148_eot,	    /* EOT table			    */
	    dfa148_eof,	    /* EOF table			    */
	    dfa148_min,	    /* Minimum tokens for each state    */
	    dfa148_max,	    /* Maximum tokens for each state    */
	    dfa148_accept,	/* Accept table			    */
	    dfa148_special,	/* Special transition states	    */
	    dfa148_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 148
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    379:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static const ANTLR3_INT32 dfa149_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa149_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa149_min[13] =
    {
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa149_max[13] =
    {
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa149_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa149_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa149_T_empty	    NULL

static const ANTLR3_INT32 dfa149_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa149_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa149_transitions[] =
{
    dfa149_T0, dfa149_T1, dfa149_T1, dfa149_T1, dfa149_T1, dfa149_T1, dfa149_T1, 
    dfa149_T1, dfa149_T1, dfa149_T1, dfa149_T1, dfa149_T_empty, dfa149_T_empty	
};

static ANTLR3_INT32 dfa149_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA149_1;

    	    ANTLR3_MARKER index149_1;


    		LA149_1 = LA(1);

    	 
    	    index149_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA149_2;

    	    ANTLR3_MARKER index149_2;


    		LA149_2 = LA(1);

    	 
    	    index149_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA149_3;

    	    ANTLR3_MARKER index149_3;


    		LA149_3 = LA(1);

    	 
    	    index149_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA149_4;

    	    ANTLR3_MARKER index149_4;


    		LA149_4 = LA(1);

    	 
    	    index149_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA149_5;

    	    ANTLR3_MARKER index149_5;


    		LA149_5 = LA(1);

    	 
    	    index149_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA149_6;

    	    ANTLR3_MARKER index149_6;


    		LA149_6 = LA(1);

    	 
    	    index149_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA149_7;

    	    ANTLR3_MARKER index149_7;


    		LA149_7 = LA(1);

    	 
    	    index149_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA149_8;

    	    ANTLR3_MARKER index149_8;


    		LA149_8 = LA(1);

    	 
    	    index149_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA149_9;

    	    ANTLR3_MARKER index149_9;


    		LA149_9 = LA(1);

    	 
    	    index149_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA149_10;

    	    ANTLR3_MARKER index149_10;


    		LA149_10 = LA(1);

    	 
    	    index149_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index149_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"379:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );";
    EXCEPTION->decisionNum  = 149;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 149
 */
static
ANTLR3_CYCLIC_DFA cdfa149
    =	{
	    149,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"379:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa149_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa149_eot,	    /* EOT table			    */
	    dfa149_eof,	    /* EOF table			    */
	    dfa149_min,	    /* Minimum tokens for each state    */
	    dfa149_max,	    /* Maximum tokens for each state    */
	    dfa149_accept,	/* Accept table			    */
	    dfa149_special,	/* Special transition states	    */
	    dfa149_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 149
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    384:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa151_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa151_eof[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa151_min[12] =
    {
	112, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa151_max[12] =
    {
	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa151_accept[12] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa151_special[12] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa151_T_empty	    NULL

static const ANTLR3_INT32 dfa151_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa151_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa151_transitions[] =
{
    dfa151_T0, dfa151_T_empty, dfa151_T_empty, dfa151_T_empty, dfa151_T_empty, 
    dfa151_T_empty, dfa151_T_empty, dfa151_T_empty, dfa151_T_empty, dfa151_T_empty, 
    dfa151_T1, dfa151_T_empty	
};

static ANTLR3_INT32 dfa151_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA151_10;

    	    ANTLR3_MARKER index151_10;


    		LA151_10 = LA(1);

    	 
    	    index151_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred164_Emerson(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index151_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"384:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 151;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 151
 */
static
ANTLR3_CYCLIC_DFA cdfa151
    =	{
	    151,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"384:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa151_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa151_eot,	    /* EOT table			    */
	    dfa151_eof,	    /* EOF table			    */
	    dfa151_min,	    /* Minimum tokens for each state    */
	    dfa151_max,	    /* Maximum tokens for each state    */
	    dfa151_accept,	/* Accept table			    */
	    dfa151_special,	/* Special transition states	    */
	    dfa151_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 151
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 401:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa157_eot[60] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa157_eof[60] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa157_min[60] =
    {
	111, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa157_max[60] =
    {
	212, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa157_accept[60] =
    {
	-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa157_special[60] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa157_T_empty	    NULL

static const ANTLR3_INT32 dfa157_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa157_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa157_transitions[] =
{
    dfa157_T0, dfa157_T_empty, dfa157_T1, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T1, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, 
    dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty, dfa157_T_empty	
};

static ANTLR3_INT32 dfa157_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA157_2;

    	    ANTLR3_MARKER index157_2;


    		LA157_2 = LA(1);

    	 
    	    index157_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 58;
    	    }

    	    else if ( (synpred172_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index157_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA157_48;

    	    ANTLR3_MARKER index157_48;


    		LA157_48 = LA(1);

    	 
    	    index157_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred172_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index157_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 401:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 157;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 157
 */
static
ANTLR3_CYCLIC_DFA cdfa157
    =	{
	    157,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 401:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa157_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa157_eot,	    /* EOT table			    */
	    dfa157_eof,	    /* EOF table			    */
	    dfa157_min,	    /* Minimum tokens for each state    */
	    dfa157_max,	    /* Maximum tokens for each state    */
	    dfa157_accept,	/* Accept table			    */
	    dfa157_special,	/* Special transition states	    */
	    dfa157_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 157
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 402:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa160_eot[60] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa160_eof[60] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa160_min[60] =
    {
	111, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa160_max[60] =
    {
	212, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa160_accept[60] =
    {
	-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa160_special[60] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa160_T_empty	    NULL

static const ANTLR3_INT32 dfa160_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa160_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa160_transitions[] =
{
    dfa160_T0, dfa160_T_empty, dfa160_T1, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T1, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty	
};

static ANTLR3_INT32 dfa160_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA160_2;

    	    ANTLR3_MARKER index160_2;


    		LA160_2 = LA(1);

    	 
    	    index160_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred175_Emerson(ctx)) )
    	    {
    	        s = 58;
    	    }

    	    else if ( (synpred177_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index160_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA160_48;

    	    ANTLR3_MARKER index160_48;


    		LA160_48 = LA(1);

    	 
    	    index160_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred177_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index160_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 402:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 160;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 160
 */
static
ANTLR3_CYCLIC_DFA cdfa160
    =	{
	    160,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 402:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa160_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa160_eot,	    /* EOT table			    */
	    dfa160_eof,	    /* EOF table			    */
	    dfa160_min,	    /* Minimum tokens for each state    */
	    dfa160_max,	    /* Maximum tokens for each state    */
	    dfa160_accept,	/* Accept table			    */
	    dfa160_special,	/* Special transition states	    */
	    dfa160_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 160
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 403:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa165_eot[60] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_eof[60] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_min[60] =
    {
	111, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_max[60] =
    {
	212, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_accept[60] =
    {
	-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa165_special[60] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa165_T_empty	    NULL

static const ANTLR3_INT32 dfa165_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa165_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa165_transitions[] =
{
    dfa165_T0, dfa165_T_empty, dfa165_T1, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T1, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty	
};

static ANTLR3_INT32 dfa165_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA165_2;

    	    ANTLR3_MARKER index165_2;


    		LA165_2 = LA(1);

    	 
    	    index165_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_Emerson(ctx)) )
    	    {
    	        s = 58;
    	    }

    	    else if ( (synpred184_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index165_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA165_48;

    	    ANTLR3_MARKER index165_48;


    		LA165_48 = LA(1);

    	 
    	    index165_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred184_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index165_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 403:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 165;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 165
 */
static
ANTLR3_CYCLIC_DFA cdfa165
    =	{
	    165,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 403:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa165_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa165_eot,	    /* EOT table			    */
	    dfa165_eof,	    /* EOF table			    */
	    dfa165_min,	    /* Minimum tokens for each state    */
	    dfa165_max,	    /* Maximum tokens for each state    */
	    dfa165_accept,	/* Accept table			    */
	    dfa165_special,	/* Special transition states	    */
	    dfa165_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 165
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 414:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa172_eot[61] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa172_eof[61] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa172_min[61] =
    {
	111, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa172_max[61] =
    {
	212, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa172_accept[61] =
    {
	-1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, 1, 2
    };
static const ANTLR3_INT32 dfa172_special[61] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa172_T_empty	    NULL

static const ANTLR3_INT32 dfa172_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 50, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa172_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa172_transitions[] =
{
    dfa172_T0, dfa172_T_empty, dfa172_T1, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T1, dfa172_T_empty, 
    dfa172_T1, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, dfa172_T_empty, 
    dfa172_T_empty	
};

static ANTLR3_INT32 dfa172_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA172_2;

    	    ANTLR3_MARKER index172_2;


    		LA172_2 = LA(1);

    	 
    	    index172_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred188_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (synpred190_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (synpred192_Emerson(ctx)) )
    	    {
    	        s = 58;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index172_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA172_48;

    	    ANTLR3_MARKER index172_48;


    		LA172_48 = LA(1);

    	 
    	    index172_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred190_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index172_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA172_50;

    	    ANTLR3_MARKER index172_50;


    		LA172_50 = LA(1);

    	 
    	    index172_50 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred188_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index172_50);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 414:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*";
    EXCEPTION->decisionNum  = 172;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 172
 */
static
ANTLR3_CYCLIC_DFA cdfa172
    =	{
	    172,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 414:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa172_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa172_eot,	    /* EOT table			    */
	    dfa172_eof,	    /* EOF table			    */
	    dfa172_min,	    /* Minimum tokens for each state    */
	    dfa172_max,	    /* Maximum tokens for each state    */
	    dfa172_accept,	/* Accept table			    */
	    dfa172_special,	/* Special transition states	    */
	    dfa172_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 172
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    479:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?
 */
static const ANTLR3_INT32 dfa208_eot[31] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa208_eof[31] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa208_min[31] =
    {
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa208_max[31] =
    {
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa208_accept[31] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa208_special[31] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa208_T_empty	    NULL

static const ANTLR3_INT32 dfa208_T0[] =
    {
	20, 3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, 20, 7, -1, 20, -1, -1, -1, 
	-1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 10, 
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 16, 17, -1, -1, -1, 15, 14, 
	11, 12, 13, 18, 19, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa208_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa208_transitions[] =
{
    dfa208_T0, dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, 
    dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, 
    dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T1, dfa208_T_empty, 
    dfa208_T_empty, dfa208_T_empty, dfa208_T_empty, dfa208_T_empty, dfa208_T_empty, 
    dfa208_T_empty, dfa208_T_empty, dfa208_T_empty, dfa208_T_empty, dfa208_T_empty	
};

static ANTLR3_INT32 dfa208_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA208_1;

    	    ANTLR3_MARKER index208_1;


    		LA208_1 = LA(1);

    	 
    	    index208_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA208_2;

    	    ANTLR3_MARKER index208_2;


    		LA208_2 = LA(1);

    	 
    	    index208_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA208_3;

    	    ANTLR3_MARKER index208_3;


    		LA208_3 = LA(1);

    	 
    	    index208_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA208_4;

    	    ANTLR3_MARKER index208_4;


    		LA208_4 = LA(1);

    	 
    	    index208_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA208_5;

    	    ANTLR3_MARKER index208_5;


    		LA208_5 = LA(1);

    	 
    	    index208_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA208_6;

    	    ANTLR3_MARKER index208_6;


    		LA208_6 = LA(1);

    	 
    	    index208_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA208_7;

    	    ANTLR3_MARKER index208_7;


    		LA208_7 = LA(1);

    	 
    	    index208_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA208_8;

    	    ANTLR3_MARKER index208_8;


    		LA208_8 = LA(1);

    	 
    	    index208_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA208_9;

    	    ANTLR3_MARKER index208_9;


    		LA208_9 = LA(1);

    	 
    	    index208_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA208_10;

    	    ANTLR3_MARKER index208_10;


    		LA208_10 = LA(1);

    	 
    	    index208_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA208_11;

    	    ANTLR3_MARKER index208_11;


    		LA208_11 = LA(1);

    	 
    	    index208_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA208_12;

    	    ANTLR3_MARKER index208_12;


    		LA208_12 = LA(1);

    	 
    	    index208_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA208_13;

    	    ANTLR3_MARKER index208_13;


    		LA208_13 = LA(1);

    	 
    	    index208_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA208_14;

    	    ANTLR3_MARKER index208_14;


    		LA208_14 = LA(1);

    	 
    	    index208_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA208_15;

    	    ANTLR3_MARKER index208_15;


    		LA208_15 = LA(1);

    	 
    	    index208_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA208_16;

    	    ANTLR3_MARKER index208_16;


    		LA208_16 = LA(1);

    	 
    	    index208_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA208_17;

    	    ANTLR3_MARKER index208_17;


    		LA208_17 = LA(1);

    	 
    	    index208_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA208_18;

    	    ANTLR3_MARKER index208_18;


    		LA208_18 = LA(1);

    	 
    	    index208_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 18:
        
    	{
    	    ANTLR3_UINT32 LA208_19;

    	    ANTLR3_MARKER index208_19;


    		LA208_19 = LA(1);

    	 
    	    index208_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred236_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index208_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"479:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?";
    EXCEPTION->decisionNum  = 208;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 208
 */
static
ANTLR3_CYCLIC_DFA cdfa208
    =	{
	    208,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"479:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?",	
	    (CDFA_SPECIAL_FUNC) dfa208_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa208_eot,	    /* EOT table			    */
	    dfa208_eof,	    /* EOF table			    */
	    dfa208_min,	    /* Minimum tokens for each state    */
	    dfa208_max,	    /* Maximum tokens for each state    */
	    dfa208_accept,	/* Accept table			    */
	    dfa208_special,	/* Special transition states	    */
	    dfa208_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 208
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 501:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
 */
static const ANTLR3_INT32 dfa220_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa220_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa220_min[5] =
    {
	111, 111, -1, -1, 111
    };
static const ANTLR3_INT32 dfa220_max[5] =
    {
	182, 212, -1, -1, 212
    };
static const ANTLR3_INT32 dfa220_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa220_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa220_T_empty	    NULL

static const ANTLR3_INT32 dfa220_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa220_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa220_transitions[] =
{
    dfa220_T1, dfa220_T0, dfa220_T_empty, dfa220_T_empty, dfa220_T0	
};


/* Declare tracking structure for Cyclic DFA 220
 */
static
ANTLR3_CYCLIC_DFA cdfa220
    =	{
	    220,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 501:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa220_eot,	    /* EOT table			    */
	    dfa220_eof,	    /* EOF table			    */
	    dfa220_min,	    /* Minimum tokens for each state    */
	    dfa220_max,	    /* Maximum tokens for each state    */
	    dfa220_accept,	/* Accept table			    */
	    dfa220_special,	/* Special transition states	    */
	    dfa220_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 220
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 505:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
 */
static const ANTLR3_INT32 dfa223_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa223_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa223_min[5] =
    {
	111, 111, -1, -1, 111
    };
static const ANTLR3_INT32 dfa223_max[5] =
    {
	183, 212, -1, -1, 212
    };
static const ANTLR3_INT32 dfa223_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa223_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa223_T_empty	    NULL

static const ANTLR3_INT32 dfa223_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa223_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa223_transitions[] =
{
    dfa223_T1, dfa223_T0, dfa223_T_empty, dfa223_T_empty, dfa223_T0	
};


/* Declare tracking structure for Cyclic DFA 223
 */
static
ANTLR3_CYCLIC_DFA cdfa223
    =	{
	    223,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 505:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa223_eot,	    /* EOT table			    */
	    dfa223_eof,	    /* EOF table			    */
	    dfa223_min,	    /* Minimum tokens for each state    */
	    dfa223_max,	    /* Maximum tokens for each state    */
	    dfa223_accept,	/* Accept table			    */
	    dfa223_special,	/* Special transition states	    */
	    dfa223_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 223
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 509:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa226_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa226_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa226_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa226_max[4] =
    {
	212, 182, -1, -1
    };
static const ANTLR3_INT32 dfa226_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa226_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa226_T_empty	    NULL

static const ANTLR3_INT32 dfa226_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3
    };static const ANTLR3_INT32 dfa226_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa226_transitions[] =
{
    dfa226_T1, dfa226_T0, dfa226_T_empty, dfa226_T_empty	
};


/* Declare tracking structure for Cyclic DFA 226
 */
static
ANTLR3_CYCLIC_DFA cdfa226
    =	{
	    226,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 509:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa226_eot,	    /* EOT table			    */
	    dfa226_eof,	    /* EOF table			    */
	    dfa226_min,	    /* Minimum tokens for each state    */
	    dfa226_max,	    /* Maximum tokens for each state    */
	    dfa226_accept,	/* Accept table			    */
	    dfa226_special,	/* Special transition states	    */
	    dfa226_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 226
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 514:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa229_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa229_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa229_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa229_max[4] =
    {
	212, 183, -1, -1
    };
static const ANTLR3_INT32 dfa229_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa229_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa229_T_empty	    NULL

static const ANTLR3_INT32 dfa229_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa229_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa229_transitions[] =
{
    dfa229_T0, dfa229_T1, dfa229_T_empty, dfa229_T_empty	
};


/* Declare tracking structure for Cyclic DFA 229
 */
static
ANTLR3_CYCLIC_DFA cdfa229
    =	{
	    229,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 514:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa229_eot,	    /* EOT table			    */
	    dfa229_eof,	    /* EOF table			    */
	    dfa229_min,	    /* Minimum tokens for each state    */
	    dfa229_max,	    /* Maximum tokens for each state    */
	    dfa229_accept,	/* Accept table			    */
	    dfa229_special,	/* Special transition states	    */
	    dfa229_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 229
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 518:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
 */
static const ANTLR3_INT32 dfa232_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa232_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa232_min[5] =
    {
	111, 111, -1, -1, 111
    };
static const ANTLR3_INT32 dfa232_max[5] =
    {
	184, 212, -1, -1, 212
    };
static const ANTLR3_INT32 dfa232_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa232_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa232_T_empty	    NULL

static const ANTLR3_INT32 dfa232_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa232_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa232_transitions[] =
{
    dfa232_T1, dfa232_T0, dfa232_T_empty, dfa232_T_empty, dfa232_T0	
};


/* Declare tracking structure for Cyclic DFA 232
 */
static
ANTLR3_CYCLIC_DFA cdfa232
    =	{
	    232,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 518:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa232_eot,	    /* EOT table			    */
	    dfa232_eof,	    /* EOF table			    */
	    dfa232_min,	    /* Minimum tokens for each state    */
	    dfa232_max,	    /* Maximum tokens for each state    */
	    dfa232_accept,	/* Accept table			    */
	    dfa232_special,	/* Special transition states	    */
	    dfa232_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 232
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 522:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa235_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa235_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa235_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa235_max[4] =
    {
	212, 184, -1, -1
    };
static const ANTLR3_INT32 dfa235_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa235_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa235_T_empty	    NULL

static const ANTLR3_INT32 dfa235_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3
    };static const ANTLR3_INT32 dfa235_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa235_transitions[] =
{
    dfa235_T1, dfa235_T0, dfa235_T_empty, dfa235_T_empty	
};


/* Declare tracking structure for Cyclic DFA 235
 */
static
ANTLR3_CYCLIC_DFA cdfa235
    =	{
	    235,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 522:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa235_eot,	    /* EOT table			    */
	    dfa235_eof,	    /* EOF table			    */
	    dfa235_min,	    /* Minimum tokens for each state    */
	    dfa235_max,	    /* Maximum tokens for each state    */
	    dfa235_accept,	/* Accept table			    */
	    dfa235_special,	/* Special transition states	    */
	    dfa235_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 235
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 526:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
 */
static const ANTLR3_INT32 dfa238_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa238_min[5] =
    {
	111, 111, -1, -1, 111
    };
static const ANTLR3_INT32 dfa238_max[5] =
    {
	185, 212, -1, -1, 212
    };
static const ANTLR3_INT32 dfa238_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa238_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa238_T_empty	    NULL

static const ANTLR3_INT32 dfa238_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3
    };static const ANTLR3_INT32 dfa238_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa238_transitions[] =
{
    dfa238_T0, dfa238_T1, dfa238_T_empty, dfa238_T_empty, dfa238_T1	
};


/* Declare tracking structure for Cyclic DFA 238
 */
static
ANTLR3_CYCLIC_DFA cdfa238
    =	{
	    238,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 526:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa238_eot,	    /* EOT table			    */
	    dfa238_eof,	    /* EOF table			    */
	    dfa238_min,	    /* Minimum tokens for each state    */
	    dfa238_max,	    /* Maximum tokens for each state    */
	    dfa238_accept,	/* Accept table			    */
	    dfa238_special,	/* Special transition states	    */
	    dfa238_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 238
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 530:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa241_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa241_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa241_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa241_max[4] =
    {
	212, 185, -1, -1
    };
static const ANTLR3_INT32 dfa241_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa241_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa241_T_empty	    NULL

static const ANTLR3_INT32 dfa241_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3
    };static const ANTLR3_INT32 dfa241_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa241_transitions[] =
{
    dfa241_T1, dfa241_T0, dfa241_T_empty, dfa241_T_empty	
};


/* Declare tracking structure for Cyclic DFA 241
 */
static
ANTLR3_CYCLIC_DFA cdfa241
    =	{
	    241,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 530:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa241_eot,	    /* EOT table			    */
	    dfa241_eof,	    /* EOF table			    */
	    dfa241_min,	    /* Minimum tokens for each state    */
	    dfa241_max,	    /* Maximum tokens for each state    */
	    dfa241_accept,	/* Accept table			    */
	    dfa241_special,	/* Special transition states	    */
	    dfa241_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 241
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 534:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
 */
static const ANTLR3_INT32 dfa244_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa244_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa244_min[5] =
    {
	111, 111, -1, -1, 111
    };
static const ANTLR3_INT32 dfa244_max[5] =
    {
	186, 212, -1, -1, 212
    };
static const ANTLR3_INT32 dfa244_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa244_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa244_T_empty	    NULL

static const ANTLR3_INT32 dfa244_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa244_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa244_transitions[] =
{
    dfa244_T1, dfa244_T0, dfa244_T_empty, dfa244_T_empty, dfa244_T0	
};


/* Declare tracking structure for Cyclic DFA 244
 */
static
ANTLR3_CYCLIC_DFA cdfa244
    =	{
	    244,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 534:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa244_eot,	    /* EOT table			    */
	    dfa244_eof,	    /* EOF table			    */
	    dfa244_min,	    /* Minimum tokens for each state    */
	    dfa244_max,	    /* Maximum tokens for each state    */
	    dfa244_accept,	/* Accept table			    */
	    dfa244_special,	/* Special transition states	    */
	    dfa244_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 244
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 538:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa247_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa247_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa247_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa247_max[4] =
    {
	212, 186, -1, -1
    };
static const ANTLR3_INT32 dfa247_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa247_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa247_T_empty	    NULL

static const ANTLR3_INT32 dfa247_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa247_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa247_transitions[] =
{
    dfa247_T0, dfa247_T1, dfa247_T_empty, dfa247_T_empty	
};


/* Declare tracking structure for Cyclic DFA 247
 */
static
ANTLR3_CYCLIC_DFA cdfa247
    =	{
	    247,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 538:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa247_eot,	    /* EOT table			    */
	    dfa247_eof,	    /* EOF table			    */
	    dfa247_min,	    /* Minimum tokens for each state    */
	    dfa247_max,	    /* Maximum tokens for each state    */
	    dfa247_accept,	/* Accept table			    */
	    dfa247_special,	/* Special transition states	    */
	    dfa247_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 247
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 542:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
 */
static const ANTLR3_INT32 dfa250_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa250_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa250_min[5] =
    {
	111, 111, -1, -1, 111
    };
static const ANTLR3_INT32 dfa250_max[5] =
    {
	190, 212, -1, -1, 212
    };
static const ANTLR3_INT32 dfa250_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa250_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa250_T_empty	    NULL

static const ANTLR3_INT32 dfa250_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa250_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa250_transitions[] =
{
    dfa250_T1, dfa250_T0, dfa250_T_empty, dfa250_T_empty, dfa250_T0	
};


/* Declare tracking structure for Cyclic DFA 250
 */
static
ANTLR3_CYCLIC_DFA cdfa250
    =	{
	    250,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 542:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa250_eot,	    /* EOT table			    */
	    dfa250_eof,	    /* EOF table			    */
	    dfa250_min,	    /* Minimum tokens for each state    */
	    dfa250_max,	    /* Maximum tokens for each state    */
	    dfa250_accept,	/* Accept table			    */
	    dfa250_special,	/* Special transition states	    */
	    dfa250_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 250
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 554:65: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa254_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa254_max[4] =
    {
	212, 190, -1, -1
    };
static const ANTLR3_INT32 dfa254_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa254_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa254_T_empty	    NULL

static const ANTLR3_INT32 dfa254_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 3, 3
    };static const ANTLR3_INT32 dfa254_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 
	3, 3, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa254_transitions[] =
{
    dfa254_T1, dfa254_T0, dfa254_T_empty, dfa254_T_empty	
};


/* Declare tracking structure for Cyclic DFA 254
 */
static
ANTLR3_CYCLIC_DFA cdfa254
    =	{
	    254,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 554:65: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa254_eot,	    /* EOT table			    */
	    dfa254_eof,	    /* EOF table			    */
	    dfa254_min,	    /* Minimum tokens for each state    */
	    dfa254_max,	    /* Maximum tokens for each state    */
	    dfa254_accept,	/* Accept table			    */
	    dfa254_special,	/* Special transition states	    */
	    dfa254_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 254
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 569:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa258_eot[28] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa258_eof[28] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa258_min[28] =
    {
	111, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa258_max[28] =
    {
	195, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa258_accept[28] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa258_special[28] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa258_T_empty	    NULL

static const ANTLR3_INT32 dfa258_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 22, 22, 22, 22, 22
    };static const ANTLR3_INT32 dfa258_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa258_transitions[] =
{
    dfa258_T0, dfa258_T1, dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, 
    dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, 
    dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, 
    dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, 
    dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, dfa258_T_empty, 
    dfa258_T_empty, dfa258_T_empty, dfa258_T_empty	
};

static ANTLR3_INT32 dfa258_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA258_1;

    	    ANTLR3_MARKER index258_1;


    		LA258_1 = LA(1);

    	 
    	    index258_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred292_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index258_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 569:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*";
    EXCEPTION->decisionNum  = 258;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 258
 */
static
ANTLR3_CYCLIC_DFA cdfa258
    =	{
	    258,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 569:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa258_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa258_eot,	    /* EOT table			    */
	    dfa258_eof,	    /* EOF table			    */
	    dfa258_min,	    /* Minimum tokens for each state    */
	    dfa258_max,	    /* Maximum tokens for each state    */
	    dfa258_accept,	/* Accept table			    */
	    dfa258_special,	/* Special transition states	    */
	    dfa258_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 258
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 587:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa263_eot[43] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa263_eof[43] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa263_min[43] =
    {
	111, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa263_max[43] =
    {
	212, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa263_accept[43] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa263_special[43] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa263_T_empty	    NULL

static const ANTLR3_INT32 dfa263_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 16, 39, 39, 39, 39, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa263_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa263_transitions[] =
{
    dfa263_T0, dfa263_T1, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, 
    dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, 
    dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, 
    dfa263_T_empty, dfa263_T1, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, 
    dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, 
    dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, 
    dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, 
    dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, dfa263_T_empty, 
    dfa263_T_empty, dfa263_T_empty, dfa263_T_empty	
};

static ANTLR3_INT32 dfa263_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA263_1;

    	    ANTLR3_MARKER index263_1;


    		LA263_1 = LA(1);

    	 
    	    index263_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred300_Emerson(ctx)) )
    	    {
    	        s = 39;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index263_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA263_16;

    	    ANTLR3_MARKER index263_16;


    		LA263_16 = LA(1);

    	 
    	    index263_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred300_Emerson(ctx)) )
    	    {
    	        s = 39;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index263_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 587:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*";
    EXCEPTION->decisionNum  = 263;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 263
 */
static
ANTLR3_CYCLIC_DFA cdfa263
    =	{
	    263,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 587:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa263_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa263_eot,	    /* EOT table			    */
	    dfa263_eof,	    /* EOF table			    */
	    dfa263_min,	    /* Minimum tokens for each state    */
	    dfa263_max,	    /* Maximum tokens for each state    */
	    dfa263_accept,	/* Accept table			    */
	    dfa263_special,	/* Special transition states	    */
	    dfa263_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 263
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 592:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
 */
static const ANTLR3_INT32 dfa266_eot[47] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa266_eof[47] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa266_min[47] =
    {
	111, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa266_max[47] =
    {
	212, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa266_accept[47] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa266_special[47] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa266_T_empty	    NULL

static const ANTLR3_INT32 dfa266_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 42, 43, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2
    };static const ANTLR3_INT32 dfa266_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa266_transitions[] =
{
    dfa266_T0, dfa266_T1, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, 
    dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, 
    dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, 
    dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, 
    dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, 
    dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, 
    dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, 
    dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, dfa266_T_empty, 
    dfa266_T_empty, dfa266_T_empty, dfa266_T1, dfa266_T1, dfa266_T_empty, 
    dfa266_T_empty, dfa266_T_empty	
};

static ANTLR3_INT32 dfa266_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA266_1;

    	    ANTLR3_MARKER index266_1;


    		LA266_1 = LA(1);

    	 
    	    index266_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred303_Emerson(ctx)) )
    	    {
    	        s = 46;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index266_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA266_42;

    	    ANTLR3_MARKER index266_42;


    		LA266_42 = LA(1);

    	 
    	    index266_42 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred303_Emerson(ctx)) )
    	    {
    	        s = 46;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index266_42);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA266_43;

    	    ANTLR3_MARKER index266_43;


    		LA266_43 = LA(1);

    	 
    	    index266_43 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred303_Emerson(ctx)) )
    	    {
    	        s = 46;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index266_43);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 592:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*";
    EXCEPTION->decisionNum  = 266;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 266
 */
static
ANTLR3_CYCLIC_DFA cdfa266
    =	{
	    266,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 592:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa266_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa266_eot,	    /* EOT table			    */
	    dfa266_eof,	    /* EOF table			    */
	    dfa266_min,	    /* Minimum tokens for each state    */
	    dfa266_max,	    /* Maximum tokens for each state    */
	    dfa266_accept,	/* Accept table			    */
	    dfa266_special,	/* Special transition states	    */
	    dfa266_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 266
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 602:44: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
 */
static const ANTLR3_INT32 dfa270_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa270_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa270_min[5] =
    {
	111, 111, -1, -1, 111
    };
static const ANTLR3_INT32 dfa270_max[5] =
    {
	212, 212, -1, -1, 212
    };
static const ANTLR3_INT32 dfa270_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa270_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa270_T_empty	    NULL

static const ANTLR3_INT32 dfa270_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa270_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa270_transitions[] =
{
    dfa270_T1, dfa270_T0, dfa270_T_empty, dfa270_T_empty, dfa270_T0	
};


/* Declare tracking structure for Cyclic DFA 270
 */
static
ANTLR3_CYCLIC_DFA cdfa270
    =	{
	    270,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 602:44: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa270_eot,	    /* EOT table			    */
	    dfa270_eof,	    /* EOF table			    */
	    dfa270_min,	    /* Minimum tokens for each state    */
	    dfa270_max,	    /* Maximum tokens for each state    */
	    dfa270_accept,	/* Accept table			    */
	    dfa270_special,	/* Special transition states	    */
	    dfa270_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 270
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    606:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static const ANTLR3_INT32 dfa271_eot[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa271_eof[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa271_min[14] =
    {
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa271_max[14] =
    {
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa271_accept[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3
    };
static const ANTLR3_INT32 dfa271_special[14] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa271_T_empty	    NULL

static const ANTLR3_INT32 dfa271_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa271_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa271_transitions[] =
{
    dfa271_T0, dfa271_T1, dfa271_T1, dfa271_T1, dfa271_T1, dfa271_T1, dfa271_T1, 
    dfa271_T1, dfa271_T1, dfa271_T1, dfa271_T1, dfa271_T_empty, dfa271_T_empty, 
    dfa271_T_empty	
};

static ANTLR3_INT32 dfa271_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA271_1;

    	    ANTLR3_MARKER index271_1;


    		LA271_1 = LA(1);

    	 
    	    index271_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA271_2;

    	    ANTLR3_MARKER index271_2;


    		LA271_2 = LA(1);

    	 
    	    index271_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA271_3;

    	    ANTLR3_MARKER index271_3;


    		LA271_3 = LA(1);

    	 
    	    index271_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA271_4;

    	    ANTLR3_MARKER index271_4;


    		LA271_4 = LA(1);

    	 
    	    index271_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA271_5;

    	    ANTLR3_MARKER index271_5;


    		LA271_5 = LA(1);

    	 
    	    index271_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA271_6;

    	    ANTLR3_MARKER index271_6;


    		LA271_6 = LA(1);

    	 
    	    index271_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA271_7;

    	    ANTLR3_MARKER index271_7;


    		LA271_7 = LA(1);

    	 
    	    index271_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA271_8;

    	    ANTLR3_MARKER index271_8;


    		LA271_8 = LA(1);

    	 
    	    index271_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA271_9;

    	    ANTLR3_MARKER index271_9;


    		LA271_9 = LA(1);

    	 
    	    index271_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA271_10;

    	    ANTLR3_MARKER index271_10;


    		LA271_10 = LA(1);

    	 
    	    index271_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred309_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred310_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index271_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"606:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );";
    EXCEPTION->decisionNum  = 271;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 271
 */
static
ANTLR3_CYCLIC_DFA cdfa271
    =	{
	    271,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"606:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa271_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa271_eot,	    /* EOT table			    */
	    dfa271_eof,	    /* EOF table			    */
	    dfa271_min,	    /* Minimum tokens for each state    */
	    dfa271_max,	    /* Maximum tokens for each state    */
	    dfa271_accept,	/* Accept table			    */
	    dfa271_special,	/* Special transition states	    */
	    dfa271_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 271
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    632:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static const ANTLR3_INT32 dfa276_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa276_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa276_min[13] =
    {
	112, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa276_max[13] =
    {
	212, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa276_accept[13] =
    {
	-1, 1, -1, 4, 5, 6, 7, -1, 10, 2, 3, 8, 9
    };
static const ANTLR3_INT32 dfa276_special[13] =
    {	
	-1, -1, 0, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa276_T_empty	    NULL

static const ANTLR3_INT32 dfa276_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa276_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa276_transitions[] =
{
    dfa276_T0, dfa276_T_empty, dfa276_T1, dfa276_T_empty, dfa276_T_empty, 
    dfa276_T_empty, dfa276_T_empty, dfa276_T1, dfa276_T_empty, dfa276_T_empty, 
    dfa276_T_empty, dfa276_T_empty, dfa276_T_empty	
};

static ANTLR3_INT32 dfa276_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA276_2;

    	    ANTLR3_MARKER index276_2;


    		LA276_2 = LA(1);

    	 
    	    index276_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred321_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (synpred322_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index276_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA276_7;

    	    ANTLR3_MARKER index276_7;


    		LA276_7 = LA(1);

    	 
    	    index276_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred327_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred328_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index276_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"632:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );";
    EXCEPTION->decisionNum  = 276;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 276
 */
static
ANTLR3_CYCLIC_DFA cdfa276
    =	{
	    276,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"632:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa276_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa276_eot,	    /* EOT table			    */
	    dfa276_eof,	    /* EOF table			    */
	    dfa276_min,	    /* Minimum tokens for each state    */
	    dfa276_max,	    /* Maximum tokens for each state    */
	    dfa276_accept,	/* Accept table			    */
	    dfa276_special,	/* Special transition states	    */
	    dfa276_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 276
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    658:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static const ANTLR3_INT32 dfa304_eot[24] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa304_eof[24] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa304_min[24] =
    {
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa304_max[24] =
    {
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa304_accept[24] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 3, 4, 2
    };
static const ANTLR3_INT32 dfa304_special[24] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 
	-1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa304_T_empty	    NULL

static const ANTLR3_INT32 dfa304_T0[] =
    {
	3, 5, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, 11, -1, -1, -1, 11, 11, 11, 
	11, 11, 11, 11, 1, 4, 20, 20, 20
    };static const ANTLR3_INT32 dfa304_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa304_transitions[] =
{
    dfa304_T0, dfa304_T1, dfa304_T1, dfa304_T1, dfa304_T1, dfa304_T1, dfa304_T1, 
    dfa304_T1, dfa304_T1, dfa304_T1, dfa304_T1, dfa304_T_empty, dfa304_T_empty, 
    dfa304_T_empty, dfa304_T_empty, dfa304_T_empty, dfa304_T_empty, dfa304_T_empty, 
    dfa304_T_empty, dfa304_T_empty, dfa304_T1, dfa304_T_empty, dfa304_T_empty, 
    dfa304_T_empty	
};

static ANTLR3_INT32 dfa304_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA304_1;

    	    ANTLR3_MARKER index304_1;


    		LA304_1 = LA(1);

    	 
    	    index304_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA304_2;

    	    ANTLR3_MARKER index304_2;


    		LA304_2 = LA(1);

    	 
    	    index304_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA304_3;

    	    ANTLR3_MARKER index304_3;


    		LA304_3 = LA(1);

    	 
    	    index304_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA304_4;

    	    ANTLR3_MARKER index304_4;


    		LA304_4 = LA(1);

    	 
    	    index304_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA304_5;

    	    ANTLR3_MARKER index304_5;


    		LA304_5 = LA(1);

    	 
    	    index304_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA304_6;

    	    ANTLR3_MARKER index304_6;


    		LA304_6 = LA(1);

    	 
    	    index304_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA304_7;

    	    ANTLR3_MARKER index304_7;


    		LA304_7 = LA(1);

    	 
    	    index304_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA304_8;

    	    ANTLR3_MARKER index304_8;


    		LA304_8 = LA(1);

    	 
    	    index304_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA304_9;

    	    ANTLR3_MARKER index304_9;


    		LA304_9 = LA(1);

    	 
    	    index304_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA304_10;

    	    ANTLR3_MARKER index304_10;


    		LA304_10 = LA(1);

    	 
    	    index304_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA304_20;

    	    ANTLR3_MARKER index304_20;


    		LA304_20 = LA(1);

    	 
    	    index304_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred361_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index304_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"658:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );";
    EXCEPTION->decisionNum  = 304;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 304
 */
static
ANTLR3_CYCLIC_DFA cdfa304
    =	{
	    304,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"658:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa304_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa304_eot,	    /* EOT table			    */
	    dfa304_eof,	    /* EOF table			    */
	    dfa304_min,	    /* Minimum tokens for each state    */
	    dfa304_max,	    /* Maximum tokens for each state    */
	    dfa304_accept,	/* Accept table			    */
	    dfa304_special,	/* Special transition states	    */
	    dfa304_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 304
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 674:30: ( ',' ( LTERM )* e2= expression )*
 */
static const ANTLR3_INT32 dfa312_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa312_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa312_min[5] =
    {
	111, 111, -1, 111, -1
    };
static const ANTLR3_INT32 dfa312_max[5] =
    {
	168, 212, -1, 212, -1
    };
static const ANTLR3_INT32 dfa312_accept[5] =
    {
	-1, -1, 2, -1, 1
    };
static const ANTLR3_INT32 dfa312_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa312_T_empty	    NULL

static const ANTLR3_INT32 dfa312_T0[] =
    {
	3, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
	4, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4
    };static const ANTLR3_INT32 dfa312_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa312_transitions[] =
{
    dfa312_T1, dfa312_T0, dfa312_T_empty, dfa312_T0, dfa312_T_empty	
};


/* Declare tracking structure for Cyclic DFA 312
 */
static
ANTLR3_CYCLIC_DFA cdfa312
    =	{
	    312,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 674:30: ( ',' ( LTERM )* e2= expression )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa312_eot,	    /* EOT table			    */
	    dfa312_eof,	    /* EOF table			    */
	    dfa312_min,	    /* Minimum tokens for each state    */
	    dfa312_max,	    /* Maximum tokens for each state    */
	    dfa312_accept,	/* Accept table			    */
	    dfa312_special,	/* Special transition states	    */
	    dfa312_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 312
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 680:40: ( ',' ( LTERM )* p2= propertyNameAndValue )*
 */
static const ANTLR3_INT32 dfa321_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa321_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa321_min[5] =
    {
	111, 111, -1, 111, -1
    };
static const ANTLR3_INT32 dfa321_max[5] =
    {
	144, 144, -1, 144, -1
    };
static const ANTLR3_INT32 dfa321_accept[5] =
    {
	-1, -1, 2, -1, 1
    };
static const ANTLR3_INT32 dfa321_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa321_T_empty	    NULL

static const ANTLR3_INT32 dfa321_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2
    };static const ANTLR3_INT32 dfa321_T1[] =
    {
	3, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa321_transitions[] =
{
    dfa321_T0, dfa321_T1, dfa321_T_empty, dfa321_T1, dfa321_T_empty	
};


/* Declare tracking structure for Cyclic DFA 321
 */
static
ANTLR3_CYCLIC_DFA cdfa321
    =	{
	    321,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 680:40: ( ',' ( LTERM )* p2= propertyNameAndValue )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa321_eot,	    /* EOT table			    */
	    dfa321_eof,	    /* EOF table			    */
	    dfa321_min,	    /* Minimum tokens for each state    */
	    dfa321_max,	    /* Maximum tokens for each state    */
	    dfa321_accept,	/* Accept table			    */
	    dfa321_special,	/* Special transition states	    */
	    dfa321_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 321
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    685:16: ( nameValueProto )?
 */
static const ANTLR3_INT32 dfa326_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa326_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa326_min[4] =
    {
	111, -1, 111, -1
    };
static const ANTLR3_INT32 dfa326_max[4] =
    {
	160, -1, 160, -1
    };
static const ANTLR3_INT32 dfa326_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa326_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa326_T_empty	    NULL

static const ANTLR3_INT32 dfa326_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };static const ANTLR3_INT32 dfa326_T1[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa326_transitions[] =
{
    dfa326_T1, dfa326_T_empty, dfa326_T0, dfa326_T_empty	
};


/* Declare tracking structure for Cyclic DFA 326
 */
static
ANTLR3_CYCLIC_DFA cdfa326
    =	{
	    326,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"685:16: ( nameValueProto )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa326_eot,	    /* EOT table			    */
	    dfa326_eof,	    /* EOF table			    */
	    dfa326_min,	    /* Minimum tokens for each state    */
	    dfa326_max,	    /* Maximum tokens for each state    */
	    dfa326_accept,	/* Accept table			    */
	    dfa326_special,	/* Special transition states	    */
	    dfa326_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 326
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    310:56: ( statementList )?
 */
static const ANTLR3_INT32 dfa364_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa364_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa364_min[4] =
    {
	111, 111, -1, -1
    };
static const ANTLR3_INT32 dfa364_max[4] =
    {
	212, 212, -1, -1
    };
static const ANTLR3_INT32 dfa364_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa364_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa364_T_empty	    NULL

static const ANTLR3_INT32 dfa364_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, 3, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa364_transitions[] =
{
    dfa364_T0, dfa364_T0, dfa364_T_empty, dfa364_T_empty	
};


/* Declare tracking structure for Cyclic DFA 364
 */
static
ANTLR3_CYCLIC_DFA cdfa364
    =	{
	    364,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"310:56: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa364_eot,	    /* EOT table			    */
	    dfa364_eof,	    /* EOF table			    */
	    dfa364_min,	    /* Minimum tokens for each state    */
	    dfa364_max,	    /* Maximum tokens for each state    */
	    dfa364_accept,	/* Accept table			    */
	    dfa364_special,	/* Special transition states	    */
	    dfa364_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 364
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    685:16: ( nameValueProto )?
 */
static const ANTLR3_INT32 dfa468_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa468_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa468_min[4] =
    {
	111, -1, 111, -1
    };
static const ANTLR3_INT32 dfa468_max[4] =
    {
	160, -1, 160, -1
    };
static const ANTLR3_INT32 dfa468_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa468_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa468_T_empty	    NULL

static const ANTLR3_INT32 dfa468_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };static const ANTLR3_INT32 dfa468_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa468_transitions[] =
{
    dfa468_T0, dfa468_T_empty, dfa468_T1, dfa468_T_empty	
};


/* Declare tracking structure for Cyclic DFA 468
 */
static
ANTLR3_CYCLIC_DFA cdfa468
    =	{
	    468,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"685:16: ( nameValueProto )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa468_eot,	    /* EOT table			    */
	    dfa468_eof,	    /* EOF table			    */
	    dfa468_min,	    /* Minimum tokens for each state    */
	    dfa468_max,	    /* Maximum tokens for each state    */
	    dfa468_accept,	/* Accept table			    */
	    dfa468_special,	/* Special transition states	    */
	    dfa468_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 468
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//Emerson.g:143:1: program : (a= LTERM )* ( sourceElements )? ( LTERM )* EOF -> ^( PROG ( sourceElements )? ) ;
 */
static EmersonParser_program_return
program(pEmersonParser ctx)
{   
    EmersonParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    LTERM2;
    pANTLR3_COMMON_TOKEN    EOF3;
    EmersonParser_sourceElements_return sourceElements1;
    #undef	RETURN_TYPE_sourceElements1
    #define	RETURN_TYPE_sourceElements1 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE LTERM2_tree;
    pANTLR3_BASE_TREE EOF3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        return retval; 
    }
    a       = NULL;
    LTERM2       = NULL;
    EOF3       = NULL;
    sourceElements1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    a_tree   = NULL;
    LTERM2_tree   = NULL;
    EOF3_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:144:2: ( (a= LTERM )* ( sourceElements )? ( LTERM )* EOF -> ^( PROG ( sourceElements )? ) )
        // .//Emerson.g:144:4: (a= LTERM )* ( sourceElements )? ( LTERM )* EOF
        {

            // .//Emerson.g:144:5: (a= LTERM )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA1_2 = LA(2);
                            if ( (synpred1_Emerson(ctx)) ) 
                            {
                                alt1=1;
                            }

                        }
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: a= LTERM
            	    {
            	        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program895); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, a, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:144:14: ( sourceElements )?
            {
                int alt2=2;
                alt2 = cdfa2.predict(ctx, RECOGNIZER, ISTREAM, &cdfa2);
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt2) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: sourceElements
            	    {
            	        FOLLOWPUSH(FOLLOW_sourceElements_in_program899);
            	        sourceElements1=sourceElements(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements1.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:144:30: ( LTERM )*

            for (;;)
            {
                int alt3=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA3_0 = LA(1);
                    if ( (LA3_0 == LTERM) ) 
                    {
                        alt3=1;
                    }

                }
                switch (alt3) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM2 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program902); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM2, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */

            EOF3 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_program905); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF3, NULL); }


             
            /* AST REWRITE
             * elements          : sourceElements
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 144:41: -> ^( PROG ( sourceElements )? )
            	{
            	    // .//Emerson.g:144:44: ^( PROG ( sourceElements )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROG, (pANTLR3_UINT8)"PROG"), root_1));

            	        // .//Emerson.g:144:51: ( sourceElements )?
            	        {
            	        	if ( (stream_sourceElements != NULL && stream_sourceElements->hasNext(stream_sourceElements))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

            	        	}
            	        	if ( stream_sourceElements != NULL) stream_sourceElements->reset(stream_sourceElements);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }
    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//Emerson.g:147:1: sourceElements : sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ ;
 */
static EmersonParser_sourceElements_return
sourceElements(pEmersonParser ctx)
{   
    EmersonParser_sourceElements_return retval;
    ANTLR3_UINT32 sourceElements_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM5;
    EmersonParser_sourceElement_return sourceElement4;
    #undef	RETURN_TYPE_sourceElement4
    #define	RETURN_TYPE_sourceElement4 EmersonParser_sourceElement_return

    EmersonParser_sourceElement_return sourceElement6;
    #undef	RETURN_TYPE_sourceElement6
    #define	RETURN_TYPE_sourceElement6 EmersonParser_sourceElement_return

    pANTLR3_BASE_TREE LTERM5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElement;
    /* Initialize rule variables
     */
    sourceElements_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM5       = NULL;
    sourceElement4.tree = NULL;

    sourceElement6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM5_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_sourceElement   = NULL;
    #define CREATE_stream_sourceElement  if (stream_sourceElement == NULL) {stream_sourceElement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:148:2: ( sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ )
        // .//Emerson.g:148:4: sourceElement ( ( LTERM )* sourceElement )*
        {
            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements926);
            sourceElement4=sourceElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceElementsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement4.tree, NULL); }

            // .//Emerson.g:148:18: ( ( LTERM )* sourceElement )*

            for (;;)
            {
                int alt5=2;
                alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
                if  (HASEXCEPTION())
                {
                    goto rulesourceElementsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt5) 
                {
            	case 1:
            	    // .//Emerson.g:148:19: ( LTERM )* sourceElement
            	    {

            	        // .//Emerson.g:148:19: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt4=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA4_0 = LA(1);
            	                if ( (LA4_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA4_2 = LA(2);
            	                        if ( (synpred4_Emerson(ctx)) ) 
            	                        {
            	                            alt4=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt4) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM5 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_sourceElements929); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceElementsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM5, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop4;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop4: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements932);
            	        sourceElement6=sourceElement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceElementsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : sourceElement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 148:42: -> ( sourceElement )+
            	{
            	    if ((stream_sourceElement == NULL || !stream_sourceElement->hasNext(stream_sourceElement))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_sourceElement->hasNext(stream_sourceElement))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElement == NULL ? NULL : stream_sourceElement->nextTree(stream_sourceElement));

            	    	}
            	    	stream_sourceElement->reset(stream_sourceElement);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_sourceElement != NULL) stream_sourceElement->free(stream_sourceElement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, sourceElements_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//Emerson.g:151:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static EmersonParser_sourceElement_return
sourceElement(pEmersonParser ctx)
{   
    EmersonParser_sourceElement_return retval;
    ANTLR3_UINT32 sourceElement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_functionDeclaration_return functionDeclaration7;
    #undef	RETURN_TYPE_functionDeclaration7
    #define	RETURN_TYPE_functionDeclaration7 EmersonParser_functionDeclaration_return

    EmersonParser_statement_return statement8;
    #undef	RETURN_TYPE_statement8
    #define	RETURN_TYPE_statement8 EmersonParser_statement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionDeclaration;
    /* Initialize rule variables
     */
    sourceElement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        return retval; 
    }
    functionDeclaration7.tree = NULL;

    statement8.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_functionDeclaration   = NULL;
    #define CREATE_stream_functionDeclaration  if (stream_functionDeclaration == NULL) {stream_functionDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionDeclaration"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:152:2: ( functionDeclaration -> functionDeclaration | statement -> statement )
            
            ANTLR3_UINT32 alt6;

            alt6=2;

            alt6 = cdfa6.predict(ctx, RECOGNIZER, ISTREAM, &cdfa6);
            if  (HASEXCEPTION())
            {
                goto rulesourceElementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt6) 
            {
        	case 1:
        	    // .//Emerson.g:152:4: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement953);
        	        functionDeclaration7=functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_functionDeclaration; stream_functionDeclaration->add(stream_functionDeclaration, functionDeclaration7.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : functionDeclaration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 152:24: -> functionDeclaration
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionDeclaration == NULL ? NULL : stream_functionDeclaration->nextTree(stream_functionDeclaration));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:153:4: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement962);
        	        statement8=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement8.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 153:14: -> statement
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_functionDeclaration != NULL) stream_functionDeclaration->free(stream_functionDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, sourceElement_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//Emerson.g:157:1: functionDeclaration : 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionDeclaration_return
functionDeclaration(pEmersonParser ctx)
{   
    EmersonParser_functionDeclaration_return retval;
    ANTLR3_UINT32 functionDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal9;
    pANTLR3_COMMON_TOKEN    LTERM10;
    pANTLR3_COMMON_TOKEN    Identifier11;
    pANTLR3_COMMON_TOKEN    LTERM12;
    pANTLR3_COMMON_TOKEN    LTERM14;
    EmersonParser_formalParameterList_return formalParameterList13;
    #undef	RETURN_TYPE_formalParameterList13
    #define	RETURN_TYPE_formalParameterList13 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody15;
    #undef	RETURN_TYPE_functionBody15
    #define	RETURN_TYPE_functionBody15 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal9_tree;
    pANTLR3_BASE_TREE LTERM10_tree;
    pANTLR3_BASE_TREE Identifier11_tree;
    pANTLR3_BASE_TREE LTERM12_tree;
    pANTLR3_BASE_TREE LTERM14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal9       = NULL;
    LTERM10       = NULL;
    Identifier11       = NULL;
    LTERM12       = NULL;
    LTERM14       = NULL;
    formalParameterList13.tree = NULL;

    functionBody15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal9_tree   = NULL;
    LTERM10_tree   = NULL;
    Identifier11_tree   = NULL;
    LTERM12_tree   = NULL;
    LTERM14_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:158:2: ( 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//Emerson.g:158:4: 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody
        {
            string_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_functionDeclaration979); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, string_literal9, NULL); }


            // .//Emerson.g:158:15: ( LTERM )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == LTERM) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM10 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration981); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM10, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */

            Identifier11 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration984); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier11, NULL); }


            // .//Emerson.g:158:33: ( LTERM )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA8_2 = LA(2);
                            if ( (synpred8_Emerson(ctx)) ) 
                            {
                                alt8=1;
                            }

                        }
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM12 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration986); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM12, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:158:41: ( formalParameterList )?
            {
                int alt9=2;
                {
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == Identifier) ) 
                    {
                        alt9=1;
                    }
                }
                switch (alt9) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration990);
            	        formalParameterList13=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList13.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:158:62: ( LTERM )*

            for (;;)
            {
                int alt10=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == LTERM) ) 
                    {
                        alt10=1;
                    }

                }
                switch (alt10) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM14 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration993); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM14, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration996);
            functionBody15=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody15.tree, NULL); }

             
            /* AST REWRITE
             * elements          : formalParameterList, functionBody, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 158:82: -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:158:85: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DECL, (pANTLR3_UINT8)"FUNC_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:158:109: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, functionDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//Emerson.g:161:1: functionExpression : 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionExpression_return
functionExpression(pEmersonParser ctx)
{   
    EmersonParser_functionExpression_return retval;
    ANTLR3_UINT32 functionExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal16;
    pANTLR3_COMMON_TOKEN    LTERM17;
    pANTLR3_COMMON_TOKEN    Identifier18;
    pANTLR3_COMMON_TOKEN    LTERM19;
    pANTLR3_COMMON_TOKEN    char_literal20;
    pANTLR3_COMMON_TOKEN    LTERM21;
    pANTLR3_COMMON_TOKEN    LTERM23;
    pANTLR3_COMMON_TOKEN    char_literal24;
    pANTLR3_COMMON_TOKEN    LTERM25;
    EmersonParser_formalParameterList_return formalParameterList22;
    #undef	RETURN_TYPE_formalParameterList22
    #define	RETURN_TYPE_formalParameterList22 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody26;
    #undef	RETURN_TYPE_functionBody26
    #define	RETURN_TYPE_functionBody26 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal16_tree;
    pANTLR3_BASE_TREE LTERM17_tree;
    pANTLR3_BASE_TREE Identifier18_tree;
    pANTLR3_BASE_TREE LTERM19_tree;
    pANTLR3_BASE_TREE char_literal20_tree;
    pANTLR3_BASE_TREE LTERM21_tree;
    pANTLR3_BASE_TREE LTERM23_tree;
    pANTLR3_BASE_TREE char_literal24_tree;
    pANTLR3_BASE_TREE LTERM25_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal16       = NULL;
    LTERM17       = NULL;
    Identifier18       = NULL;
    LTERM19       = NULL;
    char_literal20       = NULL;
    LTERM21       = NULL;
    LTERM23       = NULL;
    char_literal24       = NULL;
    LTERM25       = NULL;
    formalParameterList22.tree = NULL;

    functionBody26.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal16_tree   = NULL;
    LTERM17_tree   = NULL;
    Identifier18_tree   = NULL;
    LTERM19_tree   = NULL;
    char_literal20_tree   = NULL;
    LTERM21_tree   = NULL;
    LTERM23_tree   = NULL;
    char_literal24_tree   = NULL;
    LTERM25_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:162:2: ( 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//Emerson.g:162:4: 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody
        {
            string_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_functionExpression1021); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, string_literal16, NULL); }


            // .//Emerson.g:162:15: ( LTERM )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA11_2 = LA(2);
                            if ( (synpred11_Emerson(ctx)) ) 
                            {
                                alt11=1;
                            }

                        }
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM17 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1023); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM17, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:162:22: ( Identifier )?
            {
                int alt12=2;
                {
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == Identifier) ) 
                    {
                        alt12=1;
                    }
                }
                switch (alt12) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier18 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression1026); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier18, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:162:34: ( LTERM )*

            for (;;)
            {
                int alt13=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA13_0 = LA(1);
                    if ( (LA13_0 == LTERM) ) 
                    {
                        alt13=1;
                    }

                }
                switch (alt13) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM19 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1029); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM19, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */

            char_literal20 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_functionExpression1032); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal20, NULL); }


            // .//Emerson.g:162:45: ( LTERM )*

            for (;;)
            {
                int alt14=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA14_2 = LA(2);
                            if ( (synpred14_Emerson(ctx)) ) 
                            {
                                alt14=1;
                            }

                        }
                    }

                }
                switch (alt14) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM21 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1034); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM21, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:162:52: ( formalParameterList )?
            {
                int alt15=2;
                {
                    int LA15_0 = LA(1);
                    if ( (LA15_0 == Identifier) ) 
                    {
                        alt15=1;
                    }
                }
                switch (alt15) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression1037);
            	        formalParameterList22=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList22.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:162:73: ( LTERM )*

            for (;;)
            {
                int alt16=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA16_0 = LA(1);
                    if ( (LA16_0 == LTERM) ) 
                    {
                        alt16=1;
                    }

                }
                switch (alt16) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM23 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1040); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM23, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */

            char_literal24 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_functionExpression1043); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal24, NULL); }


            // .//Emerson.g:162:84: ( LTERM )*

            for (;;)
            {
                int alt17=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA17_0 = LA(1);
                    if ( (LA17_0 == LTERM) ) 
                    {
                        alt17=1;
                    }

                }
                switch (alt17) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM25 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1045); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM25, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression1048);
            functionBody26=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody26.tree, NULL); }

             
            /* AST REWRITE
             * elements          : functionBody, Identifier, formalParameterList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 162:104: -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:162:107: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_EXPR, (pANTLR3_UINT8)"FUNC_EXPR"), root_1));

            	        // .//Emerson.g:162:120: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }
            	        // .//Emerson.g:162:133: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, functionExpression_StartIndex); }
    return retval;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//Emerson.g:165:1: formalParameterList : Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) ;
 */
static EmersonParser_formalParameterList_return
formalParameterList(pEmersonParser ctx)
{   
    EmersonParser_formalParameterList_return retval;
    ANTLR3_UINT32 formalParameterList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier27;
    pANTLR3_COMMON_TOKEN    char_literal28;
    pANTLR3_COMMON_TOKEN    LTERM29;
    pANTLR3_COMMON_TOKEN    Identifier30;

    pANTLR3_BASE_TREE Identifier27_tree;
    pANTLR3_BASE_TREE char_literal28_tree;
    pANTLR3_BASE_TREE LTERM29_tree;
    pANTLR3_BASE_TREE Identifier30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;

    /* Initialize rule variables
     */
    formalParameterList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier27       = NULL;
    char_literal28       = NULL;
    LTERM29       = NULL;
    Identifier30       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    Identifier27_tree   = NULL;
    char_literal28_tree   = NULL;
    LTERM29_tree   = NULL;
    Identifier30_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:166:2: ( Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) )
        // .//Emerson.g:166:4: Identifier ( ',' ( LTERM )* Identifier )*
        {
            Identifier27 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList1076); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier27, NULL); }


            // .//Emerson.g:166:15: ( ',' ( LTERM )* Identifier )*

            for (;;)
            {
                int alt19=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == 142) ) 
                    {
                        alt19=1;
                    }

                }
                switch (alt19) 
                {
            	case 1:
            	    // .//Emerson.g:166:16: ',' ( LTERM )* Identifier
            	    {
            	        char_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_formalParameterList1079); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal28, NULL); }


            	        // .//Emerson.g:166:20: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt18=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA18_0 = LA(1);
            	                if ( (LA18_0 == LTERM) ) 
            	                {
            	                    alt18=1;
            	                }

            	            }
            	            switch (alt18) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM29 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList1081); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM29, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop18;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop18: ; /* Jump out to here if this rule does not match */

            	        Identifier30 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList1084); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier30, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 166:40: -> ^( FUNC_PARAMS ( Identifier )+ )
            	{
            	    // .//Emerson.g:166:43: ^( FUNC_PARAMS ( Identifier )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_PARAMS, (pANTLR3_UINT8)"FUNC_PARAMS"), root_1));

            	        if ((stream_Identifier == NULL || !stream_Identifier->hasNext(stream_Identifier))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_Identifier->hasNext(stream_Identifier))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	stream_Identifier->reset(stream_Identifier);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_142 != NULL) stream_142->free(stream_142);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, formalParameterList_StartIndex); }
    return retval;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//Emerson.g:169:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static EmersonParser_functionBody_return
functionBody(pEmersonParser ctx)
{   
    EmersonParser_functionBody_return retval;
    ANTLR3_UINT32 functionBody_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal31;
    pANTLR3_COMMON_TOKEN    LTERM32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    char_literal34;
    pANTLR3_COMMON_TOKEN    LTERM35;
    pANTLR3_COMMON_TOKEN    LTERM37;
    pANTLR3_COMMON_TOKEN    char_literal38;
    EmersonParser_sourceElements_return sourceElements36;
    #undef	RETURN_TYPE_sourceElements36
    #define	RETURN_TYPE_sourceElements36 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE char_literal31_tree;
    pANTLR3_BASE_TREE LTERM32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE char_literal34_tree;
    pANTLR3_BASE_TREE LTERM35_tree;
    pANTLR3_BASE_TREE LTERM37_tree;
    pANTLR3_BASE_TREE char_literal38_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    functionBody_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal31       = NULL;
    LTERM32       = NULL;
    char_literal33       = NULL;
    char_literal34       = NULL;
    LTERM35       = NULL;
    LTERM37       = NULL;
    char_literal38       = NULL;
    sourceElements36.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal31_tree   = NULL;
    LTERM32_tree   = NULL;
    char_literal33_tree   = NULL;
    char_literal34_tree   = NULL;
    LTERM35_tree   = NULL;
    LTERM37_tree   = NULL;
    char_literal38_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:170:2: ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt23;

            alt23=2;

            alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
            if  (HASEXCEPTION())
            {
                goto rulefunctionBodyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//Emerson.g:170:4: '{' ( LTERM )* '}'
        	    {
        	        char_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_functionBody1107); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal31, NULL); }


        	        // .//Emerson.g:170:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA20_0 = LA(1);
        	                if ( (LA20_0 == LTERM) ) 
        	                {
        	                    alt20=1;
        	                }

        	            }
        	            switch (alt20) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM32 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1109); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM32, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */

        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_functionBody1112); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal33, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 170:19: -> ^( EMPTY_FUNC_BODY )
        	        	{
        	        	    // .//Emerson.g:170:22: ^( EMPTY_FUNC_BODY )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_FUNC_BODY, (pANTLR3_UINT8)"EMPTY_FUNC_BODY"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:171:4: '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}'
        	    {
        	        char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_functionBody1123); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal34, NULL); }


        	        // .//Emerson.g:171:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA21_0 = LA(1);
        	                if ( (LA21_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA21_2 = LA(2);
        	                        if ( (synpred22_Emerson(ctx)) ) 
        	                        {
        	                            alt21=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM35 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1125); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM35, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:171:15: ( sourceElements -> sourceElements )
        	        // .//Emerson.g:171:16: sourceElements
        	        {
        	            FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody1129);
        	            sourceElements36=sourceElements(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefunctionBodyEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements36.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sourceElements
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 171:31: -> sourceElements
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:171:50: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt22=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA22_0 = LA(1);
        	                if ( (LA22_0 == LTERM) ) 
        	                {
        	                    alt22=1;
        	                }

        	            }
        	            switch (alt22) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM37 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1136); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM37, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop22;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop22: ; /* Jump out to here if this rule does not match */

        	        char_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_functionBody1139); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal38, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, functionBody_StartIndex); }
    return retval;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//Emerson.g:175:1: statement : ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );
 */
static EmersonParser_statement_return
statement(pEmersonParser ctx)
{   
    EmersonParser_statement_return retval;
    ANTLR3_UINT32 statement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_noOpStatement_return noOpStatement39;
    #undef	RETURN_TYPE_noOpStatement39
    #define	RETURN_TYPE_noOpStatement39 EmersonParser_noOpStatement_return

    EmersonParser_switchStatement_return switchStatement40;
    #undef	RETURN_TYPE_switchStatement40
    #define	RETURN_TYPE_switchStatement40 EmersonParser_switchStatement_return

    EmersonParser_statementBlock_return statementBlock41;
    #undef	RETURN_TYPE_statementBlock41
    #define	RETURN_TYPE_statementBlock41 EmersonParser_statementBlock_return

    EmersonParser_variableStatement_return variableStatement42;
    #undef	RETURN_TYPE_variableStatement42
    #define	RETURN_TYPE_variableStatement42 EmersonParser_variableStatement_return

    EmersonParser_emptyStatement_return emptyStatement43;
    #undef	RETURN_TYPE_emptyStatement43
    #define	RETURN_TYPE_emptyStatement43 EmersonParser_emptyStatement_return

    EmersonParser_expressionStatement_return expressionStatement44;
    #undef	RETURN_TYPE_expressionStatement44
    #define	RETURN_TYPE_expressionStatement44 EmersonParser_expressionStatement_return

    EmersonParser_ifStatement_return ifStatement45;
    #undef	RETURN_TYPE_ifStatement45
    #define	RETURN_TYPE_ifStatement45 EmersonParser_ifStatement_return

    EmersonParser_iterationStatement_return iterationStatement46;
    #undef	RETURN_TYPE_iterationStatement46
    #define	RETURN_TYPE_iterationStatement46 EmersonParser_iterationStatement_return

    EmersonParser_continueStatement_return continueStatement47;
    #undef	RETURN_TYPE_continueStatement47
    #define	RETURN_TYPE_continueStatement47 EmersonParser_continueStatement_return

    EmersonParser_breakStatement_return breakStatement48;
    #undef	RETURN_TYPE_breakStatement48
    #define	RETURN_TYPE_breakStatement48 EmersonParser_breakStatement_return

    EmersonParser_returnStatement_return returnStatement49;
    #undef	RETURN_TYPE_returnStatement49
    #define	RETURN_TYPE_returnStatement49 EmersonParser_returnStatement_return

    EmersonParser_withStatement_return withStatement50;
    #undef	RETURN_TYPE_withStatement50
    #define	RETURN_TYPE_withStatement50 EmersonParser_withStatement_return

    EmersonParser_throwStatement_return throwStatement51;
    #undef	RETURN_TYPE_throwStatement51
    #define	RETURN_TYPE_throwStatement51 EmersonParser_throwStatement_return

    EmersonParser_tryStatement_return tryStatement52;
    #undef	RETURN_TYPE_tryStatement52
    #define	RETURN_TYPE_tryStatement52 EmersonParser_tryStatement_return


    /* Initialize rule variables
     */
    statement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        return retval; 
    }
    noOpStatement39.tree = NULL;

    switchStatement40.tree = NULL;

    statementBlock41.tree = NULL;

    variableStatement42.tree = NULL;

    emptyStatement43.tree = NULL;

    expressionStatement44.tree = NULL;

    ifStatement45.tree = NULL;

    iterationStatement46.tree = NULL;

    continueStatement47.tree = NULL;

    breakStatement48.tree = NULL;

    returnStatement49.tree = NULL;

    withStatement50.tree = NULL;

    throwStatement51.tree = NULL;

    tryStatement52.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:176:2: ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement )
            
            ANTLR3_UINT32 alt24;

            alt24=14;

            alt24 = cdfa24.predict(ctx, RECOGNIZER, ISTREAM, &cdfa24);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt24) 
            {
        	case 1:
        	    // .//Emerson.g:176:4: noOpStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noOpStatement_in_statement1151);
        	        noOpStatement39=noOpStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, noOpStatement39.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:177:11: ( switchStatement )=> switchStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement1169);
        	        switchStatement40=switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switchStatement40.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:178:11: statementBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement1181);
        	        statementBlock41=statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statementBlock41.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:179:4: variableStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement1186);
        	        variableStatement42=variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableStatement42.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:180:4: emptyStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_emptyStatement_in_statement1191);
        	        emptyStatement43=emptyStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, emptyStatement43.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:181:4: expressionStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement1196);
        	        expressionStatement44=expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionStatement44.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:182:4: ifStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement1201);
        	        ifStatement45=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStatement45.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:183:4: iterationStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement1206);
        	        iterationStatement46=iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iterationStatement46.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:184:4: continueStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement1211);
        	        continueStatement47=continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continueStatement47.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:185:4: breakStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement1216);
        	        breakStatement48=breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, breakStatement48.tree);

        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:186:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1221);
        	        returnStatement49=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement49.tree);

        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:187:4: withStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement1226);
        	        withStatement50=withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, withStatement50.tree);

        	    }
        	    break;
        	case 13:
        	    // .//Emerson.g:188:4: throwStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement1231);
        	        throwStatement51=throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throwStatement51.tree);

        	    }
        	    break;
        	case 14:
        	    // .//Emerson.g:189:4: tryStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement1236);
        	        tryStatement52=tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tryStatement52.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, statement_StartIndex); }
    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start statementBlock
 * .//Emerson.g:192:1: statementBlock : ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static EmersonParser_statementBlock_return
statementBlock(pEmersonParser ctx)
{   
    EmersonParser_statementBlock_return retval;
    ANTLR3_UINT32 statementBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal53;
    pANTLR3_COMMON_TOKEN    LTERM54;
    pANTLR3_COMMON_TOKEN    char_literal55;
    pANTLR3_COMMON_TOKEN    char_literal56;
    pANTLR3_COMMON_TOKEN    LTERM57;
    pANTLR3_COMMON_TOKEN    LTERM59;
    pANTLR3_COMMON_TOKEN    char_literal60;
    EmersonParser_statementList_return statementList58;
    #undef	RETURN_TYPE_statementList58
    #define	RETURN_TYPE_statementList58 EmersonParser_statementList_return

    pANTLR3_BASE_TREE char_literal53_tree;
    pANTLR3_BASE_TREE LTERM54_tree;
    pANTLR3_BASE_TREE char_literal55_tree;
    pANTLR3_BASE_TREE char_literal56_tree;
    pANTLR3_BASE_TREE LTERM57_tree;
    pANTLR3_BASE_TREE LTERM59_tree;
    pANTLR3_BASE_TREE char_literal60_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    statementBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal53       = NULL;
    LTERM54       = NULL;
    char_literal55       = NULL;
    char_literal56       = NULL;
    LTERM57       = NULL;
    LTERM59       = NULL;
    char_literal60       = NULL;
    statementList58.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal53_tree   = NULL;
    LTERM54_tree   = NULL;
    char_literal55_tree   = NULL;
    char_literal56_tree   = NULL;
    LTERM57_tree   = NULL;
    LTERM59_tree   = NULL;
    char_literal60_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:193:9: ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt28;

            alt28=2;

            alt28 = cdfa28.predict(ctx, RECOGNIZER, ISTREAM, &cdfa28);
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt28) 
            {
        	case 1:
        	    // .//Emerson.g:193:11: '{' ( LTERM )* '}'
        	    {
        	        char_literal53 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_statementBlock1255); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal53, NULL); }


        	        // .//Emerson.g:193:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt25=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA25_0 = LA(1);
        	                if ( (LA25_0 == LTERM) ) 
        	                {
        	                    alt25=1;
        	                }

        	            }
        	            switch (alt25) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM54 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1257); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM54, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop25;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop25: ; /* Jump out to here if this rule does not match */

        	        char_literal55 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_statementBlock1260); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal55, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 193:28: -> ^( NOOP )
        	        	{
        	        	    // .//Emerson.g:193:31: ^( NOOP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOOP, (pANTLR3_UINT8)"NOOP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:194:4: '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}'
        	    {
        	        char_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_statementBlock1273); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal56, NULL); }


        	        // .//Emerson.g:194:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA26_0 = LA(1);
        	                if ( (LA26_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA26_1 = LA(2);
        	                        if ( (synpred39_Emerson(ctx)) ) 
        	                        {
        	                            alt26=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM57 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1275); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM57, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:194:15: ( statementList -> statementList )
        	        // .//Emerson.g:194:16: statementList
        	        {
        	            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock1279);
        	            statementList58=statementList(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList58.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : statementList
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 194:29: -> statementList
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:194:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt27=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA27_0 = LA(1);
        	                if ( (LA27_0 == LTERM) ) 
        	                {
        	                    alt27=1;
        	                }

        	            }
        	            switch (alt27) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM59 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1284); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM59, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop27;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop27: ; /* Jump out to here if this rule does not match */

        	        char_literal60 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_statementBlock1287); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal60, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, statementBlock_StartIndex); }
    return retval;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start noOpStatement
 * .//Emerson.g:197:1: noOpStatement : ';' -> ^( NOOP ) ;
 */
static EmersonParser_noOpStatement_return
noOpStatement(pEmersonParser ctx)
{   
    EmersonParser_noOpStatement_return retval;
    ANTLR3_UINT32 noOpStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal61;

    pANTLR3_BASE_TREE char_literal61_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;

    /* Initialize rule variables
     */
    noOpStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal61       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal61_tree   = NULL;

    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:198:9: ( ';' -> ^( NOOP ) )
        // .//Emerson.g:198:11: ';'
        {
            char_literal61 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_noOpStatement1307); 
            if  (HASEXCEPTION())
            {
                goto rulenoOpStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal61, NULL); }


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 198:15: -> ^( NOOP )
            	{
            	    // .//Emerson.g:198:18: ^( NOOP )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOOP, (pANTLR3_UINT8)"NOOP"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoOpStatementEx; /* Prevent compiler warnings */
    rulenoOpStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_145 != NULL) stream_145->free(stream_145);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, noOpStatement_StartIndex); }
    return retval;
}
/* $ANTLR end noOpStatement */

/** 
 * $ANTLR start statementList
 * .//Emerson.g:202:1: statementList : ( ( LTERM )* statement )+ -> ^( SLIST ( statement )+ ) ;
 */
static EmersonParser_statementList_return
statementList(pEmersonParser ctx)
{   
    EmersonParser_statementList_return retval;
    ANTLR3_UINT32 statementList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM62;
    EmersonParser_statement_return statement63;
    #undef	RETURN_TYPE_statement63
    #define	RETURN_TYPE_statement63 EmersonParser_statement_return

    pANTLR3_BASE_TREE LTERM62_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    statementList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM62       = NULL;
    statement63.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM62_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:203:2: ( ( ( LTERM )* statement )+ -> ^( SLIST ( statement )+ ) )
        // .//Emerson.g:203:4: ( ( LTERM )* statement )+
        {
            // .//Emerson.g:203:4: ( ( LTERM )* statement )+
            {
                int cnt30=0;

                for (;;)
                {
                    int alt30=2;
            	alt30 = cdfa30.predict(ctx, RECOGNIZER, ISTREAM, &cdfa30);
            	if  (HASEXCEPTION())
            	{
            	    goto rulestatementListEx;
            	}
            	if (HASFAILED())
            	{
            	    return retval;
            	}
            	switch (alt30) 
            	{
            	    case 1:
            	        // .//Emerson.g:203:5: ( LTERM )* statement
            	        {

            	            // .//Emerson.g:203:5: ( LTERM )*

            	            for (;;)
            	            {
            	                int alt29=2;
            	                {
            	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                    */
            	                    int LA29_0 = LA(1);
            	                    if ( (LA29_0 == LTERM) ) 
            	                    {
            	                        {
            	                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                            */
            	                            int LA29_2 = LA(2);
            	                            if ( (synpred41_Emerson(ctx)) ) 
            	                            {
            	                                alt29=1;
            	                            }

            	                        }
            	                    }

            	                }
            	                switch (alt29) 
            	                {
            	            	case 1:
            	            	    // .//Emerson.g:0:0: LTERM
            	            	    {
            	            	        LTERM62 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementList1349); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto rulestatementListEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM62, NULL); }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop29;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop29: ; /* Jump out to here if this rule does not match */

            	            FOLLOWPUSH(FOLLOW_statement_in_statementList1352);
            	            statement63=statement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulestatementListEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement63.tree, NULL); }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt30 >= 1 )
            		{
            		    goto loop30;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulestatementListEx;
            	}
            	cnt30++;
                }
                loop30: ;	/* Jump to here if this rule does not match */
            }

             
            /* AST REWRITE
             * elements          : statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 203:24: -> ^( SLIST ( statement )+ )
            	{
            	    // .//Emerson.g:203:27: ^( SLIST ( statement )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SLIST, (pANTLR3_UINT8)"SLIST"), root_1));

            	        if ((stream_statement == NULL || !stream_statement->hasNext(stream_statement))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_statement->hasNext(stream_statement))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	stream_statement->reset(stream_statement);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, statementList_StartIndex); }
    return retval;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//Emerson.g:206:1: variableStatement : 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) ;
 */
static EmersonParser_variableStatement_return
variableStatement(pEmersonParser ctx)
{   
    EmersonParser_variableStatement_return retval;
    ANTLR3_UINT32 variableStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal64;
    pANTLR3_COMMON_TOKEN    LTERM65;
    pANTLR3_COMMON_TOKEN    LTERM67;
    pANTLR3_COMMON_TOKEN    char_literal68;
    EmersonParser_variableDeclarationList_return variableDeclarationList66;
    #undef	RETURN_TYPE_variableDeclarationList66
    #define	RETURN_TYPE_variableDeclarationList66 EmersonParser_variableDeclarationList_return

    pANTLR3_BASE_TREE string_literal64_tree;
    pANTLR3_BASE_TREE LTERM65_tree;
    pANTLR3_BASE_TREE LTERM67_tree;
    pANTLR3_BASE_TREE char_literal68_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationList;
    /* Initialize rule variables
     */
    variableStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal64       = NULL;
    LTERM65       = NULL;
    LTERM67       = NULL;
    char_literal68       = NULL;
    variableDeclarationList66.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal64_tree   = NULL;
    LTERM65_tree   = NULL;
    LTERM67_tree   = NULL;
    char_literal68_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_variableDeclarationList   = NULL;
    #define CREATE_stream_variableDeclarationList  if (stream_variableDeclarationList == NULL) {stream_variableDeclarationList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:207:2: ( 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) )
        // .//Emerson.g:207:4: 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' )
        {
            string_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_variableStatement1375); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, string_literal64, NULL); }


            // .//Emerson.g:207:10: ( LTERM )*

            for (;;)
            {
                int alt31=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == LTERM) ) 
                    {
                        alt31=1;
                    }

                }
                switch (alt31) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM65 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1377); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM65, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1380);
            variableDeclarationList66=variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationList; stream_variableDeclarationList->add(stream_variableDeclarationList, variableDeclarationList66.tree, NULL); }

            // .//Emerson.g:207:41: ( LTERM | ';' )
            {
                int alt32=2;

                {
                    int LA32_0 = LA(1);
                    if ( (LA32_0 == LTERM) ) 
                    {
                        alt32=1;
                    }
                    else if ( (LA32_0 == 145) ) 
                    {
                        alt32=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 32;
                        EXCEPTION->state        = 0;


                        goto rulevariableStatementEx;
                    }
                }
                switch (alt32) 
                {
            	case 1:
            	    // .//Emerson.g:207:42: LTERM
            	    {
            	        LTERM67 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1383); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM67, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:207:50: ';'
            	    {
            	        char_literal68 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_variableStatement1387); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal68, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : variableDeclarationList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 207:55: -> ^( VARLIST variableDeclarationList )
            	{
            	    // .//Emerson.g:207:58: ^( VARLIST variableDeclarationList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationList == NULL ? NULL : stream_variableDeclarationList->nextTree(stream_variableDeclarationList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_variableDeclarationList != NULL) stream_variableDeclarationList->free(stream_variableDeclarationList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, variableStatement_StartIndex); }
    return retval;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//Emerson.g:210:1: variableDeclarationList : variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ ;
 */
static EmersonParser_variableDeclarationList_return
variableDeclarationList(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationList_return retval;
    ANTLR3_UINT32 variableDeclarationList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM70;
    pANTLR3_COMMON_TOKEN    char_literal71;
    pANTLR3_COMMON_TOKEN    LTERM72;
    EmersonParser_variableDeclaration_return variableDeclaration69;
    #undef	RETURN_TYPE_variableDeclaration69
    #define	RETURN_TYPE_variableDeclaration69 EmersonParser_variableDeclaration_return

    EmersonParser_variableDeclaration_return variableDeclaration73;
    #undef	RETURN_TYPE_variableDeclaration73
    #define	RETURN_TYPE_variableDeclaration73 EmersonParser_variableDeclaration_return

    pANTLR3_BASE_TREE LTERM70_tree;
    pANTLR3_BASE_TREE char_literal71_tree;
    pANTLR3_BASE_TREE LTERM72_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclaration;
    /* Initialize rule variables
     */
    variableDeclarationList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM70       = NULL;
    char_literal71       = NULL;
    LTERM72       = NULL;
    variableDeclaration69.tree = NULL;

    variableDeclaration73.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM70_tree   = NULL;
    char_literal71_tree   = NULL;
    LTERM72_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_variableDeclaration   = NULL;
    #define CREATE_stream_variableDeclaration  if (stream_variableDeclaration == NULL) {stream_variableDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclaration"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:211:2: ( variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ )
        // .//Emerson.g:211:4: variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1409);
            variableDeclaration69=variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration69.tree, NULL); }

            // .//Emerson.g:211:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*

            for (;;)
            {
                int alt35=2;
                alt35 = cdfa35.predict(ctx, RECOGNIZER, ISTREAM, &cdfa35);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt35) 
                {
            	case 1:
            	    // .//Emerson.g:211:25: ( LTERM )* ',' ( LTERM )* variableDeclaration
            	    {

            	        // .//Emerson.g:211:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == LTERM) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM70 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1412); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM70, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        char_literal71 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_variableDeclarationList1415); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal71, NULL); }


            	        // .//Emerson.g:211:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt34=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA34_0 = LA(1);
            	                if ( (LA34_0 == LTERM) ) 
            	                {
            	                    alt34=1;
            	                }

            	            }
            	            switch (alt34) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM72 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1417); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM72, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop34;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop34: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1420);
            	        variableDeclaration73=variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration73.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop35;	/* break out of the loop */
            	    break;
                }
            }
            loop35: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclaration
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 211:65: -> ( variableDeclaration )+
            	{
            	    if ((stream_variableDeclaration == NULL || !stream_variableDeclaration->hasNext(stream_variableDeclaration))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclaration->hasNext(stream_variableDeclaration))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclaration == NULL ? NULL : stream_variableDeclaration->nextTree(stream_variableDeclaration));

            	    	}
            	    	stream_variableDeclaration->reset(stream_variableDeclaration);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_variableDeclaration != NULL) stream_variableDeclaration->free(stream_variableDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, variableDeclarationList_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//Emerson.g:214:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ ;
 */
static EmersonParser_variableDeclarationListNoIn_return
variableDeclarationListNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationListNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationListNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM75;
    pANTLR3_COMMON_TOKEN    char_literal76;
    pANTLR3_COMMON_TOKEN    LTERM77;
    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn74;
    #undef	RETURN_TYPE_variableDeclarationNoIn74
    #define	RETURN_TYPE_variableDeclarationNoIn74 EmersonParser_variableDeclarationNoIn_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn78;
    #undef	RETURN_TYPE_variableDeclarationNoIn78
    #define	RETURN_TYPE_variableDeclarationNoIn78 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE LTERM75_tree;
    pANTLR3_BASE_TREE char_literal76_tree;
    pANTLR3_BASE_TREE LTERM77_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    variableDeclarationListNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM75       = NULL;
    char_literal76       = NULL;
    LTERM77       = NULL;
    variableDeclarationNoIn74.tree = NULL;

    variableDeclarationNoIn78.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM75_tree   = NULL;
    char_literal76_tree   = NULL;
    LTERM77_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:215:2: ( variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ )
        // .//Emerson.g:215:4: variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1439);
            variableDeclarationNoIn74=variableDeclarationNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn74.tree, NULL); }

            // .//Emerson.g:215:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*

            for (;;)
            {
                int alt38=2;
                alt38 = cdfa38.predict(ctx, RECOGNIZER, ISTREAM, &cdfa38);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt38) 
                {
            	case 1:
            	    // .//Emerson.g:215:29: ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn
            	    {

            	        // .//Emerson.g:215:29: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt36=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA36_0 = LA(1);
            	                if ( (LA36_0 == LTERM) ) 
            	                {
            	                    alt36=1;
            	                }

            	            }
            	            switch (alt36) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM75 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1442); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM75, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */

            	        char_literal76 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_variableDeclarationListNoIn1445); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal76, NULL); }


            	        // .//Emerson.g:215:40: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt37=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA37_0 = LA(1);
            	                if ( (LA37_0 == LTERM) ) 
            	                {
            	                    alt37=1;
            	                }

            	            }
            	            switch (alt37) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM77 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1447); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM77, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop37;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop37: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1450);
            	        variableDeclarationNoIn78=variableDeclarationNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn78.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclarationNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 215:73: -> ( variableDeclarationNoIn )+
            	{
            	    if ((stream_variableDeclarationNoIn == NULL || !stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

            	    	}
            	    	stream_variableDeclarationNoIn->reset(stream_variableDeclarationNoIn);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, variableDeclarationListNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//Emerson.g:218:1: variableDeclaration : Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) ;
 */
static EmersonParser_variableDeclaration_return
variableDeclaration(pEmersonParser ctx)
{   
    EmersonParser_variableDeclaration_return retval;
    ANTLR3_UINT32 variableDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier79;
    pANTLR3_COMMON_TOKEN    LTERM80;
    EmersonParser_initialiser_return initialiser81;
    #undef	RETURN_TYPE_initialiser81
    #define	RETURN_TYPE_initialiser81 EmersonParser_initialiser_return

    pANTLR3_BASE_TREE Identifier79_tree;
    pANTLR3_BASE_TREE LTERM80_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiser;
    /* Initialize rule variables
     */
    variableDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier79       = NULL;
    LTERM80       = NULL;
    initialiser81.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier79_tree   = NULL;
    LTERM80_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiser   = NULL;
    #define CREATE_stream_initialiser  if (stream_initialiser == NULL) {stream_initialiser = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiser"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:219:2: ( Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) )
        // .//Emerson.g:219:4: Identifier ( LTERM )* ( initialiser )?
        {
            Identifier79 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1469); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier79, NULL); }


            // .//Emerson.g:219:15: ( LTERM )*

            for (;;)
            {
                int alt39=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA39_2 = LA(2);
                            if ( (synpred51_Emerson(ctx)) ) 
                            {
                                alt39=1;
                            }

                        }
                    }

                }
                switch (alt39) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM80 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclaration1471); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM80, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop39;	/* break out of the loop */
            	    break;
                }
            }
            loop39: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:219:22: ( initialiser )?
            {
                int alt40=2;
                {
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == 147) ) 
                    {
                        alt40=1;
                    }
                }
                switch (alt40) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiser
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1474);
            	        initialiser81=initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiser; stream_initialiser->add(stream_initialiser, initialiser81.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiser, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 219:35: -> ^( VAR Identifier ( initialiser )? )
            	{
            	    // .//Emerson.g:219:38: ^( VAR Identifier ( initialiser )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:219:55: ( initialiser )?
            	        {
            	        	if ( (stream_initialiser != NULL && stream_initialiser->hasNext(stream_initialiser))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiser == NULL ? NULL : stream_initialiser->nextTree(stream_initialiser));

            	        	}
            	        	if ( stream_initialiser != NULL) stream_initialiser->reset(stream_initialiser);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiser != NULL) stream_initialiser->free(stream_initialiser);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, variableDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//Emerson.g:222:1: variableDeclarationNoIn : Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static EmersonParser_variableDeclarationNoIn_return
variableDeclarationNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier82;
    pANTLR3_COMMON_TOKEN    LTERM83;
    EmersonParser_initialiserNoIn_return initialiserNoIn84;
    #undef	RETURN_TYPE_initialiserNoIn84
    #define	RETURN_TYPE_initialiserNoIn84 EmersonParser_initialiserNoIn_return

    pANTLR3_BASE_TREE Identifier82_tree;
    pANTLR3_BASE_TREE LTERM83_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiserNoIn;
    /* Initialize rule variables
     */
    variableDeclarationNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier82       = NULL;
    LTERM83       = NULL;
    initialiserNoIn84.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier82_tree   = NULL;
    LTERM83_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiserNoIn   = NULL;
    #define CREATE_stream_initialiserNoIn  if (stream_initialiserNoIn == NULL) {stream_initialiserNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiserNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:223:2: ( Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//Emerson.g:223:4: Identifier ( LTERM )* ( initialiserNoIn )?
        {
            Identifier82 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1498); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier82, NULL); }


            // .//Emerson.g:223:15: ( LTERM )*

            for (;;)
            {
                int alt41=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA41_2 = LA(2);
                            if ( (synpred53_Emerson(ctx)) ) 
                            {
                                alt41=1;
                            }

                        }
                    }

                }
                switch (alt41) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM83 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationNoIn1500); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM83, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:223:22: ( initialiserNoIn )?
            {
                int alt42=2;
                {
                    int LA42_0 = LA(1);
                    if ( (LA42_0 == 147) ) 
                    {
                        alt42=1;
                    }
                }
                switch (alt42) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiserNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1503);
            	        initialiserNoIn84=initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiserNoIn; stream_initialiserNoIn->add(stream_initialiserNoIn, initialiserNoIn84.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiserNoIn, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 223:39: -> ^( VAR Identifier ( initialiserNoIn )? )
            	{
            	    // .//Emerson.g:223:43: ^( VAR Identifier ( initialiserNoIn )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:223:60: ( initialiserNoIn )?
            	        {
            	        	if ( (stream_initialiserNoIn != NULL && stream_initialiserNoIn->hasNext(stream_initialiserNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiserNoIn == NULL ? NULL : stream_initialiserNoIn->nextTree(stream_initialiserNoIn));

            	        	}
            	        	if ( stream_initialiserNoIn != NULL) stream_initialiserNoIn->reset(stream_initialiserNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiserNoIn != NULL) stream_initialiserNoIn->free(stream_initialiserNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, variableDeclarationNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//Emerson.g:226:1: initialiser : '=' ( LTERM )* expression -> expression ;
 */
static EmersonParser_initialiser_return
initialiser(pEmersonParser ctx)
{   
    EmersonParser_initialiser_return retval;
    ANTLR3_UINT32 initialiser_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal85;
    pANTLR3_COMMON_TOKEN    LTERM86;
    EmersonParser_expression_return expression87;
    #undef	RETURN_TYPE_expression87
    #define	RETURN_TYPE_expression87 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal85_tree;
    pANTLR3_BASE_TREE LTERM86_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    initialiser_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal85       = NULL;
    LTERM86       = NULL;
    expression87.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal85_tree   = NULL;
    LTERM86_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:227:2: ( '=' ( LTERM )* expression -> expression )
        // .//Emerson.g:227:4: '=' ( LTERM )* expression
        {
            char_literal85 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_initialiser1528); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal85, NULL); }


            // .//Emerson.g:227:8: ( LTERM )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (LA43_0 == LTERM) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM86 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiser1530); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM86, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_initialiser1533);
            expression87=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression87.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 227:26: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, initialiser_StartIndex); }
    return retval;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//Emerson.g:230:1: initialiserNoIn : '=' ( LTERM )* expressionNoIn -> expressionNoIn ;
 */
static EmersonParser_initialiserNoIn_return
initialiserNoIn(pEmersonParser ctx)
{   
    EmersonParser_initialiserNoIn_return retval;
    ANTLR3_UINT32 initialiserNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal88;
    pANTLR3_COMMON_TOKEN    LTERM89;
    EmersonParser_expressionNoIn_return expressionNoIn90;
    #undef	RETURN_TYPE_expressionNoIn90
    #define	RETURN_TYPE_expressionNoIn90 EmersonParser_expressionNoIn_return

    pANTLR3_BASE_TREE char_literal88_tree;
    pANTLR3_BASE_TREE LTERM89_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expressionNoIn;
    /* Initialize rule variables
     */
    initialiserNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal88       = NULL;
    LTERM89       = NULL;
    expressionNoIn90.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal88_tree   = NULL;
    LTERM89_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_expressionNoIn   = NULL;
    #define CREATE_stream_expressionNoIn  if (stream_expressionNoIn == NULL) {stream_expressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:231:2: ( '=' ( LTERM )* expressionNoIn -> expressionNoIn )
        // .//Emerson.g:231:4: '=' ( LTERM )* expressionNoIn
        {
            char_literal88 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_initialiserNoIn1550); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal88, NULL); }


            // .//Emerson.g:231:8: ( LTERM )*

            for (;;)
            {
                int alt44=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == LTERM) ) 
                    {
                        alt44=1;
                    }

                }
                switch (alt44) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM89 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiserNoIn1552); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM89, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop44;	/* break out of the loop */
            	    break;
                }
            }
            loop44: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expressionNoIn_in_initialiserNoIn1555);
            expressionNoIn90=expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expressionNoIn; stream_expressionNoIn->add(stream_expressionNoIn, expressionNoIn90.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 231:30: -> expressionNoIn
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expressionNoIn == NULL ? NULL : stream_expressionNoIn->nextTree(stream_expressionNoIn));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_expressionNoIn != NULL) stream_expressionNoIn->free(stream_expressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, initialiserNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start emptyStatement
 * .//Emerson.g:234:1: emptyStatement : ( LTERM )* ';' ;
 */
static EmersonParser_emptyStatement_return
emptyStatement(pEmersonParser ctx)
{   
    EmersonParser_emptyStatement_return retval;
    ANTLR3_UINT32 emptyStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM91;
    pANTLR3_COMMON_TOKEN    char_literal92;

    pANTLR3_BASE_TREE LTERM91_tree;
    pANTLR3_BASE_TREE char_literal92_tree;

    /* Initialize rule variables
     */
    emptyStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM91       = NULL;
    char_literal92       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LTERM91_tree   = NULL;
    char_literal92_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:235:9: ( ( LTERM )* ';' )
        // .//Emerson.g:235:11: ( LTERM )* ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // .//Emerson.g:235:11: ( LTERM )*

            for (;;)
            {
                int alt45=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == LTERM) ) 
                    {
                        alt45=1;
                    }

                }
                switch (alt45) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM91 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_emptyStatement1578); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleemptyStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        LTERM91_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LTERM91));
            	        ADAPTOR->addChild(ADAPTOR, root_0, LTERM91_tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop45;	/* break out of the loop */
            	    break;
                }
            }
            loop45: ; /* Jump out to here if this rule does not match */

            char_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_emptyStatement1581); 
            if  (HASEXCEPTION())
            {
                goto ruleemptyStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal92_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal92));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal92_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleemptyStatementEx; /* Prevent compiler warnings */
    ruleemptyStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, emptyStatement_StartIndex); }
    return retval;
}
/* $ANTLR end emptyStatement */

/** 
 * $ANTLR start expressionStatement
 * .//Emerson.g:238:1: expressionStatement : expression ( LTERM | ';' ) -> expression ;
 */
static EmersonParser_expressionStatement_return
expressionStatement(pEmersonParser ctx)
{   
    EmersonParser_expressionStatement_return retval;
    ANTLR3_UINT32 expressionStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM94;
    pANTLR3_COMMON_TOKEN    char_literal95;
    EmersonParser_expression_return expression93;
    #undef	RETURN_TYPE_expression93
    #define	RETURN_TYPE_expression93 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM94_tree;
    pANTLR3_BASE_TREE char_literal95_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expressionStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM94       = NULL;
    char_literal95       = NULL;
    expression93.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM94_tree   = NULL;
    char_literal95_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:239:2: ( expression ( LTERM | ';' ) -> expression )
        // .//Emerson.g:239:4: expression ( LTERM | ';' )
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1593);
            expression93=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression93.tree, NULL); }

            // .//Emerson.g:239:15: ( LTERM | ';' )
            {
                int alt46=2;

                {
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == LTERM) ) 
                    {
                        alt46=1;
                    }
                    else if ( (LA46_0 == 145) ) 
                    {
                        alt46=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 46;
                        EXCEPTION->state        = 0;


                        goto ruleexpressionStatementEx;
                    }
                }
                switch (alt46) 
                {
            	case 1:
            	    // .//Emerson.g:239:16: LTERM
            	    {
            	        LTERM94 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionStatement1596); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM94, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:239:24: ';'
            	    {
            	        char_literal95 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_expressionStatement1600); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal95, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 239:29: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, expressionStatement_StartIndex); }
    return retval;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start ifStatement
 * .//Emerson.g:243:1: ifStatement : 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) ;
 */
static EmersonParser_ifStatement_return
ifStatement(pEmersonParser ctx)
{   
    EmersonParser_ifStatement_return retval;
    ANTLR3_UINT32 ifStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal96;
    pANTLR3_COMMON_TOKEN    LTERM97;
    pANTLR3_COMMON_TOKEN    char_literal98;
    pANTLR3_COMMON_TOKEN    LTERM99;
    pANTLR3_COMMON_TOKEN    LTERM101;
    pANTLR3_COMMON_TOKEN    char_literal102;
    pANTLR3_COMMON_TOKEN    LTERM103;
    pANTLR3_COMMON_TOKEN    LTERM104;
    pANTLR3_COMMON_TOKEN    string_literal105;
    pANTLR3_COMMON_TOKEN    LTERM106;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_statement_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_statement_return

    EmersonParser_expression_return expression100;
    #undef	RETURN_TYPE_expression100
    #define	RETURN_TYPE_expression100 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal96_tree;
    pANTLR3_BASE_TREE LTERM97_tree;
    pANTLR3_BASE_TREE char_literal98_tree;
    pANTLR3_BASE_TREE LTERM99_tree;
    pANTLR3_BASE_TREE LTERM101_tree;
    pANTLR3_BASE_TREE char_literal102_tree;
    pANTLR3_BASE_TREE LTERM103_tree;
    pANTLR3_BASE_TREE LTERM104_tree;
    pANTLR3_BASE_TREE string_literal105_tree;
    pANTLR3_BASE_TREE LTERM106_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    ifStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal96       = NULL;
    LTERM97       = NULL;
    char_literal98       = NULL;
    LTERM99       = NULL;
    LTERM101       = NULL;
    char_literal102       = NULL;
    LTERM103       = NULL;
    LTERM104       = NULL;
    string_literal105       = NULL;
    LTERM106       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expression100.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal96_tree   = NULL;
    LTERM97_tree   = NULL;
    char_literal98_tree   = NULL;
    LTERM99_tree   = NULL;
    LTERM101_tree   = NULL;
    char_literal102_tree   = NULL;
    LTERM103_tree   = NULL;
    LTERM104_tree   = NULL;
    string_literal105_tree   = NULL;
    LTERM106_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:244:5: ( 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) )
        // .//Emerson.g:244:7: 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
        {
            string_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_ifStatement1620); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal96, NULL); }


            // .//Emerson.g:244:12: ( LTERM )*

            for (;;)
            {
                int alt47=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA47_0 = LA(1);
                    if ( (LA47_0 == LTERM) ) 
                    {
                        alt47=1;
                    }

                }
                switch (alt47) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM97 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1622); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM97, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */

            char_literal98 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_ifStatement1625); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal98, NULL); }


            // .//Emerson.g:244:23: ( LTERM )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == LTERM) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM99 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1627); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM99, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1630);
            expression100=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression100.tree, NULL); }

            // .//Emerson.g:244:41: ( LTERM )*

            for (;;)
            {
                int alt49=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA49_0 = LA(1);
                    if ( (LA49_0 == LTERM) ) 
                    {
                        alt49=1;
                    }

                }
                switch (alt49) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM101 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1632); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM101, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */

            char_literal102 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_ifStatement1635); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal102, NULL); }


            // .//Emerson.g:244:52: ( LTERM )*

            for (;;)
            {
                int alt50=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA50_0 = LA(1);
                    if ( (LA50_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA50_2 = LA(2);
                            if ( (synpred62_Emerson(ctx)) ) 
                            {
                                alt50=1;
                            }

                        }
                    }

                }
                switch (alt50) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM103 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1637); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM103, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop50;	/* break out of the loop */
            	    break;
                }
            }
            loop50: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1642);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

            // .//Emerson.g:244:72: ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
            {
                int alt53=2;
                {
                    int LA53_0 = LA(1);
                    if ( (LA53_0 == LTERM) ) 
                    {
                        {
                            int LA53_1 = LA(2);
                            if ( (synpred65_Emerson(ctx)) ) 
                            {
                                alt53=1;
                            }
                        }
                    }
                    else if ( (LA53_0 == 149) ) 
                    {
                        {
                            int LA53_2 = LA(2);
                            if ( (synpred65_Emerson(ctx)) ) 
                            {
                                alt53=1;
                            }
                        }
                    }
                }
                switch (alt53) 
                {
            	case 1:
            	    // .//Emerson.g:244:73: ( LTERM )* 'else' ( LTERM )* s2= statement
            	    {

            	        // .//Emerson.g:244:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt51=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA51_0 = LA(1);
            	                if ( (LA51_0 == LTERM) ) 
            	                {
            	                    alt51=1;
            	                }

            	            }
            	            switch (alt51) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM104 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1645); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM104, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop51;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop51: ; /* Jump out to here if this rule does not match */

            	        string_literal105 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_ifStatement1648); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal105, NULL); }


            	        // .//Emerson.g:244:87: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt52=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA52_0 = LA(1);
            	                if ( (LA52_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA52_2 = LA(2);
            	                        if ( (synpred64_Emerson(ctx)) ) 
            	                        {
            	                            alt52=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt52) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM106 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1650); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM106, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop52;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop52: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1655);
            	        s2=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, s2, s1
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 244:109: -> ^( IF expression $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:244:112: ^( IF expression $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:244:132: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, ifStatement_StartIndex); }
    return retval;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//Emerson.g:247:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static EmersonParser_iterationStatement_return
iterationStatement(pEmersonParser ctx)
{   
    EmersonParser_iterationStatement_return retval;
    ANTLR3_UINT32 iterationStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_doWhileStatement_return doWhileStatement107;
    #undef	RETURN_TYPE_doWhileStatement107
    #define	RETURN_TYPE_doWhileStatement107 EmersonParser_doWhileStatement_return

    EmersonParser_whileStatement_return whileStatement108;
    #undef	RETURN_TYPE_whileStatement108
    #define	RETURN_TYPE_whileStatement108 EmersonParser_whileStatement_return

    EmersonParser_forStatement_return forStatement109;
    #undef	RETURN_TYPE_forStatement109
    #define	RETURN_TYPE_forStatement109 EmersonParser_forStatement_return

    EmersonParser_forInStatement_return forInStatement110;
    #undef	RETURN_TYPE_forInStatement110
    #define	RETURN_TYPE_forInStatement110 EmersonParser_forInStatement_return


    /* Initialize rule variables
     */
    iterationStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        return retval; 
    }
    doWhileStatement107.tree = NULL;

    whileStatement108.tree = NULL;

    forStatement109.tree = NULL;

    forInStatement110.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:248:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt54;

            alt54=4;

            switch ( LA(1) ) 
            {
            case 150:
            	{
            		alt54=1;
            	}
                break;
            case 151:
            	{
            		alt54=2;
            	}
                break;
            case 152:
            	{

            		{
            		    int LA54_3 = LA(2);
            		    if ( (synpred68_Emerson(ctx)) ) 
            		    {
            		        alt54=3;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt54=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 54;
            		        EXCEPTION->state        = 3;


            		        goto ruleiterationStatementEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 54;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt54) 
            {
        	case 1:
        	    // .//Emerson.g:248:4: doWhileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1687);
        	        doWhileStatement107=doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, doWhileStatement107.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:249:4: whileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1692);
        	        whileStatement108=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStatement108.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:250:4: forStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1697);
        	        forStatement109=forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forStatement109.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:251:4: forInStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1702);
        	        forInStatement110=forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forInStatement110.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, iterationStatement_StartIndex); }
    return retval;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//Emerson.g:254:1: doWhileStatement : 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) ;
 */
static EmersonParser_doWhileStatement_return
doWhileStatement(pEmersonParser ctx)
{   
    EmersonParser_doWhileStatement_return retval;
    ANTLR3_UINT32 doWhileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal111;
    pANTLR3_COMMON_TOKEN    LTERM112;
    pANTLR3_COMMON_TOKEN    LTERM114;
    pANTLR3_COMMON_TOKEN    string_literal115;
    pANTLR3_COMMON_TOKEN    LTERM116;
    pANTLR3_COMMON_TOKEN    char_literal117;
    pANTLR3_COMMON_TOKEN    char_literal119;
    pANTLR3_COMMON_TOKEN    LTERM120;
    pANTLR3_COMMON_TOKEN    char_literal121;
    EmersonParser_statement_return statement113;
    #undef	RETURN_TYPE_statement113
    #define	RETURN_TYPE_statement113 EmersonParser_statement_return

    EmersonParser_expression_return expression118;
    #undef	RETURN_TYPE_expression118
    #define	RETURN_TYPE_expression118 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal111_tree;
    pANTLR3_BASE_TREE LTERM112_tree;
    pANTLR3_BASE_TREE LTERM114_tree;
    pANTLR3_BASE_TREE string_literal115_tree;
    pANTLR3_BASE_TREE LTERM116_tree;
    pANTLR3_BASE_TREE char_literal117_tree;
    pANTLR3_BASE_TREE char_literal119_tree;
    pANTLR3_BASE_TREE LTERM120_tree;
    pANTLR3_BASE_TREE char_literal121_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    doWhileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal111       = NULL;
    LTERM112       = NULL;
    LTERM114       = NULL;
    string_literal115       = NULL;
    LTERM116       = NULL;
    char_literal117       = NULL;
    char_literal119       = NULL;
    LTERM120       = NULL;
    char_literal121       = NULL;
    statement113.tree = NULL;

    expression118.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal111_tree   = NULL;
    LTERM112_tree   = NULL;
    LTERM114_tree   = NULL;
    string_literal115_tree   = NULL;
    LTERM116_tree   = NULL;
    char_literal117_tree   = NULL;
    char_literal119_tree   = NULL;
    LTERM120_tree   = NULL;
    char_literal121_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:255:2: ( 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) )
        // .//Emerson.g:255:4: 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' )
        {
            string_literal111 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_doWhileStatement1714); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal111, NULL); }


            // .//Emerson.g:255:9: ( LTERM )*

            for (;;)
            {
                int alt55=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA55_0 = LA(1);
                    if ( (LA55_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA55_2 = LA(2);
                            if ( (synpred69_Emerson(ctx)) ) 
                            {
                                alt55=1;
                            }

                        }
                    }

                }
                switch (alt55) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM112 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1716); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM112, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1719);
            statement113=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement113.tree, NULL); }

            // .//Emerson.g:255:26: ( LTERM )*

            for (;;)
            {
                int alt56=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA56_0 = LA(1);
                    if ( (LA56_0 == LTERM) ) 
                    {
                        alt56=1;
                    }

                }
                switch (alt56) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM114 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1721); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM114, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */

            string_literal115 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_doWhileStatement1724); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal115, NULL); }


            // .//Emerson.g:255:41: ( LTERM )*

            for (;;)
            {
                int alt57=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA57_0 = LA(1);
                    if ( (LA57_0 == LTERM) ) 
                    {
                        alt57=1;
                    }

                }
                switch (alt57) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM116 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1726); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM116, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop57;	/* break out of the loop */
            	    break;
                }
            }
            loop57: ; /* Jump out to here if this rule does not match */

            char_literal117 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_doWhileStatement1729); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal117, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1731);
            expression118=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression118.tree, NULL); }
            char_literal119 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_doWhileStatement1733); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal119, NULL); }


            // .//Emerson.g:255:67: ( LTERM | ';' )
            {
                int alt58=2;

                {
                    int LA58_0 = LA(1);
                    if ( (LA58_0 == LTERM) ) 
                    {
                        alt58=1;
                    }
                    else if ( (LA58_0 == 145) ) 
                    {
                        alt58=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 58;
                        EXCEPTION->state        = 0;


                        goto ruledoWhileStatementEx;
                    }
                }
                switch (alt58) 
                {
            	case 1:
            	    // .//Emerson.g:255:68: LTERM
            	    {
            	        LTERM120 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1736); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM120, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:255:76: ';'
            	    {
            	        char_literal121 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_doWhileStatement1740); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal121, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 255:81: -> ^( DO statement expression )
            	{
            	    // .//Emerson.g:255:84: ^( DO statement expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO, (pANTLR3_UINT8)"DO"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, doWhileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//Emerson.g:258:1: whileStatement : 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) ;
 */
static EmersonParser_whileStatement_return
whileStatement(pEmersonParser ctx)
{   
    EmersonParser_whileStatement_return retval;
    ANTLR3_UINT32 whileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal122;
    pANTLR3_COMMON_TOKEN    LTERM123;
    pANTLR3_COMMON_TOKEN    char_literal124;
    pANTLR3_COMMON_TOKEN    LTERM125;
    pANTLR3_COMMON_TOKEN    LTERM127;
    pANTLR3_COMMON_TOKEN    char_literal128;
    pANTLR3_COMMON_TOKEN    LTERM129;
    EmersonParser_expression_return expression126;
    #undef	RETURN_TYPE_expression126
    #define	RETURN_TYPE_expression126 EmersonParser_expression_return

    EmersonParser_statement_return statement130;
    #undef	RETURN_TYPE_statement130
    #define	RETURN_TYPE_statement130 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal122_tree;
    pANTLR3_BASE_TREE LTERM123_tree;
    pANTLR3_BASE_TREE char_literal124_tree;
    pANTLR3_BASE_TREE LTERM125_tree;
    pANTLR3_BASE_TREE LTERM127_tree;
    pANTLR3_BASE_TREE char_literal128_tree;
    pANTLR3_BASE_TREE LTERM129_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal122       = NULL;
    LTERM123       = NULL;
    char_literal124       = NULL;
    LTERM125       = NULL;
    LTERM127       = NULL;
    char_literal128       = NULL;
    LTERM129       = NULL;
    expression126.tree = NULL;

    statement130.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal122_tree   = NULL;
    LTERM123_tree   = NULL;
    char_literal124_tree   = NULL;
    LTERM125_tree   = NULL;
    LTERM127_tree   = NULL;
    char_literal128_tree   = NULL;
    LTERM129_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:259:2: ( 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) )
        // .//Emerson.g:259:4: 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal122 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_whileStatement1766); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal122, NULL); }


            // .//Emerson.g:259:12: ( LTERM )*

            for (;;)
            {
                int alt59=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA59_0 = LA(1);
                    if ( (LA59_0 == LTERM) ) 
                    {
                        alt59=1;
                    }

                }
                switch (alt59) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM123 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1768); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM123, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */

            char_literal124 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_whileStatement1771); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal124, NULL); }


            // .//Emerson.g:259:23: ( LTERM )*

            for (;;)
            {
                int alt60=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA60_0 = LA(1);
                    if ( (LA60_0 == LTERM) ) 
                    {
                        alt60=1;
                    }

                }
                switch (alt60) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM125 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1773); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM125, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop60;	/* break out of the loop */
            	    break;
                }
            }
            loop60: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1776);
            expression126=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression126.tree, NULL); }

            // .//Emerson.g:259:41: ( LTERM )*

            for (;;)
            {
                int alt61=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA61_0 = LA(1);
                    if ( (LA61_0 == LTERM) ) 
                    {
                        alt61=1;
                    }

                }
                switch (alt61) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM127 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1778); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM127, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop61;	/* break out of the loop */
            	    break;
                }
            }
            loop61: ; /* Jump out to here if this rule does not match */

            char_literal128 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_whileStatement1781); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal128, NULL); }


            // .//Emerson.g:259:52: ( LTERM )*

            for (;;)
            {
                int alt62=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA62_0 = LA(1);
                    if ( (LA62_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA62_2 = LA(2);
                            if ( (synpred76_Emerson(ctx)) ) 
                            {
                                alt62=1;
                            }

                        }
                    }

                }
                switch (alt62) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM129 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1783); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM129, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop62;	/* break out of the loop */
            	    break;
                }
            }
            loop62: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1786);
            statement130=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement130.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 259:69: -> ^( WHILE expression statement )
            	{
            	    // .//Emerson.g:259:72: ^( WHILE expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE, (pANTLR3_UINT8)"WHILE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, whileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//Emerson.g:262:1: forStatement : 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) ;
 */
static EmersonParser_forStatement_return
forStatement(pEmersonParser ctx)
{   
    EmersonParser_forStatement_return retval;
    ANTLR3_UINT32 forStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal131;
    pANTLR3_COMMON_TOKEN    LTERM132;
    pANTLR3_COMMON_TOKEN    char_literal133;
    pANTLR3_COMMON_TOKEN    LTERM134;
    pANTLR3_COMMON_TOKEN    LTERM135;
    pANTLR3_COMMON_TOKEN    char_literal136;
    pANTLR3_COMMON_TOKEN    LTERM137;
    pANTLR3_COMMON_TOKEN    LTERM138;
    pANTLR3_COMMON_TOKEN    char_literal139;
    pANTLR3_COMMON_TOKEN    LTERM140;
    pANTLR3_COMMON_TOKEN    LTERM141;
    pANTLR3_COMMON_TOKEN    char_literal142;
    pANTLR3_COMMON_TOKEN    LTERM143;
    EmersonParser_forStatementInitialiserPart_return init;
    #undef	RETURN_TYPE_init
    #define	RETURN_TYPE_init EmersonParser_forStatementInitialiserPart_return

    EmersonParser_expression_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond EmersonParser_expression_return

    EmersonParser_expression_return iter;
    #undef	RETURN_TYPE_iter
    #define	RETURN_TYPE_iter EmersonParser_expression_return

    EmersonParser_statement_return statement144;
    #undef	RETURN_TYPE_statement144
    #define	RETURN_TYPE_statement144 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal131_tree;
    pANTLR3_BASE_TREE LTERM132_tree;
    pANTLR3_BASE_TREE char_literal133_tree;
    pANTLR3_BASE_TREE LTERM134_tree;
    pANTLR3_BASE_TREE LTERM135_tree;
    pANTLR3_BASE_TREE char_literal136_tree;
    pANTLR3_BASE_TREE LTERM137_tree;
    pANTLR3_BASE_TREE LTERM138_tree;
    pANTLR3_BASE_TREE char_literal139_tree;
    pANTLR3_BASE_TREE LTERM140_tree;
    pANTLR3_BASE_TREE LTERM141_tree;
    pANTLR3_BASE_TREE char_literal142_tree;
    pANTLR3_BASE_TREE LTERM143_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forStatementInitialiserPart;
    /* Initialize rule variables
     */
    forStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal131       = NULL;
    LTERM132       = NULL;
    char_literal133       = NULL;
    LTERM134       = NULL;
    LTERM135       = NULL;
    char_literal136       = NULL;
    LTERM137       = NULL;
    LTERM138       = NULL;
    char_literal139       = NULL;
    LTERM140       = NULL;
    LTERM141       = NULL;
    char_literal142       = NULL;
    LTERM143       = NULL;
    init.tree = NULL;

    cond.tree = NULL;

    iter.tree = NULL;

    statement144.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal131_tree   = NULL;
    LTERM132_tree   = NULL;
    char_literal133_tree   = NULL;
    LTERM134_tree   = NULL;
    LTERM135_tree   = NULL;
    char_literal136_tree   = NULL;
    LTERM137_tree   = NULL;
    LTERM138_tree   = NULL;
    char_literal139_tree   = NULL;
    LTERM140_tree   = NULL;
    LTERM141_tree   = NULL;
    char_literal142_tree   = NULL;
    LTERM143_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forStatementInitialiserPart   = NULL;
    #define CREATE_stream_forStatementInitialiserPart  if (stream_forStatementInitialiserPart == NULL) {stream_forStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:263:2: ( 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) )
        // .//Emerson.g:263:4: 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal131 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_forStatement1809); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, string_literal131, NULL); }


            // .//Emerson.g:263:10: ( LTERM )*

            for (;;)
            {
                int alt63=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA63_0 = LA(1);
                    if ( (LA63_0 == LTERM) ) 
                    {
                        alt63=1;
                    }

                }
                switch (alt63) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM132 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1811); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM132, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop63;	/* break out of the loop */
            	    break;
                }
            }
            loop63: ; /* Jump out to here if this rule does not match */

            char_literal133 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_forStatement1814); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal133, NULL); }


            // .//Emerson.g:263:21: ( ( LTERM )* init= forStatementInitialiserPart )?
            {
                int alt65=2;
                alt65 = cdfa65.predict(ctx, RECOGNIZER, ISTREAM, &cdfa65);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt65) 
                {
            	case 1:
            	    // .//Emerson.g:263:22: ( LTERM )* init= forStatementInitialiserPart
            	    {

            	        // .//Emerson.g:263:22: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt64=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA64_0 = LA(1);
            	                if ( (LA64_0 == LTERM) ) 
            	                {
            	                    alt64=1;
            	                }

            	            }
            	            switch (alt64) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM134 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1817); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM134, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop64;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop64: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement1822);
            	        init=forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_forStatementInitialiserPart; stream_forStatementInitialiserPart->add(stream_forStatementInitialiserPart, init.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:263:64: ( LTERM )*

            for (;;)
            {
                int alt66=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA66_0 = LA(1);
                    if ( (LA66_0 == LTERM) ) 
                    {
                        alt66=1;
                    }

                }
                switch (alt66) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM135 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1826); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM135, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop66;	/* break out of the loop */
            	    break;
                }
            }
            loop66: ; /* Jump out to here if this rule does not match */

            char_literal136 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_forStatement1829); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal136, NULL); }


            // .//Emerson.g:263:75: ( ( LTERM )* cond= expression )?
            {
                int alt68=2;
                alt68 = cdfa68.predict(ctx, RECOGNIZER, ISTREAM, &cdfa68);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt68) 
                {
            	case 1:
            	    // .//Emerson.g:263:76: ( LTERM )* cond= expression
            	    {

            	        // .//Emerson.g:263:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt67=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA67_0 = LA(1);
            	                if ( (LA67_0 == LTERM) ) 
            	                {
            	                    alt67=1;
            	                }

            	            }
            	            switch (alt67) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM137 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1832); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM137, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop67;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop67: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1837);
            	        cond=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, cond.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:263:101: ( LTERM )*

            for (;;)
            {
                int alt69=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA69_0 = LA(1);
                    if ( (LA69_0 == LTERM) ) 
                    {
                        alt69=1;
                    }

                }
                switch (alt69) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM138 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1841); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM138, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop69;	/* break out of the loop */
            	    break;
                }
            }
            loop69: ; /* Jump out to here if this rule does not match */

            char_literal139 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_forStatement1844); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal139, NULL); }


            // .//Emerson.g:263:112: ( ( LTERM )* iter= expression )?
            {
                int alt71=2;
                alt71 = cdfa71.predict(ctx, RECOGNIZER, ISTREAM, &cdfa71);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt71) 
                {
            	case 1:
            	    // .//Emerson.g:263:113: ( LTERM )* iter= expression
            	    {

            	        // .//Emerson.g:263:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt70=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA70_0 = LA(1);
            	                if ( (LA70_0 == LTERM) ) 
            	                {
            	                    alt70=1;
            	                }

            	            }
            	            switch (alt70) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM140 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1847); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM140, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop70;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop70: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1852);
            	        iter=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, iter.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:263:138: ( LTERM )*

            for (;;)
            {
                int alt72=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA72_0 = LA(1);
                    if ( (LA72_0 == LTERM) ) 
                    {
                        alt72=1;
                    }

                }
                switch (alt72) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM141 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1856); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM141, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop72;	/* break out of the loop */
            	    break;
                }
            }
            loop72: ; /* Jump out to here if this rule does not match */

            char_literal142 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forStatement1859); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal142, NULL); }


            // .//Emerson.g:263:149: ( LTERM )*

            for (;;)
            {
                int alt73=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA73_0 = LA(1);
                    if ( (LA73_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA73_2 = LA(2);
                            if ( (synpred87_Emerson(ctx)) ) 
                            {
                                alt73=1;
                            }

                        }
                    }

                }
                switch (alt73) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM143 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1861); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM143, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop73;	/* break out of the loop */
            	    break;
                }
            }
            loop73: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forStatement1864);
            statement144=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement144.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, iter, cond, init
             * token labels      : 
             * rule labels       : retval, init, iter, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_iter;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_init=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token init", init.tree != NULL ? init.tree : NULL);
            	stream_iter=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token iter", iter.tree != NULL ? iter.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 263:166: -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	{
            	    // .//Emerson.g:263:170: ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR"), root_1));

            	        // .//Emerson.g:263:176: ( ^( FORINIT $init) )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		// .//Emerson.g:263:176: ^( FORINIT $init)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORINIT, (pANTLR3_UINT8)"FORINIT"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }
            	        // .//Emerson.g:263:196: ( ^( FORCOND $cond) )?
            	        {
            	        	if ( (stream_cond != NULL && stream_cond->hasNext(stream_cond))  )
            	        	{
            	        		// .//Emerson.g:263:196: ^( FORCOND $cond)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORCOND, (pANTLR3_UINT8)"FORCOND"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_cond != NULL) stream_cond->reset(stream_cond);

            	        }
            	        // .//Emerson.g:263:215: ( ^( FORITER $iter) )?
            	        {
            	        	if ( (stream_iter != NULL && stream_iter->hasNext(stream_iter))  )
            	        	{
            	        		// .//Emerson.g:263:215: ^( FORITER $iter)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORITER, (pANTLR3_UINT8)"FORITER"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_iter == NULL ? NULL : stream_iter->nextTree(stream_iter));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_iter != NULL) stream_iter->reset(stream_iter);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_init != NULL) stream_init->free(stream_init);
            	if (stream_iter != NULL) stream_iter->free(stream_iter);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forStatementInitialiserPart != NULL) stream_forStatementInitialiserPart->free(stream_forStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, forStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//Emerson.g:266:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) );
 */
static EmersonParser_forStatementInitialiserPart_return
forStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal146;
    pANTLR3_COMMON_TOKEN    LTERM147;
    EmersonParser_expressionNoIn_return expressionNoIn145;
    #undef	RETURN_TYPE_expressionNoIn145
    #define	RETURN_TYPE_expressionNoIn145 EmersonParser_expressionNoIn_return

    EmersonParser_variableDeclarationListNoIn_return variableDeclarationListNoIn148;
    #undef	RETURN_TYPE_variableDeclarationListNoIn148
    #define	RETURN_TYPE_variableDeclarationListNoIn148 EmersonParser_variableDeclarationListNoIn_return

    pANTLR3_BASE_TREE string_literal146_tree;
    pANTLR3_BASE_TREE LTERM147_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationListNoIn;
    /* Initialize rule variables
     */
    forStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal146       = NULL;
    LTERM147       = NULL;
    expressionNoIn145.tree = NULL;

    variableDeclarationListNoIn148.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal146_tree   = NULL;
    LTERM147_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_variableDeclarationListNoIn   = NULL;
    #define CREATE_stream_variableDeclarationListNoIn  if (stream_variableDeclarationListNoIn == NULL) {stream_variableDeclarationListNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationListNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:267:2: ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt75;

            alt75=2;


            {
                int LA75_0 = LA(1);
                if ( (((LA75_0 >= Identifier) && (LA75_0 <= StringLiteral)) || ((LA75_0 >= 139) && (LA75_0 <= 140)) || LA75_0 == 143 || ((LA75_0 >= 166) && (LA75_0 <= 167)) || LA75_0 == 191 || ((LA75_0 >= 196) && (LA75_0 <= 197)) || ((LA75_0 >= 201) && (LA75_0 <= 212))) ) 
                {
                    alt75=1;
                }
                else if ( (LA75_0 == 146) ) 
                {
                    alt75=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 75;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt75) 
            {
        	case 1:
        	    // .//Emerson.g:267:4: expressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart1913);
        	        expressionNoIn145=expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionNoIn145.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:268:4: 'var' ( LTERM )* variableDeclarationListNoIn
        	    {
        	        string_literal146 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_forStatementInitialiserPart1918); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, string_literal146, NULL); }


        	        // .//Emerson.g:268:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt74=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA74_0 = LA(1);
        	                if ( (LA74_0 == LTERM) ) 
        	                {
        	                    alt74=1;
        	                }

        	            }
        	            switch (alt74) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM147 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatementInitialiserPart1920); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM147, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop74;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop74: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1923);
        	        variableDeclarationListNoIn148=variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationListNoIn; stream_variableDeclarationListNoIn->add(stream_variableDeclarationListNoIn, variableDeclarationListNoIn148.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationListNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 268:45: -> ^( VARLIST variableDeclarationListNoIn )
        	        	{
        	        	    // .//Emerson.g:268:48: ^( VARLIST variableDeclarationListNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationListNoIn == NULL ? NULL : stream_variableDeclarationListNoIn->nextTree(stream_variableDeclarationListNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_variableDeclarationListNoIn != NULL) stream_variableDeclarationListNoIn->free(stream_variableDeclarationListNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, forStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//Emerson.g:271:1: forInStatement : 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static EmersonParser_forInStatement_return
forInStatement(pEmersonParser ctx)
{   
    EmersonParser_forInStatement_return retval;
    ANTLR3_UINT32 forInStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal149;
    pANTLR3_COMMON_TOKEN    LTERM150;
    pANTLR3_COMMON_TOKEN    char_literal151;
    pANTLR3_COMMON_TOKEN    LTERM152;
    pANTLR3_COMMON_TOKEN    LTERM154;
    pANTLR3_COMMON_TOKEN    string_literal155;
    pANTLR3_COMMON_TOKEN    LTERM156;
    pANTLR3_COMMON_TOKEN    LTERM158;
    pANTLR3_COMMON_TOKEN    char_literal159;
    pANTLR3_COMMON_TOKEN    LTERM160;
    EmersonParser_forInStatementInitialiserPart_return forInStatementInitialiserPart153;
    #undef	RETURN_TYPE_forInStatementInitialiserPart153
    #define	RETURN_TYPE_forInStatementInitialiserPart153 EmersonParser_forInStatementInitialiserPart_return

    EmersonParser_expression_return expression157;
    #undef	RETURN_TYPE_expression157
    #define	RETURN_TYPE_expression157 EmersonParser_expression_return

    EmersonParser_statement_return statement161;
    #undef	RETURN_TYPE_statement161
    #define	RETURN_TYPE_statement161 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal149_tree;
    pANTLR3_BASE_TREE LTERM150_tree;
    pANTLR3_BASE_TREE char_literal151_tree;
    pANTLR3_BASE_TREE LTERM152_tree;
    pANTLR3_BASE_TREE LTERM154_tree;
    pANTLR3_BASE_TREE string_literal155_tree;
    pANTLR3_BASE_TREE LTERM156_tree;
    pANTLR3_BASE_TREE LTERM158_tree;
    pANTLR3_BASE_TREE char_literal159_tree;
    pANTLR3_BASE_TREE LTERM160_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forInStatementInitialiserPart;
    /* Initialize rule variables
     */
    forInStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal149       = NULL;
    LTERM150       = NULL;
    char_literal151       = NULL;
    LTERM152       = NULL;
    LTERM154       = NULL;
    string_literal155       = NULL;
    LTERM156       = NULL;
    LTERM158       = NULL;
    char_literal159       = NULL;
    LTERM160       = NULL;
    forInStatementInitialiserPart153.tree = NULL;

    expression157.tree = NULL;

    statement161.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal149_tree   = NULL;
    LTERM150_tree   = NULL;
    char_literal151_tree   = NULL;
    LTERM152_tree   = NULL;
    LTERM154_tree   = NULL;
    string_literal155_tree   = NULL;
    LTERM156_tree   = NULL;
    LTERM158_tree   = NULL;
    char_literal159_tree   = NULL;
    LTERM160_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forInStatementInitialiserPart   = NULL;
    #define CREATE_stream_forInStatementInitialiserPart  if (stream_forInStatementInitialiserPart == NULL) {stream_forInStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forInStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:272:2: ( 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//Emerson.g:272:4: 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal149 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_forInStatement1943); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, string_literal149, NULL); }


            // .//Emerson.g:272:10: ( LTERM )*

            for (;;)
            {
                int alt76=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA76_0 = LA(1);
                    if ( (LA76_0 == LTERM) ) 
                    {
                        alt76=1;
                    }

                }
                switch (alt76) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM150 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1945); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM150, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop76;	/* break out of the loop */
            	    break;
                }
            }
            loop76: ; /* Jump out to here if this rule does not match */

            char_literal151 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_forInStatement1948); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal151, NULL); }


            // .//Emerson.g:272:21: ( LTERM )*

            for (;;)
            {
                int alt77=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA77_0 = LA(1);
                    if ( (LA77_0 == LTERM) ) 
                    {
                        alt77=1;
                    }

                }
                switch (alt77) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM152 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1950); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM152, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement1953);
            forInStatementInitialiserPart153=forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_forInStatementInitialiserPart; stream_forInStatementInitialiserPart->add(stream_forInStatementInitialiserPart, forInStatementInitialiserPart153.tree, NULL); }

            // .//Emerson.g:272:58: ( LTERM )*

            for (;;)
            {
                int alt78=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA78_0 = LA(1);
                    if ( (LA78_0 == LTERM) ) 
                    {
                        alt78=1;
                    }

                }
                switch (alt78) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM154 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1955); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM154, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop78;	/* break out of the loop */
            	    break;
                }
            }
            loop78: ; /* Jump out to here if this rule does not match */

            string_literal155 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_forInStatement1958); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal155, NULL); }


            // .//Emerson.g:272:70: ( LTERM )*

            for (;;)
            {
                int alt79=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA79_0 = LA(1);
                    if ( (LA79_0 == LTERM) ) 
                    {
                        alt79=1;
                    }

                }
                switch (alt79) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM156 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1960); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM156, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop79;	/* break out of the loop */
            	    break;
                }
            }
            loop79: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_forInStatement1963);
            expression157=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression157.tree, NULL); }

            // .//Emerson.g:272:88: ( LTERM )*

            for (;;)
            {
                int alt80=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA80_0 = LA(1);
                    if ( (LA80_0 == LTERM) ) 
                    {
                        alt80=1;
                    }

                }
                switch (alt80) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM158 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1965); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM158, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop80;	/* break out of the loop */
            	    break;
                }
            }
            loop80: ; /* Jump out to here if this rule does not match */

            char_literal159 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forInStatement1968); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal159, NULL); }


            // .//Emerson.g:272:99: ( LTERM )*

            for (;;)
            {
                int alt81=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA81_0 = LA(1);
                    if ( (LA81_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA81_2 = LA(2);
                            if ( (synpred95_Emerson(ctx)) ) 
                            {
                                alt81=1;
                            }

                        }
                    }

                }
                switch (alt81) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM160 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1970); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM160, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop81;	/* break out of the loop */
            	    break;
                }
            }
            loop81: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forInStatement1973);
            statement161=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement161.tree, NULL); }

             
            /* AST REWRITE
             * elements          : forInStatementInitialiserPart, statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 272:116: -> ^( FORIN forInStatementInitialiserPart expression statement )
            	{
            	    // .//Emerson.g:272:119: ^( FORIN forInStatementInitialiserPart expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORIN, (pANTLR3_UINT8)"FORIN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_forInStatementInitialiserPart == NULL ? NULL : stream_forInStatementInitialiserPart->nextTree(stream_forInStatementInitialiserPart));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forInStatementInitialiserPart != NULL) stream_forInStatementInitialiserPart->free(stream_forInStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, forInStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//Emerson.g:275:1: forInStatementInitialiserPart : ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) );
 */
static EmersonParser_forInStatementInitialiserPart_return
forInStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forInStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forInStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal163;
    pANTLR3_COMMON_TOKEN    LTERM164;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression162;
    #undef	RETURN_TYPE_leftHandSideExpression162
    #define	RETURN_TYPE_leftHandSideExpression162 EmersonParser_leftHandSideExpression_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn165;
    #undef	RETURN_TYPE_variableDeclarationNoIn165
    #define	RETURN_TYPE_variableDeclarationNoIn165 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE string_literal163_tree;
    pANTLR3_BASE_TREE LTERM164_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    forInStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal163       = NULL;
    LTERM164       = NULL;
    leftHandSideExpression162.tree = NULL;

    variableDeclarationNoIn165.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal163_tree   = NULL;
    LTERM164_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:276:2: ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt83;

            alt83=2;


            {
                int LA83_0 = LA(1);
                if ( (((LA83_0 >= Identifier) && (LA83_0 <= StringLiteral)) || ((LA83_0 >= 139) && (LA83_0 <= 140)) || LA83_0 == 143 || ((LA83_0 >= 166) && (LA83_0 <= 167)) || LA83_0 == 191 || ((LA83_0 >= 208) && (LA83_0 <= 212))) ) 
                {
                    alt83=1;
                }
                else if ( (LA83_0 == 146) ) 
                {
                    alt83=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 83;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt83) 
            {
        	case 1:
        	    // .//Emerson.g:276:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1997);
        	        leftHandSideExpression162=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression162.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 276:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:277:4: 'var' ( LTERM )* variableDeclarationNoIn
        	    {
        	        string_literal163 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_forInStatementInitialiserPart2006); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, string_literal163, NULL); }


        	        // .//Emerson.g:277:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt82=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA82_0 = LA(1);
        	                if ( (LA82_0 == LTERM) ) 
        	                {
        	                    alt82=1;
        	                }

        	            }
        	            switch (alt82) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM164 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatementInitialiserPart2008); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforInStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM164, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop82;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop82: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2011);
        	        variableDeclarationNoIn165=variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn165.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 277:41: -> ^( VAR variableDeclarationNoIn )
        	        	{
        	        	    // .//Emerson.g:277:44: ^( VAR variableDeclarationNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, forInStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//Emerson.g:280:1: continueStatement : 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) ;
 */
static EmersonParser_continueStatement_return
continueStatement(pEmersonParser ctx)
{   
    EmersonParser_continueStatement_return retval;
    ANTLR3_UINT32 continueStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal166;
    pANTLR3_COMMON_TOKEN    Identifier167;
    pANTLR3_COMMON_TOKEN    LTERM168;
    pANTLR3_COMMON_TOKEN    char_literal169;

    pANTLR3_BASE_TREE string_literal166_tree;
    pANTLR3_BASE_TREE Identifier167_tree;
    pANTLR3_BASE_TREE LTERM168_tree;
    pANTLR3_BASE_TREE char_literal169_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;

    /* Initialize rule variables
     */
    continueStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal166       = NULL;
    Identifier167       = NULL;
    LTERM168       = NULL;
    char_literal169       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal166_tree   = NULL;
    Identifier167_tree   = NULL;
    LTERM168_tree   = NULL;
    char_literal169_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:281:2: ( 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) )
        // .//Emerson.g:281:4: 'continue' ( Identifier )? ( LTERM | ';' )
        {
            string_literal166 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_continueStatement2030); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal166, NULL); }


            // .//Emerson.g:281:15: ( Identifier )?
            {
                int alt84=2;
                {
                    int LA84_0 = LA(1);
                    if ( (LA84_0 == Identifier) ) 
                    {
                        alt84=1;
                    }
                }
                switch (alt84) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier167 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2032); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier167, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:281:27: ( LTERM | ';' )
            {
                int alt85=2;

                {
                    int LA85_0 = LA(1);
                    if ( (LA85_0 == LTERM) ) 
                    {
                        alt85=1;
                    }
                    else if ( (LA85_0 == 145) ) 
                    {
                        alt85=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 85;
                        EXCEPTION->state        = 0;


                        goto rulecontinueStatementEx;
                    }
                }
                switch (alt85) 
                {
            	case 1:
            	    // .//Emerson.g:281:28: LTERM
            	    {
            	        LTERM168 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_continueStatement2036); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM168, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:281:36: ';'
            	    {
            	        char_literal169 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_continueStatement2040); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal169, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 281:42: -> ^( CONTINUE ( Identifier )? )
            	{
            	    // .//Emerson.g:281:45: ^( CONTINUE ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE, (pANTLR3_UINT8)"CONTINUE"), root_1));

            	        // .//Emerson.g:281:56: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_154 != NULL) stream_154->free(stream_154);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, continueStatement_StartIndex); }
    return retval;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//Emerson.g:284:1: breakStatement : 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) ;
 */
static EmersonParser_breakStatement_return
breakStatement(pEmersonParser ctx)
{   
    EmersonParser_breakStatement_return retval;
    ANTLR3_UINT32 breakStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal170;
    pANTLR3_COMMON_TOKEN    Identifier171;
    pANTLR3_COMMON_TOKEN    LTERM172;
    pANTLR3_COMMON_TOKEN    char_literal173;

    pANTLR3_BASE_TREE string_literal170_tree;
    pANTLR3_BASE_TREE Identifier171_tree;
    pANTLR3_BASE_TREE LTERM172_tree;
    pANTLR3_BASE_TREE char_literal173_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;

    /* Initialize rule variables
     */
    breakStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal170       = NULL;
    Identifier171       = NULL;
    LTERM172       = NULL;
    char_literal173       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal170_tree   = NULL;
    Identifier171_tree   = NULL;
    LTERM172_tree   = NULL;
    char_literal173_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:285:2: ( 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) )
        // .//Emerson.g:285:4: 'break' ( Identifier )? ( LTERM | ';' )
        {
            string_literal170 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_breakStatement2062); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal170, NULL); }


            // .//Emerson.g:285:12: ( Identifier )?
            {
                int alt86=2;
                {
                    int LA86_0 = LA(1);
                    if ( (LA86_0 == Identifier) ) 
                    {
                        alt86=1;
                    }
                }
                switch (alt86) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier171 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2064); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier171, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:285:24: ( LTERM | ';' )
            {
                int alt87=2;

                {
                    int LA87_0 = LA(1);
                    if ( (LA87_0 == LTERM) ) 
                    {
                        alt87=1;
                    }
                    else if ( (LA87_0 == 145) ) 
                    {
                        alt87=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 87;
                        EXCEPTION->state        = 0;


                        goto rulebreakStatementEx;
                    }
                }
                switch (alt87) 
                {
            	case 1:
            	    // .//Emerson.g:285:25: LTERM
            	    {
            	        LTERM172 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_breakStatement2068); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM172, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:285:33: ';'
            	    {
            	        char_literal173 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_breakStatement2072); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal173, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 285:38: -> ^( BREAK ( Identifier )? )
            	{
            	    // .//Emerson.g:285:41: ^( BREAK ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK, (pANTLR3_UINT8)"BREAK"), root_1));

            	        // .//Emerson.g:285:49: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_155 != NULL) stream_155->free(stream_155);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, breakStatement_StartIndex); }
    return retval;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//Emerson.g:288:1: returnStatement : 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) ;
 */
static EmersonParser_returnStatement_return
returnStatement(pEmersonParser ctx)
{   
    EmersonParser_returnStatement_return retval;
    ANTLR3_UINT32 returnStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal174;
    pANTLR3_COMMON_TOKEN    LTERM176;
    pANTLR3_COMMON_TOKEN    char_literal177;
    EmersonParser_expression_return expression175;
    #undef	RETURN_TYPE_expression175
    #define	RETURN_TYPE_expression175 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal174_tree;
    pANTLR3_BASE_TREE LTERM176_tree;
    pANTLR3_BASE_TREE char_literal177_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    returnStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal174       = NULL;
    LTERM176       = NULL;
    char_literal177       = NULL;
    expression175.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal174_tree   = NULL;
    LTERM176_tree   = NULL;
    char_literal177_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:289:2: ( 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) )
        // .//Emerson.g:289:4: 'return' ( expression )? ( LTERM | ';' )
        {
            string_literal174 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_returnStatement2093); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal174, NULL); }


            // .//Emerson.g:289:13: ( expression )?
            {
                int alt88=2;
                {
                    int LA88_0 = LA(1);
                    if ( (((LA88_0 >= Identifier) && (LA88_0 <= StringLiteral)) || ((LA88_0 >= 139) && (LA88_0 <= 140)) || LA88_0 == 143 || ((LA88_0 >= 166) && (LA88_0 <= 167)) || LA88_0 == 191 || ((LA88_0 >= 196) && (LA88_0 <= 197)) || ((LA88_0 >= 201) && (LA88_0 <= 212))) ) 
                    {
                        alt88=1;
                    }
                }
                switch (alt88) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2095);
            	        expression175=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression175.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:289:25: ( LTERM | ';' )
            {
                int alt89=2;

                {
                    int LA89_0 = LA(1);
                    if ( (LA89_0 == LTERM) ) 
                    {
                        alt89=1;
                    }
                    else if ( (LA89_0 == 145) ) 
                    {
                        alt89=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 89;
                        EXCEPTION->state        = 0;


                        goto rulereturnStatementEx;
                    }
                }
                switch (alt89) 
                {
            	case 1:
            	    // .//Emerson.g:289:26: LTERM
            	    {
            	        LTERM176 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_returnStatement2099); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM176, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:289:34: ';'
            	    {
            	        char_literal177 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_returnStatement2103); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal177, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 289:39: -> ^( RETURN ( expression )? )
            	{
            	    // .//Emerson.g:289:42: ^( RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        // .//Emerson.g:289:51: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, returnStatement_StartIndex); }
    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//Emerson.g:292:1: withStatement : 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) ;
 */
static EmersonParser_withStatement_return
withStatement(pEmersonParser ctx)
{   
    EmersonParser_withStatement_return retval;
    ANTLR3_UINT32 withStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal178;
    pANTLR3_COMMON_TOKEN    LTERM179;
    pANTLR3_COMMON_TOKEN    char_literal180;
    pANTLR3_COMMON_TOKEN    LTERM181;
    pANTLR3_COMMON_TOKEN    LTERM183;
    pANTLR3_COMMON_TOKEN    char_literal184;
    pANTLR3_COMMON_TOKEN    LTERM185;
    EmersonParser_expression_return expression182;
    #undef	RETURN_TYPE_expression182
    #define	RETURN_TYPE_expression182 EmersonParser_expression_return

    EmersonParser_statement_return statement186;
    #undef	RETURN_TYPE_statement186
    #define	RETURN_TYPE_statement186 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal178_tree;
    pANTLR3_BASE_TREE LTERM179_tree;
    pANTLR3_BASE_TREE char_literal180_tree;
    pANTLR3_BASE_TREE LTERM181_tree;
    pANTLR3_BASE_TREE LTERM183_tree;
    pANTLR3_BASE_TREE char_literal184_tree;
    pANTLR3_BASE_TREE LTERM185_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    withStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal178       = NULL;
    LTERM179       = NULL;
    char_literal180       = NULL;
    LTERM181       = NULL;
    LTERM183       = NULL;
    char_literal184       = NULL;
    LTERM185       = NULL;
    expression182.tree = NULL;

    statement186.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal178_tree   = NULL;
    LTERM179_tree   = NULL;
    char_literal180_tree   = NULL;
    LTERM181_tree   = NULL;
    LTERM183_tree   = NULL;
    char_literal184_tree   = NULL;
    LTERM185_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:293:2: ( 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) )
        // .//Emerson.g:293:4: 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal178 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_withStatement2125); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal178, NULL); }


            // .//Emerson.g:293:11: ( LTERM )*

            for (;;)
            {
                int alt90=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA90_0 = LA(1);
                    if ( (LA90_0 == LTERM) ) 
                    {
                        alt90=1;
                    }

                }
                switch (alt90) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM179 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2127); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM179, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop90;	/* break out of the loop */
            	    break;
                }
            }
            loop90: ; /* Jump out to here if this rule does not match */

            char_literal180 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_withStatement2130); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal180, NULL); }


            // .//Emerson.g:293:22: ( LTERM )*

            for (;;)
            {
                int alt91=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA91_0 = LA(1);
                    if ( (LA91_0 == LTERM) ) 
                    {
                        alt91=1;
                    }

                }
                switch (alt91) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM181 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2132); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM181, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop91;	/* break out of the loop */
            	    break;
                }
            }
            loop91: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_withStatement2135);
            expression182=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression182.tree, NULL); }

            // .//Emerson.g:293:40: ( LTERM )*

            for (;;)
            {
                int alt92=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA92_0 = LA(1);
                    if ( (LA92_0 == LTERM) ) 
                    {
                        alt92=1;
                    }

                }
                switch (alt92) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM183 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2137); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM183, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop92;	/* break out of the loop */
            	    break;
                }
            }
            loop92: ; /* Jump out to here if this rule does not match */

            char_literal184 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_withStatement2140); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal184, NULL); }


            // .//Emerson.g:293:51: ( LTERM )*

            for (;;)
            {
                int alt93=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA93_0 = LA(1);
                    if ( (LA93_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA93_2 = LA(2);
                            if ( (synpred107_Emerson(ctx)) ) 
                            {
                                alt93=1;
                            }

                        }
                    }

                }
                switch (alt93) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM185 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2142); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM185, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop93;	/* break out of the loop */
            	    break;
                }
            }
            loop93: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_withStatement2145);
            statement186=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement186.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 293:68: -> ^( WITH expression statement )
            	{
            	    // .//Emerson.g:293:71: ^( WITH expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WITH, (pANTLR3_UINT8)"WITH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, withStatement_StartIndex); }
    return retval;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start switchStatement
 * .//Emerson.g:297:1: switchStatement : 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) ;
 */
static EmersonParser_switchStatement_return
switchStatement(pEmersonParser ctx)
{   
    EmersonParser_switchStatement_return retval;
    ANTLR3_UINT32 switchStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal187;
    pANTLR3_COMMON_TOKEN    LTERM188;
    pANTLR3_COMMON_TOKEN    char_literal189;
    pANTLR3_COMMON_TOKEN    LTERM190;
    pANTLR3_COMMON_TOKEN    LTERM192;
    pANTLR3_COMMON_TOKEN    char_literal193;
    pANTLR3_COMMON_TOKEN    LTERM194;
    EmersonParser_expression_return expression191;
    #undef	RETURN_TYPE_expression191
    #define	RETURN_TYPE_expression191 EmersonParser_expression_return

    EmersonParser_caseBlock_return caseBlock195;
    #undef	RETURN_TYPE_caseBlock195
    #define	RETURN_TYPE_caseBlock195 EmersonParser_caseBlock_return

    pANTLR3_BASE_TREE string_literal187_tree;
    pANTLR3_BASE_TREE LTERM188_tree;
    pANTLR3_BASE_TREE char_literal189_tree;
    pANTLR3_BASE_TREE LTERM190_tree;
    pANTLR3_BASE_TREE LTERM192_tree;
    pANTLR3_BASE_TREE char_literal193_tree;
    pANTLR3_BASE_TREE LTERM194_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseBlock;
    /* Initialize rule variables
     */
    switchStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal187       = NULL;
    LTERM188       = NULL;
    char_literal189       = NULL;
    LTERM190       = NULL;
    LTERM192       = NULL;
    char_literal193       = NULL;
    LTERM194       = NULL;
    expression191.tree = NULL;

    caseBlock195.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal187_tree   = NULL;
    LTERM188_tree   = NULL;
    char_literal189_tree   = NULL;
    LTERM190_tree   = NULL;
    LTERM192_tree   = NULL;
    char_literal193_tree   = NULL;
    LTERM194_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_caseBlock   = NULL;
    #define CREATE_stream_caseBlock  if (stream_caseBlock == NULL) {stream_caseBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:298:2: ( 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) )
        // .//Emerson.g:298:4: 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock
        {
            string_literal187 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_switchStatement2168); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, string_literal187, NULL); }


            // .//Emerson.g:298:13: ( LTERM )*

            for (;;)
            {
                int alt94=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA94_0 = LA(1);
                    if ( (LA94_0 == LTERM) ) 
                    {
                        alt94=1;
                    }

                }
                switch (alt94) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM188 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2170); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM188, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop94;	/* break out of the loop */
            	    break;
                }
            }
            loop94: ; /* Jump out to here if this rule does not match */

            char_literal189 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_switchStatement2173); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal189, NULL); }


            // .//Emerson.g:298:24: ( LTERM )*

            for (;;)
            {
                int alt95=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA95_0 = LA(1);
                    if ( (LA95_0 == LTERM) ) 
                    {
                        alt95=1;
                    }

                }
                switch (alt95) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM190 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2175); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM190, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop95;	/* break out of the loop */
            	    break;
                }
            }
            loop95: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2178);
            expression191=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression191.tree, NULL); }

            // .//Emerson.g:298:42: ( LTERM )*

            for (;;)
            {
                int alt96=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA96_0 = LA(1);
                    if ( (LA96_0 == LTERM) ) 
                    {
                        alt96=1;
                    }

                }
                switch (alt96) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM192 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2180); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM192, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop96;	/* break out of the loop */
            	    break;
                }
            }
            loop96: ; /* Jump out to here if this rule does not match */

            char_literal193 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_switchStatement2183); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal193, NULL); }


            // .//Emerson.g:298:53: ( LTERM )*

            for (;;)
            {
                int alt97=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA97_0 = LA(1);
                    if ( (LA97_0 == LTERM) ) 
                    {
                        alt97=1;
                    }

                }
                switch (alt97) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM194 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2185); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM194, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop97;	/* break out of the loop */
            	    break;
                }
            }
            loop97: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2188);
            caseBlock195=caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_caseBlock; stream_caseBlock->add(stream_caseBlock, caseBlock195.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, caseBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 298:70: -> ^( SWITCH expression caseBlock )
            	{
            	    // .//Emerson.g:298:73: ^( SWITCH expression caseBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH, (pANTLR3_UINT8)"SWITCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_caseBlock == NULL ? NULL : stream_caseBlock->nextTree(stream_caseBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_caseBlock != NULL) stream_caseBlock->free(stream_caseBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, switchStatement_StartIndex); }
    return retval;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//Emerson.g:302:1: caseBlock : ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) );
 */
static EmersonParser_caseBlock_return
caseBlock(pEmersonParser ctx)
{   
    EmersonParser_caseBlock_return retval;
    ANTLR3_UINT32 caseBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal196;
    pANTLR3_COMMON_TOKEN    LTERM197;
    pANTLR3_COMMON_TOKEN    LTERM198;
    pANTLR3_COMMON_TOKEN    char_literal199;
    pANTLR3_COMMON_TOKEN    char_literal200;
    pANTLR3_COMMON_TOKEN    LTERM201;
    pANTLR3_COMMON_TOKEN    LTERM202;
    pANTLR3_COMMON_TOKEN    char_literal203;
    EmersonParser_caseClause_return case1;
    #undef	RETURN_TYPE_case1
    #define	RETURN_TYPE_case1 EmersonParser_caseClause_return

    EmersonParser_defaultClause_return def;
    #undef	RETURN_TYPE_def
    #define	RETURN_TYPE_def EmersonParser_defaultClause_return

    pANTLR3_BASE_TREE char_literal196_tree;
    pANTLR3_BASE_TREE LTERM197_tree;
    pANTLR3_BASE_TREE LTERM198_tree;
    pANTLR3_BASE_TREE char_literal199_tree;
    pANTLR3_BASE_TREE char_literal200_tree;
    pANTLR3_BASE_TREE LTERM201_tree;
    pANTLR3_BASE_TREE LTERM202_tree;
    pANTLR3_BASE_TREE char_literal203_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal196       = NULL;
    LTERM197       = NULL;
    LTERM198       = NULL;
    char_literal199       = NULL;
    char_literal200       = NULL;
    LTERM201       = NULL;
    LTERM202       = NULL;
    char_literal203       = NULL;
    case1.tree = NULL;

    def.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal196_tree   = NULL;
    LTERM197_tree   = NULL;
    LTERM198_tree   = NULL;
    char_literal199_tree   = NULL;
    char_literal200_tree   = NULL;
    LTERM201_tree   = NULL;
    LTERM202_tree   = NULL;
    char_literal203_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:303:9: ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) )
            
            ANTLR3_UINT32 alt103;

            alt103=2;

            alt103 = cdfa103.predict(ctx, RECOGNIZER, ISTREAM, &cdfa103);
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt103) 
            {
        	case 1:
        	    // .//Emerson.g:303:12: '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}'
        	    {
        	        char_literal196 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_caseBlock2219); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal196, NULL); }


        	        // .//Emerson.g:303:16: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt98=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA98_0 = LA(1);
        	                if ( (LA98_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA98_2 = LA(2);
        	                        if ( (synpred112_Emerson(ctx)) ) 
        	                        {
        	                            alt98=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt98) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM197 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2221); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM197, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop98;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop98: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:303:28: (case1= caseClause )?
        	        {
        	            int alt99=2;
        	            {
        	                int LA99_0 = LA(1);
        	                if ( (LA99_0 == 159) ) 
        	                {
        	                    alt99=1;
        	                }
        	            }
        	            switch (alt99) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: case1= caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2226);
        	        	        case1=caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case1.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:303:41: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt100=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA100_0 = LA(1);
        	                if ( (LA100_0 == LTERM) ) 
        	                {
        	                    alt100=1;
        	                }

        	            }
        	            switch (alt100) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM198 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2229); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM198, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop100;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop100: ; /* Jump out to here if this rule does not match */

        	        char_literal199 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_caseBlock2232); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal199, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : case1
        	         * token labels      : 
        	         * rule labels       : retval, case1
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case1;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_case1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case1", case1.tree != NULL ? case1.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 303:52: -> ^( CASE_BLOCK ( $case1)? )
        	        	{
        	        	    // .//Emerson.g:303:55: ^( CASE_BLOCK ( $case1)? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE_BLOCK, (pANTLR3_UINT8)"CASE_BLOCK"), root_1));

        	        	        // .//Emerson.g:303:68: ( $case1)?
        	        	        {
        	        	        	if ( (stream_case1 != NULL && stream_case1->hasNext(stream_case1))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_case1 == NULL ? NULL : stream_case1->nextTree(stream_case1));

        	        	        	}
        	        	        	if ( stream_case1 != NULL) stream_case1->reset(stream_case1);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_case1 != NULL) stream_case1->free(stream_case1);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:304:12: '{' ( LTERM )* def= defaultClause ( LTERM )* '}'
        	    {
        	        char_literal200 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_caseBlock2255); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal200, NULL); }


        	        // .//Emerson.g:304:16: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt101=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA101_0 = LA(1);
        	                if ( (LA101_0 == LTERM) ) 
        	                {
        	                    alt101=1;
        	                }

        	            }
        	            switch (alt101) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM201 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2257); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM201, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop101;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop101: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2262);
        	        def=defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, def.tree, NULL); }

        	        // .//Emerson.g:304:41: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt102=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA102_0 = LA(1);
        	                if ( (LA102_0 == LTERM) ) 
        	                {
        	                    alt102=1;
        	                }

        	            }
        	            switch (alt102) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM202 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2264); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM202, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop102;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop102: ; /* Jump out to here if this rule does not match */

        	        char_literal203 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_caseBlock2267); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal203, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : def
        	         * token labels      : 
        	         * rule labels       : retval, def
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_def;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_def=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token def", def.tree != NULL ? def.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 304:52: -> ^( CASE_BLOCK $def)
        	        	{
        	        	    // .//Emerson.g:304:55: ^( CASE_BLOCK $def)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE_BLOCK, (pANTLR3_UINT8)"CASE_BLOCK"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_def == NULL ? NULL : stream_def->nextTree(stream_def));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_def != NULL) stream_def->free(stream_def);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, caseBlock_StartIndex); }
    return retval;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//Emerson.g:309:1: caseClause : ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause -> ^( CASE $e1 ( statementList )? defaultClause ) | 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClause )? -> ^( CASE $e1 ( statementList )? ( caseClause )? ) );
 */
static EmersonParser_caseClause_return
caseClause(pEmersonParser ctx)
{   
    EmersonParser_caseClause_return retval;
    ANTLR3_UINT32 caseClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal204;
    pANTLR3_COMMON_TOKEN    LTERM205;
    pANTLR3_COMMON_TOKEN    LTERM206;
    pANTLR3_COMMON_TOKEN    char_literal207;
    pANTLR3_COMMON_TOKEN    LTERM208;
    pANTLR3_COMMON_TOKEN    LTERM210;
    pANTLR3_COMMON_TOKEN    string_literal212;
    pANTLR3_COMMON_TOKEN    LTERM213;
    pANTLR3_COMMON_TOKEN    LTERM214;
    pANTLR3_COMMON_TOKEN    char_literal215;
    pANTLR3_COMMON_TOKEN    LTERM216;
    pANTLR3_COMMON_TOKEN    LTERM218;
    EmersonParser_ternaryExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_ternaryExpression_return

    EmersonParser_statementList_return statementList209;
    #undef	RETURN_TYPE_statementList209
    #define	RETURN_TYPE_statementList209 EmersonParser_statementList_return

    EmersonParser_defaultClause_return defaultClause211;
    #undef	RETURN_TYPE_defaultClause211
    #define	RETURN_TYPE_defaultClause211 EmersonParser_defaultClause_return

    EmersonParser_statementList_return statementList217;
    #undef	RETURN_TYPE_statementList217
    #define	RETURN_TYPE_statementList217 EmersonParser_statementList_return

    EmersonParser_caseClause_return caseClause219;
    #undef	RETURN_TYPE_caseClause219
    #define	RETURN_TYPE_caseClause219 EmersonParser_caseClause_return

    pANTLR3_BASE_TREE string_literal204_tree;
    pANTLR3_BASE_TREE LTERM205_tree;
    pANTLR3_BASE_TREE LTERM206_tree;
    pANTLR3_BASE_TREE char_literal207_tree;
    pANTLR3_BASE_TREE LTERM208_tree;
    pANTLR3_BASE_TREE LTERM210_tree;
    pANTLR3_BASE_TREE string_literal212_tree;
    pANTLR3_BASE_TREE LTERM213_tree;
    pANTLR3_BASE_TREE LTERM214_tree;
    pANTLR3_BASE_TREE char_literal215_tree;
    pANTLR3_BASE_TREE LTERM216_tree;
    pANTLR3_BASE_TREE LTERM218_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal204       = NULL;
    LTERM205       = NULL;
    LTERM206       = NULL;
    char_literal207       = NULL;
    LTERM208       = NULL;
    LTERM210       = NULL;
    string_literal212       = NULL;
    LTERM213       = NULL;
    LTERM214       = NULL;
    char_literal215       = NULL;
    LTERM216       = NULL;
    LTERM218       = NULL;
    e1.tree = NULL;

    statementList209.tree = NULL;

    defaultClause211.tree = NULL;

    statementList217.tree = NULL;

    caseClause219.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal204_tree   = NULL;
    LTERM205_tree   = NULL;
    LTERM206_tree   = NULL;
    char_literal207_tree   = NULL;
    LTERM208_tree   = NULL;
    LTERM210_tree   = NULL;
    string_literal212_tree   = NULL;
    LTERM213_tree   = NULL;
    LTERM214_tree   = NULL;
    char_literal215_tree   = NULL;
    LTERM216_tree   = NULL;
    LTERM218_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_ternaryExpression   = NULL;
    #define CREATE_stream_ternaryExpression  if (stream_ternaryExpression == NULL) {stream_ternaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpression"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:310:2: ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause -> ^( CASE $e1 ( statementList )? defaultClause ) | 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClause )? -> ^( CASE $e1 ( statementList )? ( caseClause )? ) )
            
            ANTLR3_UINT32 alt115;

            alt115=2;


            {
                int LA115_0 = LA(1);
                if ( (LA115_0 == 159) ) 
                {

                    {
                        int LA115_1 = LA(2);
                        if ( (synpred123_Emerson(ctx)) ) 
                        {
                            alt115=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt115=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 115;
                            EXCEPTION->state        = 1;


                            goto rulecaseClauseEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 115;
                    EXCEPTION->state        = 0;


                    goto rulecaseClauseEx;
                }
            }
            switch (alt115) 
            {
        	case 1:
        	    // .//Emerson.g:310:3: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause
        	    {
        	        string_literal204 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_caseClause2311); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, string_literal204, NULL); }


        	        // .//Emerson.g:310:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt104=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA104_0 = LA(1);
        	                if ( (LA104_0 == LTERM) ) 
        	                {
        	                    alt104=1;
        	                }

        	            }
        	            switch (alt104) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM205 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2313); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM205, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop104;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop104: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2318);
        	        e1=ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e1.tree, NULL); }

        	        // .//Emerson.g:310:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt105=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA105_0 = LA(1);
        	                if ( (LA105_0 == LTERM) ) 
        	                {
        	                    alt105=1;
        	                }

        	            }
        	            switch (alt105) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM206 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2320); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM206, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop105;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop105: ; /* Jump out to here if this rule does not match */

        	        char_literal207 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_caseClause2323); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal207, NULL); }


        	        // .//Emerson.g:310:49: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt106=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA106_0 = LA(1);
        	                if ( (LA106_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA106_1 = LA(2);
        	                        if ( (synpred120_Emerson(ctx)) ) 
        	                        {
        	                            alt106=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt106) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM208 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2325); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM208, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop106;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop106: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:310:56: ( statementList )?
        	        {
        	            int alt107=2;
        	            alt107 = cdfa107.predict(ctx, RECOGNIZER, ISTREAM, &cdfa107);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseClauseEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt107) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2328);
        	        	        statementList209=statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList209.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:310:71: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt108=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA108_0 = LA(1);
        	                if ( (LA108_0 == LTERM) ) 
        	                {
        	                    alt108=1;
        	                }

        	            }
        	            switch (alt108) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM210 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2331); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM210, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop108;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop108: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseClause2334);
        	        defaultClause211=defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, defaultClause211.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : defaultClause, e1, statementList
        	         * token labels      : 
        	         * rule labels       : retval, e1
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 310:92: -> ^( CASE $e1 ( statementList )? defaultClause )
        	        	{
        	        	    // .//Emerson.g:310:95: ^( CASE $e1 ( statementList )? defaultClause )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        // .//Emerson.g:310:107: ( statementList )?
        	        	        {
        	        	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	        	        	}
        	        	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_defaultClause == NULL ? NULL : stream_defaultClause->nextTree(stream_defaultClause));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:311:11: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClause )?
        	    {
        	        string_literal212 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_caseClause2361); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, string_literal212, NULL); }


        	        // .//Emerson.g:311:18: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt109=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA109_0 = LA(1);
        	                if ( (LA109_0 == LTERM) ) 
        	                {
        	                    alt109=1;
        	                }

        	            }
        	            switch (alt109) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM213 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2363); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM213, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop109;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop109: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2368);
        	        e1=ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e1.tree, NULL); }

        	        // .//Emerson.g:311:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt110=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA110_0 = LA(1);
        	                if ( (LA110_0 == LTERM) ) 
        	                {
        	                    alt110=1;
        	                }

        	            }
        	            switch (alt110) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM214 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2370); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM214, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop110;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop110: ; /* Jump out to here if this rule does not match */

        	        char_literal215 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_caseClause2373); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal215, NULL); }


        	        // .//Emerson.g:311:57: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt111=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA111_0 = LA(1);
        	                if ( (LA111_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA111_1 = LA(2);
        	                        if ( (synpred126_Emerson(ctx)) ) 
        	                        {
        	                            alt111=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt111) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM216 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2375); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM216, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop111;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop111: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:311:64: ( statementList )?
        	        {
        	            int alt112=2;
        	            alt112 = cdfa112.predict(ctx, RECOGNIZER, ISTREAM, &cdfa112);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseClauseEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt112) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2378);
        	        	        statementList217=statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList217.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:311:79: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt113=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA113_0 = LA(1);
        	                if ( (LA113_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA113_2 = LA(2);
        	                        if ( (synpred128_Emerson(ctx)) ) 
        	                        {
        	                            alt113=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt113) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM218 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2381); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM218, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop113;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop113: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:311:86: ( caseClause )?
        	        {
        	            int alt114=2;
        	            {
        	                int LA114_0 = LA(1);
        	                if ( (LA114_0 == 159) ) 
        	                {
        	                    alt114=1;
        	                }
        	            }
        	            switch (alt114) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseClause2384);
        	        	        caseClause219=caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, caseClause219.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e1, statementList, caseClause
        	         * token labels      : 
        	         * rule labels       : retval, e1
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 311:98: -> ^( CASE $e1 ( statementList )? ( caseClause )? )
        	        	{
        	        	    // .//Emerson.g:311:101: ^( CASE $e1 ( statementList )? ( caseClause )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        // .//Emerson.g:311:113: ( statementList )?
        	        	        {
        	        	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	        	        	}
        	        	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

        	        	        }
        	        	        // .//Emerson.g:311:128: ( caseClause )?
        	        	        {
        	        	        	if ( (stream_caseClause != NULL && stream_caseClause->hasNext(stream_caseClause))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_caseClause == NULL ? NULL : stream_caseClause->nextTree(stream_caseClause));

        	        	        	}
        	        	        	if ( stream_caseClause != NULL) stream_caseClause->reset(stream_caseClause);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_ternaryExpression != NULL) stream_ternaryExpression->free(stream_ternaryExpression);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, caseClause_StartIndex); }
    return retval;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//Emerson.g:314:1: defaultClause : 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static EmersonParser_defaultClause_return
defaultClause(pEmersonParser ctx)
{   
    EmersonParser_defaultClause_return retval;
    ANTLR3_UINT32 defaultClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal220;
    pANTLR3_COMMON_TOKEN    LTERM221;
    pANTLR3_COMMON_TOKEN    char_literal222;
    pANTLR3_COMMON_TOKEN    LTERM223;
    pANTLR3_COMMON_TOKEN    LTERM225;
    EmersonParser_statementList_return statementList224;
    #undef	RETURN_TYPE_statementList224
    #define	RETURN_TYPE_statementList224 EmersonParser_statementList_return

    EmersonParser_caseClauseSeenDefault_return caseClauseSeenDefault226;
    #undef	RETURN_TYPE_caseClauseSeenDefault226
    #define	RETURN_TYPE_caseClauseSeenDefault226 EmersonParser_caseClauseSeenDefault_return

    pANTLR3_BASE_TREE string_literal220_tree;
    pANTLR3_BASE_TREE LTERM221_tree;
    pANTLR3_BASE_TREE char_literal222_tree;
    pANTLR3_BASE_TREE LTERM223_tree;
    pANTLR3_BASE_TREE LTERM225_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClauseSeenDefault;
    /* Initialize rule variables
     */
    defaultClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal220       = NULL;
    LTERM221       = NULL;
    char_literal222       = NULL;
    LTERM223       = NULL;
    LTERM225       = NULL;
    statementList224.tree = NULL;

    caseClauseSeenDefault226.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal220_tree   = NULL;
    LTERM221_tree   = NULL;
    char_literal222_tree   = NULL;
    LTERM223_tree   = NULL;
    LTERM225_tree   = NULL;

    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }
    stream_caseClauseSeenDefault   = NULL;
    #define CREATE_stream_caseClauseSeenDefault  if (stream_caseClauseSeenDefault == NULL) {stream_caseClauseSeenDefault = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClauseSeenDefault"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:315:2: ( 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//Emerson.g:315:4: 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )?
        {
            string_literal220 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_defaultClause2413); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal220, NULL); }


            // .//Emerson.g:315:14: ( LTERM )*

            for (;;)
            {
                int alt116=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA116_0 = LA(1);
                    if ( (LA116_0 == LTERM) ) 
                    {
                        alt116=1;
                    }

                }
                switch (alt116) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM221 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2415); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM221, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop116;	/* break out of the loop */
            	    break;
                }
            }
            loop116: ; /* Jump out to here if this rule does not match */

            char_literal222 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_defaultClause2418); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal222, NULL); }


            // .//Emerson.g:315:25: ( LTERM )*

            for (;;)
            {
                int alt117=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA117_0 = LA(1);
                    if ( (LA117_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA117_1 = LA(2);
                            if ( (synpred131_Emerson(ctx)) ) 
                            {
                                alt117=1;
                            }

                        }
                    }

                }
                switch (alt117) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM223 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2420); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM223, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop117;	/* break out of the loop */
            	    break;
                }
            }
            loop117: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:315:32: ( statementList )?
            {
                int alt118=2;
                alt118 = cdfa118.predict(ctx, RECOGNIZER, ISTREAM, &cdfa118);
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt118) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause2423);
            	        statementList224=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList224.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:315:47: ( LTERM )*

            for (;;)
            {
                int alt119=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA119_0 = LA(1);
                    if ( (LA119_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA119_2 = LA(2);
                            if ( (synpred133_Emerson(ctx)) ) 
                            {
                                alt119=1;
                            }

                        }
                    }

                }
                switch (alt119) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM225 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2426); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM225, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop119;	/* break out of the loop */
            	    break;
                }
            }
            loop119: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:315:54: ( caseClauseSeenDefault )?
            {
                int alt120=2;
                {
                    int LA120_0 = LA(1);
                    if ( (LA120_0 == 159) ) 
                    {
                        alt120=1;
                    }
                }
                switch (alt120) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_defaultClause2429);
            	        caseClauseSeenDefault226=caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClauseSeenDefault; stream_caseClauseSeenDefault->add(stream_caseClauseSeenDefault, caseClauseSeenDefault226.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : caseClauseSeenDefault, statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 315:77: -> ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
            	{
            	    // .//Emerson.g:315:80: ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"), root_1));

            	        // .//Emerson.g:315:90: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }
            	        // .//Emerson.g:315:105: ( caseClauseSeenDefault )?
            	        {
            	        	if ( (stream_caseClauseSeenDefault != NULL && stream_caseClauseSeenDefault->hasNext(stream_caseClauseSeenDefault))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_caseClauseSeenDefault == NULL ? NULL : stream_caseClauseSeenDefault->nextTree(stream_caseClauseSeenDefault));

            	        	}
            	        	if ( stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->reset(stream_caseClauseSeenDefault);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
        if (stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->free(stream_caseClauseSeenDefault);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, defaultClause_StartIndex); }
    return retval;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start caseClauseSeenDefault
 * .//Emerson.g:319:1: caseClauseSeenDefault : 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static EmersonParser_caseClauseSeenDefault_return
caseClauseSeenDefault(pEmersonParser ctx)
{   
    EmersonParser_caseClauseSeenDefault_return retval;
    ANTLR3_UINT32 caseClauseSeenDefault_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal227;
    pANTLR3_COMMON_TOKEN    LTERM228;
    pANTLR3_COMMON_TOKEN    LTERM229;
    pANTLR3_COMMON_TOKEN    char_literal230;
    pANTLR3_COMMON_TOKEN    LTERM231;
    pANTLR3_COMMON_TOKEN    LTERM233;
    EmersonParser_ternaryExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_ternaryExpression_return

    EmersonParser_statementList_return statementList232;
    #undef	RETURN_TYPE_statementList232
    #define	RETURN_TYPE_statementList232 EmersonParser_statementList_return

    EmersonParser_caseClauseSeenDefault_return caseClauseSeenDefault234;
    #undef	RETURN_TYPE_caseClauseSeenDefault234
    #define	RETURN_TYPE_caseClauseSeenDefault234 EmersonParser_caseClauseSeenDefault_return

    pANTLR3_BASE_TREE string_literal227_tree;
    pANTLR3_BASE_TREE LTERM228_tree;
    pANTLR3_BASE_TREE LTERM229_tree;
    pANTLR3_BASE_TREE char_literal230_tree;
    pANTLR3_BASE_TREE LTERM231_tree;
    pANTLR3_BASE_TREE LTERM233_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClauseSeenDefault;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpression;
    /* Initialize rule variables
     */
    caseClauseSeenDefault_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal227       = NULL;
    LTERM228       = NULL;
    LTERM229       = NULL;
    char_literal230       = NULL;
    LTERM231       = NULL;
    LTERM233       = NULL;
    e1.tree = NULL;

    statementList232.tree = NULL;

    caseClauseSeenDefault234.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal227_tree   = NULL;
    LTERM228_tree   = NULL;
    LTERM229_tree   = NULL;
    char_literal230_tree   = NULL;
    LTERM231_tree   = NULL;
    LTERM233_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }
    stream_caseClauseSeenDefault   = NULL;
    #define CREATE_stream_caseClauseSeenDefault  if (stream_caseClauseSeenDefault == NULL) {stream_caseClauseSeenDefault = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClauseSeenDefault"); }
    stream_ternaryExpression   = NULL;
    #define CREATE_stream_ternaryExpression  if (stream_ternaryExpression == NULL) {stream_ternaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:320:9: ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//Emerson.g:320:11: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )?
        {
            string_literal227 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_caseClauseSeenDefault2469); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, string_literal227, NULL); }


            // .//Emerson.g:320:18: ( LTERM )*

            for (;;)
            {
                int alt121=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA121_0 = LA(1);
                    if ( (LA121_0 == LTERM) ) 
                    {
                        alt121=1;
                    }

                }
                switch (alt121) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM228 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2471); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM228, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop121;	/* break out of the loop */
            	    break;
                }
            }
            loop121: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClauseSeenDefault2476);
            e1=ternaryExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e1.tree, NULL); }

            // .//Emerson.g:320:46: ( LTERM )*

            for (;;)
            {
                int alt122=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA122_0 = LA(1);
                    if ( (LA122_0 == LTERM) ) 
                    {
                        alt122=1;
                    }

                }
                switch (alt122) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM229 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2478); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM229, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop122;	/* break out of the loop */
            	    break;
                }
            }
            loop122: ; /* Jump out to here if this rule does not match */

            char_literal230 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_caseClauseSeenDefault2481); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal230, NULL); }


            // .//Emerson.g:320:57: ( LTERM )*

            for (;;)
            {
                int alt123=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA123_0 = LA(1);
                    if ( (LA123_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA123_1 = LA(2);
                            if ( (synpred137_Emerson(ctx)) ) 
                            {
                                alt123=1;
                            }

                        }
                    }

                }
                switch (alt123) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM231 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2483); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM231, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop123;	/* break out of the loop */
            	    break;
                }
            }
            loop123: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:320:64: ( statementList )?
            {
                int alt124=2;
                alt124 = cdfa124.predict(ctx, RECOGNIZER, ISTREAM, &cdfa124);
                if  (HASEXCEPTION())
                {
                    goto rulecaseClauseSeenDefaultEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt124) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClauseSeenDefault2486);
            	        statementList232=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList232.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:320:79: ( LTERM )*

            for (;;)
            {
                int alt125=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA125_0 = LA(1);
                    if ( (LA125_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA125_2 = LA(2);
                            if ( (synpred139_Emerson(ctx)) ) 
                            {
                                alt125=1;
                            }

                        }
                    }

                }
                switch (alt125) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM233 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2489); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM233, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop125;	/* break out of the loop */
            	    break;
                }
            }
            loop125: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:320:86: ( caseClauseSeenDefault )?
            {
                int alt126=2;
                {
                    int LA126_0 = LA(1);
                    if ( (LA126_0 == 159) ) 
                    {
                        alt126=1;
                    }
                }
                switch (alt126) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2492);
            	        caseClauseSeenDefault234=caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClauseSeenDefault; stream_caseClauseSeenDefault->add(stream_caseClauseSeenDefault, caseClauseSeenDefault234.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList, caseClauseSeenDefault, e1
             * token labels      : 
             * rule labels       : retval, e1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 320:109: -> ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? )
            	{
            	    // .//Emerson.g:320:112: ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        // .//Emerson.g:320:124: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }
            	        // .//Emerson.g:320:139: ( caseClauseSeenDefault )?
            	        {
            	        	if ( (stream_caseClauseSeenDefault != NULL && stream_caseClauseSeenDefault->hasNext(stream_caseClauseSeenDefault))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_caseClauseSeenDefault == NULL ? NULL : stream_caseClauseSeenDefault->nextTree(stream_caseClauseSeenDefault));

            	        	}
            	        	if ( stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->reset(stream_caseClauseSeenDefault);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseSeenDefaultEx; /* Prevent compiler warnings */
    rulecaseClauseSeenDefaultEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
        if (stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->free(stream_caseClauseSeenDefault);
        if (stream_ternaryExpression != NULL) stream_ternaryExpression->free(stream_ternaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, caseClauseSeenDefault_StartIndex); }
    return retval;
}
/* $ANTLR end caseClauseSeenDefault */

/** 
 * $ANTLR start throwStatement
 * .//Emerson.g:326:1: throwStatement : 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) ;
 */
static EmersonParser_throwStatement_return
throwStatement(pEmersonParser ctx)
{   
    EmersonParser_throwStatement_return retval;
    ANTLR3_UINT32 throwStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal235;
    pANTLR3_COMMON_TOKEN    LTERM237;
    pANTLR3_COMMON_TOKEN    char_literal238;
    EmersonParser_expression_return expression236;
    #undef	RETURN_TYPE_expression236
    #define	RETURN_TYPE_expression236 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal235_tree;
    pANTLR3_BASE_TREE LTERM237_tree;
    pANTLR3_BASE_TREE char_literal238_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    throwStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal235       = NULL;
    LTERM237       = NULL;
    char_literal238       = NULL;
    expression236.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal235_tree   = NULL;
    LTERM237_tree   = NULL;
    char_literal238_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:327:2: ( 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) )
        // .//Emerson.g:327:4: 'throw' expression ( LTERM | ';' )
        {
            string_literal235 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_throwStatement2554); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, string_literal235, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_throwStatement2556);
            expression236=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression236.tree, NULL); }

            // .//Emerson.g:327:23: ( LTERM | ';' )
            {
                int alt127=2;

                {
                    int LA127_0 = LA(1);
                    if ( (LA127_0 == LTERM) ) 
                    {
                        alt127=1;
                    }
                    else if ( (LA127_0 == 145) ) 
                    {
                        alt127=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 127;
                        EXCEPTION->state        = 0;


                        goto rulethrowStatementEx;
                    }
                }
                switch (alt127) 
                {
            	case 1:
            	    // .//Emerson.g:327:24: LTERM
            	    {
            	        LTERM237 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_throwStatement2559); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM237, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:327:32: ';'
            	    {
            	        char_literal238 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_throwStatement2563); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal238, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 327:37: -> ^( THROW expression )
            	{
            	    // .//Emerson.g:327:40: ^( THROW expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THROW, (pANTLR3_UINT8)"THROW"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, throwStatement_StartIndex); }
    return retval;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//Emerson.g:331:1: tryStatement : 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock -> ^( TRY statementBlock catchFinallyBlock ) ;
 */
static EmersonParser_tryStatement_return
tryStatement(pEmersonParser ctx)
{   
    EmersonParser_tryStatement_return retval;
    ANTLR3_UINT32 tryStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal239;
    pANTLR3_COMMON_TOKEN    LTERM240;
    pANTLR3_COMMON_TOKEN    LTERM242;
    EmersonParser_statementBlock_return statementBlock241;
    #undef	RETURN_TYPE_statementBlock241
    #define	RETURN_TYPE_statementBlock241 EmersonParser_statementBlock_return

    EmersonParser_catchFinallyBlock_return catchFinallyBlock243;
    #undef	RETURN_TYPE_catchFinallyBlock243
    #define	RETURN_TYPE_catchFinallyBlock243 EmersonParser_catchFinallyBlock_return

    pANTLR3_BASE_TREE string_literal239_tree;
    pANTLR3_BASE_TREE LTERM240_tree;
    pANTLR3_BASE_TREE LTERM242_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_163;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchFinallyBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    tryStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal239       = NULL;
    LTERM240       = NULL;
    LTERM242       = NULL;
    statementBlock241.tree = NULL;

    catchFinallyBlock243.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal239_tree   = NULL;
    LTERM240_tree   = NULL;
    LTERM242_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_163   = NULL;
    #define CREATE_stream_163  if (stream_163 == NULL) {stream_163 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 163"); } 
    stream_catchFinallyBlock   = NULL;
    #define CREATE_stream_catchFinallyBlock  if (stream_catchFinallyBlock == NULL) {stream_catchFinallyBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchFinallyBlock"); }
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:332:9: ( 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock -> ^( TRY statementBlock catchFinallyBlock ) )
        // .//Emerson.g:332:11: 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock
        {
            string_literal239 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_tryStatement2591); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal239, NULL); }


            // .//Emerson.g:332:17: ( LTERM )*

            for (;;)
            {
                int alt128=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA128_0 = LA(1);
                    if ( (LA128_0 == LTERM) ) 
                    {
                        alt128=1;
                    }

                }
                switch (alt128) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM240 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2593); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM240, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop128;	/* break out of the loop */
            	    break;
                }
            }
            loop128: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement2596);
            statementBlock241=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock241.tree, NULL); }

            // .//Emerson.g:332:39: ( LTERM )*

            for (;;)
            {
                int alt129=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA129_0 = LA(1);
                    if ( (LA129_0 == LTERM) ) 
                    {
                        alt129=1;
                    }

                }
                switch (alt129) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM242 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2598); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM242, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop129;	/* break out of the loop */
            	    break;
                }
            }
            loop129: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_catchFinallyBlock_in_tryStatement2601);
            catchFinallyBlock243=catchFinallyBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_catchFinallyBlock; stream_catchFinallyBlock->add(stream_catchFinallyBlock, catchFinallyBlock243.tree, NULL); }

             
            /* AST REWRITE
             * elements          : catchFinallyBlock, statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 332:64: -> ^( TRY statementBlock catchFinallyBlock )
            	{
            	    // .//Emerson.g:332:67: ^( TRY statementBlock catchFinallyBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRY, (pANTLR3_UINT8)"TRY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_catchFinallyBlock == NULL ? NULL : stream_catchFinallyBlock->nextTree(stream_catchFinallyBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_163 != NULL) stream_163->free(stream_163);
        if (stream_catchFinallyBlock != NULL) stream_catchFinallyBlock->free(stream_catchFinallyBlock);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, tryStatement_StartIndex); }
    return retval;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchFinallyBlock
 * .//Emerson.g:335:1: catchFinallyBlock : ( catchBlock ( LTERM )* ( finallyBlock )? -> catchBlock ( finallyBlock )? | finallyBlock -> finallyBlock );
 */
static EmersonParser_catchFinallyBlock_return
catchFinallyBlock(pEmersonParser ctx)
{   
    EmersonParser_catchFinallyBlock_return retval;
    ANTLR3_UINT32 catchFinallyBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM245;
    EmersonParser_catchBlock_return catchBlock244;
    #undef	RETURN_TYPE_catchBlock244
    #define	RETURN_TYPE_catchBlock244 EmersonParser_catchBlock_return

    EmersonParser_finallyBlock_return finallyBlock246;
    #undef	RETURN_TYPE_finallyBlock246
    #define	RETURN_TYPE_finallyBlock246 EmersonParser_finallyBlock_return

    EmersonParser_finallyBlock_return finallyBlock247;
    #undef	RETURN_TYPE_finallyBlock247
    #define	RETURN_TYPE_finallyBlock247 EmersonParser_finallyBlock_return

    pANTLR3_BASE_TREE LTERM245_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_finallyBlock;
    /* Initialize rule variables
     */
    catchFinallyBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM245       = NULL;
    catchBlock244.tree = NULL;

    finallyBlock246.tree = NULL;

    finallyBlock247.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM245_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_catchBlock   = NULL;
    #define CREATE_stream_catchBlock  if (stream_catchBlock == NULL) {stream_catchBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchBlock"); }
    stream_finallyBlock   = NULL;
    #define CREATE_stream_finallyBlock  if (stream_finallyBlock == NULL) {stream_finallyBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule finallyBlock"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:336:9: ( catchBlock ( LTERM )* ( finallyBlock )? -> catchBlock ( finallyBlock )? | finallyBlock -> finallyBlock )
            
            ANTLR3_UINT32 alt132;

            alt132=2;


            {
                int LA132_0 = LA(1);
                if ( (LA132_0 == 164) ) 
                {
                    alt132=1;
                }
                else if ( (LA132_0 == 165) ) 
                {
                    alt132=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 132;
                    EXCEPTION->state        = 0;


                    goto rulecatchFinallyBlockEx;
                }
            }
            switch (alt132) 
            {
        	case 1:
        	    // .//Emerson.g:336:11: catchBlock ( LTERM )* ( finallyBlock )?
        	    {
        	        FOLLOWPUSH(FOLLOW_catchBlock_in_catchFinallyBlock2636);
        	        catchBlock244=catchBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_catchBlock; stream_catchBlock->add(stream_catchBlock, catchBlock244.tree, NULL); }

        	        // .//Emerson.g:336:22: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt130=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA130_0 = LA(1);
        	                if ( (LA130_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA130_2 = LA(2);
        	                        if ( (synpred144_Emerson(ctx)) ) 
        	                        {
        	                            alt130=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt130) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM245 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchFinallyBlock2638); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM245, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop130;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop130: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:336:29: ( finallyBlock )?
        	        {
        	            int alt131=2;
        	            {
        	                int LA131_0 = LA(1);
        	                if ( (LA131_0 == 165) ) 
        	                {
        	                    alt131=1;
        	                }
        	            }
        	            switch (alt131) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: finallyBlock
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock2641);
        	        	        finallyBlock246=finallyBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyBlock; stream_finallyBlock->add(stream_finallyBlock, finallyBlock246.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : finallyBlock, catchBlock
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 336:44: -> catchBlock ( finallyBlock )?
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_catchBlock == NULL ? NULL : stream_catchBlock->nextTree(stream_catchBlock));
        	        	    // .//Emerson.g:336:58: ( finallyBlock )?
        	        	    {
        	        	    	if ( (stream_finallyBlock != NULL && stream_finallyBlock->hasNext(stream_finallyBlock))  )
        	        	    	{
        	        	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_finallyBlock == NULL ? NULL : stream_finallyBlock->nextTree(stream_finallyBlock));

        	        	    	}
        	        	    	if ( stream_finallyBlock != NULL) stream_finallyBlock->reset(stream_finallyBlock);

        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:337:11: finallyBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock2662);
        	        finallyBlock247=finallyBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyBlock; stream_finallyBlock->add(stream_finallyBlock, finallyBlock247.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : finallyBlock
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 337:44: -> finallyBlock
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_finallyBlock == NULL ? NULL : stream_finallyBlock->nextTree(stream_finallyBlock));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchFinallyBlockEx; /* Prevent compiler warnings */
    rulecatchFinallyBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_catchBlock != NULL) stream_catchBlock->free(stream_catchBlock);
        if (stream_finallyBlock != NULL) stream_finallyBlock->free(stream_finallyBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, catchFinallyBlock_StartIndex); }
    return retval;
}
/* $ANTLR end catchFinallyBlock */

/** 
 * $ANTLR start catchBlock
 * .//Emerson.g:340:1: catchBlock : 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) ;
 */
static EmersonParser_catchBlock_return
catchBlock(pEmersonParser ctx)
{   
    EmersonParser_catchBlock_return retval;
    ANTLR3_UINT32 catchBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal248;
    pANTLR3_COMMON_TOKEN    LTERM249;
    pANTLR3_COMMON_TOKEN    char_literal250;
    pANTLR3_COMMON_TOKEN    LTERM251;
    pANTLR3_COMMON_TOKEN    Identifier252;
    pANTLR3_COMMON_TOKEN    LTERM253;
    pANTLR3_COMMON_TOKEN    char_literal254;
    pANTLR3_COMMON_TOKEN    LTERM255;
    EmersonParser_statementBlock_return statementBlock256;
    #undef	RETURN_TYPE_statementBlock256
    #define	RETURN_TYPE_statementBlock256 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal248_tree;
    pANTLR3_BASE_TREE LTERM249_tree;
    pANTLR3_BASE_TREE char_literal250_tree;
    pANTLR3_BASE_TREE LTERM251_tree;
    pANTLR3_BASE_TREE Identifier252_tree;
    pANTLR3_BASE_TREE LTERM253_tree;
    pANTLR3_BASE_TREE char_literal254_tree;
    pANTLR3_BASE_TREE LTERM255_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    catchBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal248       = NULL;
    LTERM249       = NULL;
    char_literal250       = NULL;
    LTERM251       = NULL;
    Identifier252       = NULL;
    LTERM253       = NULL;
    char_literal254       = NULL;
    LTERM255       = NULL;
    statementBlock256.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal248_tree   = NULL;
    LTERM249_tree   = NULL;
    char_literal250_tree   = NULL;
    LTERM251_tree   = NULL;
    Identifier252_tree   = NULL;
    LTERM253_tree   = NULL;
    char_literal254_tree   = NULL;
    LTERM255_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:341:9: ( 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) )
        // .//Emerson.g:341:11: 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock
        {
            string_literal248 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_catchBlock2711); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal248, NULL); }


            // .//Emerson.g:341:19: ( LTERM )*

            for (;;)
            {
                int alt133=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA133_0 = LA(1);
                    if ( (LA133_0 == LTERM) ) 
                    {
                        alt133=1;
                    }

                }
                switch (alt133) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM249 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2713); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM249, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop133;	/* break out of the loop */
            	    break;
                }
            }
            loop133: ; /* Jump out to here if this rule does not match */

            char_literal250 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_catchBlock2716); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal250, NULL); }


            // .//Emerson.g:341:30: ( LTERM )*

            for (;;)
            {
                int alt134=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA134_0 = LA(1);
                    if ( (LA134_0 == LTERM) ) 
                    {
                        alt134=1;
                    }

                }
                switch (alt134) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM251 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2718); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM251, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop134;	/* break out of the loop */
            	    break;
                }
            }
            loop134: ; /* Jump out to here if this rule does not match */

            Identifier252 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_catchBlock2721); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier252, NULL); }


            // .//Emerson.g:341:48: ( LTERM )*

            for (;;)
            {
                int alt135=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA135_0 = LA(1);
                    if ( (LA135_0 == LTERM) ) 
                    {
                        alt135=1;
                    }

                }
                switch (alt135) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM253 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2723); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM253, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop135;	/* break out of the loop */
            	    break;
                }
            }
            loop135: ; /* Jump out to here if this rule does not match */

            char_literal254 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_catchBlock2726); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal254, NULL); }


            // .//Emerson.g:341:59: ( LTERM )*

            for (;;)
            {
                int alt136=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA136_0 = LA(1);
                    if ( (LA136_0 == LTERM) ) 
                    {
                        alt136=1;
                    }

                }
                switch (alt136) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM255 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2728); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM255, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop136;	/* break out of the loop */
            	    break;
                }
            }
            loop136: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_catchBlock2731);
            statementBlock256=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock256.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 341:81: -> ^( CATCH Identifier statementBlock )
            	{
            	    // .//Emerson.g:341:84: ^( CATCH Identifier statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CATCH, (pANTLR3_UINT8)"CATCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchBlockEx; /* Prevent compiler warnings */
    rulecatchBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, catchBlock_StartIndex); }
    return retval;
}
/* $ANTLR end catchBlock */

/** 
 * $ANTLR start finallyBlock
 * .//Emerson.g:344:1: finallyBlock : 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) ;
 */
static EmersonParser_finallyBlock_return
finallyBlock(pEmersonParser ctx)
{   
    EmersonParser_finallyBlock_return retval;
    ANTLR3_UINT32 finallyBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal257;
    pANTLR3_COMMON_TOKEN    LTERM258;
    EmersonParser_statementBlock_return statementBlock259;
    #undef	RETURN_TYPE_statementBlock259
    #define	RETURN_TYPE_statementBlock259 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal257_tree;
    pANTLR3_BASE_TREE LTERM258_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    finallyBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal257       = NULL;
    LTERM258       = NULL;
    statementBlock259.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal257_tree   = NULL;
    LTERM258_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:345:9: ( 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) )
        // .//Emerson.g:345:11: 'finally' ( LTERM )* statementBlock
        {
            string_literal257 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_finallyBlock2767); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, string_literal257, NULL); }


            // .//Emerson.g:345:21: ( LTERM )*

            for (;;)
            {
                int alt137=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA137_0 = LA(1);
                    if ( (LA137_0 == LTERM) ) 
                    {
                        alt137=1;
                    }

                }
                switch (alt137) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM258 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_finallyBlock2769); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefinallyBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM258, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop137;	/* break out of the loop */
            	    break;
                }
            }
            loop137: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyBlock2773);
            statementBlock259=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock259.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 345:45: -> ^( FINALLY statementBlock )
            	{
            	    // .//Emerson.g:345:48: ^( FINALLY statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FINALLY, (pANTLR3_UINT8)"FINALLY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyBlockEx; /* Prevent compiler warnings */
    rulefinallyBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, finallyBlock_StartIndex); }
    return retval;
}
/* $ANTLR end finallyBlock */

/** 
 * $ANTLR start memAndCallExpression
 * .//Emerson.g:350:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );
 */
static EmersonParser_memAndCallExpression_return
memAndCallExpression(pEmersonParser ctx)
{   
    EmersonParser_memAndCallExpression_return retval;
    ANTLR3_UINT32 memAndCallExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression260;
    #undef	RETURN_TYPE_callExpression260
    #define	RETURN_TYPE_callExpression260 EmersonParser_callExpression_return

    EmersonParser_memberExpression_return memberExpression261;
    #undef	RETURN_TYPE_memberExpression261
    #define	RETURN_TYPE_memberExpression261 EmersonParser_memberExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    /* Initialize rule variables
     */
    memAndCallExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression260.tree = NULL;

    memberExpression261.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:351:9: ( callExpression -> callExpression | memberExpression -> memberExpression )
            
            ANTLR3_UINT32 alt138;

            alt138=2;

            alt138 = cdfa138.predict(ctx, RECOGNIZER, ISTREAM, &cdfa138);
            if  (HASEXCEPTION())
            {
                goto rulememAndCallExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt138) 
            {
        	case 1:
        	    // .//Emerson.g:351:11: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_memAndCallExpression2817);
        	        callExpression260=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression260.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 351:26: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:352:11: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memAndCallExpression2833);
        	        memberExpression261=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression261.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 352:28: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememAndCallExpressionEx; /* Prevent compiler warnings */
    rulememAndCallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, memAndCallExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memAndCallExpression */

/** 
 * $ANTLR start expression
 * .//Emerson.g:358:1: expression : assignmentExpression ( ',' ( LTERM )* assignmentExpression )* -> ^( EXPR assignmentExpression ( assignmentExpression )* ) ;
 */
static EmersonParser_expression_return
expression(pEmersonParser ctx)
{   
    EmersonParser_expression_return retval;
    ANTLR3_UINT32 expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal263;
    pANTLR3_COMMON_TOKEN    LTERM264;
    EmersonParser_assignmentExpression_return assignmentExpression262;
    #undef	RETURN_TYPE_assignmentExpression262
    #define	RETURN_TYPE_assignmentExpression262 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression265;
    #undef	RETURN_TYPE_assignmentExpression265
    #define	RETURN_TYPE_assignmentExpression265 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal263_tree;
    pANTLR3_BASE_TREE LTERM264_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal263       = NULL;
    LTERM264       = NULL;
    assignmentExpression262.tree = NULL;

    assignmentExpression265.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal263_tree   = NULL;
    LTERM264_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:359:9: ( assignmentExpression ( ',' ( LTERM )* assignmentExpression )* -> ^( EXPR assignmentExpression ( assignmentExpression )* ) )
        // .//Emerson.g:359:11: assignmentExpression ( ',' ( LTERM )* assignmentExpression )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2873);
            assignmentExpression262=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression262.tree, NULL); }

            // .//Emerson.g:359:32: ( ',' ( LTERM )* assignmentExpression )*

            for (;;)
            {
                int alt140=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA140_0 = LA(1);
                    if ( (LA140_0 == 142) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA140_2 = LA(2);
                            if ( (synpred154_Emerson(ctx)) ) 
                            {
                                alt140=1;
                            }

                        }
                    }

                }
                switch (alt140) 
                {
            	case 1:
            	    // .//Emerson.g:359:34: ',' ( LTERM )* assignmentExpression
            	    {
            	        char_literal263 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_expression2877); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal263, NULL); }


            	        // .//Emerson.g:359:38: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt139=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA139_0 = LA(1);
            	                if ( (LA139_0 == LTERM) ) 
            	                {
            	                    alt139=1;
            	                }

            	            }
            	            switch (alt139) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM264 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2879); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM264, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop139;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop139: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2882);
            	        assignmentExpression265=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression265.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop140;	/* break out of the loop */
            	    break;
                }
            }
            loop140: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpression, assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 359:68: -> ^( EXPR assignmentExpression ( assignmentExpression )* )
            	{
            	    // .//Emerson.g:359:71: ^( EXPR assignmentExpression ( assignmentExpression )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR, (pANTLR3_UINT8)"EXPR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
            	        // .//Emerson.g:359:99: ( assignmentExpression )*
            	        {
            	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, expression_StartIndex); }
    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//Emerson.g:362:1: expressionNoIn : assignmentExpressionNoIn ( ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* ) ;
 */
static EmersonParser_expressionNoIn_return
expressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_expressionNoIn_return retval;
    ANTLR3_UINT32 expressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal267;
    pANTLR3_COMMON_TOKEN    LTERM268;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn266;
    #undef	RETURN_TYPE_assignmentExpressionNoIn266
    #define	RETURN_TYPE_assignmentExpressionNoIn266 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn269;
    #undef	RETURN_TYPE_assignmentExpressionNoIn269
    #define	RETURN_TYPE_assignmentExpressionNoIn269 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE char_literal267_tree;
    pANTLR3_BASE_TREE LTERM268_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    expressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal267       = NULL;
    LTERM268       = NULL;
    assignmentExpressionNoIn266.tree = NULL;

    assignmentExpressionNoIn269.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal267_tree   = NULL;
    LTERM268_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:363:9: ( assignmentExpressionNoIn ( ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* ) )
        // .//Emerson.g:363:11: assignmentExpressionNoIn ( ',' ( LTERM )* assignmentExpressionNoIn )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2920);
            assignmentExpressionNoIn266=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn266.tree, NULL); }

            // .//Emerson.g:363:36: ( ',' ( LTERM )* assignmentExpressionNoIn )*

            for (;;)
            {
                int alt142=2;
                alt142 = cdfa142.predict(ctx, RECOGNIZER, ISTREAM, &cdfa142);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt142) 
                {
            	case 1:
            	    // .//Emerson.g:363:38: ',' ( LTERM )* assignmentExpressionNoIn
            	    {
            	        char_literal267 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_expressionNoIn2924); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal267, NULL); }


            	        // .//Emerson.g:363:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt141=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA141_0 = LA(1);
            	                if ( (LA141_0 == LTERM) ) 
            	                {
            	                    alt141=1;
            	                }

            	            }
            	            switch (alt141) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM268 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2926); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM268, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop141;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop141: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2929);
            	        assignmentExpressionNoIn269=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn269.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop142;	/* break out of the loop */
            	    break;
                }
            }
            loop142: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn, assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 363:76: -> ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* )
            	{
            	    // .//Emerson.g:363:79: ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_NO_IN, (pANTLR3_UINT8)"EXPR_NO_IN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));
            	        // .//Emerson.g:363:117: ( assignmentExpressionNoIn )*
            	        {
            	        	while ( (stream_assignmentExpressionNoIn != NULL && stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	        	}
            	        	if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->reset(stream_assignmentExpressionNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, expressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//Emerson.g:367:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static EmersonParser_assignmentExpression_return
assignmentExpression(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpression_return retval;
    ANTLR3_UINT32 assignmentExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM272;
    pANTLR3_COMMON_TOKEN    LTERM274;
    EmersonParser_conditionalExpression_return conditionalExpression270;
    #undef	RETURN_TYPE_conditionalExpression270
    #define	RETURN_TYPE_conditionalExpression270 EmersonParser_conditionalExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression271;
    #undef	RETURN_TYPE_leftHandSideExpression271
    #define	RETURN_TYPE_leftHandSideExpression271 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator273;
    #undef	RETURN_TYPE_assignmentOperator273
    #define	RETURN_TYPE_assignmentOperator273 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpression_return assignmentExpression275;
    #undef	RETURN_TYPE_assignmentExpression275
    #define	RETURN_TYPE_assignmentExpression275 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM272_tree;
    pANTLR3_BASE_TREE LTERM274_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    assignmentExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM272       = NULL;
    LTERM274       = NULL;
    conditionalExpression270.tree = NULL;

    leftHandSideExpression271.tree = NULL;

    assignmentOperator273.tree = NULL;

    assignmentExpression275.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM272_tree   = NULL;
    LTERM274_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:368:9: ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt145;

            alt145=2;

            alt145 = cdfa145.predict(ctx, RECOGNIZER, ISTREAM, &cdfa145);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt145) 
            {
        	case 1:
        	    // .//Emerson.g:368:11: conditionalExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression2968);
        	        conditionalExpression270=conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditionalExpression270.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:369:11: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression2980);
        	        leftHandSideExpression271=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression271.tree, NULL); }

        	        // .//Emerson.g:369:34: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt143=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA143_0 = LA(1);
        	                if ( (LA143_0 == LTERM) ) 
        	                {
        	                    alt143=1;
        	                }

        	            }
        	            switch (alt143) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM272 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2982); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM272, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop143;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop143: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpression2985);
        	        assignmentOperator273=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator273.tree, NULL); }

        	        // .//Emerson.g:369:60: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt144=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA144_0 = LA(1);
        	                if ( (LA144_0 == LTERM) ) 
        	                {
        	                    alt144=1;
        	                }

        	            }
        	            switch (alt144) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM274 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2987); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM274, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop144;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop144: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression2990);
        	        assignmentExpression275=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression275.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression, assignmentExpression, assignmentOperator
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 369:88: -> ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	{
        	        	    // .//Emerson.g:369:92: ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, assignmentExpression_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//Emerson.g:372:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static EmersonParser_assignmentExpressionNoIn_return
assignmentExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpressionNoIn_return retval;
    ANTLR3_UINT32 assignmentExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM278;
    pANTLR3_COMMON_TOKEN    LTERM280;
    EmersonParser_conditionalExpressionNoIn_return conditionalExpressionNoIn276;
    #undef	RETURN_TYPE_conditionalExpressionNoIn276
    #define	RETURN_TYPE_conditionalExpressionNoIn276 EmersonParser_conditionalExpressionNoIn_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression277;
    #undef	RETURN_TYPE_leftHandSideExpression277
    #define	RETURN_TYPE_leftHandSideExpression277 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator279;
    #undef	RETURN_TYPE_assignmentOperator279
    #define	RETURN_TYPE_assignmentOperator279 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn281;
    #undef	RETURN_TYPE_assignmentExpressionNoIn281
    #define	RETURN_TYPE_assignmentExpressionNoIn281 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM278_tree;
    pANTLR3_BASE_TREE LTERM280_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    assignmentExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM278       = NULL;
    LTERM280       = NULL;
    conditionalExpressionNoIn276.tree = NULL;

    leftHandSideExpression277.tree = NULL;

    assignmentOperator279.tree = NULL;

    assignmentExpressionNoIn281.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM278_tree   = NULL;
    LTERM280_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:373:9: ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt148;

            alt148=2;

            alt148 = cdfa148.predict(ctx, RECOGNIZER, ISTREAM, &cdfa148);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt148) 
            {
        	case 1:
        	    // .//Emerson.g:373:11: conditionalExpressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3035);
        	        conditionalExpressionNoIn276=conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditionalExpressionNoIn276.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:374:11: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3047);
        	        leftHandSideExpression277=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression277.tree, NULL); }

        	        // .//Emerson.g:374:34: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt146=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA146_0 = LA(1);
        	                if ( (LA146_0 == LTERM) ) 
        	                {
        	                    alt146=1;
        	                }

        	            }
        	            switch (alt146) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM278 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn3049); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM278, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop146;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop146: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3052);
        	        assignmentOperator279=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator279.tree, NULL); }

        	        // .//Emerson.g:374:60: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt147=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA147_0 = LA(1);
        	                if ( (LA147_0 == LTERM) ) 
        	                {
        	                    alt147=1;
        	                }

        	            }
        	            switch (alt147) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM280 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn3054); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM280, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop147;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop147: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3057);
        	        assignmentExpressionNoIn281=assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn281.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentOperator, leftHandSideExpression, assignmentExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 374:92: -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:374:96: ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, assignmentExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//Emerson.g:379:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static EmersonParser_leftHandSideExpression_return
leftHandSideExpression(pEmersonParser ctx)
{   
    EmersonParser_leftHandSideExpression_return retval;
    ANTLR3_UINT32 leftHandSideExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression282;
    #undef	RETURN_TYPE_callExpression282
    #define	RETURN_TYPE_callExpression282 EmersonParser_callExpression_return

    EmersonParser_newExpression_return newExpression283;
    #undef	RETURN_TYPE_newExpression283
    #define	RETURN_TYPE_newExpression283 EmersonParser_newExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    leftHandSideExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression282.tree = NULL;

    newExpression283.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:380:2: ( callExpression -> callExpression | newExpression -> newExpression )
            
            ANTLR3_UINT32 alt149;

            alt149=2;

            alt149 = cdfa149.predict(ctx, RECOGNIZER, ISTREAM, &cdfa149);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt149) 
            {
        	case 1:
        	    // .//Emerson.g:380:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression3105);
        	        callExpression282=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression282.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 380:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:381:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression3114);
        	        newExpression283=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression283.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 381:18: -> newExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, leftHandSideExpression_StartIndex); }
    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//Emerson.g:384:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static EmersonParser_newExpression_return
newExpression(pEmersonParser ctx)
{   
    EmersonParser_newExpression_return retval;
    ANTLR3_UINT32 newExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal285;
    pANTLR3_COMMON_TOKEN    LTERM286;
    EmersonParser_memberExpression_return memberExpression284;
    #undef	RETURN_TYPE_memberExpression284
    #define	RETURN_TYPE_memberExpression284 EmersonParser_memberExpression_return

    EmersonParser_newExpression_return newExpression287;
    #undef	RETURN_TYPE_newExpression287
    #define	RETURN_TYPE_newExpression287 EmersonParser_newExpression_return

    pANTLR3_BASE_TREE string_literal285_tree;
    pANTLR3_BASE_TREE LTERM286_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    newExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal285       = NULL;
    LTERM286       = NULL;
    memberExpression284.tree = NULL;

    newExpression287.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal285_tree   = NULL;
    LTERM286_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:385:2: ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt151;

            alt151=2;

            alt151 = cdfa151.predict(ctx, RECOGNIZER, ISTREAM, &cdfa151);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt151) 
            {
        	case 1:
        	    // .//Emerson.g:385:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression3130);
        	        memberExpression284=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression284.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 385:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:386:4: 'new' ( LTERM )* newExpression
        	    {
        	        string_literal285 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_newExpression3139); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, string_literal285, NULL); }


        	        // .//Emerson.g:386:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt150=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA150_0 = LA(1);
        	                if ( (LA150_0 == LTERM) ) 
        	                {
        	                    alt150=1;
        	                }

        	            }
        	            switch (alt150) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM286 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_newExpression3141); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenewExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM286, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop150;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop150: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression3144);
        	        newExpression287=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression287.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 386:31: -> ^( NEW newExpression )
        	        	{
        	        	    // .//Emerson.g:386:34: ^( NEW newExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, newExpression_StartIndex); }
    return retval;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start indexSuffix1
 * .//Emerson.g:390:1: indexSuffix1 : '[' ( LTERM )* expression ( LTERM )* ']' -> expression ;
 */
static EmersonParser_indexSuffix1_return
indexSuffix1(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix1_return retval;
    ANTLR3_UINT32 indexSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal288;
    pANTLR3_COMMON_TOKEN    LTERM289;
    pANTLR3_COMMON_TOKEN    LTERM291;
    pANTLR3_COMMON_TOKEN    char_literal292;
    EmersonParser_expression_return expression290;
    #undef	RETURN_TYPE_expression290
    #define	RETURN_TYPE_expression290 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal288_tree;
    pANTLR3_BASE_TREE LTERM289_tree;
    pANTLR3_BASE_TREE LTERM291_tree;
    pANTLR3_BASE_TREE char_literal292_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal288       = NULL;
    LTERM289       = NULL;
    LTERM291       = NULL;
    char_literal292       = NULL;
    expression290.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal288_tree   = NULL;
    LTERM289_tree   = NULL;
    LTERM291_tree   = NULL;
    char_literal292_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:391:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> expression )
        // .//Emerson.g:391:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal288 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_indexSuffix13166); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal288, NULL); }


            // .//Emerson.g:391:8: ( LTERM )*

            for (;;)
            {
                int alt152=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA152_0 = LA(1);
                    if ( (LA152_0 == LTERM) ) 
                    {
                        alt152=1;
                    }

                }
                switch (alt152) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM289 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13168); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM289, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop152;	/* break out of the loop */
            	    break;
                }
            }
            loop152: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix13171);
            expression290=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression290.tree, NULL); }

            // .//Emerson.g:391:26: ( LTERM )*

            for (;;)
            {
                int alt153=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA153_0 = LA(1);
                    if ( (LA153_0 == LTERM) ) 
                    {
                        alt153=1;
                    }

                }
                switch (alt153) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM291 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13173); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM291, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop153;	/* break out of the loop */
            	    break;
                }
            }
            loop153: ; /* Jump out to here if this rule does not match */

            char_literal292 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_indexSuffix13176); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, char_literal292, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 391:37: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_167 != NULL) stream_167->free(stream_167);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, indexSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//Emerson.g:395:1: propertyReferenceSuffix1 : '.' ( LTERM )* Identifier -> Identifier ;
 */
static EmersonParser_propertyReferenceSuffix1_return
propertyReferenceSuffix1(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix1_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal293;
    pANTLR3_COMMON_TOKEN    LTERM294;
    pANTLR3_COMMON_TOKEN    Identifier295;

    pANTLR3_BASE_TREE char_literal293_tree;
    pANTLR3_BASE_TREE LTERM294_tree;
    pANTLR3_BASE_TREE Identifier295_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(51)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal293       = NULL;
    LTERM294       = NULL;
    Identifier295       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal293_tree   = NULL;
    LTERM294_tree   = NULL;
    Identifier295_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:396:2: ( '.' ( LTERM )* Identifier -> Identifier )
        // .//Emerson.g:396:4: '.' ( LTERM )* Identifier
        {
            char_literal293 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_propertyReferenceSuffix13193); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, char_literal293, NULL); }


            // .//Emerson.g:396:8: ( LTERM )*

            for (;;)
            {
                int alt154=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA154_0 = LA(1);
                    if ( (LA154_0 == LTERM) ) 
                    {
                        alt154=1;
                    }

                }
                switch (alt154) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM294 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix13195); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM294, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop154;	/* break out of the loop */
            	    break;
                }
            }
            loop154: ; /* Jump out to here if this rule does not match */

            Identifier295 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix13198); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier295, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 396:26: -> Identifier
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(51, propertyReferenceSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//Emerson.g:400:1: memberExpression : ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* );
 */
static EmersonParser_memberExpression_return
memberExpression(pEmersonParser ctx)
{   
    EmersonParser_memberExpression_return retval;
    ANTLR3_UINT32 memberExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM297;
    pANTLR3_COMMON_TOKEN    LTERM299;
    pANTLR3_COMMON_TOKEN    LTERM302;
    pANTLR3_COMMON_TOKEN    LTERM304;
    pANTLR3_COMMON_TOKEN    string_literal306;
    pANTLR3_COMMON_TOKEN    LTERM307;
    pANTLR3_COMMON_TOKEN    LTERM308;
    pANTLR3_COMMON_TOKEN    LTERM310;
    pANTLR3_COMMON_TOKEN    LTERM312;
    EmersonParser_memberExpression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr EmersonParser_memberExpression_return

    EmersonParser_primaryExpression_return primaryExpression296;
    #undef	RETURN_TYPE_primaryExpression296
    #define	RETURN_TYPE_primaryExpression296 EmersonParser_primaryExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1298;
    #undef	RETURN_TYPE_propertyReferenceSuffix1298
    #define	RETURN_TYPE_propertyReferenceSuffix1298 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1300;
    #undef	RETURN_TYPE_indexSuffix1300
    #define	RETURN_TYPE_indexSuffix1300 EmersonParser_indexSuffix1_return

    EmersonParser_functionExpression_return functionExpression301;
    #undef	RETURN_TYPE_functionExpression301
    #define	RETURN_TYPE_functionExpression301 EmersonParser_functionExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1303;
    #undef	RETURN_TYPE_propertyReferenceSuffix1303
    #define	RETURN_TYPE_propertyReferenceSuffix1303 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1305;
    #undef	RETURN_TYPE_indexSuffix1305
    #define	RETURN_TYPE_indexSuffix1305 EmersonParser_indexSuffix1_return

    EmersonParser_arguments_return arguments309;
    #undef	RETURN_TYPE_arguments309
    #define	RETURN_TYPE_arguments309 EmersonParser_arguments_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1311;
    #undef	RETURN_TYPE_propertyReferenceSuffix1311
    #define	RETURN_TYPE_propertyReferenceSuffix1311 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1313;
    #undef	RETURN_TYPE_indexSuffix1313
    #define	RETURN_TYPE_indexSuffix1313 EmersonParser_indexSuffix1_return

    pANTLR3_BASE_TREE LTERM297_tree;
    pANTLR3_BASE_TREE LTERM299_tree;
    pANTLR3_BASE_TREE LTERM302_tree;
    pANTLR3_BASE_TREE LTERM304_tree;
    pANTLR3_BASE_TREE string_literal306_tree;
    pANTLR3_BASE_TREE LTERM307_tree;
    pANTLR3_BASE_TREE LTERM308_tree;
    pANTLR3_BASE_TREE LTERM310_tree;
    pANTLR3_BASE_TREE LTERM312_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primaryExpression;
    /* Initialize rule variables
     */
    memberExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(52)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM297       = NULL;
    LTERM299       = NULL;
    LTERM302       = NULL;
    LTERM304       = NULL;
    string_literal306       = NULL;
    LTERM307       = NULL;
    LTERM308       = NULL;
    LTERM310       = NULL;
    LTERM312       = NULL;
    expr.tree = NULL;

    primaryExpression296.tree = NULL;

    propertyReferenceSuffix1298.tree = NULL;

    indexSuffix1300.tree = NULL;

    functionExpression301.tree = NULL;

    propertyReferenceSuffix1303.tree = NULL;

    indexSuffix1305.tree = NULL;

    arguments309.tree = NULL;

    propertyReferenceSuffix1311.tree = NULL;

    indexSuffix1313.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM297_tree   = NULL;
    LTERM299_tree   = NULL;
    LTERM302_tree   = NULL;
    LTERM304_tree   = NULL;
    string_literal306_tree   = NULL;
    LTERM307_tree   = NULL;
    LTERM308_tree   = NULL;
    LTERM310_tree   = NULL;
    LTERM312_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_functionExpression   = NULL;
    #define CREATE_stream_functionExpression  if (stream_functionExpression == NULL) {stream_functionExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }
    stream_primaryExpression   = NULL;
    #define CREATE_stream_primaryExpression  if (stream_primaryExpression == NULL) {stream_primaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primaryExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:401:2: ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* )
            
            ANTLR3_UINT32 alt166;

            alt166=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 140:
            case 143:
            case 167:
            case 191:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            	{
            		alt166=1;
            	}
                break;
            case 139:
            	{
            		alt166=2;
            	}
                break;
            case 166:
            	{
            		alt166=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 166;
                EXCEPTION->state        = 0;


                goto rulememberExpressionEx;
            }

            switch (alt166) 
            {
        	case 1:
        	    // .//Emerson.g:401:4: ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:401:4: ( primaryExpression -> primaryExpression )
        	        // .//Emerson.g:401:5: primaryExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression3215);
        	            primaryExpression296=primaryExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_primaryExpression; stream_primaryExpression->add(stream_primaryExpression, primaryExpression296.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : primaryExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 401:23: -> primaryExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primaryExpression == NULL ? NULL : stream_primaryExpression->nextTree(stream_primaryExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:401:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt157=3;
        	            alt157 = cdfa157.predict(ctx, RECOGNIZER, ISTREAM, &cdfa157);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt157) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:401:47: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:401:47: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt155=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA155_0 = LA(1);
        	        	                if ( (LA155_0 == LTERM) ) 
        	        	                {
        	        	                    alt155=1;
        	        	                }

        	        	            }
        	        	            switch (alt155) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM297 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3224); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM297, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop155;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop155: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3227);
        	        	        propertyReferenceSuffix1298=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1298.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : propertyReferenceSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 401:79: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:401:82: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:401:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:401:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt156=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA156_0 = LA(1);
        	        	                if ( (LA156_0 == LTERM) ) 
        	        	                {
        	        	                    alt156=1;
        	        	                }

        	        	            }
        	        	            switch (alt156) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM299 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3244); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM299, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop156;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop156: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3247);
        	        	        indexSuffix1300=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1300.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 401:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:401:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop157;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop157: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:402:4: ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:402:4: ( functionExpression -> functionExpression )
        	        // .//Emerson.g:402:5: functionExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression3266);
        	            functionExpression301=functionExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_functionExpression; stream_functionExpression->add(stream_functionExpression, functionExpression301.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : functionExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 402:24: -> functionExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionExpression == NULL ? NULL : stream_functionExpression->nextTree(stream_functionExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:402:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt160=3;
        	            alt160 = cdfa160.predict(ctx, RECOGNIZER, ISTREAM, &cdfa160);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt160) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:402:48: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:402:48: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt158=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA158_0 = LA(1);
        	        	                if ( (LA158_0 == LTERM) ) 
        	        	                {
        	        	                    alt158=1;
        	        	                }

        	        	            }
        	        	            switch (alt158) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM302 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3274); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM302, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop158;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop158: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3277);
        	        	        propertyReferenceSuffix1303=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1303.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 402:80: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:402:83: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:402:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:402:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt159=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA159_0 = LA(1);
        	        	                if ( (LA159_0 == LTERM) ) 
        	        	                {
        	        	                    alt159=1;
        	        	                }

        	        	            }
        	        	            switch (alt159) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM304 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3293); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM304, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop159;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop159: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3296);
        	        	        indexSuffix1305=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1305.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 402:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:402:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop160;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop160: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:403:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:403:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) )
        	        // .//Emerson.g:403:5: 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments
        	        {
        	            string_literal306 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_memberExpression3315); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, string_literal306, NULL); }


        	            // .//Emerson.g:403:11: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt161=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA161_0 = LA(1);
        	                    if ( (LA161_0 == LTERM) ) 
        	                    {
        	                        alt161=1;
        	                    }

        	                }
        	                switch (alt161) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM307 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3317); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM307, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop161;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop161: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression3322);
        	            expr=memberExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, expr.tree, NULL); }

        	            // .//Emerson.g:403:40: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt162=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA162_0 = LA(1);
        	                    if ( (LA162_0 == LTERM) ) 
        	                    {
        	                        alt162=1;
        	                    }

        	                }
        	                switch (alt162) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM308 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3324); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM308, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop162;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop162: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_arguments_in_memberExpression3327);
        	            arguments309=arguments(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments309.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : arguments, expr
        	             * token labels      : 
        	             * rule labels       : retval, expr
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 403:57: -> ^( NEW $expr arguments )
        	            	{
        	            	    // .//Emerson.g:403:60: ^( NEW $expr arguments )
        	            	    {
        	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	            	if (stream_expr != NULL) stream_expr->free(stream_expr);


        	            }
        	        }


        	        // .//Emerson.g:403:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt165=3;
        	            alt165 = cdfa165.predict(ctx, RECOGNIZER, ISTREAM, &cdfa165);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt165) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:403:85: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:403:85: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt163=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA163_0 = LA(1);
        	        	                if ( (LA163_0 == LTERM) ) 
        	        	                {
        	        	                    alt163=1;
        	        	                }

        	        	            }
        	        	            switch (alt163) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM310 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3342); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM310, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop163;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop163: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3345);
        	        	        propertyReferenceSuffix1311=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1311.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 403:117: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:403:120: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:403:172: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:403:172: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt164=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA164_0 = LA(1);
        	        	                if ( (LA164_0 == LTERM) ) 
        	        	                {
        	        	                    alt164=1;
        	        	                }

        	        	            }
        	        	            switch (alt164) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM312 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3360); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM312, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop164;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop164: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3363);
        	        	        indexSuffix1313=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1313.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 403:192: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:403:195: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop165;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop165: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_functionExpression != NULL) stream_functionExpression->free(stream_functionExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
        if (stream_primaryExpression != NULL) stream_primaryExpression->free(stream_primaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(52, memberExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//Emerson.g:408:1: memberExpressionSuffix : ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_memberExpressionSuffix_return
memberExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_memberExpressionSuffix_return retval;
    ANTLR3_UINT32 memberExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_indexSuffix_return indexSuffix314;
    #undef	RETURN_TYPE_indexSuffix314
    #define	RETURN_TYPE_indexSuffix314 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix315;
    #undef	RETURN_TYPE_propertyReferenceSuffix315
    #define	RETURN_TYPE_propertyReferenceSuffix315 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    memberExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(53)) )
    {
    	retval.start = 0;

        return retval; 
    }
    indexSuffix314.tree = NULL;

    propertyReferenceSuffix315.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:409:2: ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt167;

            alt167=2;


            {
                int LA167_0 = LA(1);
                if ( (LA167_0 == 167) ) 
                {
                    alt167=1;
                }
                else if ( (LA167_0 == 169) ) 
                {
                    alt167=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 167;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt167) 
            {
        	case 1:
        	    // .//Emerson.g:409:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix3400);
        	        indexSuffix314=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix314.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 409:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:410:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3410);
        	        propertyReferenceSuffix315=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix315.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 410:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(53, memberExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//Emerson.g:413:1: callExpression : ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* ;
 */
static EmersonParser_callExpression_return
callExpression(pEmersonParser ctx)
{   
    EmersonParser_callExpression_return retval;
    ANTLR3_UINT32 callExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM317;
    pANTLR3_COMMON_TOKEN    LTERM319;
    pANTLR3_COMMON_TOKEN    LTERM321;
    pANTLR3_COMMON_TOKEN    LTERM323;
    EmersonParser_memberExpression_return memberExpression316;
    #undef	RETURN_TYPE_memberExpression316
    #define	RETURN_TYPE_memberExpression316 EmersonParser_memberExpression_return

    EmersonParser_arguments_return arguments318;
    #undef	RETURN_TYPE_arguments318
    #define	RETURN_TYPE_arguments318 EmersonParser_arguments_return

    EmersonParser_arguments_return arguments320;
    #undef	RETURN_TYPE_arguments320
    #define	RETURN_TYPE_arguments320 EmersonParser_arguments_return

    EmersonParser_indexSuffix1_return indexSuffix1322;
    #undef	RETURN_TYPE_indexSuffix1322
    #define	RETURN_TYPE_indexSuffix1322 EmersonParser_indexSuffix1_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1324;
    #undef	RETURN_TYPE_propertyReferenceSuffix1324
    #define	RETURN_TYPE_propertyReferenceSuffix1324 EmersonParser_propertyReferenceSuffix1_return

    pANTLR3_BASE_TREE LTERM317_tree;
    pANTLR3_BASE_TREE LTERM319_tree;
    pANTLR3_BASE_TREE LTERM321_tree;
    pANTLR3_BASE_TREE LTERM323_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    /* Initialize rule variables
     */
    callExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(54)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM317       = NULL;
    LTERM319       = NULL;
    LTERM321       = NULL;
    LTERM323       = NULL;
    memberExpression316.tree = NULL;

    arguments318.tree = NULL;

    arguments320.tree = NULL;

    indexSuffix1322.tree = NULL;

    propertyReferenceSuffix1324.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM317_tree   = NULL;
    LTERM319_tree   = NULL;
    LTERM321_tree   = NULL;
    LTERM323_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:414:5: ( ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* )
        // .//Emerson.g:414:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
        {
            // .//Emerson.g:414:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) )
            // .//Emerson.g:414:8: memberExpression ( LTERM )* arguments
            {
                FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression3430);
                memberExpression316=memberExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression316.tree, NULL); }

                // .//Emerson.g:414:25: ( LTERM )*

                for (;;)
                {
                    int alt168=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA168_0 = LA(1);
                        if ( (LA168_0 == LTERM) ) 
                        {
                            alt168=1;
                        }

                    }
                    switch (alt168) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM317 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3432); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecallExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM317, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop168;	/* break out of the loop */
                	    break;
                    }
                }
                loop168: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_arguments_in_callExpression3435);
                arguments318=arguments(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments318.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : arguments, memberExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 414:42: -> ^( CALL memberExpression arguments )
                	{
                	    // .//Emerson.g:414:45: ^( CALL memberExpression arguments )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:414:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*

            for (;;)
            {
                int alt172=4;
                alt172 = cdfa172.predict(ctx, RECOGNIZER, ISTREAM, &cdfa172);
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt172) 
                {
            	case 1:
            	    // .//Emerson.g:414:82: ( LTERM )* arguments
            	    {

            	        // .//Emerson.g:414:82: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt169=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA169_0 = LA(1);
            	                if ( (LA169_0 == LTERM) ) 
            	                {
            	                    alt169=1;
            	                }

            	            }
            	            switch (alt169) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM319 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3449); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM319, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop169;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop169: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression3452);
            	        arguments320=arguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments320.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : callExpression, arguments
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 414:99: -> ^( CALL $callExpression arguments )
            	        	{
            	        	    // .//Emerson.g:414:102: ^( CALL $callExpression arguments )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:414:138: ( LTERM )* indexSuffix1
            	    {

            	        // .//Emerson.g:414:138: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt170=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA170_0 = LA(1);
            	                if ( (LA170_0 == LTERM) ) 
            	                {
            	                    alt170=1;
            	                }

            	            }
            	            switch (alt170) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM321 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3467); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM321, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop170;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop170: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression3470);
            	        indexSuffix1322=indexSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1322.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : indexSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 414:158: -> ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	{
            	        	    // .//Emerson.g:414:161: ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // .//Emerson.g:414:207: ( LTERM )* propertyReferenceSuffix1
            	    {

            	        // .//Emerson.g:414:207: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt171=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA171_0 = LA(1);
            	                if ( (LA171_0 == LTERM) ) 
            	                {
            	                    alt171=1;
            	                }

            	            }
            	            switch (alt171) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM323 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3485); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM323, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop171;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop171: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression3488);
            	        propertyReferenceSuffix1324=propertyReferenceSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1324.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : callExpression, propertyReferenceSuffix1
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 414:239: -> ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	{
            	        	    // .//Emerson.g:414:242: ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop172;	/* break out of the loop */
            	    break;
                }
            }
            loop172: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(54, callExpression_StartIndex); }
    return retval;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//Emerson.g:417:1: callExpressionSuffix : ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_callExpressionSuffix_return
callExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_callExpressionSuffix_return retval;
    ANTLR3_UINT32 callExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_arguments_return arguments325;
    #undef	RETURN_TYPE_arguments325
    #define	RETURN_TYPE_arguments325 EmersonParser_arguments_return

    EmersonParser_indexSuffix_return indexSuffix326;
    #undef	RETURN_TYPE_indexSuffix326
    #define	RETURN_TYPE_indexSuffix326 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix327;
    #undef	RETURN_TYPE_propertyReferenceSuffix327
    #define	RETURN_TYPE_propertyReferenceSuffix327 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    callExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(55)) )
    {
    	retval.start = 0;

        return retval; 
    }
    arguments325.tree = NULL;

    indexSuffix326.tree = NULL;

    propertyReferenceSuffix327.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:418:2: ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt173;

            alt173=3;

            switch ( LA(1) ) 
            {
            case 140:
            	{
            		alt173=1;
            	}
                break;
            case 167:
            	{
            		alt173=2;
            	}
                break;
            case 169:
            	{
            		alt173=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 173;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt173) 
            {
        	case 1:
        	    // .//Emerson.g:418:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix3515);
        	        arguments325=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments325.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : arguments
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 418:14: -> arguments
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:419:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix3524);
        	        indexSuffix326=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix326.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 419:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:420:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3533);
        	        propertyReferenceSuffix327=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix327.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 420:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(55, callExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//Emerson.g:423:1: arguments : ( '(' ( LTERM )* ( expression )? ( LTERM )* ')' -> ^( ARGLIST ( expression )? ) | '(' ( LTERM )* expression ( ',' ( LTERM )* expression )* ( LTERM )* ')' -> ^( ARGLIST expression ( expression )* ) );
 */
static EmersonParser_arguments_return
arguments(pEmersonParser ctx)
{   
    EmersonParser_arguments_return retval;
    ANTLR3_UINT32 arguments_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal328;
    pANTLR3_COMMON_TOKEN    LTERM329;
    pANTLR3_COMMON_TOKEN    LTERM331;
    pANTLR3_COMMON_TOKEN    char_literal332;
    pANTLR3_COMMON_TOKEN    char_literal333;
    pANTLR3_COMMON_TOKEN    LTERM334;
    pANTLR3_COMMON_TOKEN    char_literal336;
    pANTLR3_COMMON_TOKEN    LTERM337;
    pANTLR3_COMMON_TOKEN    LTERM339;
    pANTLR3_COMMON_TOKEN    char_literal340;
    EmersonParser_expression_return expression330;
    #undef	RETURN_TYPE_expression330
    #define	RETURN_TYPE_expression330 EmersonParser_expression_return

    EmersonParser_expression_return expression335;
    #undef	RETURN_TYPE_expression335
    #define	RETURN_TYPE_expression335 EmersonParser_expression_return

    EmersonParser_expression_return expression338;
    #undef	RETURN_TYPE_expression338
    #define	RETURN_TYPE_expression338 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal328_tree;
    pANTLR3_BASE_TREE LTERM329_tree;
    pANTLR3_BASE_TREE LTERM331_tree;
    pANTLR3_BASE_TREE char_literal332_tree;
    pANTLR3_BASE_TREE char_literal333_tree;
    pANTLR3_BASE_TREE LTERM334_tree;
    pANTLR3_BASE_TREE char_literal336_tree;
    pANTLR3_BASE_TREE LTERM337_tree;
    pANTLR3_BASE_TREE LTERM339_tree;
    pANTLR3_BASE_TREE char_literal340_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    arguments_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(56)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal328       = NULL;
    LTERM329       = NULL;
    LTERM331       = NULL;
    char_literal332       = NULL;
    char_literal333       = NULL;
    LTERM334       = NULL;
    char_literal336       = NULL;
    LTERM337       = NULL;
    LTERM339       = NULL;
    char_literal340       = NULL;
    expression330.tree = NULL;

    expression335.tree = NULL;

    expression338.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal328_tree   = NULL;
    LTERM329_tree   = NULL;
    LTERM331_tree   = NULL;
    char_literal332_tree   = NULL;
    char_literal333_tree   = NULL;
    LTERM334_tree   = NULL;
    char_literal336_tree   = NULL;
    LTERM337_tree   = NULL;
    LTERM339_tree   = NULL;
    char_literal340_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:424:9: ( '(' ( LTERM )* ( expression )? ( LTERM )* ')' -> ^( ARGLIST ( expression )? ) | '(' ( LTERM )* expression ( ',' ( LTERM )* expression )* ( LTERM )* ')' -> ^( ARGLIST expression ( expression )* ) )
            
            ANTLR3_UINT32 alt181;

            alt181=2;


            {
                int LA181_0 = LA(1);
                if ( (LA181_0 == 140) ) 
                {

                    {
                        int LA181_1 = LA(2);
                        if ( (synpred198_Emerson(ctx)) ) 
                        {
                            alt181=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt181=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 181;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 181;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt181) 
            {
        	case 1:
        	    // .//Emerson.g:424:11: '(' ( LTERM )* ( expression )? ( LTERM )* ')'
        	    {
        	        char_literal328 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_arguments3555); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal328, NULL); }


        	        // .//Emerson.g:424:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt174=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA174_0 = LA(1);
        	                if ( (LA174_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA174_2 = LA(2);
        	                        if ( (synpred195_Emerson(ctx)) ) 
        	                        {
        	                            alt174=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt174) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM329 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3557); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM329, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop174;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop174: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:424:22: ( expression )?
        	        {
        	            int alt175=2;
        	            {
        	                int LA175_0 = LA(1);
        	                if ( (((LA175_0 >= Identifier) && (LA175_0 <= StringLiteral)) || ((LA175_0 >= 139) && (LA175_0 <= 140)) || LA175_0 == 143 || ((LA175_0 >= 166) && (LA175_0 <= 167)) || LA175_0 == 191 || ((LA175_0 >= 196) && (LA175_0 <= 197)) || ((LA175_0 >= 201) && (LA175_0 <= 212))) ) 
        	                {
        	                    alt175=1;
        	                }
        	            }
        	            switch (alt175) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:424:23: expression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arguments3561);
        	        	        expression330=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression330.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:424:36: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt176=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA176_0 = LA(1);
        	                if ( (LA176_0 == LTERM) ) 
        	                {
        	                    alt176=1;
        	                }

        	            }
        	            switch (alt176) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM331 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3565); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM331, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop176;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop176: ; /* Jump out to here if this rule does not match */

        	        char_literal332 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_arguments3568); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal332, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 424:47: -> ^( ARGLIST ( expression )? )
        	        	{
        	        	    // .//Emerson.g:424:50: ^( ARGLIST ( expression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        // .//Emerson.g:424:60: ( expression )?
        	        	        {
        	        	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:425:4: '(' ( LTERM )* expression ( ',' ( LTERM )* expression )* ( LTERM )* ')'
        	    {
        	        char_literal333 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_arguments3582); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal333, NULL); }


        	        // .//Emerson.g:425:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt177=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA177_0 = LA(1);
        	                if ( (LA177_0 == LTERM) ) 
        	                {
        	                    alt177=1;
        	                }

        	            }
        	            switch (alt177) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM334 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3584); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM334, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop177;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop177: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_arguments3587);
        	        expression335=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression335.tree, NULL); }

        	        // .//Emerson.g:425:26: ( ',' ( LTERM )* expression )*

        	        for (;;)
        	        {
        	            int alt179=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA179_0 = LA(1);
        	                if ( (LA179_0 == 142) ) 
        	                {
        	                    alt179=1;
        	                }

        	            }
        	            switch (alt179) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:425:27: ',' ( LTERM )* expression
        	        	    {
        	        	        char_literal336 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_arguments3590); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal336, NULL); }


        	        	        // .//Emerson.g:425:31: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt178=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA178_0 = LA(1);
        	        	                if ( (LA178_0 == LTERM) ) 
        	        	                {
        	        	                    alt178=1;
        	        	                }

        	        	            }
        	        	            switch (alt178) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM337 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3592); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleargumentsEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM337, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop178;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop178: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_expression_in_arguments3595);
        	        	        expression338=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression338.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop179;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop179: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:425:51: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt180=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA180_0 = LA(1);
        	                if ( (LA180_0 == LTERM) ) 
        	                {
        	                    alt180=1;
        	                }

        	            }
        	            switch (alt180) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM339 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3599); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM339, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop180;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop180: ; /* Jump out to here if this rule does not match */

        	        char_literal340 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_arguments3602); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal340, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression, expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 425:62: -> ^( ARGLIST expression ( expression )* )
        	        	{
        	        	    // .//Emerson.g:425:65: ^( ARGLIST expression ( expression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
        	        	        // .//Emerson.g:425:86: ( expression )*
        	        	        {
        	        	        	while ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if (stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(56, arguments_StartIndex); }
    return retval;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//Emerson.g:430:1: indexSuffix : '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) ;
 */
static EmersonParser_indexSuffix_return
indexSuffix(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix_return retval;
    ANTLR3_UINT32 indexSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal341;
    pANTLR3_COMMON_TOKEN    LTERM342;
    pANTLR3_COMMON_TOKEN    LTERM344;
    pANTLR3_COMMON_TOKEN    char_literal345;
    EmersonParser_expression_return expression343;
    #undef	RETURN_TYPE_expression343
    #define	RETURN_TYPE_expression343 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal341_tree;
    pANTLR3_BASE_TREE LTERM342_tree;
    pANTLR3_BASE_TREE LTERM344_tree;
    pANTLR3_BASE_TREE char_literal345_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(57)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal341       = NULL;
    LTERM342       = NULL;
    LTERM344       = NULL;
    char_literal345       = NULL;
    expression343.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal341_tree   = NULL;
    LTERM342_tree   = NULL;
    LTERM344_tree   = NULL;
    char_literal345_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:431:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) )
        // .//Emerson.g:431:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal341 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_indexSuffix3636); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal341, NULL); }


            // .//Emerson.g:431:8: ( LTERM )*

            for (;;)
            {
                int alt182=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA182_0 = LA(1);
                    if ( (LA182_0 == LTERM) ) 
                    {
                        alt182=1;
                    }

                }
                switch (alt182) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM342 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3638); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM342, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop182;	/* break out of the loop */
            	    break;
                }
            }
            loop182: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix3641);
            expression343=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression343.tree, NULL); }

            // .//Emerson.g:431:26: ( LTERM )*

            for (;;)
            {
                int alt183=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA183_0 = LA(1);
                    if ( (LA183_0 == LTERM) ) 
                    {
                        alt183=1;
                    }

                }
                switch (alt183) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM344 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3643); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM344, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop183;	/* break out of the loop */
            	    break;
                }
            }
            loop183: ; /* Jump out to here if this rule does not match */

            char_literal345 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_indexSuffix3646); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, char_literal345, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 431:37: -> ^( ARRAY_INDEX expression )
            	{
            	    // .//Emerson.g:431:40: ^( ARRAY_INDEX expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_167 != NULL) stream_167->free(stream_167);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(57, indexSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//Emerson.g:434:1: propertyReferenceSuffix : '.' ( LTERM )* Identifier -> ^( DOT Identifier ) ;
 */
static EmersonParser_propertyReferenceSuffix_return
propertyReferenceSuffix(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal346;
    pANTLR3_COMMON_TOKEN    LTERM347;
    pANTLR3_COMMON_TOKEN    Identifier348;

    pANTLR3_BASE_TREE char_literal346_tree;
    pANTLR3_BASE_TREE LTERM347_tree;
    pANTLR3_BASE_TREE Identifier348_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(58)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal346       = NULL;
    LTERM347       = NULL;
    Identifier348       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal346_tree   = NULL;
    LTERM347_tree   = NULL;
    Identifier348_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:435:2: ( '.' ( LTERM )* Identifier -> ^( DOT Identifier ) )
        // .//Emerson.g:435:4: '.' ( LTERM )* Identifier
        {
            char_literal346 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_propertyReferenceSuffix3667); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, char_literal346, NULL); }


            // .//Emerson.g:435:8: ( LTERM )*

            for (;;)
            {
                int alt184=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA184_0 = LA(1);
                    if ( (LA184_0 == LTERM) ) 
                    {
                        alt184=1;
                    }

                }
                switch (alt184) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM347 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix3669); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM347, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop184;	/* break out of the loop */
            	    break;
                }
            }
            loop184: ; /* Jump out to here if this rule does not match */

            Identifier348 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix3672); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier348, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 435:26: -> ^( DOT Identifier )
            	{
            	    // .//Emerson.g:435:29: ^( DOT Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(58, propertyReferenceSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//Emerson.g:439:1: assignmentOperator : ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) );
 */
static EmersonParser_assignmentOperator_return
assignmentOperator(pEmersonParser ctx)
{   
    EmersonParser_assignmentOperator_return retval;
    ANTLR3_UINT32 assignmentOperator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal349;
    pANTLR3_COMMON_TOKEN    string_literal350;
    pANTLR3_COMMON_TOKEN    string_literal351;
    pANTLR3_COMMON_TOKEN    string_literal352;
    pANTLR3_COMMON_TOKEN    string_literal353;
    pANTLR3_COMMON_TOKEN    string_literal354;
    pANTLR3_COMMON_TOKEN    string_literal355;
    pANTLR3_COMMON_TOKEN    string_literal356;
    pANTLR3_COMMON_TOKEN    string_literal357;

    pANTLR3_BASE_TREE char_literal349_tree;
    pANTLR3_BASE_TREE string_literal350_tree;
    pANTLR3_BASE_TREE string_literal351_tree;
    pANTLR3_BASE_TREE string_literal352_tree;
    pANTLR3_BASE_TREE string_literal353_tree;
    pANTLR3_BASE_TREE string_literal354_tree;
    pANTLR3_BASE_TREE string_literal355_tree;
    pANTLR3_BASE_TREE string_literal356_tree;
    pANTLR3_BASE_TREE string_literal357_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;

    /* Initialize rule variables
     */
    assignmentOperator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(59)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal349       = NULL;
    string_literal350       = NULL;
    string_literal351       = NULL;
    string_literal352       = NULL;
    string_literal353       = NULL;
    string_literal354       = NULL;
    string_literal355       = NULL;
    string_literal356       = NULL;
    string_literal357       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal349_tree   = NULL;
    string_literal350_tree   = NULL;
    string_literal351_tree   = NULL;
    string_literal352_tree   = NULL;
    string_literal353_tree   = NULL;
    string_literal354_tree   = NULL;
    string_literal355_tree   = NULL;
    string_literal356_tree   = NULL;
    string_literal357_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:440:2: ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) )
            
            ANTLR3_UINT32 alt185;

            alt185=9;

            switch ( LA(1) ) 
            {
            case 147:
            	{
            		alt185=1;
            	}
                break;
            case 170:
            	{
            		alt185=2;
            	}
                break;
            case 171:
            	{
            		alt185=3;
            	}
                break;
            case 172:
            	{
            		alt185=4;
            	}
                break;
            case 173:
            	{
            		alt185=5;
            	}
                break;
            case 174:
            	{
            		alt185=6;
            	}
                break;
            case 175:
            	{
            		alt185=7;
            	}
                break;
            case 176:
            	{
            		alt185=8;
            	}
                break;
            case 177:
            	{
            		alt185=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 185;
                EXCEPTION->state        = 0;


                goto ruleassignmentOperatorEx;
            }

            switch (alt185) 
            {
        	case 1:
        	    // .//Emerson.g:440:4: '='
        	    {
        	        char_literal349 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_assignmentOperator3700); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal349, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 440:8: -> ^( ASSIGN )
        	        	{
        	        	    // .//Emerson.g:440:11: ^( ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:440:22: '*='
        	    {
        	        string_literal350 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_assignmentOperator3709); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, string_literal350, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 440:27: -> ^( MULT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:440:30: ^( MULT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT_ASSIGN, (pANTLR3_UINT8)"MULT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:440:46: '/='
        	    {
        	        string_literal351 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_assignmentOperator3718); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, string_literal351, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 440:51: -> ^( DIV_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:440:54: ^( DIV_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV_ASSIGN, (pANTLR3_UINT8)"DIV_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:440:70: '%='
        	    {
        	        string_literal352 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_assignmentOperator3728); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, string_literal352, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 440:75: -> ^( MOD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:440:78: ^( MOD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD_ASSIGN, (pANTLR3_UINT8)"MOD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:440:93: '+='
        	    {
        	        string_literal353 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_assignmentOperator3737); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal353, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 440:98: -> ^( ADD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:440:101: ^( ADD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_ASSIGN, (pANTLR3_UINT8)"ADD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:440:116: '-='
        	    {
        	        string_literal354 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_assignmentOperator3746); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, string_literal354, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 440:121: -> ^( SUB_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:440:124: ^( SUB_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB_ASSIGN, (pANTLR3_UINT8)"SUB_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:440:140: '&='
        	    {
        	        string_literal355 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_assignmentOperator3756); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, string_literal355, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 440:144: -> ^( AND_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:440:147: ^( AND_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND_ASSIGN, (pANTLR3_UINT8)"AND_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:440:162: '^='
        	    {
        	        string_literal356 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_assignmentOperator3764); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, string_literal356, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 440:166: -> ^( EXP_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:440:169: ^( EXP_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP_ASSIGN, (pANTLR3_UINT8)"EXP_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:440:185: '|='
        	    {
        	        string_literal357 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_assignmentOperator3773); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, string_literal357, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 440:190: -> ^( OR_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:440:193: ^( OR_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR_ASSIGN, (pANTLR3_UINT8)"OR_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_176 != NULL) stream_176->free(stream_176);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(59, assignmentOperator_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//Emerson.g:444:1: conditionalExpression : msgRecvConstruct -> msgRecvConstruct ;
 */
static EmersonParser_conditionalExpression_return
conditionalExpression(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpression_return retval;
    ANTLR3_UINT32 conditionalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_msgRecvConstruct_return msgRecvConstruct358;
    #undef	RETURN_TYPE_msgRecvConstruct358
    #define	RETURN_TYPE_msgRecvConstruct358 EmersonParser_msgRecvConstruct_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgRecvConstruct;
    /* Initialize rule variables
     */
    conditionalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(60)) )
    {
    	retval.start = 0;

        return retval; 
    }
    msgRecvConstruct358.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_msgRecvConstruct   = NULL;
    #define CREATE_stream_msgRecvConstruct  if (stream_msgRecvConstruct == NULL) {stream_msgRecvConstruct = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgRecvConstruct"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:445:9: ( msgRecvConstruct -> msgRecvConstruct )
        // .//Emerson.g:445:11: msgRecvConstruct
        {
            FOLLOWPUSH(FOLLOW_msgRecvConstruct_in_conditionalExpression3806);
            msgRecvConstruct358=msgRecvConstruct(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_msgRecvConstruct; stream_msgRecvConstruct->add(stream_msgRecvConstruct, msgRecvConstruct358.tree, NULL); }

             
            /* AST REWRITE
             * elements          : msgRecvConstruct
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 445:28: -> msgRecvConstruct
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgRecvConstruct == NULL ? NULL : stream_msgRecvConstruct->nextTree(stream_msgRecvConstruct));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_msgRecvConstruct != NULL) stream_msgRecvConstruct->free(stream_msgRecvConstruct);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(60, conditionalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start msgRecvConstruct
 * .//Emerson.g:448:1: msgRecvConstruct : ( msgConstruct -> msgConstruct ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )? ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )? ;
 */
static EmersonParser_msgRecvConstruct_return
msgRecvConstruct(pEmersonParser ctx)
{   
    EmersonParser_msgRecvConstruct_return retval;
    ANTLR3_UINT32 msgRecvConstruct_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM360;
    pANTLR3_COMMON_TOKEN    string_literal361;
    pANTLR3_COMMON_TOKEN    LTERM362;
    pANTLR3_COMMON_TOKEN    string_literal363;
    pANTLR3_COMMON_TOKEN    LTERM364;
    pANTLR3_COMMON_TOKEN    string_literal365;
    pANTLR3_COMMON_TOKEN    LTERM366;
    EmersonParser_msgConstruct_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgConstruct_return

    EmersonParser_msgConstruct_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_msgConstruct_return

    EmersonParser_msgConstruct_return e4;
    #undef	RETURN_TYPE_e4
    #define	RETURN_TYPE_e4 EmersonParser_msgConstruct_return

    EmersonParser_msgConstruct_return msgConstruct359;
    #undef	RETURN_TYPE_msgConstruct359
    #define	RETURN_TYPE_msgConstruct359 EmersonParser_msgConstruct_return

    pANTLR3_BASE_TREE LTERM360_tree;
    pANTLR3_BASE_TREE string_literal361_tree;
    pANTLR3_BASE_TREE LTERM362_tree;
    pANTLR3_BASE_TREE string_literal363_tree;
    pANTLR3_BASE_TREE LTERM364_tree;
    pANTLR3_BASE_TREE string_literal365_tree;
    pANTLR3_BASE_TREE LTERM366_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgConstruct;
    /* Initialize rule variables
     */
    msgRecvConstruct_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(61)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM360       = NULL;
    string_literal361       = NULL;
    LTERM362       = NULL;
    string_literal363       = NULL;
    LTERM364       = NULL;
    string_literal365       = NULL;
    LTERM366       = NULL;
    e2.tree = NULL;

    e3.tree = NULL;

    e4.tree = NULL;

    msgConstruct359.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM360_tree   = NULL;
    string_literal361_tree   = NULL;
    LTERM362_tree   = NULL;
    string_literal363_tree   = NULL;
    LTERM364_tree   = NULL;
    string_literal365_tree   = NULL;
    LTERM366_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_msgConstruct   = NULL;
    #define CREATE_stream_msgConstruct  if (stream_msgConstruct == NULL) {stream_msgConstruct = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgConstruct"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:449:9: ( ( msgConstruct -> msgConstruct ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )? ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )? )
        // .//Emerson.g:449:11: ( msgConstruct -> msgConstruct ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )? ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )?
        {
            // .//Emerson.g:449:11: ( msgConstruct -> msgConstruct )
            // .//Emerson.g:449:12: msgConstruct
            {
                FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3844);
                msgConstruct359=msgConstruct(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgRecvConstructEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, msgConstruct359.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgConstruct
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 449:25: -> msgConstruct
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgConstruct == NULL ? NULL : stream_msgConstruct->nextTree(stream_msgConstruct));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:450:11: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )?
            {
                int alt188=2;
                {
                    int LA188_0 = LA(1);
                    if ( (LA188_0 == LTERM) ) 
                    {
                        {
                            int LA188_1 = LA(2);
                            if ( (synpred216_Emerson(ctx)) ) 
                            {
                                alt188=1;
                            }
                        }
                    }
                    else if ( (LA188_0 == 178) ) 
                    {
                        {
                            int LA188_2 = LA(2);
                            if ( (synpred216_Emerson(ctx)) ) 
                            {
                                alt188=1;
                            }
                        }
                    }
                }
                switch (alt188) 
                {
            	case 1:
            	    // .//Emerson.g:450:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct
            	    {

            	        // .//Emerson.g:450:13: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt186=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA186_0 = LA(1);
            	                if ( (LA186_0 == LTERM) ) 
            	                {
            	                    alt186=1;
            	                }

            	            }
            	            switch (alt186) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM360 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3863); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM360, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop186;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop186: ; /* Jump out to here if this rule does not match */

            	        string_literal361 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_msgRecvConstruct3866); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal361, NULL); }


            	        // .//Emerson.g:450:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt187=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA187_0 = LA(1);
            	                if ( (LA187_0 == LTERM) ) 
            	                {
            	                    alt187=1;
            	                }

            	            }
            	            switch (alt187) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM362 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3868); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM362, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop187;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop187: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3873);
            	        e2=msgConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, e2.tree, NULL); }
            	        string_literal363 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_msgRecvConstruct3875); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal363, NULL); }

            	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3879);
            	        e3=msgConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, e3.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgRecvConstruct, e3
            	         * token labels      : 
            	         * rule labels       : e3, retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 450:69: -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3)
            	        	{
            	        	    // .//Emerson.g:450:72: ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_AND_SENDER, (pANTLR3_UINT8)"MESSAGE_RECV_AND_SENDER"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

                }
            }

            // .//Emerson.g:451:11: ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )?
            {
                int alt191=2;
                {
                    int LA191_0 = LA(1);
                    if ( (LA191_0 == LTERM) ) 
                    {
                        {
                            int LA191_1 = LA(2);
                            if ( (synpred219_Emerson(ctx)) ) 
                            {
                                alt191=1;
                            }
                        }
                    }
                    else if ( (LA191_0 == 178) ) 
                    {
                        {
                            int LA191_2 = LA(2);
                            if ( (synpred219_Emerson(ctx)) ) 
                            {
                                alt191=1;
                            }
                        }
                    }
                }
                switch (alt191) 
                {
            	case 1:
            	    // .//Emerson.g:451:13: ( LTERM )* '<<' ( LTERM )* e4= msgConstruct
            	    {

            	        // .//Emerson.g:451:13: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt189=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA189_0 = LA(1);
            	                if ( (LA189_0 == LTERM) ) 
            	                {
            	                    alt189=1;
            	                }

            	            }
            	            switch (alt189) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM364 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3910); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM364, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop189;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop189: ; /* Jump out to here if this rule does not match */

            	        string_literal365 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_msgRecvConstruct3913); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal365, NULL); }


            	        // .//Emerson.g:451:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt190=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA190_0 = LA(1);
            	                if ( (LA190_0 == LTERM) ) 
            	                {
            	                    alt190=1;
            	                }

            	            }
            	            switch (alt190) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM366 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3915); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM366, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop190;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop190: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3920);
            	        e4=msgConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, e4.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : msgRecvConstruct, e4
            	         * token labels      : 
            	         * rule labels       : e4, retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 451:48: -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4)
            	        	{
            	        	    // .//Emerson.g:451:51: ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_NO_SENDER, (pANTLR3_UINT8)"MESSAGE_RECV_NO_SENDER"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructEx; /* Prevent compiler warnings */
    rulemsgRecvConstructEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_msgConstruct != NULL) stream_msgConstruct->free(stream_msgConstruct);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(61, msgRecvConstruct_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvConstruct */

/** 
 * $ANTLR start msgConstruct
 * .//Emerson.g:455:1: msgConstruct : ( msgSenderConstruct -> msgSenderConstruct ) ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )* ;
 */
static EmersonParser_msgConstruct_return
msgConstruct(pEmersonParser ctx)
{   
    EmersonParser_msgConstruct_return retval;
    ANTLR3_UINT32 msgConstruct_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM368;
    pANTLR3_COMMON_TOKEN    string_literal369;
    pANTLR3_COMMON_TOKEN    LTERM370;
    EmersonParser_msgSenderConstruct_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgSenderConstruct_return

    EmersonParser_msgSenderConstruct_return msgSenderConstruct367;
    #undef	RETURN_TYPE_msgSenderConstruct367
    #define	RETURN_TYPE_msgSenderConstruct367 EmersonParser_msgSenderConstruct_return

    pANTLR3_BASE_TREE LTERM368_tree;
    pANTLR3_BASE_TREE string_literal369_tree;
    pANTLR3_BASE_TREE LTERM370_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgSenderConstruct;
    /* Initialize rule variables
     */
    msgConstruct_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(62)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM368       = NULL;
    string_literal369       = NULL;
    LTERM370       = NULL;
    e2.tree = NULL;

    msgSenderConstruct367.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM368_tree   = NULL;
    string_literal369_tree   = NULL;
    LTERM370_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_msgSenderConstruct   = NULL;
    #define CREATE_stream_msgSenderConstruct  if (stream_msgSenderConstruct == NULL) {stream_msgSenderConstruct = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgSenderConstruct"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:456:9: ( ( msgSenderConstruct -> msgSenderConstruct ) ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )* )
        // .//Emerson.g:456:11: ( msgSenderConstruct -> msgSenderConstruct ) ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )*
        {
            // .//Emerson.g:456:11: ( msgSenderConstruct -> msgSenderConstruct )
            // .//Emerson.g:456:12: msgSenderConstruct
            {
                FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct3962);
                msgSenderConstruct367=msgSenderConstruct(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgConstructEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstruct; stream_msgSenderConstruct->add(stream_msgSenderConstruct, msgSenderConstruct367.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgSenderConstruct
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 456:31: -> msgSenderConstruct
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgSenderConstruct == NULL ? NULL : stream_msgSenderConstruct->nextTree(stream_msgSenderConstruct));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:457:11: ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )*

            for (;;)
            {
                int alt194=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA194_0 = LA(1);
                    if ( (LA194_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA194_1 = LA(2);
                            if ( (synpred222_Emerson(ctx)) ) 
                            {
                                alt194=1;
                            }

                        }
                    }
                    else if ( (LA194_0 == 179) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA194_3 = LA(2);
                            if ( (synpred222_Emerson(ctx)) ) 
                            {
                                alt194=1;
                            }

                        }
                    }

                }
                switch (alt194) 
                {
            	case 1:
            	    // .//Emerson.g:457:12: ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct
            	    {

            	        // .//Emerson.g:457:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt192=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA192_0 = LA(1);
            	                if ( (LA192_0 == LTERM) ) 
            	                {
            	                    alt192=1;
            	                }

            	            }
            	            switch (alt192) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM368 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgConstruct3980); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM368, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop192;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop192: ; /* Jump out to here if this rule does not match */

            	        string_literal369 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_msgConstruct3983); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal369, NULL); }


            	        // .//Emerson.g:457:24: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt193=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA193_0 = LA(1);
            	                if ( (LA193_0 == LTERM) ) 
            	                {
            	                    alt193=1;
            	                }

            	            }
            	            switch (alt193) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM370 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgConstruct3985); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM370, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop193;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop193: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct3990);
            	        e2=msgSenderConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstruct; stream_msgSenderConstruct->add(stream_msgSenderConstruct, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgConstruct
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 457:53: -> ^( SEND_CONSTRUCT $msgConstruct $e2)
            	        	{
            	        	    // .//Emerson.g:457:56: ^( SEND_CONSTRUCT $msgConstruct $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEND_CONSTRUCT, (pANTLR3_UINT8)"SEND_CONSTRUCT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop194;	/* break out of the loop */
            	    break;
                }
            }
            loop194: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructEx; /* Prevent compiler warnings */
    rulemsgConstructEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_msgSenderConstruct != NULL) stream_msgSenderConstruct->free(stream_msgSenderConstruct);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(62, msgConstruct_StartIndex); }
    return retval;
}
/* $ANTLR end msgConstruct */

/** 
 * $ANTLR start msgSenderConstruct
 * .//Emerson.g:460:1: msgSenderConstruct : ( ternaryExpression -> ternaryExpression ) ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )* ;
 */
static EmersonParser_msgSenderConstruct_return
msgSenderConstruct(pEmersonParser ctx)
{   
    EmersonParser_msgSenderConstruct_return retval;
    ANTLR3_UINT32 msgSenderConstruct_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM372;
    pANTLR3_COMMON_TOKEN    char_literal373;
    pANTLR3_COMMON_TOKEN    LTERM374;
    EmersonParser_ternaryExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_ternaryExpression_return

    EmersonParser_ternaryExpression_return ternaryExpression371;
    #undef	RETURN_TYPE_ternaryExpression371
    #define	RETURN_TYPE_ternaryExpression371 EmersonParser_ternaryExpression_return

    pANTLR3_BASE_TREE LTERM372_tree;
    pANTLR3_BASE_TREE char_literal373_tree;
    pANTLR3_BASE_TREE LTERM374_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpression;
    /* Initialize rule variables
     */
    msgSenderConstruct_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(63)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM372       = NULL;
    char_literal373       = NULL;
    LTERM374       = NULL;
    e2.tree = NULL;

    ternaryExpression371.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM372_tree   = NULL;
    char_literal373_tree   = NULL;
    LTERM374_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_ternaryExpression   = NULL;
    #define CREATE_stream_ternaryExpression  if (stream_ternaryExpression == NULL) {stream_ternaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:461:9: ( ( ternaryExpression -> ternaryExpression ) ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )* )
        // .//Emerson.g:461:11: ( ternaryExpression -> ternaryExpression ) ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )*
        {
            // .//Emerson.g:461:11: ( ternaryExpression -> ternaryExpression )
            // .//Emerson.g:461:12: ternaryExpression
            {
                FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct4030);
                ternaryExpression371=ternaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSenderConstructEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, ternaryExpression371.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : ternaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 461:30: -> ternaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ternaryExpression == NULL ? NULL : stream_ternaryExpression->nextTree(stream_ternaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:462:11: ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )*

            for (;;)
            {
                int alt197=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA197_0 = LA(1);
                    if ( (LA197_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA197_1 = LA(2);
                            if ( (synpred225_Emerson(ctx)) ) 
                            {
                                alt197=1;
                            }

                        }
                    }
                    else if ( (LA197_0 == 180) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA197_3 = LA(2);
                            if ( (synpred225_Emerson(ctx)) ) 
                            {
                                alt197=1;
                            }

                        }
                    }

                }
                switch (alt197) 
                {
            	case 1:
            	    // .//Emerson.g:462:12: ( LTERM )* '#' ( LTERM )* e2= ternaryExpression
            	    {

            	        // .//Emerson.g:462:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt195=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA195_0 = LA(1);
            	                if ( (LA195_0 == LTERM) ) 
            	                {
            	                    alt195=1;
            	                }

            	            }
            	            switch (alt195) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM372 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSenderConstruct4048); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgSenderConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM372, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop195;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop195: ; /* Jump out to here if this rule does not match */

            	        char_literal373 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_msgSenderConstruct4051); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, char_literal373, NULL); }


            	        // .//Emerson.g:462:23: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt196=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA196_0 = LA(1);
            	                if ( (LA196_0 == LTERM) ) 
            	                {
            	                    alt196=1;
            	                }

            	            }
            	            switch (alt196) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM374 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSenderConstruct4053); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgSenderConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM374, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop196;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop196: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct4058);
            	        e2=ternaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgSenderConstruct
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 462:51: -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2)
            	        	{
            	        	    // .//Emerson.g:462:54: ^( SENDER_CONSTRUCT $msgSenderConstruct $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SENDER_CONSTRUCT, (pANTLR3_UINT8)"SENDER_CONSTRUCT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop197;	/* break out of the loop */
            	    break;
                }
            }
            loop197: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructEx; /* Prevent compiler warnings */
    rulemsgSenderConstructEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_ternaryExpression != NULL) stream_ternaryExpression->free(stream_ternaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(63, msgSenderConstruct_StartIndex); }
    return retval;
}
/* $ANTLR end msgSenderConstruct */

/** 
 * $ANTLR start ternaryExpression
 * .//Emerson.g:466:1: ternaryExpression : ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )* ;
 */
static EmersonParser_ternaryExpression_return
ternaryExpression(pEmersonParser ctx)
{   
    EmersonParser_ternaryExpression_return retval;
    ANTLR3_UINT32 ternaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM376;
    pANTLR3_COMMON_TOKEN    char_literal377;
    pANTLR3_COMMON_TOKEN    LTERM378;
    pANTLR3_COMMON_TOKEN    LTERM379;
    pANTLR3_COMMON_TOKEN    char_literal380;
    pANTLR3_COMMON_TOKEN    LTERM381;
    EmersonParser_assignmentExpression_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return

    EmersonParser_logicalORExpression_return logicalORExpression375;
    #undef	RETURN_TYPE_logicalORExpression375
    #define	RETURN_TYPE_logicalORExpression375 EmersonParser_logicalORExpression_return

    pANTLR3_BASE_TREE LTERM376_tree;
    pANTLR3_BASE_TREE char_literal377_tree;
    pANTLR3_BASE_TREE LTERM378_tree;
    pANTLR3_BASE_TREE LTERM379_tree;
    pANTLR3_BASE_TREE char_literal380_tree;
    pANTLR3_BASE_TREE LTERM381_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpression;
    /* Initialize rule variables
     */
    ternaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(64)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM376       = NULL;
    char_literal377       = NULL;
    LTERM378       = NULL;
    LTERM379       = NULL;
    char_literal380       = NULL;
    LTERM381       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpression375.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM376_tree   = NULL;
    char_literal377_tree   = NULL;
    LTERM378_tree   = NULL;
    LTERM379_tree   = NULL;
    char_literal380_tree   = NULL;
    LTERM381_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_logicalORExpression   = NULL;
    #define CREATE_stream_logicalORExpression  if (stream_logicalORExpression == NULL) {stream_logicalORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:467:9: ( ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )* )
        // .//Emerson.g:467:11: ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )*
        {
            // .//Emerson.g:467:11: ( logicalORExpression -> logicalORExpression )
            // .//Emerson.g:467:12: logicalORExpression
            {
                FOLLOWPUSH(FOLLOW_logicalORExpression_in_ternaryExpression4099);
                logicalORExpression375=logicalORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleternaryExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpression; stream_logicalORExpression->add(stream_logicalORExpression, logicalORExpression375.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 467:32: -> logicalORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpression == NULL ? NULL : stream_logicalORExpression->nextTree(stream_logicalORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:467:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )*

            for (;;)
            {
                int alt202=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA202_0 = LA(1);
                    if ( (LA202_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA202_1 = LA(2);
                            if ( (synpred230_Emerson(ctx)) ) 
                            {
                                alt202=1;
                            }

                        }
                    }
                    else if ( (LA202_0 == 181) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA202_3 = LA(2);
                            if ( (synpred230_Emerson(ctx)) ) 
                            {
                                alt202=1;
                            }

                        }
                    }

                }
                switch (alt202) 
                {
            	case 1:
            	    // .//Emerson.g:467:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
            	    {

            	        // .//Emerson.g:467:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt198=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA198_0 = LA(1);
            	                if ( (LA198_0 == LTERM) ) 
            	                {
            	                    alt198=1;
            	                }

            	            }
            	            switch (alt198) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM376 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4107); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM376, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop198;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop198: ; /* Jump out to here if this rule does not match */

            	        char_literal377 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_ternaryExpression4110); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, char_literal377, NULL); }


            	        // .//Emerson.g:467:68: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt199=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA199_0 = LA(1);
            	                if ( (LA199_0 == LTERM) ) 
            	                {
            	                    alt199=1;
            	                }

            	            }
            	            switch (alt199) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM378 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4112); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM378, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop199;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop199: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression4117);
            	        expr1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr1.tree, NULL); }

            	        // .//Emerson.g:467:102: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt200=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA200_0 = LA(1);
            	                if ( (LA200_0 == LTERM) ) 
            	                {
            	                    alt200=1;
            	                }

            	            }
            	            switch (alt200) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM379 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4119); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM379, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop200;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop200: ; /* Jump out to here if this rule does not match */

            	        char_literal380 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_ternaryExpression4122); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal380, NULL); }


            	        // .//Emerson.g:467:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt201=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA201_0 = LA(1);
            	                if ( (LA201_0 == LTERM) ) 
            	                {
            	                    alt201=1;
            	                }

            	            }
            	            switch (alt201) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM381 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4124); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM381, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop201;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop201: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression4129);
            	        expr2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr1, expr2, ternaryExpression
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 467:147: -> ^( TERNARYOP $ternaryExpression $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:467:150: ^( TERNARYOP $ternaryExpression $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop202;	/* break out of the loop */
            	    break;
                }
            }
            loop202: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionEx; /* Prevent compiler warnings */
    ruleternaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_logicalORExpression != NULL) stream_logicalORExpression->free(stream_logicalORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(64, ternaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end ternaryExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//Emerson.g:471:1: conditionalExpressionNoIn : msgRecvConstructNoIn ;
 */
static EmersonParser_conditionalExpressionNoIn_return
conditionalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpressionNoIn_return retval;
    ANTLR3_UINT32 conditionalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_msgRecvConstructNoIn_return msgRecvConstructNoIn382;
    #undef	RETURN_TYPE_msgRecvConstructNoIn382
    #define	RETURN_TYPE_msgRecvConstructNoIn382 EmersonParser_msgRecvConstructNoIn_return


    /* Initialize rule variables
     */
    conditionalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(65)) )
    {
    	retval.start = 0;

        return retval; 
    }
    msgRecvConstructNoIn382.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // .//Emerson.g:472:9: ( msgRecvConstructNoIn )
        // .//Emerson.g:472:11: msgRecvConstructNoIn
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4172);
            msgRecvConstructNoIn382=msgRecvConstructNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgRecvConstructNoIn382.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(65, conditionalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start msgRecvConstructNoIn
 * .//Emerson.g:476:1: msgRecvConstructNoIn : ( msgConstructNoIn -> msgConstructNoIn ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )? (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )? ;
 */
static EmersonParser_msgRecvConstructNoIn_return
msgRecvConstructNoIn(pEmersonParser ctx)
{   
    EmersonParser_msgRecvConstructNoIn_return retval;
    ANTLR3_UINT32 msgRecvConstructNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM384;
    pANTLR3_COMMON_TOKEN    string_literal385;
    pANTLR3_COMMON_TOKEN    LTERM386;
    pANTLR3_COMMON_TOKEN    string_literal387;
    pANTLR3_COMMON_TOKEN    LTERM388;
    pANTLR3_COMMON_TOKEN    string_literal389;
    pANTLR3_COMMON_TOKEN    LTERM390;
    EmersonParser_msgConstructNoIn_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return e4;
    #undef	RETURN_TYPE_e4
    #define	RETURN_TYPE_e4 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return e5;
    #undef	RETURN_TYPE_e5
    #define	RETURN_TYPE_e5 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return msgConstructNoIn383;
    #undef	RETURN_TYPE_msgConstructNoIn383
    #define	RETURN_TYPE_msgConstructNoIn383 EmersonParser_msgConstructNoIn_return

    pANTLR3_BASE_TREE LTERM384_tree;
    pANTLR3_BASE_TREE string_literal385_tree;
    pANTLR3_BASE_TREE LTERM386_tree;
    pANTLR3_BASE_TREE string_literal387_tree;
    pANTLR3_BASE_TREE LTERM388_tree;
    pANTLR3_BASE_TREE string_literal389_tree;
    pANTLR3_BASE_TREE LTERM390_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgConstructNoIn;
    /* Initialize rule variables
     */
    msgRecvConstructNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(66)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM384       = NULL;
    string_literal385       = NULL;
    LTERM386       = NULL;
    string_literal387       = NULL;
    LTERM388       = NULL;
    string_literal389       = NULL;
    LTERM390       = NULL;
    e2.tree = NULL;

    e3.tree = NULL;

    e4.tree = NULL;

    e5.tree = NULL;

    msgConstructNoIn383.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM384_tree   = NULL;
    string_literal385_tree   = NULL;
    LTERM386_tree   = NULL;
    string_literal387_tree   = NULL;
    LTERM388_tree   = NULL;
    string_literal389_tree   = NULL;
    LTERM390_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_msgConstructNoIn   = NULL;
    #define CREATE_stream_msgConstructNoIn  if (stream_msgConstructNoIn == NULL) {stream_msgConstructNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgConstructNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:477:9: ( ( msgConstructNoIn -> msgConstructNoIn ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )? (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )? )
        // .//Emerson.g:477:11: ( msgConstructNoIn -> msgConstructNoIn ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )? (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?
        {
            // .//Emerson.g:477:11: ( msgConstructNoIn -> msgConstructNoIn )
            // .//Emerson.g:477:12: msgConstructNoIn
            {
                FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4199);
                msgConstructNoIn383=msgConstructNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgRecvConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, msgConstructNoIn383.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgConstructNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 477:29: -> msgConstructNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgConstructNoIn == NULL ? NULL : stream_msgConstructNoIn->nextTree(stream_msgConstructNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:478:11: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )?
            {
                int alt205=2;
                {
                    int LA205_0 = LA(1);
                    if ( (LA205_0 == LTERM) ) 
                    {
                        {
                            int LA205_1 = LA(2);
                            if ( (synpred233_Emerson(ctx)) ) 
                            {
                                alt205=1;
                            }
                        }
                    }
                    else if ( (LA205_0 == 178) ) 
                    {
                        {
                            int LA205_2 = LA(2);
                            if ( (synpred233_Emerson(ctx)) ) 
                            {
                                alt205=1;
                            }
                        }
                    }
                }
                switch (alt205) 
                {
            	case 1:
            	    // .//Emerson.g:478:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn
            	    {

            	        // .//Emerson.g:478:13: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt203=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA203_0 = LA(1);
            	                if ( (LA203_0 == LTERM) ) 
            	                {
            	                    alt203=1;
            	                }

            	            }
            	            switch (alt203) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM384 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4218); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM384, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop203;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop203: ; /* Jump out to here if this rule does not match */

            	        string_literal385 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_msgRecvConstructNoIn4221); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal385, NULL); }


            	        // .//Emerson.g:478:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt204=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA204_0 = LA(1);
            	                if ( (LA204_0 == LTERM) ) 
            	                {
            	                    alt204=1;
            	                }

            	            }
            	            switch (alt204) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM386 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4223); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM386, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop204;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop204: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4228);
            	        e2=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e2.tree, NULL); }
            	        string_literal387 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_msgRecvConstructNoIn4230); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal387, NULL); }

            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4234);
            	        e3=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e3.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e3, msgRecvConstructNoIn, e2
            	         * token labels      : 
            	         * rule labels       : e3, retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 478:77: -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3)
            	        	{
            	        	    // .//Emerson.g:478:80: ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_AND_SENDER_NO_IN, (pANTLR3_UINT8)"MESSAGE_RECV_AND_SENDER_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

                }
            }

            // .//Emerson.g:479:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?
            {
                int alt208=2;
                alt208 = cdfa208.predict(ctx, RECOGNIZER, ISTREAM, &cdfa208);
                if  (HASEXCEPTION())
                {
                    goto rulemsgRecvConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt208) 
                {
            	case 1:
            	    // .//Emerson.g:479:13: e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4267);
            	        e4=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e4.tree, NULL); }

            	        // .//Emerson.g:479:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt206=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA206_0 = LA(1);
            	                if ( (LA206_0 == LTERM) ) 
            	                {
            	                    alt206=1;
            	                }

            	            }
            	            switch (alt206) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM388 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4269); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM388, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop206;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop206: ; /* Jump out to here if this rule does not match */

            	        string_literal389 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_msgRecvConstructNoIn4272); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal389, NULL); }


            	        // .//Emerson.g:479:45: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt207=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA207_0 = LA(1);
            	                if ( (LA207_0 == LTERM) ) 
            	                {
            	                    alt207=1;
            	                }

            	            }
            	            switch (alt207) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM390 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4274); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM390, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop207;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop207: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4279);
            	        e5=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e5.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : msgRecvConstructNoIn, e4, e5
            	         * token labels      : 
            	         * rule labels       : e4, retval, e5
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e5;

            	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e5=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e5", e5.tree != NULL ? e5.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 479:72: -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5)
            	        	{
            	        	    // .//Emerson.g:479:75: ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_NO_SENDER_NO_IN, (pANTLR3_UINT8)"MESSAGE_RECV_NO_SENDER_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e5 == NULL ? NULL : stream_e5->nextTree(stream_e5));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e5 != NULL) stream_e5->free(stream_e5);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructNoInEx; /* Prevent compiler warnings */
    rulemsgRecvConstructNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_msgConstructNoIn != NULL) stream_msgConstructNoIn->free(stream_msgConstructNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(66, msgRecvConstructNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvConstructNoIn */

/** 
 * $ANTLR start msgConstructNoIn
 * .//Emerson.g:483:1: msgConstructNoIn : ( msgSenderConstructNoIn -> msgSenderConstructNoIn ) ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )* ;
 */
static EmersonParser_msgConstructNoIn_return
msgConstructNoIn(pEmersonParser ctx)
{   
    EmersonParser_msgConstructNoIn_return retval;
    ANTLR3_UINT32 msgConstructNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM392;
    pANTLR3_COMMON_TOKEN    string_literal393;
    EmersonParser_msgSenderConstructNoIn_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgSenderConstructNoIn_return

    EmersonParser_msgSenderConstructNoIn_return msgSenderConstructNoIn391;
    #undef	RETURN_TYPE_msgSenderConstructNoIn391
    #define	RETURN_TYPE_msgSenderConstructNoIn391 EmersonParser_msgSenderConstructNoIn_return

    pANTLR3_BASE_TREE LTERM392_tree;
    pANTLR3_BASE_TREE string_literal393_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgSenderConstructNoIn;
    /* Initialize rule variables
     */
    msgConstructNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(67)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM392       = NULL;
    string_literal393       = NULL;
    e2.tree = NULL;

    msgSenderConstructNoIn391.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM392_tree   = NULL;
    string_literal393_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_msgSenderConstructNoIn   = NULL;
    #define CREATE_stream_msgSenderConstructNoIn  if (stream_msgSenderConstructNoIn == NULL) {stream_msgSenderConstructNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgSenderConstructNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:484:9: ( ( msgSenderConstructNoIn -> msgSenderConstructNoIn ) ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )* )
        // .//Emerson.g:484:11: ( msgSenderConstructNoIn -> msgSenderConstructNoIn ) ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )*
        {
            // .//Emerson.g:484:11: ( msgSenderConstructNoIn -> msgSenderConstructNoIn )
            // .//Emerson.g:484:12: msgSenderConstructNoIn
            {
                FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4332);
                msgSenderConstructNoIn391=msgSenderConstructNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstructNoIn; stream_msgSenderConstructNoIn->add(stream_msgSenderConstructNoIn, msgSenderConstructNoIn391.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgSenderConstructNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 484:35: -> msgSenderConstructNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgSenderConstructNoIn == NULL ? NULL : stream_msgSenderConstructNoIn->nextTree(stream_msgSenderConstructNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:485:11: ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )*

            for (;;)
            {
                int alt210=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA210_0 = LA(1);
                    if ( (LA210_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA210_1 = LA(2);
                            if ( (synpred238_Emerson(ctx)) ) 
                            {
                                alt210=1;
                            }

                        }
                    }
                    else if ( (LA210_0 == 179) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA210_3 = LA(2);
                            if ( (synpred238_Emerson(ctx)) ) 
                            {
                                alt210=1;
                            }

                        }
                    }

                }
                switch (alt210) 
                {
            	case 1:
            	    // .//Emerson.g:485:12: ( LTERM )* '>>' e2= msgSenderConstructNoIn
            	    {

            	        // .//Emerson.g:485:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt209=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA209_0 = LA(1);
            	                if ( (LA209_0 == LTERM) ) 
            	                {
            	                    alt209=1;
            	                }

            	            }
            	            switch (alt209) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM392 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgConstructNoIn4350); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM392, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop209;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop209: ; /* Jump out to here if this rule does not match */

            	        string_literal393 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_msgConstructNoIn4353); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal393, NULL); }

            	        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4357);
            	        e2=msgSenderConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstructNoIn; stream_msgSenderConstructNoIn->add(stream_msgSenderConstructNoIn, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgConstructNoIn
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 485:50: -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2)
            	        	{
            	        	    // .//Emerson.g:485:52: ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEND_CONSTRUCT_NO_IN, (pANTLR3_UINT8)"SEND_CONSTRUCT_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop210;	/* break out of the loop */
            	    break;
                }
            }
            loop210: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructNoInEx; /* Prevent compiler warnings */
    rulemsgConstructNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_msgSenderConstructNoIn != NULL) stream_msgSenderConstructNoIn->free(stream_msgSenderConstructNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(67, msgConstructNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end msgConstructNoIn */

/** 
 * $ANTLR start msgSenderConstructNoIn
 * .//Emerson.g:488:1: msgSenderConstructNoIn : ( ternaryExpressionNoIn -> ternaryExpressionNoIn ) ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )* ;
 */
static EmersonParser_msgSenderConstructNoIn_return
msgSenderConstructNoIn(pEmersonParser ctx)
{   
    EmersonParser_msgSenderConstructNoIn_return retval;
    ANTLR3_UINT32 msgSenderConstructNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM395;
    pANTLR3_COMMON_TOKEN    char_literal396;
    EmersonParser_ternaryExpressionNoIn_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_ternaryExpressionNoIn_return

    EmersonParser_ternaryExpressionNoIn_return ternaryExpressionNoIn394;
    #undef	RETURN_TYPE_ternaryExpressionNoIn394
    #define	RETURN_TYPE_ternaryExpressionNoIn394 EmersonParser_ternaryExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM395_tree;
    pANTLR3_BASE_TREE char_literal396_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpressionNoIn;
    /* Initialize rule variables
     */
    msgSenderConstructNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(68)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM395       = NULL;
    char_literal396       = NULL;
    e2.tree = NULL;

    ternaryExpressionNoIn394.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM395_tree   = NULL;
    char_literal396_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_ternaryExpressionNoIn   = NULL;
    #define CREATE_stream_ternaryExpressionNoIn  if (stream_ternaryExpressionNoIn == NULL) {stream_ternaryExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:489:9: ( ( ternaryExpressionNoIn -> ternaryExpressionNoIn ) ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )* )
        // .//Emerson.g:489:11: ( ternaryExpressionNoIn -> ternaryExpressionNoIn ) ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )*
        {
            // .//Emerson.g:489:11: ( ternaryExpressionNoIn -> ternaryExpressionNoIn )
            // .//Emerson.g:489:12: ternaryExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4405);
                ternaryExpressionNoIn394=ternaryExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSenderConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpressionNoIn; stream_ternaryExpressionNoIn->add(stream_ternaryExpressionNoIn, ternaryExpressionNoIn394.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : ternaryExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 489:34: -> ternaryExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ternaryExpressionNoIn == NULL ? NULL : stream_ternaryExpressionNoIn->nextTree(stream_ternaryExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:490:11: ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )*

            for (;;)
            {
                int alt212=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA212_0 = LA(1);
                    if ( (LA212_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA212_1 = LA(2);
                            if ( (synpred240_Emerson(ctx)) ) 
                            {
                                alt212=1;
                            }

                        }
                    }
                    else if ( (LA212_0 == 180) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA212_3 = LA(2);
                            if ( (synpred240_Emerson(ctx)) ) 
                            {
                                alt212=1;
                            }

                        }
                    }

                }
                switch (alt212) 
                {
            	case 1:
            	    // .//Emerson.g:490:12: ( LTERM )* '#' e2= ternaryExpressionNoIn
            	    {

            	        // .//Emerson.g:490:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt211=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA211_0 = LA(1);
            	                if ( (LA211_0 == LTERM) ) 
            	                {
            	                    alt211=1;
            	                }

            	            }
            	            switch (alt211) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM395 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSenderConstructNoIn4423); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgSenderConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM395, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop211;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop211: ; /* Jump out to here if this rule does not match */

            	        char_literal396 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_msgSenderConstructNoIn4426); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, char_literal396, NULL); }

            	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4430);
            	        e2=ternaryExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpressionNoIn; stream_ternaryExpressionNoIn->add(stream_ternaryExpressionNoIn, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgSenderConstructNoIn
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 490:48: -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2)
            	        	{
            	        	    // .//Emerson.g:490:50: ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SENDER_CONSTRUCT_NO_IN, (pANTLR3_UINT8)"SENDER_CONSTRUCT_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop212;	/* break out of the loop */
            	    break;
                }
            }
            loop212: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructNoInEx; /* Prevent compiler warnings */
    rulemsgSenderConstructNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_ternaryExpressionNoIn != NULL) stream_ternaryExpressionNoIn->free(stream_ternaryExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(68, msgSenderConstructNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end msgSenderConstructNoIn */

/** 
 * $ANTLR start ternaryExpressionNoIn
 * .//Emerson.g:495:1: ternaryExpressionNoIn : ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )* ;
 */
static EmersonParser_ternaryExpressionNoIn_return
ternaryExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_ternaryExpressionNoIn_return retval;
    ANTLR3_UINT32 ternaryExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM398;
    pANTLR3_COMMON_TOKEN    char_literal399;
    pANTLR3_COMMON_TOKEN    LTERM400;
    pANTLR3_COMMON_TOKEN    LTERM401;
    pANTLR3_COMMON_TOKEN    char_literal402;
    pANTLR3_COMMON_TOKEN    LTERM403;
    EmersonParser_assignmentExpressionNoIn_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_logicalORExpressionNoIn_return logicalORExpressionNoIn397;
    #undef	RETURN_TYPE_logicalORExpressionNoIn397
    #define	RETURN_TYPE_logicalORExpressionNoIn397 EmersonParser_logicalORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM398_tree;
    pANTLR3_BASE_TREE char_literal399_tree;
    pANTLR3_BASE_TREE LTERM400_tree;
    pANTLR3_BASE_TREE LTERM401_tree;
    pANTLR3_BASE_TREE char_literal402_tree;
    pANTLR3_BASE_TREE LTERM403_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpressionNoIn;
    /* Initialize rule variables
     */
    ternaryExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(69)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM398       = NULL;
    char_literal399       = NULL;
    LTERM400       = NULL;
    LTERM401       = NULL;
    char_literal402       = NULL;
    LTERM403       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpressionNoIn397.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM398_tree   = NULL;
    char_literal399_tree   = NULL;
    LTERM400_tree   = NULL;
    LTERM401_tree   = NULL;
    char_literal402_tree   = NULL;
    LTERM403_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_logicalORExpressionNoIn   = NULL;
    #define CREATE_stream_logicalORExpressionNoIn  if (stream_logicalORExpressionNoIn == NULL) {stream_logicalORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:496:9: ( ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )* )
        // .//Emerson.g:496:11: ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )*
        {
            // .//Emerson.g:496:11: ( logicalORExpressionNoIn -> logicalORExpressionNoIn )
            // .//Emerson.g:496:12: logicalORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4496);
                logicalORExpressionNoIn397=logicalORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleternaryExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpressionNoIn; stream_logicalORExpressionNoIn->add(stream_logicalORExpressionNoIn, logicalORExpressionNoIn397.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 496:36: -> logicalORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpressionNoIn == NULL ? NULL : stream_logicalORExpressionNoIn->nextTree(stream_logicalORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:496:64: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )*

            for (;;)
            {
                int alt217=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA217_0 = LA(1);
                    if ( (LA217_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA217_1 = LA(2);
                            if ( (synpred245_Emerson(ctx)) ) 
                            {
                                alt217=1;
                            }

                        }
                    }
                    else if ( (LA217_0 == 181) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA217_3 = LA(2);
                            if ( (synpred245_Emerson(ctx)) ) 
                            {
                                alt217=1;
                            }

                        }
                    }

                }
                switch (alt217) 
                {
            	case 1:
            	    // .//Emerson.g:496:65: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:496:65: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt213=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA213_0 = LA(1);
            	                if ( (LA213_0 == LTERM) ) 
            	                {
            	                    alt213=1;
            	                }

            	            }
            	            switch (alt213) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM398 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4504); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM398, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop213;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop213: ; /* Jump out to here if this rule does not match */

            	        char_literal399 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_ternaryExpressionNoIn4507); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, char_literal399, NULL); }


            	        // .//Emerson.g:496:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt214=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA214_0 = LA(1);
            	                if ( (LA214_0 == LTERM) ) 
            	                {
            	                    alt214=1;
            	                }

            	            }
            	            switch (alt214) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM400 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4509); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM400, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop214;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop214: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4514);
            	        expr1=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr1.tree, NULL); }

            	        // .//Emerson.g:496:114: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt215=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA215_0 = LA(1);
            	                if ( (LA215_0 == LTERM) ) 
            	                {
            	                    alt215=1;
            	                }

            	            }
            	            switch (alt215) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM401 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4516); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM401, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop215;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop215: ; /* Jump out to here if this rule does not match */

            	        char_literal402 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_ternaryExpressionNoIn4519); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal402, NULL); }


            	        // .//Emerson.g:496:125: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt216=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA216_0 = LA(1);
            	                if ( (LA216_0 == LTERM) ) 
            	                {
            	                    alt216=1;
            	                }

            	            }
            	            switch (alt216) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM403 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4521); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM403, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop216;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop216: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4526);
            	        expr2=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr1, ternaryExpressionNoIn, expr2
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 496:163: -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:496:166: ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP_NO_IN, (pANTLR3_UINT8)"TERNARYOP_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop217;	/* break out of the loop */
            	    break;
                }
            }
            loop217: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionNoInEx; /* Prevent compiler warnings */
    ruleternaryExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_logicalORExpressionNoIn != NULL) stream_logicalORExpressionNoIn->free(stream_logicalORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(69, ternaryExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end ternaryExpressionNoIn */

/** 
 * $ANTLR start logicalORExpression
 * .//Emerson.g:500:1: logicalORExpression : ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* ;
 */
static EmersonParser_logicalORExpression_return
logicalORExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpression_return retval;
    ANTLR3_UINT32 logicalORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM405;
    pANTLR3_COMMON_TOKEN    string_literal406;
    pANTLR3_COMMON_TOKEN    LTERM407;
    EmersonParser_logicalANDExpression_return logicalANDExpression404;
    #undef	RETURN_TYPE_logicalANDExpression404
    #define	RETURN_TYPE_logicalANDExpression404 EmersonParser_logicalANDExpression_return

    EmersonParser_logicalANDExpression_return logicalANDExpression408;
    #undef	RETURN_TYPE_logicalANDExpression408
    #define	RETURN_TYPE_logicalANDExpression408 EmersonParser_logicalANDExpression_return

    pANTLR3_BASE_TREE LTERM405_tree;
    pANTLR3_BASE_TREE string_literal406_tree;
    pANTLR3_BASE_TREE LTERM407_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpression;
    /* Initialize rule variables
     */
    logicalORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(70)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM405       = NULL;
    string_literal406       = NULL;
    LTERM407       = NULL;
    logicalANDExpression404.tree = NULL;

    logicalANDExpression408.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM405_tree   = NULL;
    string_literal406_tree   = NULL;
    LTERM407_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_logicalANDExpression   = NULL;
    #define CREATE_stream_logicalANDExpression  if (stream_logicalANDExpression == NULL) {stream_logicalANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:501:2: ( ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* )
        // .//Emerson.g:501:4: ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
        {
            // .//Emerson.g:501:4: ( logicalANDExpression -> logicalANDExpression )
            // .//Emerson.g:501:5: logicalANDExpression
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression4579);
                logicalANDExpression404=logicalANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression404.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 501:26: -> logicalANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:501:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*

            for (;;)
            {
                int alt220=2;
                alt220 = cdfa220.predict(ctx, RECOGNIZER, ISTREAM, &cdfa220);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt220) 
                {
            	case 1:
            	    // .//Emerson.g:501:51: ( LTERM )* '||' ( LTERM )* logicalANDExpression
            	    {

            	        // .//Emerson.g:501:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt218=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA218_0 = LA(1);
            	                if ( (LA218_0 == LTERM) ) 
            	                {
            	                    alt218=1;
            	                }

            	            }
            	            switch (alt218) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM405 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression4586); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM405, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop218;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop218: ; /* Jump out to here if this rule does not match */

            	        string_literal406 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_logicalORExpression4589); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, string_literal406, NULL); }


            	        // .//Emerson.g:501:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt219=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA219_0 = LA(1);
            	                if ( (LA219_0 == LTERM) ) 
            	                {
            	                    alt219=1;
            	                }

            	            }
            	            switch (alt219) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM407 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression4591); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM407, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop219;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop219: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression4594);
            	        logicalANDExpression408=logicalANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression408.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, logicalORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 501:91: -> ^( OR $logicalORExpression logicalANDExpression )
            	        	{
            	        	    // .//Emerson.g:501:94: ^( OR $logicalORExpression logicalANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop220;	/* break out of the loop */
            	    break;
                }
            }
            loop220: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_logicalANDExpression != NULL) stream_logicalANDExpression->free(stream_logicalANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(70, logicalORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalANDExpression
 * .//Emerson.g:504:1: logicalANDExpression : ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* ;
 */
static EmersonParser_logicalANDExpression_return
logicalANDExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpression_return retval;
    ANTLR3_UINT32 logicalANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM410;
    pANTLR3_COMMON_TOKEN    string_literal411;
    pANTLR3_COMMON_TOKEN    LTERM412;
    EmersonParser_bitwiseORExpression_return bitwiseORExpression409;
    #undef	RETURN_TYPE_bitwiseORExpression409
    #define	RETURN_TYPE_bitwiseORExpression409 EmersonParser_bitwiseORExpression_return

    EmersonParser_bitwiseORExpression_return bitwiseORExpression413;
    #undef	RETURN_TYPE_bitwiseORExpression413
    #define	RETURN_TYPE_bitwiseORExpression413 EmersonParser_bitwiseORExpression_return

    pANTLR3_BASE_TREE LTERM410_tree;
    pANTLR3_BASE_TREE string_literal411_tree;
    pANTLR3_BASE_TREE LTERM412_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpression;
    /* Initialize rule variables
     */
    logicalANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(71)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM410       = NULL;
    string_literal411       = NULL;
    LTERM412       = NULL;
    bitwiseORExpression409.tree = NULL;

    bitwiseORExpression413.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM410_tree   = NULL;
    string_literal411_tree   = NULL;
    LTERM412_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_bitwiseORExpression   = NULL;
    #define CREATE_stream_bitwiseORExpression  if (stream_bitwiseORExpression == NULL) {stream_bitwiseORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:505:2: ( ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* )
        // .//Emerson.g:505:4: ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
        {
            // .//Emerson.g:505:4: ( bitwiseORExpression -> bitwiseORExpression )
            // .//Emerson.g:505:5: bitwiseORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression4621);
                bitwiseORExpression409=bitwiseORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression409.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 505:25: -> bitwiseORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:505:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*

            for (;;)
            {
                int alt223=2;
                alt223 = cdfa223.predict(ctx, RECOGNIZER, ISTREAM, &cdfa223);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt223) 
                {
            	case 1:
            	    // .//Emerson.g:505:49: ( LTERM )* '&&' ( LTERM )* bitwiseORExpression
            	    {

            	        // .//Emerson.g:505:49: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt221=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA221_0 = LA(1);
            	                if ( (LA221_0 == LTERM) ) 
            	                {
            	                    alt221=1;
            	                }

            	            }
            	            switch (alt221) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM410 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression4628); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM410, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop221;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop221: ; /* Jump out to here if this rule does not match */

            	        string_literal411 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_logicalANDExpression4631); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, string_literal411, NULL); }


            	        // .//Emerson.g:505:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt222=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA222_0 = LA(1);
            	                if ( (LA222_0 == LTERM) ) 
            	                {
            	                    alt222=1;
            	                }

            	            }
            	            switch (alt222) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM412 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression4633); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM412, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop222;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop222: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression4636);
            	        bitwiseORExpression413=bitwiseORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression413.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, bitwiseORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 505:89: -> ^( AND $logicalANDExpression bitwiseORExpression )
            	        	{
            	        	    // .//Emerson.g:505:92: ^( AND $logicalANDExpression bitwiseORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop223;	/* break out of the loop */
            	    break;
                }
            }
            loop223: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_bitwiseORExpression != NULL) stream_bitwiseORExpression->free(stream_bitwiseORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(71, logicalANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//Emerson.g:508:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* ;
 */
static EmersonParser_logicalORExpressionNoIn_return
logicalORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM415;
    pANTLR3_COMMON_TOKEN    string_literal416;
    pANTLR3_COMMON_TOKEN    LTERM417;
    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn414;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn414
    #define	RETURN_TYPE_logicalANDExpressionNoIn414 EmersonParser_logicalANDExpressionNoIn_return

    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn418;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn418
    #define	RETURN_TYPE_logicalANDExpressionNoIn418 EmersonParser_logicalANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM415_tree;
    pANTLR3_BASE_TREE string_literal416_tree;
    pANTLR3_BASE_TREE LTERM417_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpressionNoIn;
    /* Initialize rule variables
     */
    logicalORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(72)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM415       = NULL;
    string_literal416       = NULL;
    LTERM417       = NULL;
    logicalANDExpressionNoIn414.tree = NULL;

    logicalANDExpressionNoIn418.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM415_tree   = NULL;
    string_literal416_tree   = NULL;
    LTERM417_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_logicalANDExpressionNoIn   = NULL;
    #define CREATE_stream_logicalANDExpressionNoIn  if (stream_logicalANDExpressionNoIn == NULL) {stream_logicalANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:509:2: ( ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* )
        // .//Emerson.g:509:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
        {
            // .//Emerson.g:509:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn )
            // .//Emerson.g:509:5: logicalANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4664);
                logicalANDExpressionNoIn414=logicalANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn414.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 509:30: -> logicalANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:509:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*

            for (;;)
            {
                int alt226=2;
                alt226 = cdfa226.predict(ctx, RECOGNIZER, ISTREAM, &cdfa226);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt226) 
                {
            	case 1:
            	    // .//Emerson.g:509:59: ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn
            	    {

            	        // .//Emerson.g:509:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt224=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA224_0 = LA(1);
            	                if ( (LA224_0 == LTERM) ) 
            	                {
            	                    alt224=1;
            	                }

            	            }
            	            switch (alt224) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM415 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn4671); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM415, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop224;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop224: ; /* Jump out to here if this rule does not match */

            	        string_literal416 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_logicalORExpressionNoIn4674); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, string_literal416, NULL); }


            	        // .//Emerson.g:509:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt225=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA225_0 = LA(1);
            	                if ( (LA225_0 == LTERM) ) 
            	                {
            	                    alt225=1;
            	                }

            	            }
            	            switch (alt225) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM417 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn4676); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM417, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop225;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop225: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4679);
            	        logicalANDExpressionNoIn418=logicalANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn418.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, logicalORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 509:103: -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:509:106: ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop226;	/* break out of the loop */
            	    break;
                }
            }
            loop226: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_logicalANDExpressionNoIn != NULL) stream_logicalANDExpressionNoIn->free(stream_logicalANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(72, logicalORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//Emerson.g:513:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* ;
 */
static EmersonParser_logicalANDExpressionNoIn_return
logicalANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM420;
    pANTLR3_COMMON_TOKEN    string_literal421;
    pANTLR3_COMMON_TOKEN    LTERM422;
    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn419;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn419
    #define	RETURN_TYPE_bitwiseORExpressionNoIn419 EmersonParser_bitwiseORExpressionNoIn_return

    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn423;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn423
    #define	RETURN_TYPE_bitwiseORExpressionNoIn423 EmersonParser_bitwiseORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM420_tree;
    pANTLR3_BASE_TREE string_literal421_tree;
    pANTLR3_BASE_TREE LTERM422_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpressionNoIn;
    /* Initialize rule variables
     */
    logicalANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(73)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM420       = NULL;
    string_literal421       = NULL;
    LTERM422       = NULL;
    bitwiseORExpressionNoIn419.tree = NULL;

    bitwiseORExpressionNoIn423.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM420_tree   = NULL;
    string_literal421_tree   = NULL;
    LTERM422_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_bitwiseORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseORExpressionNoIn  if (stream_bitwiseORExpressionNoIn == NULL) {stream_bitwiseORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:514:2: ( ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* )
        // .//Emerson.g:514:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
        {
            // .//Emerson.g:514:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn )
            // .//Emerson.g:514:5: bitwiseORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4708);
                bitwiseORExpressionNoIn419=bitwiseORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn419.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 514:29: -> bitwiseORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:514:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*

            for (;;)
            {
                int alt229=2;
                alt229 = cdfa229.predict(ctx, RECOGNIZER, ISTREAM, &cdfa229);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt229) 
                {
            	case 1:
            	    // .//Emerson.g:514:58: ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn
            	    {

            	        // .//Emerson.g:514:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt227=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA227_0 = LA(1);
            	                if ( (LA227_0 == LTERM) ) 
            	                {
            	                    alt227=1;
            	                }

            	            }
            	            switch (alt227) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM420 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn4716); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM420, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop227;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop227: ; /* Jump out to here if this rule does not match */

            	        string_literal421 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_logicalANDExpressionNoIn4719); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, string_literal421, NULL); }


            	        // .//Emerson.g:514:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt228=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA228_0 = LA(1);
            	                if ( (LA228_0 == LTERM) ) 
            	                {
            	                    alt228=1;
            	                }

            	            }
            	            switch (alt228) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM422 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn4721); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM422, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop228;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop228: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4724);
            	        bitwiseORExpressionNoIn423=bitwiseORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn423.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, logicalANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 514:101: -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:514:104: ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop229;	/* break out of the loop */
            	    break;
                }
            }
            loop229: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_bitwiseORExpressionNoIn != NULL) stream_bitwiseORExpressionNoIn->free(stream_bitwiseORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(73, logicalANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//Emerson.g:517:1: bitwiseORExpression : ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* ;
 */
static EmersonParser_bitwiseORExpression_return
bitwiseORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpression_return retval;
    ANTLR3_UINT32 bitwiseORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM425;
    pANTLR3_COMMON_TOKEN    char_literal426;
    pANTLR3_COMMON_TOKEN    LTERM427;
    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression424;
    #undef	RETURN_TYPE_bitwiseXORExpression424
    #define	RETURN_TYPE_bitwiseXORExpression424 EmersonParser_bitwiseXORExpression_return

    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression428;
    #undef	RETURN_TYPE_bitwiseXORExpression428
    #define	RETURN_TYPE_bitwiseXORExpression428 EmersonParser_bitwiseXORExpression_return

    pANTLR3_BASE_TREE LTERM425_tree;
    pANTLR3_BASE_TREE char_literal426_tree;
    pANTLR3_BASE_TREE LTERM427_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpression;
    /* Initialize rule variables
     */
    bitwiseORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(74)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM425       = NULL;
    char_literal426       = NULL;
    LTERM427       = NULL;
    bitwiseXORExpression424.tree = NULL;

    bitwiseXORExpression428.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM425_tree   = NULL;
    char_literal426_tree   = NULL;
    LTERM427_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_bitwiseXORExpression   = NULL;
    #define CREATE_stream_bitwiseXORExpression  if (stream_bitwiseXORExpression == NULL) {stream_bitwiseXORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:518:2: ( ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* )
        // .//Emerson.g:518:4: ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
        {
            // .//Emerson.g:518:4: ( bitwiseXORExpression -> bitwiseXORExpression )
            // .//Emerson.g:518:5: bitwiseXORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4751);
                bitwiseXORExpression424=bitwiseXORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression424.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 518:26: -> bitwiseXORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:518:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*

            for (;;)
            {
                int alt232=2;
                alt232 = cdfa232.predict(ctx, RECOGNIZER, ISTREAM, &cdfa232);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt232) 
                {
            	case 1:
            	    // .//Emerson.g:518:52: ( LTERM )* '|' ( LTERM )* bitwiseXORExpression
            	    {

            	        // .//Emerson.g:518:52: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt230=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA230_0 = LA(1);
            	                if ( (LA230_0 == LTERM) ) 
            	                {
            	                    alt230=1;
            	                }

            	            }
            	            switch (alt230) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM425 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression4759); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM425, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop230;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop230: ; /* Jump out to here if this rule does not match */

            	        char_literal426 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_bitwiseORExpression4762); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, char_literal426, NULL); }


            	        // .//Emerson.g:518:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt231=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA231_0 = LA(1);
            	                if ( (LA231_0 == LTERM) ) 
            	                {
            	                    alt231=1;
            	                }

            	            }
            	            switch (alt231) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM427 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression4764); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM427, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop231;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop231: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4767);
            	        bitwiseXORExpression428=bitwiseXORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression428.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 518:91: -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	{
            	        	    // .//Emerson.g:518:94: ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop232;	/* break out of the loop */
            	    break;
                }
            }
            loop232: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_bitwiseXORExpression != NULL) stream_bitwiseXORExpression->free(stream_bitwiseXORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(74, bitwiseORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//Emerson.g:521:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseORExpressionNoIn_return
bitwiseORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM430;
    pANTLR3_COMMON_TOKEN    char_literal431;
    pANTLR3_COMMON_TOKEN    LTERM432;
    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn429;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn429
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn429 EmersonParser_bitwiseXORExpressionNoIn_return

    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn433;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn433
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn433 EmersonParser_bitwiseXORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM430_tree;
    pANTLR3_BASE_TREE char_literal431_tree;
    pANTLR3_BASE_TREE LTERM432_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(75)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM430       = NULL;
    char_literal431       = NULL;
    LTERM432       = NULL;
    bitwiseXORExpressionNoIn429.tree = NULL;

    bitwiseXORExpressionNoIn433.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM430_tree   = NULL;
    char_literal431_tree   = NULL;
    LTERM432_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_bitwiseXORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseXORExpressionNoIn  if (stream_bitwiseXORExpressionNoIn == NULL) {stream_bitwiseXORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:522:2: ( ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* )
        // .//Emerson.g:522:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
        {
            // .//Emerson.g:522:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn )
            // .//Emerson.g:522:5: bitwiseXORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4794);
                bitwiseXORExpressionNoIn429=bitwiseXORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn429.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 522:30: -> bitwiseXORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:522:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*

            for (;;)
            {
                int alt235=2;
                alt235 = cdfa235.predict(ctx, RECOGNIZER, ISTREAM, &cdfa235);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt235) 
                {
            	case 1:
            	    // .//Emerson.g:522:60: ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn
            	    {

            	        // .//Emerson.g:522:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt233=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA233_0 = LA(1);
            	                if ( (LA233_0 == LTERM) ) 
            	                {
            	                    alt233=1;
            	                }

            	            }
            	            switch (alt233) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM430 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4802); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM430, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop233;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop233: ; /* Jump out to here if this rule does not match */

            	        char_literal431 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_bitwiseORExpressionNoIn4805); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, char_literal431, NULL); }


            	        // .//Emerson.g:522:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt234=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA234_0 = LA(1);
            	                if ( (LA234_0 == LTERM) ) 
            	                {
            	                    alt234=1;
            	                }

            	            }
            	            switch (alt234) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM432 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4807); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM432, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop234;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop234: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4810);
            	        bitwiseXORExpressionNoIn433=bitwiseXORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn433.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpressionNoIn, bitwiseORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 522:103: -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:522:106: ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop235;	/* break out of the loop */
            	    break;
                }
            }
            loop235: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_bitwiseXORExpressionNoIn != NULL) stream_bitwiseXORExpressionNoIn->free(stream_bitwiseXORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(75, bitwiseORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//Emerson.g:525:1: bitwiseXORExpression : ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* ;
 */
static EmersonParser_bitwiseXORExpression_return
bitwiseXORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpression_return retval;
    ANTLR3_UINT32 bitwiseXORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM435;
    pANTLR3_COMMON_TOKEN    char_literal436;
    pANTLR3_COMMON_TOKEN    LTERM437;
    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression434;
    #undef	RETURN_TYPE_bitwiseANDExpression434
    #define	RETURN_TYPE_bitwiseANDExpression434 EmersonParser_bitwiseANDExpression_return

    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression438;
    #undef	RETURN_TYPE_bitwiseANDExpression438
    #define	RETURN_TYPE_bitwiseANDExpression438 EmersonParser_bitwiseANDExpression_return

    pANTLR3_BASE_TREE LTERM435_tree;
    pANTLR3_BASE_TREE char_literal436_tree;
    pANTLR3_BASE_TREE LTERM437_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpression;
    /* Initialize rule variables
     */
    bitwiseXORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(76)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM435       = NULL;
    char_literal436       = NULL;
    LTERM437       = NULL;
    bitwiseANDExpression434.tree = NULL;

    bitwiseANDExpression438.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM435_tree   = NULL;
    char_literal436_tree   = NULL;
    LTERM437_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_bitwiseANDExpression   = NULL;
    #define CREATE_stream_bitwiseANDExpression  if (stream_bitwiseANDExpression == NULL) {stream_bitwiseANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:526:1: ( ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* )
        // .//Emerson.g:526:3: ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
        {
            // .//Emerson.g:526:3: ( bitwiseANDExpression -> bitwiseANDExpression )
            // .//Emerson.g:526:4: bitwiseANDExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4836);
                bitwiseANDExpression434=bitwiseANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression434.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 526:25: -> bitwiseANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:526:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*

            for (;;)
            {
                int alt238=2;
                alt238 = cdfa238.predict(ctx, RECOGNIZER, ISTREAM, &cdfa238);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt238) 
                {
            	case 1:
            	    // .//Emerson.g:526:51: ( LTERM )* '^' ( LTERM )* bitwiseANDExpression
            	    {

            	        // .//Emerson.g:526:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt236=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA236_0 = LA(1);
            	                if ( (LA236_0 == LTERM) ) 
            	                {
            	                    alt236=1;
            	                }

            	            }
            	            switch (alt236) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM435 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4844); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM435, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop236;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop236: ; /* Jump out to here if this rule does not match */

            	        char_literal436 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_bitwiseXORExpression4847); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, char_literal436, NULL); }


            	        // .//Emerson.g:526:62: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt237=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA237_0 = LA(1);
            	                if ( (LA237_0 == LTERM) ) 
            	                {
            	                    alt237=1;
            	                }

            	            }
            	            switch (alt237) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM437 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4849); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM437, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop237;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop237: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4852);
            	        bitwiseANDExpression438=bitwiseANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression438.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 526:90: -> ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	{
            	        	    // .//Emerson.g:526:93: ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop238;	/* break out of the loop */
            	    break;
                }
            }
            loop238: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_bitwiseANDExpression != NULL) stream_bitwiseANDExpression->free(stream_bitwiseANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(76, bitwiseXORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//Emerson.g:529:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseXORExpressionNoIn_return
bitwiseXORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseXORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM440;
    pANTLR3_COMMON_TOKEN    char_literal441;
    pANTLR3_COMMON_TOKEN    LTERM442;
    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn439;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn439
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn439 EmersonParser_bitwiseANDExpressionNoIn_return

    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn443;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn443
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn443 EmersonParser_bitwiseANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM440_tree;
    pANTLR3_BASE_TREE char_literal441_tree;
    pANTLR3_BASE_TREE LTERM442_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseXORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(77)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM440       = NULL;
    char_literal441       = NULL;
    LTERM442       = NULL;
    bitwiseANDExpressionNoIn439.tree = NULL;

    bitwiseANDExpressionNoIn443.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM440_tree   = NULL;
    char_literal441_tree   = NULL;
    LTERM442_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_bitwiseANDExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseANDExpressionNoIn  if (stream_bitwiseANDExpressionNoIn == NULL) {stream_bitwiseANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:530:2: ( ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* )
        // .//Emerson.g:530:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
        {
            // .//Emerson.g:530:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn )
            // .//Emerson.g:530:5: bitwiseANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4879);
                bitwiseANDExpressionNoIn439=bitwiseANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn439.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 530:30: -> bitwiseANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:530:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*

            for (;;)
            {
                int alt241=2;
                alt241 = cdfa241.predict(ctx, RECOGNIZER, ISTREAM, &cdfa241);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt241) 
                {
            	case 1:
            	    // .//Emerson.g:530:59: ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn
            	    {

            	        // .//Emerson.g:530:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt239=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA239_0 = LA(1);
            	                if ( (LA239_0 == LTERM) ) 
            	                {
            	                    alt239=1;
            	                }

            	            }
            	            switch (alt239) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM440 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4886); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM440, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop239;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop239: ; /* Jump out to here if this rule does not match */

            	        char_literal441 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_bitwiseXORExpressionNoIn4889); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, char_literal441, NULL); }


            	        // .//Emerson.g:530:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt240=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA240_0 = LA(1);
            	                if ( (LA240_0 == LTERM) ) 
            	                {
            	                    alt240=1;
            	                }

            	            }
            	            switch (alt240) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM442 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4891); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM442, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop240;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop240: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4894);
            	        bitwiseANDExpressionNoIn443=bitwiseANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn443.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 530:102: -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:530:105: ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop241;	/* break out of the loop */
            	    break;
                }
            }
            loop241: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_bitwiseANDExpressionNoIn != NULL) stream_bitwiseANDExpressionNoIn->free(stream_bitwiseANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(77, bitwiseXORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//Emerson.g:533:1: bitwiseANDExpression : ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* ;
 */
static EmersonParser_bitwiseANDExpression_return
bitwiseANDExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpression_return retval;
    ANTLR3_UINT32 bitwiseANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM445;
    pANTLR3_COMMON_TOKEN    char_literal446;
    pANTLR3_COMMON_TOKEN    LTERM447;
    EmersonParser_equalityExpression_return equalityExpression444;
    #undef	RETURN_TYPE_equalityExpression444
    #define	RETURN_TYPE_equalityExpression444 EmersonParser_equalityExpression_return

    EmersonParser_equalityExpression_return equalityExpression448;
    #undef	RETURN_TYPE_equalityExpression448
    #define	RETURN_TYPE_equalityExpression448 EmersonParser_equalityExpression_return

    pANTLR3_BASE_TREE LTERM445_tree;
    pANTLR3_BASE_TREE char_literal446_tree;
    pANTLR3_BASE_TREE LTERM447_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpression;
    /* Initialize rule variables
     */
    bitwiseANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(78)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM445       = NULL;
    char_literal446       = NULL;
    LTERM447       = NULL;
    equalityExpression444.tree = NULL;

    equalityExpression448.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM445_tree   = NULL;
    char_literal446_tree   = NULL;
    LTERM447_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_equalityExpression   = NULL;
    #define CREATE_stream_equalityExpression  if (stream_equalityExpression == NULL) {stream_equalityExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:534:2: ( ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* )
        // .//Emerson.g:534:4: ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
        {
            // .//Emerson.g:534:4: ( equalityExpression -> equalityExpression )
            // .//Emerson.g:534:5: equalityExpression
            {
                FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4922);
                equalityExpression444=equalityExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression444.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 534:24: -> equalityExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:534:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*

            for (;;)
            {
                int alt244=2;
                alt244 = cdfa244.predict(ctx, RECOGNIZER, ISTREAM, &cdfa244);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt244) 
                {
            	case 1:
            	    // .//Emerson.g:534:48: ( LTERM )* '&' ( LTERM )* equalityExpression
            	    {

            	        // .//Emerson.g:534:48: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt242=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA242_0 = LA(1);
            	                if ( (LA242_0 == LTERM) ) 
            	                {
            	                    alt242=1;
            	                }

            	            }
            	            switch (alt242) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM445 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4930); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM445, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop242;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop242: ; /* Jump out to here if this rule does not match */

            	        char_literal446 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_bitwiseANDExpression4933); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, char_literal446, NULL); }


            	        // .//Emerson.g:534:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt243=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA243_0 = LA(1);
            	                if ( (LA243_0 == LTERM) ) 
            	                {
            	                    alt243=1;
            	                }

            	            }
            	            switch (alt243) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM447 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4935); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM447, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop243;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop243: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4938);
            	        equalityExpression448=equalityExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression448.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpression, equalityExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 534:85: -> ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	{
            	        	    // .//Emerson.g:534:88: ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop244;	/* break out of the loop */
            	    break;
                }
            }
            loop244: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_equalityExpression != NULL) stream_equalityExpression->free(stream_equalityExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(78, bitwiseANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//Emerson.g:537:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseANDExpressionNoIn_return
bitwiseANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM450;
    pANTLR3_COMMON_TOKEN    char_literal451;
    pANTLR3_COMMON_TOKEN    LTERM452;
    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn449;
    #undef	RETURN_TYPE_equalityExpressionNoIn449
    #define	RETURN_TYPE_equalityExpressionNoIn449 EmersonParser_equalityExpressionNoIn_return

    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn453;
    #undef	RETURN_TYPE_equalityExpressionNoIn453
    #define	RETURN_TYPE_equalityExpressionNoIn453 EmersonParser_equalityExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM450_tree;
    pANTLR3_BASE_TREE char_literal451_tree;
    pANTLR3_BASE_TREE LTERM452_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(79)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM450       = NULL;
    char_literal451       = NULL;
    LTERM452       = NULL;
    equalityExpressionNoIn449.tree = NULL;

    equalityExpressionNoIn453.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM450_tree   = NULL;
    char_literal451_tree   = NULL;
    LTERM452_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_equalityExpressionNoIn   = NULL;
    #define CREATE_stream_equalityExpressionNoIn  if (stream_equalityExpressionNoIn == NULL) {stream_equalityExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:538:2: ( ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* )
        // .//Emerson.g:538:4: ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
        {
            // .//Emerson.g:538:4: ( equalityExpressionNoIn -> equalityExpressionNoIn )
            // .//Emerson.g:538:5: equalityExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4966);
                equalityExpressionNoIn449=equalityExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn449.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 538:28: -> equalityExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:538:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*

            for (;;)
            {
                int alt247=2;
                alt247 = cdfa247.predict(ctx, RECOGNIZER, ISTREAM, &cdfa247);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt247) 
                {
            	case 1:
            	    // .//Emerson.g:538:56: ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn
            	    {

            	        // .//Emerson.g:538:56: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt245=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA245_0 = LA(1);
            	                if ( (LA245_0 == LTERM) ) 
            	                {
            	                    alt245=1;
            	                }

            	            }
            	            switch (alt245) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM450 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4974); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM450, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop245;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop245: ; /* Jump out to here if this rule does not match */

            	        char_literal451 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_bitwiseANDExpressionNoIn4977); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, char_literal451, NULL); }


            	        // .//Emerson.g:538:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt246=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA246_0 = LA(1);
            	                if ( (LA246_0 == LTERM) ) 
            	                {
            	                    alt246=1;
            	                }

            	            }
            	            switch (alt246) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM452 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4979); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM452, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop246;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop246: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4982);
            	        equalityExpressionNoIn453=equalityExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn453.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, equalityExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 538:97: -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:538:100: ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop247;	/* break out of the loop */
            	    break;
                }
            }
            loop247: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_equalityExpressionNoIn != NULL) stream_equalityExpressionNoIn->free(stream_equalityExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(79, bitwiseANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//Emerson.g:541:1: equalityExpression : ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* ;
 */
static EmersonParser_equalityExpression_return
equalityExpression(pEmersonParser ctx)
{   
    EmersonParser_equalityExpression_return retval;
    ANTLR3_UINT32 equalityExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM455;
    pANTLR3_COMMON_TOKEN    LTERM457;
    EmersonParser_relationalExpression_return relationalExpression454;
    #undef	RETURN_TYPE_relationalExpression454
    #define	RETURN_TYPE_relationalExpression454 EmersonParser_relationalExpression_return

    EmersonParser_equalityOps_return equalityOps456;
    #undef	RETURN_TYPE_equalityOps456
    #define	RETURN_TYPE_equalityOps456 EmersonParser_equalityOps_return

    EmersonParser_relationalExpression_return relationalExpression458;
    #undef	RETURN_TYPE_relationalExpression458
    #define	RETURN_TYPE_relationalExpression458 EmersonParser_relationalExpression_return

    pANTLR3_BASE_TREE LTERM455_tree;
    pANTLR3_BASE_TREE LTERM457_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    /* Initialize rule variables
     */
    equalityExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(80)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM455       = NULL;
    LTERM457       = NULL;
    relationalExpression454.tree = NULL;

    equalityOps456.tree = NULL;

    relationalExpression458.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM455_tree   = NULL;
    LTERM457_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalExpression   = NULL;
    #define CREATE_stream_relationalExpression  if (stream_relationalExpression == NULL) {stream_relationalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpression"); }
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:542:2: ( ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* )
        // .//Emerson.g:542:4: ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
        {
            // .//Emerson.g:542:4: ( relationalExpression -> relationalExpression )
            // .//Emerson.g:542:5: relationalExpression
            {
                FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression5009);
                relationalExpression454=relationalExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression454.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 542:26: -> relationalExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:542:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*

            for (;;)
            {
                int alt250=2;
                alt250 = cdfa250.predict(ctx, RECOGNIZER, ISTREAM, &cdfa250);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt250) 
                {
            	case 1:
            	    // .//Emerson.g:542:51: ( LTERM )* equalityOps ( LTERM )* relationalExpression
            	    {

            	        // .//Emerson.g:542:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt248=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA248_0 = LA(1);
            	                if ( (LA248_0 == LTERM) ) 
            	                {
            	                    alt248=1;
            	                }

            	            }
            	            switch (alt248) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM455 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression5016); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM455, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop248;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop248: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpression5019);
            	        equalityOps456=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps456.tree, NULL); }

            	        // .//Emerson.g:542:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt249=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA249_0 = LA(1);
            	                if ( (LA249_0 == LTERM) ) 
            	                {
            	                    alt249=1;
            	                }

            	            }
            	            switch (alt249) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM457 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression5021); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM457, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop249;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop249: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression5024);
            	        relationalExpression458=relationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression458.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityOps, relationalExpression, equalityExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 542:98: -> ^( equalityOps $equalityExpression relationalExpression )
            	        	{
            	        	    // .//Emerson.g:542:101: ^( equalityOps $equalityExpression relationalExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop250;	/* break out of the loop */
            	    break;
                }
            }
            loop250: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalExpression != NULL) stream_relationalExpression->free(stream_relationalExpression);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(80, equalityExpression_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityOps
 * .//Emerson.g:546:1: equalityOps : ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) );
 */
static EmersonParser_equalityOps_return
equalityOps(pEmersonParser ctx)
{   
    EmersonParser_equalityOps_return retval;
    ANTLR3_UINT32 equalityOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal459;
    pANTLR3_COMMON_TOKEN    string_literal460;
    pANTLR3_COMMON_TOKEN    string_literal461;
    pANTLR3_COMMON_TOKEN    string_literal462;

    pANTLR3_BASE_TREE string_literal459_tree;
    pANTLR3_BASE_TREE string_literal460_tree;
    pANTLR3_BASE_TREE string_literal461_tree;
    pANTLR3_BASE_TREE string_literal462_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;

    /* Initialize rule variables
     */
    equalityOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(81)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal459       = NULL;
    string_literal460       = NULL;
    string_literal461       = NULL;
    string_literal462       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal459_tree   = NULL;
    string_literal460_tree   = NULL;
    string_literal461_tree   = NULL;
    string_literal462_tree   = NULL;

    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:547:1: ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) )
            
            ANTLR3_UINT32 alt251;

            alt251=4;

            switch ( LA(1) ) 
            {
            case 187:
            	{
            		alt251=1;
            	}
                break;
            case 188:
            	{
            		alt251=2;
            	}
                break;
            case 189:
            	{
            		alt251=3;
            	}
                break;
            case 190:
            	{
            		alt251=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 251;
                EXCEPTION->state        = 0;


                goto ruleequalityOpsEx;
            }

            switch (alt251) 
            {
        	case 1:
        	    // .//Emerson.g:547:4: '=='
        	    {
        	        string_literal459 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_equalityOps5050); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, string_literal459, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 547:9: -> ^( EQUALS )
        	        	{
        	        	    // .//Emerson.g:547:12: ^( EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:548:3: '!='
        	    {
        	        string_literal460 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_equalityOps5060); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, string_literal460, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 548:8: -> ^( NOT_EQUALS )
        	        	{
        	        	    // .//Emerson.g:548:11: ^( NOT_EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_EQUALS, (pANTLR3_UINT8)"NOT_EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:549:3: '==='
        	    {
        	        string_literal461 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_equalityOps5070); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, string_literal461, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 549:9: -> ^( IDENT )
        	        	{
        	        	    // .//Emerson.g:549:12: ^( IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENT, (pANTLR3_UINT8)"IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:550:3: '!=='
        	    {
        	        string_literal462 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_equalityOps5080); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, string_literal462, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 550:9: -> ^( NOT_IDENT )
        	        	{
        	        	    // .//Emerson.g:550:12: ^( NOT_IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_IDENT, (pANTLR3_UINT8)"NOT_IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityOpsEx; /* Prevent compiler warnings */
    ruleequalityOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_187 != NULL) stream_187->free(stream_187);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_190 != NULL) stream_190->free(stream_190);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(81, equalityOps_StartIndex); }
    return retval;
}
/* $ANTLR end equalityOps */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//Emerson.g:553:1: equalityExpressionNoIn : ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* ;
 */
static EmersonParser_equalityExpressionNoIn_return
equalityExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_equalityExpressionNoIn_return retval;
    ANTLR3_UINT32 equalityExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM464;
    pANTLR3_COMMON_TOKEN    LTERM466;
    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn463;
    #undef	RETURN_TYPE_relationalExpressionNoIn463
    #define	RETURN_TYPE_relationalExpressionNoIn463 EmersonParser_relationalExpressionNoIn_return

    EmersonParser_equalityOps_return equalityOps465;
    #undef	RETURN_TYPE_equalityOps465
    #define	RETURN_TYPE_equalityOps465 EmersonParser_equalityOps_return

    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn467;
    #undef	RETURN_TYPE_relationalExpressionNoIn467
    #define	RETURN_TYPE_relationalExpressionNoIn467 EmersonParser_relationalExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM464_tree;
    pANTLR3_BASE_TREE LTERM466_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpressionNoIn;
    /* Initialize rule variables
     */
    equalityExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(82)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM464       = NULL;
    LTERM466       = NULL;
    relationalExpressionNoIn463.tree = NULL;

    equalityOps465.tree = NULL;

    relationalExpressionNoIn467.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM464_tree   = NULL;
    LTERM466_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }
    stream_relationalExpressionNoIn   = NULL;
    #define CREATE_stream_relationalExpressionNoIn  if (stream_relationalExpressionNoIn == NULL) {stream_relationalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:554:9: ( ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* )
        // .//Emerson.g:554:11: ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
        {
            // .//Emerson.g:554:11: ( relationalExpressionNoIn -> relationalExpressionNoIn )
            // .//Emerson.g:554:12: relationalExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5104);
                relationalExpressionNoIn463=relationalExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn463.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 554:37: -> relationalExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:554:65: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*

            for (;;)
            {
                int alt254=2;
                alt254 = cdfa254.predict(ctx, RECOGNIZER, ISTREAM, &cdfa254);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt254) 
                {
            	case 1:
            	    // .//Emerson.g:554:66: ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn
            	    {

            	        // .//Emerson.g:554:66: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt252=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA252_0 = LA(1);
            	                if ( (LA252_0 == LTERM) ) 
            	                {
            	                    alt252=1;
            	                }

            	            }
            	            switch (alt252) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM464 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn5111); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM464, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop252;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop252: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpressionNoIn5114);
            	        equalityOps465=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps465.tree, NULL); }

            	        // .//Emerson.g:554:85: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt253=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA253_0 = LA(1);
            	                if ( (LA253_0 == LTERM) ) 
            	                {
            	                    alt253=1;
            	                }

            	            }
            	            switch (alt253) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM466 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn5116); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM466, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop253;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop253: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5119);
            	        relationalExpressionNoIn467=relationalExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn467.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityOps, relationalExpressionNoIn, equalityExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 554:117: -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:554:120: ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop254;	/* break out of the loop */
            	    break;
                }
            }
            loop254: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
        if (stream_relationalExpressionNoIn != NULL) stream_relationalExpressionNoIn->free(stream_relationalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(82, equalityExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//Emerson.g:558:1: relationalOps : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) );
 */
static EmersonParser_relationalOps_return
relationalOps(pEmersonParser ctx)
{   
    EmersonParser_relationalOps_return retval;
    ANTLR3_UINT32 relationalOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal468;
    pANTLR3_COMMON_TOKEN    char_literal469;
    pANTLR3_COMMON_TOKEN    string_literal470;
    pANTLR3_COMMON_TOKEN    string_literal471;
    pANTLR3_COMMON_TOKEN    string_literal472;
    pANTLR3_COMMON_TOKEN    string_literal473;

    pANTLR3_BASE_TREE char_literal468_tree;
    pANTLR3_BASE_TREE char_literal469_tree;
    pANTLR3_BASE_TREE string_literal470_tree;
    pANTLR3_BASE_TREE string_literal471_tree;
    pANTLR3_BASE_TREE string_literal472_tree;
    pANTLR3_BASE_TREE string_literal473_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    relationalOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(83)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal468       = NULL;
    char_literal469       = NULL;
    string_literal470       = NULL;
    string_literal471       = NULL;
    string_literal472       = NULL;
    string_literal473       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal468_tree   = NULL;
    char_literal469_tree   = NULL;
    string_literal470_tree   = NULL;
    string_literal471_tree   = NULL;
    string_literal472_tree   = NULL;
    string_literal473_tree   = NULL;

    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:559:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) )
            
            ANTLR3_UINT32 alt255;

            alt255=6;

            switch ( LA(1) ) 
            {
            case 191:
            	{
            		alt255=1;
            	}
                break;
            case 192:
            	{
            		alt255=2;
            	}
                break;
            case 193:
            	{
            		alt255=3;
            	}
                break;
            case 194:
            	{
            		alt255=4;
            	}
                break;
            case 195:
            	{
            		alt255=5;
            	}
                break;
            case 153:
            	{
            		alt255=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 255;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt255) 
            {
        	case 1:
        	    // .//Emerson.g:559:3: '<'
        	    {
        	        char_literal468 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_relationalOps5151); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal468, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 559:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:559:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:560:3: '>'
        	    {
        	        char_literal469 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_relationalOps5162); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal469, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 560:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:560:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:561:3: '<='
        	    {
        	        string_literal470 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_relationalOps5173); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, string_literal470, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 561:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:561:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:562:3: '>='
        	    {
        	        string_literal471 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_relationalOps5183); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, string_literal471, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 562:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:562:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:563:3: 'instanceof'
        	    {
        	        string_literal472 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_relationalOps5193); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal472, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 563:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:563:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:564:3: 'in'
        	    {
        	        string_literal473 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_relationalOps5203); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal473, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 564:16: -> ^( IN )
        	        	{
        	        	    // .//Emerson.g:564:19: ^( IN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IN, (pANTLR3_UINT8)"IN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(83, relationalOps_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//Emerson.g:568:1: relationalExpression : ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )* ;
 */
static EmersonParser_relationalExpression_return
relationalExpression(pEmersonParser ctx)
{   
    EmersonParser_relationalExpression_return retval;
    ANTLR3_UINT32 relationalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM475;
    pANTLR3_COMMON_TOKEN    LTERM477;
    EmersonParser_additiveExpression_return additiveExpression474;
    #undef	RETURN_TYPE_additiveExpression474
    #define	RETURN_TYPE_additiveExpression474 EmersonParser_additiveExpression_return

    EmersonParser_relationalOps_return relationalOps476;
    #undef	RETURN_TYPE_relationalOps476
    #define	RETURN_TYPE_relationalOps476 EmersonParser_relationalOps_return

    EmersonParser_additiveExpression_return additiveExpression478;
    #undef	RETURN_TYPE_additiveExpression478
    #define	RETURN_TYPE_additiveExpression478 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM475_tree;
    pANTLR3_BASE_TREE LTERM477_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOps;
    /* Initialize rule variables
     */
    relationalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(84)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM475       = NULL;
    LTERM477       = NULL;
    additiveExpression474.tree = NULL;

    relationalOps476.tree = NULL;

    additiveExpression478.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM475_tree   = NULL;
    LTERM477_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }
    stream_relationalOps   = NULL;
    #define CREATE_stream_relationalOps  if (stream_relationalOps == NULL) {stream_relationalOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:569:9: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )* )
        // .//Emerson.g:569:11: ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*
        {
            // .//Emerson.g:569:11: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:569:12: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression5236);
                additiveExpression474=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression474.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 569:31: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:569:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*

            for (;;)
            {
                int alt258=2;
                alt258 = cdfa258.predict(ctx, RECOGNIZER, ISTREAM, &cdfa258);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt258) 
                {
            	case 1:
            	    // .//Emerson.g:569:55: ( LTERM )* relationalOps ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:569:55: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt256=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA256_0 = LA(1);
            	                if ( (LA256_0 == LTERM) ) 
            	                {
            	                    alt256=1;
            	                }

            	            }
            	            switch (alt256) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM475 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression5244); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM475, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop256;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop256: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression5247);
            	        relationalOps476=relationalOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOps; stream_relationalOps->add(stream_relationalOps, relationalOps476.tree, NULL); }

            	        // .//Emerson.g:569:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt257=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA257_0 = LA(1);
            	                if ( (LA257_0 == LTERM) ) 
            	                {
            	                    alt257=1;
            	                }

            	            }
            	            switch (alt257) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM477 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression5249); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM477, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop257;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop257: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression5252);
            	        additiveExpression478=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression478.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : additiveExpression, relationalOps, relationalExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 569:102: -> ^( relationalOps $relationalExpression additiveExpression )
            	        	{
            	        	    // .//Emerson.g:569:105: ^( relationalOps $relationalExpression additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOps == NULL ? NULL : stream_relationalOps->nextNode(stream_relationalOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop258;	/* break out of the loop */
            	    break;
                }
            }
            loop258: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
        if (stream_relationalOps != NULL) stream_relationalOps->free(stream_relationalOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(84, relationalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//Emerson.g:572:1: relationalOpsNoIn : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) );
 */
static EmersonParser_relationalOpsNoIn_return
relationalOpsNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalOpsNoIn_return retval;
    ANTLR3_UINT32 relationalOpsNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal479;
    pANTLR3_COMMON_TOKEN    char_literal480;
    pANTLR3_COMMON_TOKEN    string_literal481;
    pANTLR3_COMMON_TOKEN    string_literal482;
    pANTLR3_COMMON_TOKEN    string_literal483;

    pANTLR3_BASE_TREE char_literal479_tree;
    pANTLR3_BASE_TREE char_literal480_tree;
    pANTLR3_BASE_TREE string_literal481_tree;
    pANTLR3_BASE_TREE string_literal482_tree;
    pANTLR3_BASE_TREE string_literal483_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    relationalOpsNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(85)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal479       = NULL;
    char_literal480       = NULL;
    string_literal481       = NULL;
    string_literal482       = NULL;
    string_literal483       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal479_tree   = NULL;
    char_literal480_tree   = NULL;
    string_literal481_tree   = NULL;
    string_literal482_tree   = NULL;
    string_literal483_tree   = NULL;

    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:573:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) )
            
            ANTLR3_UINT32 alt259;

            alt259=5;

            switch ( LA(1) ) 
            {
            case 191:
            	{
            		alt259=1;
            	}
                break;
            case 192:
            	{
            		alt259=2;
            	}
                break;
            case 193:
            	{
            		alt259=3;
            	}
                break;
            case 194:
            	{
            		alt259=4;
            	}
                break;
            case 195:
            	{
            		alt259=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 259;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt259) 
            {
        	case 1:
        	    // .//Emerson.g:573:3: '<'
        	    {
        	        char_literal479 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_relationalOpsNoIn5283); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal479, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 573:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:573:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:574:3: '>'
        	    {
        	        char_literal480 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_relationalOpsNoIn5294); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal480, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 574:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:574:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:575:3: '<='
        	    {
        	        string_literal481 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_relationalOpsNoIn5305); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, string_literal481, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 575:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:575:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:576:3: '>='
        	    {
        	        string_literal482 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_relationalOpsNoIn5315); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, string_literal482, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 576:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:576:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:577:3: 'instanceof'
        	    {
        	        string_literal483 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_relationalOpsNoIn5325); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal483, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 577:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:577:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(85, relationalOpsNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start addOps
 * .//Emerson.g:580:1: addOps : ( '+' -> ^( ADD_OP ) | '-' -> ^( SUB ) );
 */
static EmersonParser_addOps_return
addOps(pEmersonParser ctx)
{   
    EmersonParser_addOps_return retval;
    ANTLR3_UINT32 addOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal484;
    pANTLR3_COMMON_TOKEN    char_literal485;

    pANTLR3_BASE_TREE char_literal484_tree;
    pANTLR3_BASE_TREE char_literal485_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;

    /* Initialize rule variables
     */
    addOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(86)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal484       = NULL;
    char_literal485       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal484_tree   = NULL;
    char_literal485_tree   = NULL;

    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:581:1: ( '+' -> ^( ADD_OP ) | '-' -> ^( SUB ) )
            
            ANTLR3_UINT32 alt260;

            alt260=2;


            {
                int LA260_0 = LA(1);
                if ( (LA260_0 == 196) ) 
                {
                    alt260=1;
                }
                else if ( (LA260_0 == 197) ) 
                {
                    alt260=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 260;
                    EXCEPTION->state        = 0;


                    goto ruleaddOpsEx;
                }
            }
            switch (alt260) 
            {
        	case 1:
        	    // .//Emerson.g:581:3: '+'
        	    {
        	        char_literal484 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_addOps5340); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, char_literal484, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 581:7: -> ^( ADD_OP )
        	        	{
        	        	    // .//Emerson.g:581:10: ^( ADD_OP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_OP, (pANTLR3_UINT8)"ADD_OP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:582:3: '-'
        	    {
        	        char_literal485 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_addOps5350); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, char_literal485, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 582:7: -> ^( SUB )
        	        	{
        	        	    // .//Emerson.g:582:10: ^( SUB )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleaddOpsEx; /* Prevent compiler warnings */
    ruleaddOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_196 != NULL) stream_196->free(stream_196);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(86, addOps_StartIndex); }
    return retval;
}
/* $ANTLR end addOps */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//Emerson.g:586:1: relationalExpressionNoIn : ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )* ;
 */
static EmersonParser_relationalExpressionNoIn_return
relationalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalExpressionNoIn_return retval;
    ANTLR3_UINT32 relationalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM487;
    pANTLR3_COMMON_TOKEN    LTERM489;
    EmersonParser_additiveExpression_return additiveExpression486;
    #undef	RETURN_TYPE_additiveExpression486
    #define	RETURN_TYPE_additiveExpression486 EmersonParser_additiveExpression_return

    EmersonParser_relationalOpsNoIn_return relationalOpsNoIn488;
    #undef	RETURN_TYPE_relationalOpsNoIn488
    #define	RETURN_TYPE_relationalOpsNoIn488 EmersonParser_relationalOpsNoIn_return

    EmersonParser_additiveExpression_return additiveExpression490;
    #undef	RETURN_TYPE_additiveExpression490
    #define	RETURN_TYPE_additiveExpression490 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM487_tree;
    pANTLR3_BASE_TREE LTERM489_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOpsNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    /* Initialize rule variables
     */
    relationalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(87)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM487       = NULL;
    LTERM489       = NULL;
    additiveExpression486.tree = NULL;

    relationalOpsNoIn488.tree = NULL;

    additiveExpression490.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM487_tree   = NULL;
    LTERM489_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalOpsNoIn   = NULL;
    #define CREATE_stream_relationalOpsNoIn  if (stream_relationalOpsNoIn == NULL) {stream_relationalOpsNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOpsNoIn"); }
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:587:9: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )* )
        // .//Emerson.g:587:11: ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*
        {
            // .//Emerson.g:587:11: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:587:12: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn5375);
                additiveExpression486=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression486.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 587:31: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:587:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*

            for (;;)
            {
                int alt263=2;
                alt263 = cdfa263.predict(ctx, RECOGNIZER, ISTREAM, &cdfa263);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt263) 
                {
            	case 1:
            	    // .//Emerson.g:587:55: ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:587:55: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt261=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA261_0 = LA(1);
            	                if ( (LA261_0 == LTERM) ) 
            	                {
            	                    alt261=1;
            	                }

            	            }
            	            switch (alt261) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM487 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn5383); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM487, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop261;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop261: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5386);
            	        relationalOpsNoIn488=relationalOpsNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOpsNoIn; stream_relationalOpsNoIn->add(stream_relationalOpsNoIn, relationalOpsNoIn488.tree, NULL); }

            	        // .//Emerson.g:587:80: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt262=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA262_0 = LA(1);
            	                if ( (LA262_0 == LTERM) ) 
            	                {
            	                    alt262=1;
            	                }

            	            }
            	            switch (alt262) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM489 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn5388); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM489, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop262;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop262: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn5391);
            	        additiveExpression490=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression490.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpressionNoIn, relationalOpsNoIn, additiveExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 587:106: -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression )
            	        	{
            	        	    // .//Emerson.g:587:109: ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOpsNoIn == NULL ? NULL : stream_relationalOpsNoIn->nextNode(stream_relationalOpsNoIn), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop263;	/* break out of the loop */
            	    break;
                }
            }
            loop263: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalOpsNoIn != NULL) stream_relationalOpsNoIn->free(stream_relationalOpsNoIn);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(87, relationalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start additiveExpression
 * .//Emerson.g:591:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* ;
 */
static EmersonParser_additiveExpression_return
additiveExpression(pEmersonParser ctx)
{   
    EmersonParser_additiveExpression_return retval;
    ANTLR3_UINT32 additiveExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM492;
    pANTLR3_COMMON_TOKEN    LTERM494;
    EmersonParser_multiplicativeExpression_return multiplicativeExpression491;
    #undef	RETURN_TYPE_multiplicativeExpression491
    #define	RETURN_TYPE_multiplicativeExpression491 EmersonParser_multiplicativeExpression_return

    EmersonParser_addOps_return addOps493;
    #undef	RETURN_TYPE_addOps493
    #define	RETURN_TYPE_addOps493 EmersonParser_addOps_return

    EmersonParser_multiplicativeExpression_return multiplicativeExpression495;
    #undef	RETURN_TYPE_multiplicativeExpression495
    #define	RETURN_TYPE_multiplicativeExpression495 EmersonParser_multiplicativeExpression_return

    pANTLR3_BASE_TREE LTERM492_tree;
    pANTLR3_BASE_TREE LTERM494_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_addOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicativeExpression;
    /* Initialize rule variables
     */
    additiveExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(88)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM492       = NULL;
    LTERM494       = NULL;
    multiplicativeExpression491.tree = NULL;

    addOps493.tree = NULL;

    multiplicativeExpression495.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM492_tree   = NULL;
    LTERM494_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_addOps   = NULL;
    #define CREATE_stream_addOps  if (stream_addOps == NULL) {stream_addOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule addOps"); }
    stream_multiplicativeExpression   = NULL;
    #define CREATE_stream_multiplicativeExpression  if (stream_multiplicativeExpression == NULL) {stream_multiplicativeExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicativeExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:592:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* )
        // .//Emerson.g:592:4: ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
        {
            // .//Emerson.g:592:4: ( multiplicativeExpression -> multiplicativeExpression )
            // .//Emerson.g:592:5: multiplicativeExpression
            {
                FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression5418);
                multiplicativeExpression491=multiplicativeExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression491.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : multiplicativeExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 592:30: -> multiplicativeExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:592:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*

            for (;;)
            {
                int alt266=2;
                alt266 = cdfa266.predict(ctx, RECOGNIZER, ISTREAM, &cdfa266);
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt266) 
                {
            	case 1:
            	    // .//Emerson.g:592:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
            	    {

            	        // .//Emerson.g:592:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt264=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA264_0 = LA(1);
            	                if ( (LA264_0 == LTERM) ) 
            	                {
            	                    alt264=1;
            	                }

            	            }
            	            switch (alt264) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM492 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression5425); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM492, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop264;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop264: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_addOps_in_additiveExpression5428);
            	        addOps493=addOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_addOps; stream_addOps->add(stream_addOps, addOps493.tree, NULL); }

            	        // .//Emerson.g:592:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt265=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA265_0 = LA(1);
            	                if ( (LA265_0 == LTERM) ) 
            	                {
            	                    alt265=1;
            	                }

            	            }
            	            switch (alt265) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM494 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression5430); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM494, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop265;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop265: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression5433);
            	        multiplicativeExpression495=multiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression495.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : addOps, additiveExpression, multiplicativeExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 592:105: -> ^( addOps $additiveExpression multiplicativeExpression )
            	        	{
            	        	    // .//Emerson.g:592:108: ^( addOps $additiveExpression multiplicativeExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_addOps == NULL ? NULL : stream_addOps->nextNode(stream_addOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop266;	/* break out of the loop */
            	    break;
                }
            }
            loop266: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_addOps != NULL) stream_addOps->free(stream_addOps);
        if (stream_multiplicativeExpression != NULL) stream_multiplicativeExpression->free(stream_multiplicativeExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(88, additiveExpression_StartIndex); }
    return retval;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multOps
 * .//Emerson.g:595:1: multOps : ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) );
 */
static EmersonParser_multOps_return
multOps(pEmersonParser ctx)
{   
    EmersonParser_multOps_return retval;
    ANTLR3_UINT32 multOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal496;
    pANTLR3_COMMON_TOKEN    char_literal497;
    pANTLR3_COMMON_TOKEN    char_literal498;

    pANTLR3_BASE_TREE char_literal496_tree;
    pANTLR3_BASE_TREE char_literal497_tree;
    pANTLR3_BASE_TREE char_literal498_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_200;

    /* Initialize rule variables
     */
    multOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(89)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal496       = NULL;
    char_literal497       = NULL;
    char_literal498       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal496_tree   = NULL;
    char_literal497_tree   = NULL;
    char_literal498_tree   = NULL;

    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 
    stream_200   = NULL;
    #define CREATE_stream_200  if (stream_200 == NULL) {stream_200 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 200"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:596:1: ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) )
            
            ANTLR3_UINT32 alt267;

            alt267=3;

            switch ( LA(1) ) 
            {
            case 198:
            	{
            		alt267=1;
            	}
                break;
            case 199:
            	{
            		alt267=2;
            	}
                break;
            case 200:
            	{
            		alt267=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 267;
                EXCEPTION->state        = 0;


                goto rulemultOpsEx;
            }

            switch (alt267) 
            {
        	case 1:
        	    // .//Emerson.g:596:3: '*'
        	    {
        	        char_literal496 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_multOps5458); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, char_literal496, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 596:7: -> ^( MULT )
        	        	{
        	        	    // .//Emerson.g:596:10: ^( MULT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT, (pANTLR3_UINT8)"MULT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:597:3: '/'
        	    {
        	        char_literal497 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_multOps5468); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, char_literal497, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 597:7: -> ^( DIV )
        	        	{
        	        	    // .//Emerson.g:597:10: ^( DIV )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:598:3: '%'
        	    {
        	        char_literal498 = (pANTLR3_COMMON_TOKEN) MATCHT(200, &FOLLOW_200_in_multOps5478); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_200; stream_200->add(stream_200, char_literal498, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 598:7: -> ^( MOD )
        	        	{
        	        	    // .//Emerson.g:598:10: ^( MOD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultOpsEx; /* Prevent compiler warnings */
    rulemultOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_199 != NULL) stream_199->free(stream_199);
        if (stream_200 != NULL) stream_200->free(stream_200);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(89, multOps_StartIndex); }
    return retval;
}
/* $ANTLR end multOps */

/** 
 * $ANTLR start multiplicativeExpression
 * .//Emerson.g:601:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* ;
 */
static EmersonParser_multiplicativeExpression_return
multiplicativeExpression(pEmersonParser ctx)
{   
    EmersonParser_multiplicativeExpression_return retval;
    ANTLR3_UINT32 multiplicativeExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM500;
    pANTLR3_COMMON_TOKEN    LTERM502;
    EmersonParser_unaryExpression_return unaryExpression499;
    #undef	RETURN_TYPE_unaryExpression499
    #define	RETURN_TYPE_unaryExpression499 EmersonParser_unaryExpression_return

    EmersonParser_multOps_return multOps501;
    #undef	RETURN_TYPE_multOps501
    #define	RETURN_TYPE_multOps501 EmersonParser_multOps_return

    EmersonParser_unaryExpression_return unaryExpression503;
    #undef	RETURN_TYPE_unaryExpression503
    #define	RETURN_TYPE_unaryExpression503 EmersonParser_unaryExpression_return

    pANTLR3_BASE_TREE LTERM500_tree;
    pANTLR3_BASE_TREE LTERM502_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    /* Initialize rule variables
     */
    multiplicativeExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(90)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM500       = NULL;
    LTERM502       = NULL;
    unaryExpression499.tree = NULL;

    multOps501.tree = NULL;

    unaryExpression503.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM500_tree   = NULL;
    LTERM502_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_multOps   = NULL;
    #define CREATE_stream_multOps  if (stream_multOps == NULL) {stream_multOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multOps"); }
    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:602:4: ( ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* )
        // .//Emerson.g:602:6: ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
        {
            // .//Emerson.g:602:6: ( unaryExpression -> unaryExpression )
            // .//Emerson.g:602:7: unaryExpression
            {
                FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression5497);
                unaryExpression499=unaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression499.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : unaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 602:24: -> unaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:602:44: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*

            for (;;)
            {
                int alt270=2;
                alt270 = cdfa270.predict(ctx, RECOGNIZER, ISTREAM, &cdfa270);
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt270) 
                {
            	case 1:
            	    // .//Emerson.g:602:45: ( LTERM )* multOps ( LTERM )* unaryExpression
            	    {

            	        // .//Emerson.g:602:45: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt268=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA268_0 = LA(1);
            	                if ( (LA268_0 == LTERM) ) 
            	                {
            	                    alt268=1;
            	                }

            	            }
            	            switch (alt268) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM500 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression5506); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM500, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop268;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop268: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multOps_in_multiplicativeExpression5509);
            	        multOps501=multOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multOps; stream_multOps->add(stream_multOps, multOps501.tree, NULL); }

            	        // .//Emerson.g:602:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt269=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA269_0 = LA(1);
            	                if ( (LA269_0 == LTERM) ) 
            	                {
            	                    alt269=1;
            	                }

            	            }
            	            switch (alt269) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM502 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression5511); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM502, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop269;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop269: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression5514);
            	        unaryExpression503=unaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression503.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : multiplicativeExpression, multOps, unaryExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 602:83: -> ^( multOps $multiplicativeExpression unaryExpression )
            	        	{
            	        	    // .//Emerson.g:602:86: ^( multOps $multiplicativeExpression unaryExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_multOps == NULL ? NULL : stream_multOps->nextNode(stream_multOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop270;	/* break out of the loop */
            	    break;
                }
            }
            loop270: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_multOps != NULL) stream_multOps->free(stream_multOps);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(90, multiplicativeExpression_StartIndex); }
    return retval;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start postfixExpression
 * .//Emerson.g:606:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static EmersonParser_postfixExpression_return
postfixExpression(pEmersonParser ctx)
{   
    EmersonParser_postfixExpression_return retval;
    ANTLR3_UINT32 postfixExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal505;
    pANTLR3_COMMON_TOKEN    string_literal507;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression504;
    #undef	RETURN_TYPE_leftHandSideExpression504
    #define	RETURN_TYPE_leftHandSideExpression504 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression506;
    #undef	RETURN_TYPE_leftHandSideExpression506
    #define	RETURN_TYPE_leftHandSideExpression506 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression508;
    #undef	RETURN_TYPE_leftHandSideExpression508
    #define	RETURN_TYPE_leftHandSideExpression508 EmersonParser_leftHandSideExpression_return

    pANTLR3_BASE_TREE string_literal505_tree;
    pANTLR3_BASE_TREE string_literal507_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_202;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_201;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    postfixExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(91)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal505       = NULL;
    string_literal507       = NULL;
    leftHandSideExpression504.tree = NULL;

    leftHandSideExpression506.tree = NULL;

    leftHandSideExpression508.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal505_tree   = NULL;
    string_literal507_tree   = NULL;

    stream_202   = NULL;
    #define CREATE_stream_202  if (stream_202 == NULL) {stream_202 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 202"); } 
    stream_201   = NULL;
    #define CREATE_stream_201  if (stream_201 == NULL) {stream_201 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 201"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:607:2: ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression )
            
            ANTLR3_UINT32 alt271;

            alt271=3;

            alt271 = cdfa271.predict(ctx, RECOGNIZER, ISTREAM, &cdfa271);
            if  (HASEXCEPTION())
            {
                goto rulepostfixExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt271) 
            {
        	case 1:
        	    // .//Emerson.g:607:4: leftHandSideExpression '--'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5541);
        	        leftHandSideExpression504=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression504.tree, NULL); }
        	        string_literal505 = (pANTLR3_COMMON_TOKEN) MATCHT(201, &FOLLOW_201_in_postfixExpression5543); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_201; stream_201->add(stream_201, string_literal505, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 607:32: -> ^( MINUSMINUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:607:35: ^( MINUSMINUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:608:4: leftHandSideExpression '++'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5557);
        	        leftHandSideExpression506=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression506.tree, NULL); }
        	        string_literal507 = (pANTLR3_COMMON_TOKEN) MATCHT(202, &FOLLOW_202_in_postfixExpression5559); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_202; stream_202->add(stream_202, string_literal507, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 608:32: -> ^( PLUSPLUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:608:35: ^( PLUSPLUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:609:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5572);
        	        leftHandSideExpression508=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression508.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 609:28: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_202 != NULL) stream_202->free(stream_202);
        if (stream_201 != NULL) stream_201->free(stream_201);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(91, postfixExpression_StartIndex); }
    return retval;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start unaryOps
 * .//Emerson.g:613:1: unaryOps : ( 'delete' -> ^( DELETE_OP ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) );
 */
static EmersonParser_unaryOps_return
unaryOps(pEmersonParser ctx)
{   
    EmersonParser_unaryOps_return retval;
    ANTLR3_UINT32 unaryOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal509;
    pANTLR3_COMMON_TOKEN    string_literal510;
    pANTLR3_COMMON_TOKEN    string_literal511;
    pANTLR3_COMMON_TOKEN    string_literal512;
    pANTLR3_COMMON_TOKEN    string_literal513;
    pANTLR3_COMMON_TOKEN    char_literal514;
    pANTLR3_COMMON_TOKEN    char_literal515;
    pANTLR3_COMMON_TOKEN    char_literal516;
    pANTLR3_COMMON_TOKEN    char_literal517;

    pANTLR3_BASE_TREE string_literal509_tree;
    pANTLR3_BASE_TREE string_literal510_tree;
    pANTLR3_BASE_TREE string_literal511_tree;
    pANTLR3_BASE_TREE string_literal512_tree;
    pANTLR3_BASE_TREE string_literal513_tree;
    pANTLR3_BASE_TREE char_literal514_tree;
    pANTLR3_BASE_TREE char_literal515_tree;
    pANTLR3_BASE_TREE char_literal516_tree;
    pANTLR3_BASE_TREE char_literal517_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_202;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_203;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_204;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_205;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_201;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_206;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_207;

    /* Initialize rule variables
     */
    unaryOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(92)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal509       = NULL;
    string_literal510       = NULL;
    string_literal511       = NULL;
    string_literal512       = NULL;
    string_literal513       = NULL;
    char_literal514       = NULL;
    char_literal515       = NULL;
    char_literal516       = NULL;
    char_literal517       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal509_tree   = NULL;
    string_literal510_tree   = NULL;
    string_literal511_tree   = NULL;
    string_literal512_tree   = NULL;
    string_literal513_tree   = NULL;
    char_literal514_tree   = NULL;
    char_literal515_tree   = NULL;
    char_literal516_tree   = NULL;
    char_literal517_tree   = NULL;

    stream_202   = NULL;
    #define CREATE_stream_202  if (stream_202 == NULL) {stream_202 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 202"); } 
    stream_203   = NULL;
    #define CREATE_stream_203  if (stream_203 == NULL) {stream_203 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 203"); } 
    stream_204   = NULL;
    #define CREATE_stream_204  if (stream_204 == NULL) {stream_204 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 204"); } 
    stream_205   = NULL;
    #define CREATE_stream_205  if (stream_205 == NULL) {stream_205 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 205"); } 
    stream_201   = NULL;
    #define CREATE_stream_201  if (stream_201 == NULL) {stream_201 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 201"); } 
    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 
    stream_206   = NULL;
    #define CREATE_stream_206  if (stream_206 == NULL) {stream_206 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 206"); } 
    stream_207   = NULL;
    #define CREATE_stream_207  if (stream_207 == NULL) {stream_207 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 207"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:614:1: ( 'delete' -> ^( DELETE_OP ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) )
            
            ANTLR3_UINT32 alt272;

            alt272=9;

            switch ( LA(1) ) 
            {
            case 203:
            	{
            		alt272=1;
            	}
                break;
            case 204:
            	{
            		alt272=2;
            	}
                break;
            case 205:
            	{
            		alt272=3;
            	}
                break;
            case 202:
            	{
            		alt272=4;
            	}
                break;
            case 201:
            	{
            		alt272=5;
            	}
                break;
            case 196:
            	{
            		alt272=6;
            	}
                break;
            case 197:
            	{
            		alt272=7;
            	}
                break;
            case 206:
            	{
            		alt272=8;
            	}
                break;
            case 207:
            	{
            		alt272=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 272;
                EXCEPTION->state        = 0;


                goto ruleunaryOpsEx;
            }

            switch (alt272) 
            {
        	case 1:
        	    // .//Emerson.g:614:2: 'delete'
        	    {
        	        string_literal509 = (pANTLR3_COMMON_TOKEN) MATCHT(203, &FOLLOW_203_in_unaryOps5586); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_203; stream_203->add(stream_203, string_literal509, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 614:11: -> ^( DELETE_OP )
        	        	{
        	        	    // .//Emerson.g:614:14: ^( DELETE_OP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELETE_OP, (pANTLR3_UINT8)"DELETE_OP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:615:3: 'void'
        	    {
        	        string_literal510 = (pANTLR3_COMMON_TOKEN) MATCHT(204, &FOLLOW_204_in_unaryOps5596); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_204; stream_204->add(stream_204, string_literal510, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 615:10: -> ^( VOID )
        	        	{
        	        	    // .//Emerson.g:615:13: ^( VOID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VOID, (pANTLR3_UINT8)"VOID"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:616:3: 'typeof'
        	    {
        	        string_literal511 = (pANTLR3_COMMON_TOKEN) MATCHT(205, &FOLLOW_205_in_unaryOps5606); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_205; stream_205->add(stream_205, string_literal511, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 616:12: -> ^( TYPEOF )
        	        	{
        	        	    // .//Emerson.g:616:15: ^( TYPEOF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TYPEOF, (pANTLR3_UINT8)"TYPEOF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:617:3: '++'
        	    {
        	        string_literal512 = (pANTLR3_COMMON_TOKEN) MATCHT(202, &FOLLOW_202_in_unaryOps5616); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_202; stream_202->add(stream_202, string_literal512, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 617:9: -> ^( PLUSPLUS )
        	        	{
        	        	    // .//Emerson.g:617:12: ^( PLUSPLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:618:3: '--'
        	    {
        	        string_literal513 = (pANTLR3_COMMON_TOKEN) MATCHT(201, &FOLLOW_201_in_unaryOps5627); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_201; stream_201->add(stream_201, string_literal513, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 618:9: -> ^( MINUSMINUS )
        	        	{
        	        	    // .//Emerson.g:618:12: ^( MINUSMINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:619:3: '+'
        	    {
        	        char_literal514 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_unaryOps5638); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, char_literal514, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 619:9: -> ^( UNARY_PLUS )
        	        	{
        	        	    // .//Emerson.g:619:12: ^( UNARY_PLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_PLUS, (pANTLR3_UINT8)"UNARY_PLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:620:3: '-'
        	    {
        	        char_literal515 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_unaryOps5650); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, char_literal515, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 620:9: -> ^( UNARY_MINUS )
        	        	{
        	        	    // .//Emerson.g:620:12: ^( UNARY_MINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_MINUS, (pANTLR3_UINT8)"UNARY_MINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:621:3: '~'
        	    {
        	        char_literal516 = (pANTLR3_COMMON_TOKEN) MATCHT(206, &FOLLOW_206_in_unaryOps5662); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_206; stream_206->add(stream_206, char_literal516, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 621:9: -> ^( COMPLEMENT )
        	        	{
        	        	    // .//Emerson.g:621:12: ^( COMPLEMENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMPLEMENT, (pANTLR3_UINT8)"COMPLEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:622:3: '!'
        	    {
        	        char_literal517 = (pANTLR3_COMMON_TOKEN) MATCHT(207, &FOLLOW_207_in_unaryOps5674); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_207; stream_207->add(stream_207, char_literal517, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 622:9: -> ^( NOT )
        	        	{
        	        	    // .//Emerson.g:622:12: ^( NOT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_202 != NULL) stream_202->free(stream_202);
        if (stream_203 != NULL) stream_203->free(stream_203);
        if (stream_204 != NULL) stream_204->free(stream_204);
        if (stream_205 != NULL) stream_205->free(stream_205);
        if (stream_201 != NULL) stream_201->free(stream_201);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_196 != NULL) stream_196->free(stream_196);
        if (stream_206 != NULL) stream_206->free(stream_206);
        if (stream_207 != NULL) stream_207->free(stream_207);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(92, unaryOps_StartIndex); }
    return retval;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//Emerson.g:626:1: unaryExpression : ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) );
 */
static EmersonParser_unaryExpression_return
unaryExpression(pEmersonParser ctx)
{   
    EmersonParser_unaryExpression_return retval;
    ANTLR3_UINT32 unaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_unaryExpression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e EmersonParser_unaryExpression_return

    EmersonParser_postfixExpression_return postfixExpression518;
    #undef	RETURN_TYPE_postfixExpression518
    #define	RETURN_TYPE_postfixExpression518 EmersonParser_postfixExpression_return

    EmersonParser_unaryOps_return unaryOps519;
    #undef	RETURN_TYPE_unaryOps519
    #define	RETURN_TYPE_unaryOps519 EmersonParser_unaryOps_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_postfixExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryOps;
    /* Initialize rule variables
     */
    unaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(93)) )
    {
    	retval.start = 0;

        return retval; 
    }
    e.tree = NULL;

    postfixExpression518.tree = NULL;

    unaryOps519.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }
    stream_postfixExpression   = NULL;
    #define CREATE_stream_postfixExpression  if (stream_postfixExpression == NULL) {stream_postfixExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule postfixExpression"); }
    stream_unaryOps   = NULL;
    #define CREATE_stream_unaryOps  if (stream_unaryOps == NULL) {stream_unaryOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryOps"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:627:9: ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) )
            
            ANTLR3_UINT32 alt273;

            alt273=2;


            {
                int LA273_0 = LA(1);
                if ( (((LA273_0 >= Identifier) && (LA273_0 <= StringLiteral)) || ((LA273_0 >= 139) && (LA273_0 <= 140)) || LA273_0 == 143 || ((LA273_0 >= 166) && (LA273_0 <= 167)) || LA273_0 == 191 || ((LA273_0 >= 208) && (LA273_0 <= 212))) ) 
                {
                    alt273=1;
                }
                else if ( (((LA273_0 >= 196) && (LA273_0 <= 197)) || ((LA273_0 >= 201) && (LA273_0 <= 207))) ) 
                {
                    alt273=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 273;
                    EXCEPTION->state        = 0;


                    goto ruleunaryExpressionEx;
                }
            }
            switch (alt273) 
            {
        	case 1:
        	    // .//Emerson.g:627:11: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression5700);
        	        postfixExpression518=postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_postfixExpression; stream_postfixExpression->add(stream_postfixExpression, postfixExpression518.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : postfixExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 627:29: -> postfixExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_postfixExpression == NULL ? NULL : stream_postfixExpression->nextTree(stream_postfixExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:628:11: unaryOps e= unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryOps_in_unaryExpression5716);
        	        unaryOps519=unaryOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryOps; stream_unaryOps->add(stream_unaryOps, unaryOps519.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression5720);
        	        e=unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : e, unaryOps
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 628:38: -> ^( unaryOps $e)
        	        	{
        	        	    // .//Emerson.g:628:41: ^( unaryOps $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_unaryOps == NULL ? NULL : stream_unaryOps->nextNode(stream_unaryOps), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
        if (stream_postfixExpression != NULL) stream_postfixExpression->free(stream_postfixExpression);
        if (stream_unaryOps != NULL) stream_unaryOps->free(stream_unaryOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(93, unaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start primaryExpression
 * .//Emerson.g:632:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static EmersonParser_primaryExpression_return
primaryExpression(pEmersonParser ctx)
{   
    EmersonParser_primaryExpression_return retval;
    ANTLR3_UINT32 primaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal520;
    pANTLR3_COMMON_TOKEN    Identifier523;
    pANTLR3_COMMON_TOKEN    char_literal529;
    pANTLR3_COMMON_TOKEN    LTERM530;
    pANTLR3_COMMON_TOKEN    LTERM532;
    pANTLR3_COMMON_TOKEN    char_literal533;
    EmersonParser_vectorLiteral_return vectorLiteral521;
    #undef	RETURN_TYPE_vectorLiteral521
    #define	RETURN_TYPE_vectorLiteral521 EmersonParser_vectorLiteral_return

    EmersonParser_quaternionLiteral_return quaternionLiteral522;
    #undef	RETURN_TYPE_quaternionLiteral522
    #define	RETURN_TYPE_quaternionLiteral522 EmersonParser_quaternionLiteral_return

    EmersonParser_dollarExpression_return dollarExpression524;
    #undef	RETURN_TYPE_dollarExpression524
    #define	RETURN_TYPE_dollarExpression524 EmersonParser_dollarExpression_return

    EmersonParser_literal_return literal525;
    #undef	RETURN_TYPE_literal525
    #define	RETURN_TYPE_literal525 EmersonParser_literal_return

    EmersonParser_arrayLiteral_return arrayLiteral526;
    #undef	RETURN_TYPE_arrayLiteral526
    #define	RETURN_TYPE_arrayLiteral526 EmersonParser_arrayLiteral_return

    EmersonParser_objectLiteral_return objectLiteral527;
    #undef	RETURN_TYPE_objectLiteral527
    #define	RETURN_TYPE_objectLiteral527 EmersonParser_objectLiteral_return

    EmersonParser_patternLiteral_return patternLiteral528;
    #undef	RETURN_TYPE_patternLiteral528
    #define	RETURN_TYPE_patternLiteral528 EmersonParser_patternLiteral_return

    EmersonParser_expression_return expression531;
    #undef	RETURN_TYPE_expression531
    #define	RETURN_TYPE_expression531 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal520_tree;
    pANTLR3_BASE_TREE Identifier523_tree;
    pANTLR3_BASE_TREE char_literal529_tree;
    pANTLR3_BASE_TREE LTERM530_tree;
    pANTLR3_BASE_TREE LTERM532_tree;
    pANTLR3_BASE_TREE char_literal533_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    primaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(94)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal520       = NULL;
    Identifier523       = NULL;
    char_literal529       = NULL;
    LTERM530       = NULL;
    LTERM532       = NULL;
    char_literal533       = NULL;
    vectorLiteral521.tree = NULL;

    quaternionLiteral522.tree = NULL;

    dollarExpression524.tree = NULL;

    literal525.tree = NULL;

    arrayLiteral526.tree = NULL;

    objectLiteral527.tree = NULL;

    patternLiteral528.tree = NULL;

    expression531.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal520_tree   = NULL;
    Identifier523_tree   = NULL;
    char_literal529_tree   = NULL;
    LTERM530_tree   = NULL;
    LTERM532_tree   = NULL;
    char_literal533_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:633:2: ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) )
            
            ANTLR3_UINT32 alt276;

            alt276=10;

            alt276 = cdfa276.predict(ctx, RECOGNIZER, ISTREAM, &cdfa276);
            if  (HASEXCEPTION())
            {
                goto ruleprimaryExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt276) 
            {
        	case 1:
        	    // .//Emerson.g:633:4: 'this'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal520 = (pANTLR3_COMMON_TOKEN) MATCHT(208, &FOLLOW_208_in_primaryExpression5749); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal520_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal520));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal520_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:634:11: ( vectorLiteral )=> vectorLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_vectorLiteral_in_primaryExpression5767);
        	        vectorLiteral521=vectorLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, vectorLiteral521.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:635:11: ( quaternionLiteral )=> quaternionLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_quaternionLiteral_in_primaryExpression5785);
        	        quaternionLiteral522=quaternionLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, quaternionLiteral522.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:636:4: Identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Identifier523 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression5790); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Identifier523_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Identifier523));
        	        ADAPTOR->addChild(ADAPTOR, root_0, Identifier523_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:637:11: dollarExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression5802);
        	        dollarExpression524=dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, dollarExpression524.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:638:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression5807);
        	        literal525=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal525.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:639:4: arrayLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression5812);
        	        arrayLiteral526=arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arrayLiteral526.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:640:4: objectLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression5817);
        	        objectLiteral527=objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, objectLiteral527.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:641:11: patternLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_patternLiteral_in_primaryExpression5829);
        	        patternLiteral528=patternLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, patternLiteral528.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:642:4: '(' ( LTERM )* expression ( LTERM )* ')'
        	    {
        	        char_literal529 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_primaryExpression5834); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal529, NULL); }


        	        // .//Emerson.g:642:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt274=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA274_0 = LA(1);
        	                if ( (LA274_0 == LTERM) ) 
        	                {
        	                    alt274=1;
        	                }

        	            }
        	            switch (alt274) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM530 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5836); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM530, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop274;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop274: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression5839);
        	        expression531=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression531.tree, NULL); }

        	        // .//Emerson.g:642:26: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt275=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA275_0 = LA(1);
        	                if ( (LA275_0 == LTERM) ) 
        	                {
        	                    alt275=1;
        	                }

        	            }
        	            switch (alt275) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM532 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5841); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM532, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop275;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop275: ; /* Jump out to here if this rule does not match */

        	        char_literal533 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_primaryExpression5844); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal533, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 642:37: -> ^( PAREN expression )
        	        	{
        	        	    // .//Emerson.g:642:40: ^( PAREN expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAREN, (pANTLR3_UINT8)"PAREN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(94, primaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start vectorLiteral
 * .//Emerson.g:645:1: vectorLiteral : '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* '>' -> ^( VECTOR $e1 $e2 $e3) ;
 */
static EmersonParser_vectorLiteral_return
vectorLiteral(pEmersonParser ctx)
{   
    EmersonParser_vectorLiteral_return retval;
    ANTLR3_UINT32 vectorLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal534;
    pANTLR3_COMMON_TOKEN    LTERM535;
    pANTLR3_COMMON_TOKEN    LTERM536;
    pANTLR3_COMMON_TOKEN    char_literal537;
    pANTLR3_COMMON_TOKEN    LTERM538;
    pANTLR3_COMMON_TOKEN    LTERM539;
    pANTLR3_COMMON_TOKEN    char_literal540;
    pANTLR3_COMMON_TOKEN    LTERM541;
    pANTLR3_COMMON_TOKEN    LTERM542;
    pANTLR3_COMMON_TOKEN    char_literal543;
    EmersonParser_vectorLiteralField_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_vectorLiteralField_return

    pANTLR3_BASE_TREE char_literal534_tree;
    pANTLR3_BASE_TREE LTERM535_tree;
    pANTLR3_BASE_TREE LTERM536_tree;
    pANTLR3_BASE_TREE char_literal537_tree;
    pANTLR3_BASE_TREE LTERM538_tree;
    pANTLR3_BASE_TREE LTERM539_tree;
    pANTLR3_BASE_TREE char_literal540_tree;
    pANTLR3_BASE_TREE LTERM541_tree;
    pANTLR3_BASE_TREE LTERM542_tree;
    pANTLR3_BASE_TREE char_literal543_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_vectorLiteralField;
    /* Initialize rule variables
     */
    vectorLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(95)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal534       = NULL;
    LTERM535       = NULL;
    LTERM536       = NULL;
    char_literal537       = NULL;
    LTERM538       = NULL;
    LTERM539       = NULL;
    char_literal540       = NULL;
    LTERM541       = NULL;
    LTERM542       = NULL;
    char_literal543       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal534_tree   = NULL;
    LTERM535_tree   = NULL;
    LTERM536_tree   = NULL;
    char_literal537_tree   = NULL;
    LTERM538_tree   = NULL;
    LTERM539_tree   = NULL;
    char_literal540_tree   = NULL;
    LTERM541_tree   = NULL;
    LTERM542_tree   = NULL;
    char_literal543_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 
    stream_vectorLiteralField   = NULL;
    #define CREATE_stream_vectorLiteralField  if (stream_vectorLiteralField == NULL) {stream_vectorLiteralField = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule vectorLiteralField"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:646:9: ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* '>' -> ^( VECTOR $e1 $e2 $e3) )
        // .//Emerson.g:646:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* '>'
        {
            char_literal534 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_vectorLiteral5872); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal534, NULL); }


            // .//Emerson.g:646:15: ( LTERM )*

            for (;;)
            {
                int alt277=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA277_0 = LA(1);
                    if ( (LA277_0 == LTERM) ) 
                    {
                        alt277=1;
                    }

                }
                switch (alt277) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM535 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5874); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM535, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop277;	/* break out of the loop */
            	    break;
                }
            }
            loop277: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral5879);
            e1=vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e1.tree, NULL); }

            // .//Emerson.g:646:44: ( LTERM )*

            for (;;)
            {
                int alt278=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA278_0 = LA(1);
                    if ( (LA278_0 == LTERM) ) 
                    {
                        alt278=1;
                    }

                }
                switch (alt278) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM536 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5881); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM536, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop278;	/* break out of the loop */
            	    break;
                }
            }
            loop278: ; /* Jump out to here if this rule does not match */

            char_literal537 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_vectorLiteral5884); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal537, NULL); }


            // .//Emerson.g:646:55: ( LTERM )*

            for (;;)
            {
                int alt279=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA279_0 = LA(1);
                    if ( (LA279_0 == LTERM) ) 
                    {
                        alt279=1;
                    }

                }
                switch (alt279) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM538 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5886); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM538, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop279;	/* break out of the loop */
            	    break;
                }
            }
            loop279: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral5891);
            e2=vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e2.tree, NULL); }

            // .//Emerson.g:646:84: ( LTERM )*

            for (;;)
            {
                int alt280=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA280_0 = LA(1);
                    if ( (LA280_0 == LTERM) ) 
                    {
                        alt280=1;
                    }

                }
                switch (alt280) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM539 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5893); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM539, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop280;	/* break out of the loop */
            	    break;
                }
            }
            loop280: ; /* Jump out to here if this rule does not match */

            char_literal540 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_vectorLiteral5896); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal540, NULL); }


            // .//Emerson.g:646:95: ( LTERM )*

            for (;;)
            {
                int alt281=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA281_0 = LA(1);
                    if ( (LA281_0 == LTERM) ) 
                    {
                        alt281=1;
                    }

                }
                switch (alt281) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM541 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5898); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM541, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop281;	/* break out of the loop */
            	    break;
                }
            }
            loop281: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral5903);
            e3=vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e3.tree, NULL); }

            // .//Emerson.g:646:124: ( LTERM )*

            for (;;)
            {
                int alt282=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA282_0 = LA(1);
                    if ( (LA282_0 == LTERM) ) 
                    {
                        alt282=1;
                    }

                }
                switch (alt282) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM542 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5905); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM542, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop282;	/* break out of the loop */
            	    break;
                }
            }
            loop282: ; /* Jump out to here if this rule does not match */

            char_literal543 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_vectorLiteral5908); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal543, NULL); }


             
            /* AST REWRITE
             * elements          : e3, e1, e2
             * token labels      : 
             * rule labels       : e3, retval, e1, e2
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
            	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 646:135: -> ^( VECTOR $e1 $e2 $e3)
            	{
            	    // .//Emerson.g:646:138: ^( VECTOR $e1 $e2 $e3)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VECTOR, (pANTLR3_UINT8)"VECTOR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);
            	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralEx; /* Prevent compiler warnings */
    rulevectorLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_192 != NULL) stream_192->free(stream_192);
        if (stream_vectorLiteralField != NULL) stream_vectorLiteralField->free(stream_vectorLiteralField);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(95, vectorLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end vectorLiteral */

/** 
 * $ANTLR start quaternionLiteral
 * .//Emerson.g:649:1: quaternionLiteral : ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION $e1 $e2 $e3 $e4) | '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION_AXISANGLE $e1 $e2 $e3 $e4) | '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ';' ( LTERM )* e2= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION_AXISANGLE $e1 $e2) );
 */
static EmersonParser_quaternionLiteral_return
quaternionLiteral(pEmersonParser ctx)
{   
    EmersonParser_quaternionLiteral_return retval;
    ANTLR3_UINT32 quaternionLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal544;
    pANTLR3_COMMON_TOKEN    LTERM545;
    pANTLR3_COMMON_TOKEN    LTERM546;
    pANTLR3_COMMON_TOKEN    char_literal547;
    pANTLR3_COMMON_TOKEN    LTERM548;
    pANTLR3_COMMON_TOKEN    LTERM549;
    pANTLR3_COMMON_TOKEN    char_literal550;
    pANTLR3_COMMON_TOKEN    LTERM551;
    pANTLR3_COMMON_TOKEN    LTERM552;
    pANTLR3_COMMON_TOKEN    char_literal553;
    pANTLR3_COMMON_TOKEN    LTERM554;
    pANTLR3_COMMON_TOKEN    LTERM555;
    pANTLR3_COMMON_TOKEN    char_literal556;
    pANTLR3_COMMON_TOKEN    char_literal557;
    pANTLR3_COMMON_TOKEN    LTERM558;
    pANTLR3_COMMON_TOKEN    LTERM559;
    pANTLR3_COMMON_TOKEN    char_literal560;
    pANTLR3_COMMON_TOKEN    LTERM561;
    pANTLR3_COMMON_TOKEN    LTERM562;
    pANTLR3_COMMON_TOKEN    char_literal563;
    pANTLR3_COMMON_TOKEN    LTERM564;
    pANTLR3_COMMON_TOKEN    LTERM565;
    pANTLR3_COMMON_TOKEN    char_literal566;
    pANTLR3_COMMON_TOKEN    LTERM567;
    pANTLR3_COMMON_TOKEN    LTERM568;
    pANTLR3_COMMON_TOKEN    char_literal569;
    pANTLR3_COMMON_TOKEN    char_literal570;
    pANTLR3_COMMON_TOKEN    LTERM571;
    pANTLR3_COMMON_TOKEN    LTERM572;
    pANTLR3_COMMON_TOKEN    char_literal573;
    pANTLR3_COMMON_TOKEN    LTERM574;
    pANTLR3_COMMON_TOKEN    LTERM575;
    pANTLR3_COMMON_TOKEN    char_literal576;
    EmersonParser_vectorLiteralField_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e4;
    #undef	RETURN_TYPE_e4
    #define	RETURN_TYPE_e4 EmersonParser_vectorLiteralField_return

    pANTLR3_BASE_TREE char_literal544_tree;
    pANTLR3_BASE_TREE LTERM545_tree;
    pANTLR3_BASE_TREE LTERM546_tree;
    pANTLR3_BASE_TREE char_literal547_tree;
    pANTLR3_BASE_TREE LTERM548_tree;
    pANTLR3_BASE_TREE LTERM549_tree;
    pANTLR3_BASE_TREE char_literal550_tree;
    pANTLR3_BASE_TREE LTERM551_tree;
    pANTLR3_BASE_TREE LTERM552_tree;
    pANTLR3_BASE_TREE char_literal553_tree;
    pANTLR3_BASE_TREE LTERM554_tree;
    pANTLR3_BASE_TREE LTERM555_tree;
    pANTLR3_BASE_TREE char_literal556_tree;
    pANTLR3_BASE_TREE char_literal557_tree;
    pANTLR3_BASE_TREE LTERM558_tree;
    pANTLR3_BASE_TREE LTERM559_tree;
    pANTLR3_BASE_TREE char_literal560_tree;
    pANTLR3_BASE_TREE LTERM561_tree;
    pANTLR3_BASE_TREE LTERM562_tree;
    pANTLR3_BASE_TREE char_literal563_tree;
    pANTLR3_BASE_TREE LTERM564_tree;
    pANTLR3_BASE_TREE LTERM565_tree;
    pANTLR3_BASE_TREE char_literal566_tree;
    pANTLR3_BASE_TREE LTERM567_tree;
    pANTLR3_BASE_TREE LTERM568_tree;
    pANTLR3_BASE_TREE char_literal569_tree;
    pANTLR3_BASE_TREE char_literal570_tree;
    pANTLR3_BASE_TREE LTERM571_tree;
    pANTLR3_BASE_TREE LTERM572_tree;
    pANTLR3_BASE_TREE char_literal573_tree;
    pANTLR3_BASE_TREE LTERM574_tree;
    pANTLR3_BASE_TREE LTERM575_tree;
    pANTLR3_BASE_TREE char_literal576_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_vectorLiteralField;
    /* Initialize rule variables
     */
    quaternionLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(96)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal544       = NULL;
    LTERM545       = NULL;
    LTERM546       = NULL;
    char_literal547       = NULL;
    LTERM548       = NULL;
    LTERM549       = NULL;
    char_literal550       = NULL;
    LTERM551       = NULL;
    LTERM552       = NULL;
    char_literal553       = NULL;
    LTERM554       = NULL;
    LTERM555       = NULL;
    char_literal556       = NULL;
    char_literal557       = NULL;
    LTERM558       = NULL;
    LTERM559       = NULL;
    char_literal560       = NULL;
    LTERM561       = NULL;
    LTERM562       = NULL;
    char_literal563       = NULL;
    LTERM564       = NULL;
    LTERM565       = NULL;
    char_literal566       = NULL;
    LTERM567       = NULL;
    LTERM568       = NULL;
    char_literal569       = NULL;
    char_literal570       = NULL;
    LTERM571       = NULL;
    LTERM572       = NULL;
    char_literal573       = NULL;
    LTERM574       = NULL;
    LTERM575       = NULL;
    char_literal576       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    e4.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal544_tree   = NULL;
    LTERM545_tree   = NULL;
    LTERM546_tree   = NULL;
    char_literal547_tree   = NULL;
    LTERM548_tree   = NULL;
    LTERM549_tree   = NULL;
    char_literal550_tree   = NULL;
    LTERM551_tree   = NULL;
    LTERM552_tree   = NULL;
    char_literal553_tree   = NULL;
    LTERM554_tree   = NULL;
    LTERM555_tree   = NULL;
    char_literal556_tree   = NULL;
    char_literal557_tree   = NULL;
    LTERM558_tree   = NULL;
    LTERM559_tree   = NULL;
    char_literal560_tree   = NULL;
    LTERM561_tree   = NULL;
    LTERM562_tree   = NULL;
    char_literal563_tree   = NULL;
    LTERM564_tree   = NULL;
    LTERM565_tree   = NULL;
    char_literal566_tree   = NULL;
    LTERM567_tree   = NULL;
    LTERM568_tree   = NULL;
    char_literal569_tree   = NULL;
    char_literal570_tree   = NULL;
    LTERM571_tree   = NULL;
    LTERM572_tree   = NULL;
    char_literal573_tree   = NULL;
    LTERM574_tree   = NULL;
    LTERM575_tree   = NULL;
    char_literal576_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 
    stream_vectorLiteralField   = NULL;
    #define CREATE_stream_vectorLiteralField  if (stream_vectorLiteralField == NULL) {stream_vectorLiteralField = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule vectorLiteralField"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:650:9: ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION $e1 $e2 $e3 $e4) | '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION_AXISANGLE $e1 $e2 $e3 $e4) | '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ';' ( LTERM )* e2= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION_AXISANGLE $e1 $e2) )
            
            ANTLR3_UINT32 alt303;

            alt303=3;


            {
                int LA303_0 = LA(1);
                if ( (LA303_0 == 191) ) 
                {

                    {
                        int LA303_1 = LA(2);
                        if ( (synpred345_Emerson(ctx)) ) 
                        {
                            alt303=1;
                        }
                        else if ( (synpred354_Emerson(ctx)) ) 
                        {
                            alt303=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt303=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 303;
                            EXCEPTION->state        = 1;


                            goto rulequaternionLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 303;
                    EXCEPTION->state        = 0;


                    goto rulequaternionLiteralEx;
                }
            }
            switch (alt303) 
            {
        	case 1:
        	    // .//Emerson.g:650:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>'
        	    {
        	        char_literal544 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_quaternionLiteral5948); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal544, NULL); }


        	        // .//Emerson.g:650:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt283=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA283_0 = LA(1);
        	                if ( (LA283_0 == LTERM) ) 
        	                {
        	                    alt283=1;
        	                }

        	            }
        	            switch (alt283) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM545 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5950); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM545, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop283;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop283: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral5955);
        	        e1=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e1.tree, NULL); }

        	        // .//Emerson.g:650:44: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt284=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA284_0 = LA(1);
        	                if ( (LA284_0 == LTERM) ) 
        	                {
        	                    alt284=1;
        	                }

        	            }
        	            switch (alt284) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM546 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5957); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM546, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop284;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop284: ; /* Jump out to here if this rule does not match */

        	        char_literal547 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_quaternionLiteral5960); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal547, NULL); }


        	        // .//Emerson.g:650:55: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt285=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA285_0 = LA(1);
        	                if ( (LA285_0 == LTERM) ) 
        	                {
        	                    alt285=1;
        	                }

        	            }
        	            switch (alt285) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM548 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5962); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM548, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop285;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop285: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral5967);
        	        e2=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e2.tree, NULL); }

        	        // .//Emerson.g:650:84: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt286=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA286_0 = LA(1);
        	                if ( (LA286_0 == LTERM) ) 
        	                {
        	                    alt286=1;
        	                }

        	            }
        	            switch (alt286) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM549 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5969); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM549, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop286;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop286: ; /* Jump out to here if this rule does not match */

        	        char_literal550 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_quaternionLiteral5972); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal550, NULL); }


        	        // .//Emerson.g:650:95: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt287=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA287_0 = LA(1);
        	                if ( (LA287_0 == LTERM) ) 
        	                {
        	                    alt287=1;
        	                }

        	            }
        	            switch (alt287) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM551 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5974); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM551, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop287;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop287: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral5979);
        	        e3=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e3.tree, NULL); }

        	        // .//Emerson.g:650:124: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt288=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA288_0 = LA(1);
        	                if ( (LA288_0 == LTERM) ) 
        	                {
        	                    alt288=1;
        	                }

        	            }
        	            switch (alt288) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM552 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5981); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM552, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop288;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop288: ; /* Jump out to here if this rule does not match */

        	        char_literal553 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_quaternionLiteral5984); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal553, NULL); }


        	        // .//Emerson.g:650:135: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt289=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA289_0 = LA(1);
        	                if ( (LA289_0 == LTERM) ) 
        	                {
        	                    alt289=1;
        	                }

        	            }
        	            switch (alt289) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM554 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5986); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM554, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop289;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop289: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral5991);
        	        e4=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e4.tree, NULL); }

        	        // .//Emerson.g:650:164: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt290=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA290_0 = LA(1);
        	                if ( (LA290_0 == LTERM) ) 
        	                {
        	                    alt290=1;
        	                }

        	            }
        	            switch (alt290) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM555 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5993); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM555, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop290;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop290: ; /* Jump out to here if this rule does not match */

        	        char_literal556 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_quaternionLiteral5995); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal556, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : e3, e4, e2, e1
        	         * token labels      : 
        	         * rule labels       : e3, e4, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 650:174: -> ^( QUATERNION $e1 $e2 $e3 $e4)
        	        	{
        	        	    // .//Emerson.g:650:177: ^( QUATERNION $e1 $e2 $e3 $e4)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUATERNION, (pANTLR3_UINT8)"QUATERNION"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:651:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>'
        	    {
        	        char_literal557 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_quaternionLiteral6025); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal557, NULL); }


        	        // .//Emerson.g:651:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt291=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA291_0 = LA(1);
        	                if ( (LA291_0 == LTERM) ) 
        	                {
        	                    alt291=1;
        	                }

        	            }
        	            switch (alt291) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM558 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6027); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM558, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop291;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop291: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6032);
        	        e1=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e1.tree, NULL); }

        	        // .//Emerson.g:651:44: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt292=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA292_0 = LA(1);
        	                if ( (LA292_0 == LTERM) ) 
        	                {
        	                    alt292=1;
        	                }

        	            }
        	            switch (alt292) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM559 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6034); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM559, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop292;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop292: ; /* Jump out to here if this rule does not match */

        	        char_literal560 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_quaternionLiteral6037); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal560, NULL); }


        	        // .//Emerson.g:651:55: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt293=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA293_0 = LA(1);
        	                if ( (LA293_0 == LTERM) ) 
        	                {
        	                    alt293=1;
        	                }

        	            }
        	            switch (alt293) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM561 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6039); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM561, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop293;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop293: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6044);
        	        e2=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e2.tree, NULL); }

        	        // .//Emerson.g:651:84: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt294=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA294_0 = LA(1);
        	                if ( (LA294_0 == LTERM) ) 
        	                {
        	                    alt294=1;
        	                }

        	            }
        	            switch (alt294) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM562 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6046); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM562, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop294;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop294: ; /* Jump out to here if this rule does not match */

        	        char_literal563 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_quaternionLiteral6049); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal563, NULL); }


        	        // .//Emerson.g:651:95: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt295=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA295_0 = LA(1);
        	                if ( (LA295_0 == LTERM) ) 
        	                {
        	                    alt295=1;
        	                }

        	            }
        	            switch (alt295) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM564 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6051); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM564, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop295;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop295: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6056);
        	        e3=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e3.tree, NULL); }

        	        // .//Emerson.g:651:124: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt296=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA296_0 = LA(1);
        	                if ( (LA296_0 == LTERM) ) 
        	                {
        	                    alt296=1;
        	                }

        	            }
        	            switch (alt296) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM565 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6058); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM565, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop296;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop296: ; /* Jump out to here if this rule does not match */

        	        char_literal566 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_quaternionLiteral6061); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal566, NULL); }


        	        // .//Emerson.g:651:135: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt297=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA297_0 = LA(1);
        	                if ( (LA297_0 == LTERM) ) 
        	                {
        	                    alt297=1;
        	                }

        	            }
        	            switch (alt297) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM567 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6063); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM567, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop297;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop297: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6068);
        	        e4=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e4.tree, NULL); }

        	        // .//Emerson.g:651:164: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt298=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA298_0 = LA(1);
        	                if ( (LA298_0 == LTERM) ) 
        	                {
        	                    alt298=1;
        	                }

        	            }
        	            switch (alt298) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM568 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6070); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM568, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop298;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop298: ; /* Jump out to here if this rule does not match */

        	        char_literal569 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_quaternionLiteral6072); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal569, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : e2, e1, e3, e4
        	         * token labels      : 
        	         * rule labels       : e3, e4, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 651:174: -> ^( QUATERNION_AXISANGLE $e1 $e2 $e3 $e4)
        	        	{
        	        	    // .//Emerson.g:651:177: ^( QUATERNION_AXISANGLE $e1 $e2 $e3 $e4)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUATERNION_AXISANGLE, (pANTLR3_UINT8)"QUATERNION_AXISANGLE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:652:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ';' ( LTERM )* e2= vectorLiteralField ( LTERM )* '>'
        	    {
        	        char_literal570 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_quaternionLiteral6102); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal570, NULL); }


        	        // .//Emerson.g:652:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt299=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA299_0 = LA(1);
        	                if ( (LA299_0 == LTERM) ) 
        	                {
        	                    alt299=1;
        	                }

        	            }
        	            switch (alt299) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM571 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6104); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM571, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop299;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop299: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6109);
        	        e1=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e1.tree, NULL); }

        	        // .//Emerson.g:652:44: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt300=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA300_0 = LA(1);
        	                if ( (LA300_0 == LTERM) ) 
        	                {
        	                    alt300=1;
        	                }

        	            }
        	            switch (alt300) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM572 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6111); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM572, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop300;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop300: ; /* Jump out to here if this rule does not match */

        	        char_literal573 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_quaternionLiteral6114); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal573, NULL); }


        	        // .//Emerson.g:652:55: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt301=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA301_0 = LA(1);
        	                if ( (LA301_0 == LTERM) ) 
        	                {
        	                    alt301=1;
        	                }

        	            }
        	            switch (alt301) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM574 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6116); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM574, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop301;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop301: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6121);
        	        e2=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e2.tree, NULL); }

        	        // .//Emerson.g:652:84: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt302=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA302_0 = LA(1);
        	                if ( (LA302_0 == LTERM) ) 
        	                {
        	                    alt302=1;
        	                }

        	            }
        	            switch (alt302) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM575 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6123); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM575, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop302;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop302: ; /* Jump out to here if this rule does not match */

        	        char_literal576 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_quaternionLiteral6125); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal576, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : e2, e1
        	         * token labels      : 
        	         * rule labels       : retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 652:94: -> ^( QUATERNION_AXISANGLE $e1 $e2)
        	        	{
        	        	    // .//Emerson.g:652:97: ^( QUATERNION_AXISANGLE $e1 $e2)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUATERNION_AXISANGLE, (pANTLR3_UINT8)"QUATERNION_AXISANGLE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulequaternionLiteralEx; /* Prevent compiler warnings */
    rulequaternionLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_192 != NULL) stream_192->free(stream_192);
        if (stream_vectorLiteralField != NULL) stream_vectorLiteralField->free(stream_vectorLiteralField);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(96, quaternionLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end quaternionLiteral */

/** 
 * $ANTLR start vectorLiteralField
 * .//Emerson.g:658:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static EmersonParser_vectorLiteralField_return
vectorLiteralField(pEmersonParser ctx)
{   
    EmersonParser_vectorLiteralField_return retval;
    ANTLR3_UINT32 vectorLiteralField_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NumericLiteral578;
    EmersonParser_additiveExpression_return additiveExpression577;
    #undef	RETURN_TYPE_additiveExpression577
    #define	RETURN_TYPE_additiveExpression577 EmersonParser_additiveExpression_return

    EmersonParser_callExpression_return callExpression579;
    #undef	RETURN_TYPE_callExpression579
    #define	RETURN_TYPE_callExpression579 EmersonParser_callExpression_return

    EmersonParser_memberExpression_return memberExpression580;
    #undef	RETURN_TYPE_memberExpression580
    #define	RETURN_TYPE_memberExpression580 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE NumericLiteral578_tree;

    /* Initialize rule variables
     */
    vectorLiteralField_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(97)) )
    {
    	retval.start = 0;

        return retval; 
    }
    NumericLiteral578       = NULL;
    additiveExpression577.tree = NULL;

    callExpression579.tree = NULL;

    memberExpression580.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    NumericLiteral578_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:659:9: ( additiveExpression | NumericLiteral | callExpression | memberExpression )
            
            ANTLR3_UINT32 alt304;

            alt304=4;

            alt304 = cdfa304.predict(ctx, RECOGNIZER, ISTREAM, &cdfa304);
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralFieldEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt304) 
            {
        	case 1:
        	    // .//Emerson.g:659:11: additiveExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_vectorLiteralField6173);
        	        additiveExpression577=additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, additiveExpression577.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:661:11: NumericLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        NumericLiteral578 = (pANTLR3_COMMON_TOKEN) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_vectorLiteralField6186); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NumericLiteral578_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NumericLiteral578));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NumericLiteral578_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:662:11: callExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_callExpression_in_vectorLiteralField6198);
        	        callExpression579=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, callExpression579.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:663:11: memberExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_memberExpression_in_vectorLiteralField6211);
        	        memberExpression580=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, memberExpression580.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralFieldEx; /* Prevent compiler warnings */
    rulevectorLiteralFieldEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(97, vectorLiteralField_StartIndex); }
    return retval;
}
/* $ANTLR end vectorLiteralField */

/** 
 * $ANTLR start dollarExpression
 * .//Emerson.g:667:1: dollarExpression : '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static EmersonParser_dollarExpression_return
dollarExpression(pEmersonParser ctx)
{   
    EmersonParser_dollarExpression_return retval;
    ANTLR3_UINT32 dollarExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal581;
    pANTLR3_COMMON_TOKEN    LTERM582;
    pANTLR3_COMMON_TOKEN    Identifier583;
    pANTLR3_COMMON_TOKEN    LTERM584;
    pANTLR3_COMMON_TOKEN    char_literal585;

    pANTLR3_BASE_TREE char_literal581_tree;
    pANTLR3_BASE_TREE LTERM582_tree;
    pANTLR3_BASE_TREE Identifier583_tree;
    pANTLR3_BASE_TREE LTERM584_tree;
    pANTLR3_BASE_TREE char_literal585_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_209;

    /* Initialize rule variables
     */
    dollarExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(98)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal581       = NULL;
    LTERM582       = NULL;
    Identifier583       = NULL;
    LTERM584       = NULL;
    char_literal585       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal581_tree   = NULL;
    LTERM582_tree   = NULL;
    Identifier583_tree   = NULL;
    LTERM584_tree   = NULL;
    char_literal585_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_209   = NULL;
    #define CREATE_stream_209  if (stream_209 == NULL) {stream_209 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 209"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:668:9: ( '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) )
        // .//Emerson.g:668:11: '`' ( LTERM )* Identifier ( LTERM )* '`'
        {
            char_literal581 = (pANTLR3_COMMON_TOKEN) MATCHT(209, &FOLLOW_209_in_dollarExpression6245); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_209; stream_209->add(stream_209, char_literal581, NULL); }


            // .//Emerson.g:668:15: ( LTERM )*

            for (;;)
            {
                int alt305=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA305_0 = LA(1);
                    if ( (LA305_0 == LTERM) ) 
                    {
                        alt305=1;
                    }

                }
                switch (alt305) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM582 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression6247); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM582, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop305;	/* break out of the loop */
            	    break;
                }
            }
            loop305: ; /* Jump out to here if this rule does not match */

            Identifier583 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression6250); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier583, NULL); }


            // .//Emerson.g:668:33: ( LTERM )*

            for (;;)
            {
                int alt306=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA306_0 = LA(1);
                    if ( (LA306_0 == LTERM) ) 
                    {
                        alt306=1;
                    }

                }
                switch (alt306) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM584 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression6252); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM584, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop306;	/* break out of the loop */
            	    break;
                }
            }
            loop306: ; /* Jump out to here if this rule does not match */

            char_literal585 = (pANTLR3_COMMON_TOKEN) MATCHT(209, &FOLLOW_209_in_dollarExpression6255); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_209; stream_209->add(stream_209, char_literal585, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 668:44: -> ^( DOLLAR_EXPRESSION Identifier )
            	{
            	    // .//Emerson.g:668:47: ^( DOLLAR_EXPRESSION Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOLLAR_EXPRESSION, (pANTLR3_UINT8)"DOLLAR_EXPRESSION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_209 != NULL) stream_209->free(stream_209);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(98, dollarExpression_StartIndex); }
    return retval;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//Emerson.g:672:1: arrayLiteral : ( '[' ( LTERM )* ( expression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( expression )? ) | '[' ( LTERM )* e1= expression ( ',' ( LTERM )* e2= expression )* ( ( ',' )? ) ( LTERM )* ']' -> ^( ARRAY_LITERAL expression ( expression )* ) );
 */
static EmersonParser_arrayLiteral_return
arrayLiteral(pEmersonParser ctx)
{   
    EmersonParser_arrayLiteral_return retval;
    ANTLR3_UINT32 arrayLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal586;
    pANTLR3_COMMON_TOKEN    LTERM587;
    pANTLR3_COMMON_TOKEN    LTERM589;
    pANTLR3_COMMON_TOKEN    char_literal590;
    pANTLR3_COMMON_TOKEN    char_literal591;
    pANTLR3_COMMON_TOKEN    LTERM592;
    pANTLR3_COMMON_TOKEN    char_literal593;
    pANTLR3_COMMON_TOKEN    LTERM594;
    pANTLR3_COMMON_TOKEN    char_literal595;
    pANTLR3_COMMON_TOKEN    LTERM596;
    pANTLR3_COMMON_TOKEN    char_literal597;
    EmersonParser_expression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_expression_return

    EmersonParser_expression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_expression_return

    EmersonParser_expression_return expression588;
    #undef	RETURN_TYPE_expression588
    #define	RETURN_TYPE_expression588 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal586_tree;
    pANTLR3_BASE_TREE LTERM587_tree;
    pANTLR3_BASE_TREE LTERM589_tree;
    pANTLR3_BASE_TREE char_literal590_tree;
    pANTLR3_BASE_TREE char_literal591_tree;
    pANTLR3_BASE_TREE LTERM592_tree;
    pANTLR3_BASE_TREE char_literal593_tree;
    pANTLR3_BASE_TREE LTERM594_tree;
    pANTLR3_BASE_TREE char_literal595_tree;
    pANTLR3_BASE_TREE LTERM596_tree;
    pANTLR3_BASE_TREE char_literal597_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    arrayLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(99)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal586       = NULL;
    LTERM587       = NULL;
    LTERM589       = NULL;
    char_literal590       = NULL;
    char_literal591       = NULL;
    LTERM592       = NULL;
    char_literal593       = NULL;
    LTERM594       = NULL;
    char_literal595       = NULL;
    LTERM596       = NULL;
    char_literal597       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    expression588.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal586_tree   = NULL;
    LTERM587_tree   = NULL;
    LTERM589_tree   = NULL;
    char_literal590_tree   = NULL;
    char_literal591_tree   = NULL;
    LTERM592_tree   = NULL;
    char_literal593_tree   = NULL;
    LTERM594_tree   = NULL;
    char_literal595_tree   = NULL;
    LTERM596_tree   = NULL;
    char_literal597_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:673:3: ( '[' ( LTERM )* ( expression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( expression )? ) | '[' ( LTERM )* e1= expression ( ',' ( LTERM )* e2= expression )* ( ( ',' )? ) ( LTERM )* ']' -> ^( ARRAY_LITERAL expression ( expression )* ) )
            
            ANTLR3_UINT32 alt315;

            alt315=2;


            {
                int LA315_0 = LA(1);
                if ( (LA315_0 == 167) ) 
                {

                    {
                        int LA315_1 = LA(2);
                        if ( (synpred367_Emerson(ctx)) ) 
                        {
                            alt315=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt315=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 315;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 315;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt315) 
            {
        	case 1:
        	    // .//Emerson.g:673:5: '[' ( LTERM )* ( expression )? ( LTERM )* ']'
        	    {
        	        char_literal586 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_arrayLiteral6291); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal586, NULL); }


        	        // .//Emerson.g:673:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt307=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA307_0 = LA(1);
        	                if ( (LA307_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA307_2 = LA(2);
        	                        if ( (synpred364_Emerson(ctx)) ) 
        	                        {
        	                            alt307=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt307) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM587 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6293); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM587, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop307;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop307: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:673:16: ( expression )?
        	        {
        	            int alt308=2;
        	            {
        	                int LA308_0 = LA(1);
        	                if ( (((LA308_0 >= Identifier) && (LA308_0 <= StringLiteral)) || ((LA308_0 >= 139) && (LA308_0 <= 140)) || LA308_0 == 143 || ((LA308_0 >= 166) && (LA308_0 <= 167)) || LA308_0 == 191 || ((LA308_0 >= 196) && (LA308_0 <= 197)) || ((LA308_0 >= 201) && (LA308_0 <= 212))) ) 
        	                {
        	                    alt308=1;
        	                }
        	            }
        	            switch (alt308) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:673:17: expression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral6297);
        	        	        expression588=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression588.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:673:30: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt309=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA309_0 = LA(1);
        	                if ( (LA309_0 == LTERM) ) 
        	                {
        	                    alt309=1;
        	                }

        	            }
        	            switch (alt309) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM589 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6301); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM589, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop309;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop309: ; /* Jump out to here if this rule does not match */

        	        char_literal590 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_arrayLiteral6304); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, char_literal590, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 673:41: -> ^( ARRAY_LITERAL ( expression )? )
        	        	{
        	        	    // .//Emerson.g:673:44: ^( ARRAY_LITERAL ( expression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        // .//Emerson.g:673:60: ( expression )?
        	        	        {
        	        	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:674:5: '[' ( LTERM )* e1= expression ( ',' ( LTERM )* e2= expression )* ( ( ',' )? ) ( LTERM )* ']'
        	    {
        	        char_literal591 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_arrayLiteral6319); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal591, NULL); }


        	        // .//Emerson.g:674:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt310=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA310_0 = LA(1);
        	                if ( (LA310_0 == LTERM) ) 
        	                {
        	                    alt310=1;
        	                }

        	            }
        	            switch (alt310) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM592 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6321); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM592, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop310;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop310: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral6326);
        	        e1=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, e1.tree, NULL); }

        	        // .//Emerson.g:674:30: ( ',' ( LTERM )* e2= expression )*

        	        for (;;)
        	        {
        	            int alt312=2;
        	            alt312 = cdfa312.predict(ctx, RECOGNIZER, ISTREAM, &cdfa312);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt312) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:674:31: ',' ( LTERM )* e2= expression
        	        	    {
        	        	        char_literal593 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_arrayLiteral6329); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal593, NULL); }


        	        	        // .//Emerson.g:674:35: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt311=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA311_0 = LA(1);
        	        	                if ( (LA311_0 == LTERM) ) 
        	        	                {
        	        	                    alt311=1;
        	        	                }

        	        	            }
        	        	            switch (alt311) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM594 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6331); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulearrayLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM594, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop311;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop311: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral6336);
        	        	        e2=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop312;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop312: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:674:58: ( ( ',' )? )
        	        // .//Emerson.g:674:59: ( ',' )?
        	        {

        	            // .//Emerson.g:674:59: ( ',' )?
        	            {
        	                int alt313=2;
        	                {
        	                    int LA313_0 = LA(1);
        	                    if ( (LA313_0 == 142) ) 
        	                    {
        	                        alt313=1;
        	                    }
        	                }
        	                switch (alt313) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: ','
        	            	    {
        	            	        char_literal595 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_arrayLiteral6341); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulearrayLiteralEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal595, NULL); }


        	            	    }
        	            	    break;

        	                }
        	            }

        	        }


        	        // .//Emerson.g:674:65: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt314=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA314_0 = LA(1);
        	                if ( (LA314_0 == LTERM) ) 
        	                {
        	                    alt314=1;
        	                }

        	            }
        	            switch (alt314) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM596 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6345); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM596, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop314;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop314: ; /* Jump out to here if this rule does not match */

        	        char_literal597 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_arrayLiteral6348); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, char_literal597, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression, expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 674:76: -> ^( ARRAY_LITERAL expression ( expression )* )
        	        	{
        	        	    // .//Emerson.g:674:79: ^( ARRAY_LITERAL expression ( expression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
        	        	        // .//Emerson.g:674:106: ( expression )*
        	        	        {
        	        	        	while ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if (stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_167 != NULL) stream_167->free(stream_167);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(99, arrayLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//Emerson.g:678:1: objectLiteral : ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( ( ',' )? ) ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static EmersonParser_objectLiteral_return
objectLiteral(pEmersonParser ctx)
{   
    EmersonParser_objectLiteral_return retval;
    ANTLR3_UINT32 objectLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal598;
    pANTLR3_COMMON_TOKEN    LTERM599;
    pANTLR3_COMMON_TOKEN    LTERM601;
    pANTLR3_COMMON_TOKEN    char_literal602;
    pANTLR3_COMMON_TOKEN    char_literal603;
    pANTLR3_COMMON_TOKEN    LTERM604;
    pANTLR3_COMMON_TOKEN    char_literal605;
    pANTLR3_COMMON_TOKEN    LTERM606;
    pANTLR3_COMMON_TOKEN    char_literal607;
    pANTLR3_COMMON_TOKEN    LTERM608;
    pANTLR3_COMMON_TOKEN    char_literal609;
    EmersonParser_propertyNameAndValue_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return propertyNameAndValue600;
    #undef	RETURN_TYPE_propertyNameAndValue600
    #define	RETURN_TYPE_propertyNameAndValue600 EmersonParser_propertyNameAndValue_return

    pANTLR3_BASE_TREE char_literal598_tree;
    pANTLR3_BASE_TREE LTERM599_tree;
    pANTLR3_BASE_TREE LTERM601_tree;
    pANTLR3_BASE_TREE char_literal602_tree;
    pANTLR3_BASE_TREE char_literal603_tree;
    pANTLR3_BASE_TREE LTERM604_tree;
    pANTLR3_BASE_TREE char_literal605_tree;
    pANTLR3_BASE_TREE LTERM606_tree;
    pANTLR3_BASE_TREE char_literal607_tree;
    pANTLR3_BASE_TREE LTERM608_tree;
    pANTLR3_BASE_TREE char_literal609_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyNameAndValue;
    /* Initialize rule variables
     */
    objectLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(100)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal598       = NULL;
    LTERM599       = NULL;
    LTERM601       = NULL;
    char_literal602       = NULL;
    char_literal603       = NULL;
    LTERM604       = NULL;
    char_literal605       = NULL;
    LTERM606       = NULL;
    char_literal607       = NULL;
    LTERM608       = NULL;
    char_literal609       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    propertyNameAndValue600.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal598_tree   = NULL;
    LTERM599_tree   = NULL;
    LTERM601_tree   = NULL;
    char_literal602_tree   = NULL;
    char_literal603_tree   = NULL;
    LTERM604_tree   = NULL;
    char_literal605_tree   = NULL;
    LTERM606_tree   = NULL;
    char_literal607_tree   = NULL;
    LTERM608_tree   = NULL;
    char_literal609_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_propertyNameAndValue   = NULL;
    #define CREATE_stream_propertyNameAndValue  if (stream_propertyNameAndValue == NULL) {stream_propertyNameAndValue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyNameAndValue"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:679:3: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( ( ',' )? ) ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt324;

            alt324=2;


            {
                int LA324_0 = LA(1);
                if ( (LA324_0 == 143) ) 
                {

                    {
                        int LA324_1 = LA(2);
                        if ( (synpred376_Emerson(ctx)) ) 
                        {
                            alt324=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt324=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 324;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 324;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt324) 
            {
        	case 1:
        	    // .//Emerson.g:679:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
        	    {
        	        char_literal598 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_objectLiteral6380); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal598, NULL); }


        	        // .//Emerson.g:679:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt316=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA316_0 = LA(1);
        	                if ( (LA316_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA316_2 = LA(2);
        	                        if ( (synpred373_Emerson(ctx)) ) 
        	                        {
        	                            alt316=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt316) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM599 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6382); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM599, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop316;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop316: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:679:16: ( propertyNameAndValue )?
        	        {
        	            int alt317=2;
        	            {
        	                int LA317_0 = LA(1);
        	                if ( (((LA317_0 >= Identifier) && (LA317_0 <= StringLiteral))) ) 
        	                {
        	                    alt317=1;
        	                }
        	            }
        	            switch (alt317) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: propertyNameAndValue
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral6385);
        	        	        propertyNameAndValue600=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, propertyNameAndValue600.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:679:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt318=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA318_0 = LA(1);
        	                if ( (LA318_0 == LTERM) ) 
        	                {
        	                    alt318=1;
        	                }

        	            }
        	            switch (alt318) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM601 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6388); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM601, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop318;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop318: ; /* Jump out to here if this rule does not match */

        	        char_literal602 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_objectLiteral6391); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal602, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 679:49: -> ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	{
        	        	    // .//Emerson.g:679:52: ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        // .//Emerson.g:679:66: ( propertyNameAndValue )?
        	        	        {
        	        	        	if ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if ( stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:680:5: '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( ( ',' )? ) ( LTERM )* '}'
        	    {
        	        char_literal603 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_objectLiteral6406); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal603, NULL); }


        	        // .//Emerson.g:680:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt319=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA319_0 = LA(1);
        	                if ( (LA319_0 == LTERM) ) 
        	                {
        	                    alt319=1;
        	                }

        	            }
        	            switch (alt319) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM604 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6408); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM604, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop319;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop319: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral6413);
        	        p1=propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p1.tree, NULL); }

        	        // .//Emerson.g:680:40: ( ',' ( LTERM )* p2= propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt321=2;
        	            alt321 = cdfa321.predict(ctx, RECOGNIZER, ISTREAM, &cdfa321);
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt321) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:680:41: ',' ( LTERM )* p2= propertyNameAndValue
        	        	    {
        	        	        char_literal605 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_objectLiteral6416); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal605, NULL); }


        	        	        // .//Emerson.g:680:45: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt320=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA320_0 = LA(1);
        	        	                if ( (LA320_0 == LTERM) ) 
        	        	                {
        	        	                    alt320=1;
        	        	                }

        	        	            }
        	        	            switch (alt320) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM606 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6418); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleobjectLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM606, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop320;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop320: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral6423);
        	        	        p2=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop321;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop321: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:680:78: ( ( ',' )? )
        	        // .//Emerson.g:680:79: ( ',' )?
        	        {

        	            // .//Emerson.g:680:79: ( ',' )?
        	            {
        	                int alt322=2;
        	                {
        	                    int LA322_0 = LA(1);
        	                    if ( (LA322_0 == 142) ) 
        	                    {
        	                        alt322=1;
        	                    }
        	                }
        	                switch (alt322) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: ','
        	            	    {
        	            	        char_literal607 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_objectLiteral6428); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleobjectLiteralEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal607, NULL); }


        	            	    }
        	            	    break;

        	                }
        	            }

        	        }


        	        // .//Emerson.g:680:85: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt323=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA323_0 = LA(1);
        	                if ( (LA323_0 == LTERM) ) 
        	                {
        	                    alt323=1;
        	                }

        	            }
        	            switch (alt323) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM608 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6432); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM608, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop323;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop323: ; /* Jump out to here if this rule does not match */

        	        char_literal609 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_objectLiteral6439); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal609, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue, propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 680:100: -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	{
        	        	    // .//Emerson.g:680:103: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));
        	        	        // .//Emerson.g:680:138: ( propertyNameAndValue )*
        	        	        {
        	        	        	while ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->free(stream_propertyNameAndValue);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(100, objectLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start patternLiteral
 * .//Emerson.g:684:1: patternLiteral : ( '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}' -> ^( PATTERN_LITERAL ( nameValueProto )? ) | '{' ( LTERM )* p1= nameValueProto ( ',' ( LTERM )* p2= nameValueProto )* ( LTERM )* '}' -> ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) );
 */
static EmersonParser_patternLiteral_return
patternLiteral(pEmersonParser ctx)
{   
    EmersonParser_patternLiteral_return retval;
    ANTLR3_UINT32 patternLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal610;
    pANTLR3_COMMON_TOKEN    LTERM611;
    pANTLR3_COMMON_TOKEN    LTERM613;
    pANTLR3_COMMON_TOKEN    char_literal614;
    pANTLR3_COMMON_TOKEN    char_literal615;
    pANTLR3_COMMON_TOKEN    LTERM616;
    pANTLR3_COMMON_TOKEN    char_literal617;
    pANTLR3_COMMON_TOKEN    LTERM618;
    pANTLR3_COMMON_TOKEN    LTERM619;
    pANTLR3_COMMON_TOKEN    char_literal620;
    EmersonParser_nameValueProto_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_nameValueProto_return

    EmersonParser_nameValueProto_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_nameValueProto_return

    EmersonParser_nameValueProto_return nameValueProto612;
    #undef	RETURN_TYPE_nameValueProto612
    #define	RETURN_TYPE_nameValueProto612 EmersonParser_nameValueProto_return

    pANTLR3_BASE_TREE char_literal610_tree;
    pANTLR3_BASE_TREE LTERM611_tree;
    pANTLR3_BASE_TREE LTERM613_tree;
    pANTLR3_BASE_TREE char_literal614_tree;
    pANTLR3_BASE_TREE char_literal615_tree;
    pANTLR3_BASE_TREE LTERM616_tree;
    pANTLR3_BASE_TREE char_literal617_tree;
    pANTLR3_BASE_TREE LTERM618_tree;
    pANTLR3_BASE_TREE LTERM619_tree;
    pANTLR3_BASE_TREE char_literal620_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_nameValueProto;
    /* Initialize rule variables
     */
    patternLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(101)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal610       = NULL;
    LTERM611       = NULL;
    LTERM613       = NULL;
    char_literal614       = NULL;
    char_literal615       = NULL;
    LTERM616       = NULL;
    char_literal617       = NULL;
    LTERM618       = NULL;
    LTERM619       = NULL;
    char_literal620       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    nameValueProto612.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal610_tree   = NULL;
    LTERM611_tree   = NULL;
    LTERM613_tree   = NULL;
    char_literal614_tree   = NULL;
    char_literal615_tree   = NULL;
    LTERM616_tree   = NULL;
    char_literal617_tree   = NULL;
    LTERM618_tree   = NULL;
    LTERM619_tree   = NULL;
    char_literal620_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_nameValueProto   = NULL;
    #define CREATE_stream_nameValueProto  if (stream_nameValueProto == NULL) {stream_nameValueProto = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule nameValueProto"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:685:3: ( '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}' -> ^( PATTERN_LITERAL ( nameValueProto )? ) | '{' ( LTERM )* p1= nameValueProto ( ',' ( LTERM )* p2= nameValueProto )* ( LTERM )* '}' -> ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) )
            
            ANTLR3_UINT32 alt332;

            alt332=2;


            {
                int LA332_0 = LA(1);
                if ( (LA332_0 == 143) ) 
                {

                    {
                        int LA332_1 = LA(2);
                        if ( (synpred385_Emerson(ctx)) ) 
                        {
                            alt332=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt332=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 332;
                            EXCEPTION->state        = 1;


                            goto rulepatternLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 332;
                    EXCEPTION->state        = 0;


                    goto rulepatternLiteralEx;
                }
            }
            switch (alt332) 
            {
        	case 1:
        	    // .//Emerson.g:685:5: '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}'
        	    {
        	        char_literal610 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_patternLiteral6465); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal610, NULL); }


        	        // .//Emerson.g:685:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt325=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA325_0 = LA(1);
        	                if ( (LA325_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA325_2 = LA(2);
        	                        if ( (synpred382_Emerson(ctx)) ) 
        	                        {
        	                            alt325=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt325) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM611 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6467); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM611, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop325;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop325: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:685:16: ( nameValueProto )?
        	        {
        	            int alt326=2;
        	            alt326 = cdfa326.predict(ctx, RECOGNIZER, ISTREAM, &cdfa326);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt326) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: nameValueProto
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral6470);
        	        	        nameValueProto612=nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_nameValueProto; stream_nameValueProto->add(stream_nameValueProto, nameValueProto612.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:685:32: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt327=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA327_0 = LA(1);
        	                if ( (LA327_0 == LTERM) ) 
        	                {
        	                    alt327=1;
        	                }

        	            }
        	            switch (alt327) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM613 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6473); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM613, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop327;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop327: ; /* Jump out to here if this rule does not match */

        	        char_literal614 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_patternLiteral6476); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal614, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : nameValueProto
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 685:43: -> ^( PATTERN_LITERAL ( nameValueProto )? )
        	        	{
        	        	    // .//Emerson.g:685:46: ^( PATTERN_LITERAL ( nameValueProto )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PATTERN_LITERAL, (pANTLR3_UINT8)"PATTERN_LITERAL"), root_1));

        	        	        // .//Emerson.g:685:64: ( nameValueProto )?
        	        	        {
        	        	        	if ( (stream_nameValueProto != NULL && stream_nameValueProto->hasNext(stream_nameValueProto))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nameValueProto == NULL ? NULL : stream_nameValueProto->nextTree(stream_nameValueProto));

        	        	        	}
        	        	        	if ( stream_nameValueProto != NULL) stream_nameValueProto->reset(stream_nameValueProto);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:686:5: '{' ( LTERM )* p1= nameValueProto ( ',' ( LTERM )* p2= nameValueProto )* ( LTERM )* '}'
        	    {
        	        char_literal615 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_patternLiteral6491); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal615, NULL); }


        	        // .//Emerson.g:686:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt328=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA328_0 = LA(1);
        	                if ( (LA328_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA328_2 = LA(2);
        	                        if ( (synpred386_Emerson(ctx)) ) 
        	                        {
        	                            alt328=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt328) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM616 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6493); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM616, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop328;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop328: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral6499);
        	        p1=nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_nameValueProto; stream_nameValueProto->add(stream_nameValueProto, p1.tree, NULL); }

        	        // .//Emerson.g:686:35: ( ',' ( LTERM )* p2= nameValueProto )*

        	        for (;;)
        	        {
        	            int alt330=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA330_0 = LA(1);
        	                if ( (LA330_0 == 142) ) 
        	                {
        	                    alt330=1;
        	                }

        	            }
        	            switch (alt330) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:686:36: ',' ( LTERM )* p2= nameValueProto
        	        	    {
        	        	        char_literal617 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_patternLiteral6502); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal617, NULL); }


        	        	        // .//Emerson.g:686:40: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt329=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA329_0 = LA(1);
        	        	                if ( (LA329_0 == LTERM) ) 
        	        	                {
        	        	                    {
        	        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                        */
        	        	                        int LA329_2 = LA(2);
        	        	                        if ( (synpred387_Emerson(ctx)) ) 
        	        	                        {
        	        	                            alt329=1;
        	        	                        }

        	        	                    }
        	        	                }

        	        	            }
        	        	            switch (alt329) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM618 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6504); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepatternLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM618, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop329;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop329: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral6509);
        	        	        p2=nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_nameValueProto; stream_nameValueProto->add(stream_nameValueProto, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop330;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop330: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:686:67: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt331=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA331_0 = LA(1);
        	                if ( (LA331_0 == LTERM) ) 
        	                {
        	                    alt331=1;
        	                }

        	            }
        	            switch (alt331) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM619 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6513); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM619, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop331;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop331: ; /* Jump out to here if this rule does not match */

        	        char_literal620 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_patternLiteral6516); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal620, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : nameValueProto, nameValueProto
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 686:78: -> ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	        	{
        	        	    // .//Emerson.g:686:81: ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PATTERN_LITERAL, (pANTLR3_UINT8)"PATTERN_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_nameValueProto == NULL ? NULL : stream_nameValueProto->nextTree(stream_nameValueProto));
        	        	        // .//Emerson.g:686:114: ( nameValueProto )*
        	        	        {
        	        	        	while ( (stream_nameValueProto != NULL && stream_nameValueProto->hasNext(stream_nameValueProto))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nameValueProto == NULL ? NULL : stream_nameValueProto->nextTree(stream_nameValueProto));

        	        	        	}
        	        	        	if (stream_nameValueProto != NULL) stream_nameValueProto->reset(stream_nameValueProto);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepatternLiteralEx; /* Prevent compiler warnings */
    rulepatternLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_nameValueProto != NULL) stream_nameValueProto->free(stream_nameValueProto);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(101, patternLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end patternLiteral */

/** 
 * $ANTLR start propertyNameAndValue
 * .//Emerson.g:689:1: propertyNameAndValue : propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) ;
 */
static EmersonParser_propertyNameAndValue_return
propertyNameAndValue(pEmersonParser ctx)
{   
    EmersonParser_propertyNameAndValue_return retval;
    ANTLR3_UINT32 propertyNameAndValue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM622;
    pANTLR3_COMMON_TOKEN    char_literal623;
    pANTLR3_COMMON_TOKEN    LTERM624;
    EmersonParser_propertyName_return propertyName621;
    #undef	RETURN_TYPE_propertyName621
    #define	RETURN_TYPE_propertyName621 EmersonParser_propertyName_return

    EmersonParser_assignmentExpression_return assignmentExpression625;
    #undef	RETURN_TYPE_assignmentExpression625
    #define	RETURN_TYPE_assignmentExpression625 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM622_tree;
    pANTLR3_BASE_TREE char_literal623_tree;
    pANTLR3_BASE_TREE LTERM624_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    propertyNameAndValue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(102)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM622       = NULL;
    char_literal623       = NULL;
    LTERM624       = NULL;
    propertyName621.tree = NULL;

    assignmentExpression625.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM622_tree   = NULL;
    char_literal623_tree   = NULL;
    LTERM624_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:690:9: ( propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) )
        // .//Emerson.g:690:11: propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue6546);
            propertyName621=propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName621.tree, NULL); }

            // .//Emerson.g:690:24: ( LTERM )*

            for (;;)
            {
                int alt333=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA333_0 = LA(1);
                    if ( (LA333_0 == LTERM) ) 
                    {
                        alt333=1;
                    }

                }
                switch (alt333) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM622 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue6548); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM622, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop333;	/* break out of the loop */
            	    break;
                }
            }
            loop333: ; /* Jump out to here if this rule does not match */

            char_literal623 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_propertyNameAndValue6551); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal623, NULL); }


            // .//Emerson.g:690:35: ( LTERM )*

            for (;;)
            {
                int alt334=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA334_0 = LA(1);
                    if ( (LA334_0 == LTERM) ) 
                    {
                        alt334=1;
                    }

                }
                switch (alt334) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM624 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue6553); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM624, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop334;	/* break out of the loop */
            	    break;
                }
            }
            loop334: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_propertyNameAndValue6556);
            assignmentExpression625=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression625.tree, NULL); }

             
            /* AST REWRITE
             * elements          : propertyName, assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 690:63: -> ^( NAME_VALUE propertyName assignmentExpression )
            	{
            	    // .//Emerson.g:690:66: ^( NAME_VALUE propertyName assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE, (pANTLR3_UINT8)"NAME_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(102, propertyNameAndValue_StartIndex); }
    return retval;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start nameValueProto
 * .//Emerson.g:694:1: nameValueProto : ( ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= assignmentExpression ( LTERM )* )? ':' ( LTERM )* (a2= assignmentExpression )? -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? ) | ( LTERM )* ':' ( LTERM )* ':' -> ^( BLANK_NAME_VAL_PROT ) );
 */
static EmersonParser_nameValueProto_return
nameValueProto(pEmersonParser ctx)
{   
    EmersonParser_nameValueProto_return retval;
    ANTLR3_UINT32 nameValueProto_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM627;
    pANTLR3_COMMON_TOKEN    char_literal628;
    pANTLR3_COMMON_TOKEN    LTERM629;
    pANTLR3_COMMON_TOKEN    LTERM630;
    pANTLR3_COMMON_TOKEN    char_literal631;
    pANTLR3_COMMON_TOKEN    LTERM632;
    pANTLR3_COMMON_TOKEN    LTERM633;
    pANTLR3_COMMON_TOKEN    char_literal634;
    pANTLR3_COMMON_TOKEN    LTERM635;
    pANTLR3_COMMON_TOKEN    char_literal636;
    EmersonParser_assignmentExpression_return a1;
    #undef	RETURN_TYPE_a1
    #define	RETURN_TYPE_a1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return a2;
    #undef	RETURN_TYPE_a2
    #define	RETURN_TYPE_a2 EmersonParser_assignmentExpression_return

    EmersonParser_propertyName_return propertyName626;
    #undef	RETURN_TYPE_propertyName626
    #define	RETURN_TYPE_propertyName626 EmersonParser_propertyName_return

    pANTLR3_BASE_TREE LTERM627_tree;
    pANTLR3_BASE_TREE char_literal628_tree;
    pANTLR3_BASE_TREE LTERM629_tree;
    pANTLR3_BASE_TREE LTERM630_tree;
    pANTLR3_BASE_TREE char_literal631_tree;
    pANTLR3_BASE_TREE LTERM632_tree;
    pANTLR3_BASE_TREE LTERM633_tree;
    pANTLR3_BASE_TREE char_literal634_tree;
    pANTLR3_BASE_TREE LTERM635_tree;
    pANTLR3_BASE_TREE char_literal636_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    nameValueProto_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(103)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM627       = NULL;
    char_literal628       = NULL;
    LTERM629       = NULL;
    LTERM630       = NULL;
    char_literal631       = NULL;
    LTERM632       = NULL;
    LTERM633       = NULL;
    char_literal634       = NULL;
    LTERM635       = NULL;
    char_literal636       = NULL;
    a1.tree = NULL;

    a2.tree = NULL;

    propertyName626.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM627_tree   = NULL;
    char_literal628_tree   = NULL;
    LTERM629_tree   = NULL;
    LTERM630_tree   = NULL;
    char_literal631_tree   = NULL;
    LTERM632_tree   = NULL;
    LTERM633_tree   = NULL;
    char_literal634_tree   = NULL;
    LTERM635_tree   = NULL;
    char_literal636_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:695:5: ( ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= assignmentExpression ( LTERM )* )? ':' ( LTERM )* (a2= assignmentExpression )? -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? ) | ( LTERM )* ':' ( LTERM )* ':' -> ^( BLANK_NAME_VAL_PROT ) )
            
            ANTLR3_UINT32 alt343;

            alt343=2;


            {
                int LA343_0 = LA(1);
                if ( (((LA343_0 >= Identifier) && (LA343_0 <= StringLiteral))) ) 
                {
                    alt343=1;
                }
                else if ( (LA343_0 == LTERM || LA343_0 == 160) ) 
                {
                    alt343=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 343;
                    EXCEPTION->state        = 0;


                    goto rulenameValueProtoEx;
                }
            }
            switch (alt343) 
            {
        	case 1:
        	    // .//Emerson.g:695:7: ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= assignmentExpression ( LTERM )* )? ':' ( LTERM )* (a2= assignmentExpression )?
        	    {
        	        // .//Emerson.g:695:7: ( propertyName ( LTERM )* )
        	        // .//Emerson.g:695:8: propertyName ( LTERM )*
        	        {
        	            FOLLOWPUSH(FOLLOW_propertyName_in_nameValueProto6589);
        	            propertyName626=propertyName(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName626.tree, NULL); }

        	            // .//Emerson.g:695:21: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt335=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA335_0 = LA(1);
        	                    if ( (LA335_0 == LTERM) ) 
        	                    {
        	                        alt335=1;
        	                    }

        	                }
        	                switch (alt335) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM627 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6591); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulenameValueProtoEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM627, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop335;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop335: ; /* Jump out to here if this rule does not match */


        	        }

        	        char_literal628 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_nameValueProto6595); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal628, NULL); }


        	        // .//Emerson.g:695:34: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt336=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA336_0 = LA(1);
        	                if ( (LA336_0 == LTERM) ) 
        	                {
        	                    alt336=1;
        	                }

        	            }
        	            switch (alt336) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM629 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6598); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM629, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop336;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop336: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:695:41: (a1= assignmentExpression ( LTERM )* )?
        	        {
        	            int alt338=2;
        	            {
        	                int LA338_0 = LA(1);
        	                if ( (((LA338_0 >= Identifier) && (LA338_0 <= StringLiteral)) || ((LA338_0 >= 139) && (LA338_0 <= 140)) || LA338_0 == 143 || ((LA338_0 >= 166) && (LA338_0 <= 167)) || LA338_0 == 191 || ((LA338_0 >= 196) && (LA338_0 <= 197)) || ((LA338_0 >= 201) && (LA338_0 <= 212))) ) 
        	                {
        	                    alt338=1;
        	                }
        	            }
        	            switch (alt338) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:695:42: a1= assignmentExpression ( LTERM )*
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_nameValueProto6604);
        	        	        a1=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, a1.tree, NULL); }

        	        	        // .//Emerson.g:695:66: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt337=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA337_0 = LA(1);
        	        	                if ( (LA337_0 == LTERM) ) 
        	        	                {
        	        	                    alt337=1;
        	        	                }

        	        	            }
        	        	            switch (alt337) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM630 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6606); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulenameValueProtoEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM630, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop337;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop337: ; /* Jump out to here if this rule does not match */


        	        	    }
        	        	    break;

        	            }
        	        }
        	        char_literal631 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_nameValueProto6611); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal631, NULL); }


        	        // .//Emerson.g:695:79: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt339=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA339_0 = LA(1);
        	                if ( (LA339_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA339_2 = LA(2);
        	                        if ( (synpred396_Emerson(ctx)) ) 
        	                        {
        	                            alt339=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt339) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM632 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6613); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM632, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop339;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop339: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:695:86: (a2= assignmentExpression )?
        	        {
        	            int alt340=2;
        	            {
        	                int LA340_0 = LA(1);
        	                if ( (((LA340_0 >= Identifier) && (LA340_0 <= StringLiteral)) || ((LA340_0 >= 139) && (LA340_0 <= 140)) || LA340_0 == 143 || ((LA340_0 >= 166) && (LA340_0 <= 167)) || LA340_0 == 191 || ((LA340_0 >= 196) && (LA340_0 <= 197)) || ((LA340_0 >= 201) && (LA340_0 <= 212))) ) 
        	                {
        	                    alt340=1;
        	                }
        	            }
        	            switch (alt340) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:695:88: a2= assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_nameValueProto6620);
        	        	        a2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, a2.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : a1, a2, propertyName
        	         * token labels      : 
        	         * rule labels       : retval, a1, a2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_a1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a1", a1.tree != NULL ? a1.tree : NULL);
        	        	stream_a2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a2", a2.tree != NULL ? a2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 695:115: -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? )
        	        	{
        	        	    // .//Emerson.g:695:118: ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE_PROTO, (pANTLR3_UINT8)"NAME_VALUE_PROTO"), root_1));

        	        	        // .//Emerson.g:695:137: ^( NAME propertyName )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME, (pANTLR3_UINT8)"NAME"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // .//Emerson.g:695:158: ( ^( VALUE $a1) )?
        	        	        {
        	        	        	if ( (stream_a1 != NULL && stream_a1->hasNext(stream_a1))  )
        	        	        	{
        	        	        		// .//Emerson.g:695:159: ^( VALUE $a1)
        	        	        		{
        	        	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VALUE, (pANTLR3_UINT8)"VALUE"), root_2));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_a1 == NULL ? NULL : stream_a1->nextTree(stream_a1));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        		}

        	        	        	}
        	        	        	if ( stream_a1 != NULL) stream_a1->reset(stream_a1);

        	        	        }
        	        	        // .//Emerson.g:695:174: ( ^( PROTO $a2) )?
        	        	        {
        	        	        	if ( (stream_a2 != NULL && stream_a2->hasNext(stream_a2))  )
        	        	        	{
        	        	        		// .//Emerson.g:695:175: ^( PROTO $a2)
        	        	        		{
        	        	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROTO, (pANTLR3_UINT8)"PROTO"), root_2));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_a2 == NULL ? NULL : stream_a2->nextTree(stream_a2));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        		}

        	        	        	}
        	        	        	if ( stream_a2 != NULL) stream_a2->reset(stream_a2);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_a1 != NULL) stream_a1->free(stream_a1);
        	        	if (stream_a2 != NULL) stream_a2->free(stream_a2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:696:7: ( LTERM )* ':' ( LTERM )* ':'
        	    {

        	        // .//Emerson.g:696:7: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt341=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA341_0 = LA(1);
        	                if ( (LA341_0 == LTERM) ) 
        	                {
        	                    alt341=1;
        	                }

        	            }
        	            switch (alt341) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM633 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6664); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM633, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop341;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop341: ; /* Jump out to here if this rule does not match */

        	        char_literal634 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_nameValueProto6667); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal634, NULL); }


        	        // .//Emerson.g:696:18: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt342=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA342_0 = LA(1);
        	                if ( (LA342_0 == LTERM) ) 
        	                {
        	                    alt342=1;
        	                }

        	            }
        	            switch (alt342) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM635 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6669); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM635, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop342;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop342: ; /* Jump out to here if this rule does not match */

        	        char_literal636 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_nameValueProto6672); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, char_literal636, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 696:29: -> ^( BLANK_NAME_VAL_PROT )
        	        	{
        	        	    // .//Emerson.g:696:32: ^( BLANK_NAME_VAL_PROT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BLANK_NAME_VAL_PROT, (pANTLR3_UINT8)"BLANK_NAME_VAL_PROT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenameValueProtoEx; /* Prevent compiler warnings */
    rulenameValueProtoEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(103, nameValueProto_StartIndex); }
    return retval;
}
/* $ANTLR end nameValueProto */

/** 
 * $ANTLR start propertyName
 * .//Emerson.g:701:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static EmersonParser_propertyName_return
propertyName(pEmersonParser ctx)
{   
    EmersonParser_propertyName_return retval;
    ANTLR3_UINT32 propertyName_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set637;

    pANTLR3_BASE_TREE set637_tree;

    /* Initialize rule variables
     */
    propertyName_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(104)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set637       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set637_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:702:2: ( Identifier | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set637=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Identifier) && (LA(1) <= StringLiteral)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set637)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_propertyName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_propertyName0);    goto rulepropertyNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(104, propertyName_StartIndex); }
    return retval;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//Emerson.g:709:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static EmersonParser_literal_return
literal(pEmersonParser ctx)
{   
    EmersonParser_literal_return retval;
    ANTLR3_UINT32 literal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set638;

    pANTLR3_BASE_TREE set638_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(105)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set638       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set638_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:710:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set638=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= NumericLiteral) && (LA(1) <= StringLiteral)) || ((LA(1) >= 210) && (LA(1) <= 212)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set638)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(105, literal_StartIndex); }
    return retval;
}
/* $ANTLR end literal */

// $ANTLR start synpred1_Emerson
static void synpred1_Emerson_fragment(pEmersonParser ctx ) 
{
	pANTLR3_COMMON_TOKEN    a;

	a       = NULL;

    // .//Emerson.g:144:5: (a= LTERM )
    // .//Emerson.g:144:5: a= LTERM
    {
        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_synpred1_Emerson895); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_EmersonEx; /* Prevent compiler warnings */
rulesynpred1_EmersonEx: ;

}
// $ANTLR end synpred1_Emerson

// $ANTLR start synpred4_Emerson
static void synpred4_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:148:19: ( LTERM )
    // .//Emerson.g:148:19: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred4_Emerson929); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred4_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred4_EmersonEx; /* Prevent compiler warnings */
rulesynpred4_EmersonEx: ;

}
// $ANTLR end synpred4_Emerson

// $ANTLR start synpred8_Emerson
static void synpred8_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:158:33: ( LTERM )
    // .//Emerson.g:158:33: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred8_Emerson986); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred8_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred8_EmersonEx; /* Prevent compiler warnings */
rulesynpred8_EmersonEx: ;

}
// $ANTLR end synpred8_Emerson

// $ANTLR start synpred11_Emerson
static void synpred11_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:162:15: ( LTERM )
    // .//Emerson.g:162:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred11_Emerson1023); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred11_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred11_EmersonEx; /* Prevent compiler warnings */
rulesynpred11_EmersonEx: ;

}
// $ANTLR end synpred11_Emerson

// $ANTLR start synpred14_Emerson
static void synpred14_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:162:45: ( LTERM )
    // .//Emerson.g:162:45: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred14_Emerson1034); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred14_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred14_EmersonEx; /* Prevent compiler warnings */
rulesynpred14_EmersonEx: ;

}
// $ANTLR end synpred14_Emerson

// $ANTLR start synpred22_Emerson
static void synpred22_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:171:8: ( LTERM )
    // .//Emerson.g:171:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred22_Emerson1125); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred22_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred22_EmersonEx; /* Prevent compiler warnings */
rulesynpred22_EmersonEx: ;

}
// $ANTLR end synpred22_Emerson

// $ANTLR start synpred24_Emerson
static void synpred24_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:176:4: ( noOpStatement )
    // .//Emerson.g:176:4: noOpStatement
    {
        FOLLOWPUSH(FOLLOW_noOpStatement_in_synpred24_Emerson1151);
        noOpStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred24_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred24_EmersonEx; /* Prevent compiler warnings */
rulesynpred24_EmersonEx: ;

}
// $ANTLR end synpred24_Emerson

// $ANTLR start synpred25_Emerson
static void synpred25_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:177:11: ( switchStatement )
    // .//Emerson.g:177:12: switchStatement
    {
        FOLLOWPUSH(FOLLOW_switchStatement_in_synpred25_Emerson1164);
        switchStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred25_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred25_EmersonEx; /* Prevent compiler warnings */
rulesynpred25_EmersonEx: ;

}
// $ANTLR end synpred25_Emerson

// $ANTLR start synpred26_Emerson
static void synpred26_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:178:11: ( statementBlock )
    // .//Emerson.g:178:11: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred26_Emerson1181);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_EmersonEx; /* Prevent compiler warnings */
rulesynpred26_EmersonEx: ;

}
// $ANTLR end synpred26_Emerson

// $ANTLR start synpred28_Emerson
static void synpred28_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:180:4: ( emptyStatement )
    // .//Emerson.g:180:4: emptyStatement
    {
        FOLLOWPUSH(FOLLOW_emptyStatement_in_synpred28_Emerson1191);
        emptyStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred28_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred28_EmersonEx; /* Prevent compiler warnings */
rulesynpred28_EmersonEx: ;

}
// $ANTLR end synpred28_Emerson

// $ANTLR start synpred29_Emerson
static void synpred29_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:181:4: ( expressionStatement )
    // .//Emerson.g:181:4: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred29_Emerson1196);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred29_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred29_EmersonEx; /* Prevent compiler warnings */
rulesynpred29_EmersonEx: ;

}
// $ANTLR end synpred29_Emerson

// $ANTLR start synpred39_Emerson
static void synpred39_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:194:8: ( LTERM )
    // .//Emerson.g:194:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred39_Emerson1275); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred39_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred39_EmersonEx; /* Prevent compiler warnings */
rulesynpred39_EmersonEx: ;

}
// $ANTLR end synpred39_Emerson

// $ANTLR start synpred41_Emerson
static void synpred41_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:203:5: ( LTERM )
    // .//Emerson.g:203:5: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred41_Emerson1349); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred41_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred41_EmersonEx; /* Prevent compiler warnings */
rulesynpred41_EmersonEx: ;

}
// $ANTLR end synpred41_Emerson

// $ANTLR start synpred51_Emerson
static void synpred51_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:219:15: ( LTERM )
    // .//Emerson.g:219:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred51_Emerson1471); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred51_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred51_EmersonEx; /* Prevent compiler warnings */
rulesynpred51_EmersonEx: ;

}
// $ANTLR end synpred51_Emerson

// $ANTLR start synpred53_Emerson
static void synpred53_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:223:15: ( LTERM )
    // .//Emerson.g:223:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred53_Emerson1500); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred53_EmersonEx; /* Prevent compiler warnings */
rulesynpred53_EmersonEx: ;

}
// $ANTLR end synpred53_Emerson

// $ANTLR start synpred62_Emerson
static void synpred62_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:244:52: ( LTERM )
    // .//Emerson.g:244:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred62_Emerson1637); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred62_EmersonEx; /* Prevent compiler warnings */
rulesynpred62_EmersonEx: ;

}
// $ANTLR end synpred62_Emerson

// $ANTLR start synpred64_Emerson
static void synpred64_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:244:87: ( LTERM )
    // .//Emerson.g:244:87: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred64_Emerson1650); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred64_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred64_EmersonEx; /* Prevent compiler warnings */
rulesynpred64_EmersonEx: ;

}
// $ANTLR end synpred64_Emerson

// $ANTLR start synpred65_Emerson
static void synpred65_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_statement_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_statement_return

    // .//Emerson.g:244:73: ( ( LTERM )* 'else' ( LTERM )* s2= statement )
    // .//Emerson.g:244:73: ( LTERM )* 'else' ( LTERM )* s2= statement
    {

        // .//Emerson.g:244:73: ( LTERM )*

        for (;;)
        {
            int alt353=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA353_0 = LA(1);
                if ( (LA353_0 == LTERM) ) 
                {
                    alt353=1;
                }

            }
            switch (alt353) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred65_Emerson1645); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred65_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop353;	/* break out of the loop */
        	    break;
            }
        }
        loop353: ; /* Jump out to here if this rule does not match */

         MATCHT(149, &FOLLOW_149_in_synpred65_Emerson1648); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred65_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:244:87: ( LTERM )*

        for (;;)
        {
            int alt354=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA354_0 = LA(1);
                if ( (LA354_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA354_2 = LA(2);
                        if ( (synpred64_Emerson(ctx)) ) 
                        {
                            alt354=1;
                        }

                    }
                }

            }
            switch (alt354) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred65_Emerson1650); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred65_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop354;	/* break out of the loop */
        	    break;
            }
        }
        loop354: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_statement_in_synpred65_Emerson1655);
        s2=statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred65_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred65_EmersonEx; /* Prevent compiler warnings */
rulesynpred65_EmersonEx: ;

}
// $ANTLR end synpred65_Emerson

// $ANTLR start synpred68_Emerson
static void synpred68_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:250:4: ( forStatement )
    // .//Emerson.g:250:4: forStatement
    {
        FOLLOWPUSH(FOLLOW_forStatement_in_synpred68_Emerson1697);
        forStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred68_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred68_EmersonEx; /* Prevent compiler warnings */
rulesynpred68_EmersonEx: ;

}
// $ANTLR end synpred68_Emerson

// $ANTLR start synpred69_Emerson
static void synpred69_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:255:9: ( LTERM )
    // .//Emerson.g:255:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred69_Emerson1716); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred69_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred69_EmersonEx; /* Prevent compiler warnings */
rulesynpred69_EmersonEx: ;

}
// $ANTLR end synpred69_Emerson

// $ANTLR start synpred76_Emerson
static void synpred76_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:259:52: ( LTERM )
    // .//Emerson.g:259:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred76_Emerson1783); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred76_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred76_EmersonEx; /* Prevent compiler warnings */
rulesynpred76_EmersonEx: ;

}
// $ANTLR end synpred76_Emerson

// $ANTLR start synpred87_Emerson
static void synpred87_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:263:149: ( LTERM )
    // .//Emerson.g:263:149: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred87_Emerson1861); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred87_EmersonEx; /* Prevent compiler warnings */
rulesynpred87_EmersonEx: ;

}
// $ANTLR end synpred87_Emerson

// $ANTLR start synpred95_Emerson
static void synpred95_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:272:99: ( LTERM )
    // .//Emerson.g:272:99: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred95_Emerson1970); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred95_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred95_EmersonEx; /* Prevent compiler warnings */
rulesynpred95_EmersonEx: ;

}
// $ANTLR end synpred95_Emerson

// $ANTLR start synpred107_Emerson
static void synpred107_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:293:51: ( LTERM )
    // .//Emerson.g:293:51: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred107_Emerson2142); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred107_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred107_EmersonEx; /* Prevent compiler warnings */
rulesynpred107_EmersonEx: ;

}
// $ANTLR end synpred107_Emerson

// $ANTLR start synpred112_Emerson
static void synpred112_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:303:16: ( LTERM )
    // .//Emerson.g:303:16: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred112_Emerson2221); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred112_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred112_EmersonEx; /* Prevent compiler warnings */
rulesynpred112_EmersonEx: ;

}
// $ANTLR end synpred112_Emerson

// $ANTLR start synpred120_Emerson
static void synpred120_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:310:49: ( LTERM )
    // .//Emerson.g:310:49: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred120_Emerson2325); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred120_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred120_EmersonEx; /* Prevent compiler warnings */
rulesynpred120_EmersonEx: ;

}
// $ANTLR end synpred120_Emerson

// $ANTLR start synpred123_Emerson
static void synpred123_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_ternaryExpression_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_ternaryExpression_return

    // .//Emerson.g:310:3: ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause )
    // .//Emerson.g:310:3: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause
    {
         MATCHT(159, &FOLLOW_159_in_synpred123_Emerson2311); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:310:10: ( LTERM )*

        for (;;)
        {
            int alt361=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA361_0 = LA(1);
                if ( (LA361_0 == LTERM) ) 
                {
                    alt361=1;
                }

            }
            switch (alt361) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson2313); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop361;	/* break out of the loop */
        	    break;
            }
        }
        loop361: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_ternaryExpression_in_synpred123_Emerson2318);
        e1=ternaryExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:310:38: ( LTERM )*

        for (;;)
        {
            int alt362=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA362_0 = LA(1);
                if ( (LA362_0 == LTERM) ) 
                {
                    alt362=1;
                }

            }
            switch (alt362) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson2320); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop362;	/* break out of the loop */
        	    break;
            }
        }
        loop362: ; /* Jump out to here if this rule does not match */

         MATCHT(160, &FOLLOW_160_in_synpred123_Emerson2323); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:310:49: ( LTERM )*

        for (;;)
        {
            int alt363=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA363_0 = LA(1);
                if ( (LA363_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA363_1 = LA(2);
                        if ( (synpred120_Emerson(ctx)) ) 
                        {
                            alt363=1;
                        }

                    }
                }

            }
            switch (alt363) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson2325); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop363;	/* break out of the loop */
        	    break;
            }
        }
        loop363: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:310:56: ( statementList )?
        {
            int alt364=2;
            alt364 = cdfa364.predict(ctx, RECOGNIZER, ISTREAM, &cdfa364);
            if  (HASEXCEPTION())
            {
                goto rulesynpred123_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt364) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: statementList
        	    {
        	        FOLLOWPUSH(FOLLOW_statementList_in_synpred123_Emerson2328);
        	        statementList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:310:71: ( LTERM )*

        for (;;)
        {
            int alt365=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA365_0 = LA(1);
                if ( (LA365_0 == LTERM) ) 
                {
                    alt365=1;
                }

            }
            switch (alt365) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson2331); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop365;	/* break out of the loop */
        	    break;
            }
        }
        loop365: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_defaultClause_in_synpred123_Emerson2334);
        defaultClause(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred123_EmersonEx; /* Prevent compiler warnings */
rulesynpred123_EmersonEx: ;

}
// $ANTLR end synpred123_Emerson

// $ANTLR start synpred126_Emerson
static void synpred126_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:311:57: ( LTERM )
    // .//Emerson.g:311:57: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred126_Emerson2375); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred126_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred126_EmersonEx; /* Prevent compiler warnings */
rulesynpred126_EmersonEx: ;

}
// $ANTLR end synpred126_Emerson

// $ANTLR start synpred128_Emerson
static void synpred128_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:311:79: ( LTERM )
    // .//Emerson.g:311:79: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred128_Emerson2381); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred128_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred128_EmersonEx; /* Prevent compiler warnings */
rulesynpred128_EmersonEx: ;

}
// $ANTLR end synpred128_Emerson

// $ANTLR start synpred131_Emerson
static void synpred131_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:315:25: ( LTERM )
    // .//Emerson.g:315:25: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred131_Emerson2420); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred131_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred131_EmersonEx; /* Prevent compiler warnings */
rulesynpred131_EmersonEx: ;

}
// $ANTLR end synpred131_Emerson

// $ANTLR start synpred133_Emerson
static void synpred133_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:315:47: ( LTERM )
    // .//Emerson.g:315:47: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred133_Emerson2426); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred133_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred133_EmersonEx; /* Prevent compiler warnings */
rulesynpred133_EmersonEx: ;

}
// $ANTLR end synpred133_Emerson

// $ANTLR start synpred137_Emerson
static void synpred137_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:320:57: ( LTERM )
    // .//Emerson.g:320:57: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred137_Emerson2483); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred137_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred137_EmersonEx; /* Prevent compiler warnings */
rulesynpred137_EmersonEx: ;

}
// $ANTLR end synpred137_Emerson

// $ANTLR start synpred139_Emerson
static void synpred139_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:320:79: ( LTERM )
    // .//Emerson.g:320:79: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred139_Emerson2489); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred139_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred139_EmersonEx; /* Prevent compiler warnings */
rulesynpred139_EmersonEx: ;

}
// $ANTLR end synpred139_Emerson

// $ANTLR start synpred144_Emerson
static void synpred144_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:336:22: ( LTERM )
    // .//Emerson.g:336:22: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred144_Emerson2638); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred144_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred144_EmersonEx; /* Prevent compiler warnings */
rulesynpred144_EmersonEx: ;

}
// $ANTLR end synpred144_Emerson

// $ANTLR start synpred152_Emerson
static void synpred152_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:351:11: ( callExpression )
    // .//Emerson.g:351:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred152_Emerson2817);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred152_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred152_EmersonEx; /* Prevent compiler warnings */
rulesynpred152_EmersonEx: ;

}
// $ANTLR end synpred152_Emerson

// $ANTLR start synpred154_Emerson
static void synpred154_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:359:34: ( ',' ( LTERM )* assignmentExpression )
    // .//Emerson.g:359:34: ',' ( LTERM )* assignmentExpression
    {
         MATCHT(142, &FOLLOW_142_in_synpred154_Emerson2877); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred154_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:359:38: ( LTERM )*

        for (;;)
        {
            int alt368=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA368_0 = LA(1);
                if ( (LA368_0 == LTERM) ) 
                {
                    alt368=1;
                }

            }
            switch (alt368) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred154_Emerson2879); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred154_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop368;	/* break out of the loop */
        	    break;
            }
        }
        loop368: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred154_Emerson2882);
        assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred154_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred154_EmersonEx; /* Prevent compiler warnings */
rulesynpred154_EmersonEx: ;

}
// $ANTLR end synpred154_Emerson

// $ANTLR start synpred156_Emerson
static void synpred156_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:363:38: ( ',' ( LTERM )* assignmentExpressionNoIn )
    // .//Emerson.g:363:38: ',' ( LTERM )* assignmentExpressionNoIn
    {
         MATCHT(142, &FOLLOW_142_in_synpred156_Emerson2924); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred156_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:363:42: ( LTERM )*

        for (;;)
        {
            int alt369=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA369_0 = LA(1);
                if ( (LA369_0 == LTERM) ) 
                {
                    alt369=1;
                }

            }
            switch (alt369) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred156_Emerson2926); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred156_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop369;	/* break out of the loop */
        	    break;
            }
        }
        loop369: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_synpred156_Emerson2929);
        assignmentExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred156_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred156_EmersonEx; /* Prevent compiler warnings */
rulesynpred156_EmersonEx: ;

}
// $ANTLR end synpred156_Emerson

// $ANTLR start synpred157_Emerson
static void synpred157_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:368:11: ( conditionalExpression )
    // .//Emerson.g:368:11: conditionalExpression
    {
        FOLLOWPUSH(FOLLOW_conditionalExpression_in_synpred157_Emerson2968);
        conditionalExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred157_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred157_EmersonEx; /* Prevent compiler warnings */
rulesynpred157_EmersonEx: ;

}
// $ANTLR end synpred157_Emerson

// $ANTLR start synpred160_Emerson
static void synpred160_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:373:11: ( conditionalExpressionNoIn )
    // .//Emerson.g:373:11: conditionalExpressionNoIn
    {
        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_synpred160_Emerson3035);
        conditionalExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred160_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred160_EmersonEx; /* Prevent compiler warnings */
rulesynpred160_EmersonEx: ;

}
// $ANTLR end synpred160_Emerson

// $ANTLR start synpred163_Emerson
static void synpred163_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:380:4: ( callExpression )
    // .//Emerson.g:380:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred163_Emerson3105);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred163_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred163_EmersonEx; /* Prevent compiler warnings */
rulesynpred163_EmersonEx: ;

}
// $ANTLR end synpred163_Emerson

// $ANTLR start synpred164_Emerson
static void synpred164_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:385:4: ( memberExpression )
    // .//Emerson.g:385:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred164_Emerson3130);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred164_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred164_EmersonEx; /* Prevent compiler warnings */
rulesynpred164_EmersonEx: ;

}
// $ANTLR end synpred164_Emerson

// $ANTLR start synpred170_Emerson
static void synpred170_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:401:47: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:401:47: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:401:47: ( LTERM )*

        for (;;)
        {
            int alt370=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA370_0 = LA(1);
                if ( (LA370_0 == LTERM) ) 
                {
                    alt370=1;
                }

            }
            switch (alt370) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred170_Emerson3224); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred170_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop370;	/* break out of the loop */
        	    break;
            }
        }
        loop370: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred170_Emerson3227);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred170_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred170_EmersonEx; /* Prevent compiler warnings */
rulesynpred170_EmersonEx: ;

}
// $ANTLR end synpred170_Emerson

// $ANTLR start synpred172_Emerson
static void synpred172_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:401:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:401:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:401:136: ( LTERM )*

        for (;;)
        {
            int alt371=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA371_0 = LA(1);
                if ( (LA371_0 == LTERM) ) 
                {
                    alt371=1;
                }

            }
            switch (alt371) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred172_Emerson3244); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred172_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop371;	/* break out of the loop */
        	    break;
            }
        }
        loop371: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred172_Emerson3247);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred172_EmersonEx; /* Prevent compiler warnings */
rulesynpred172_EmersonEx: ;

}
// $ANTLR end synpred172_Emerson

// $ANTLR start synpred175_Emerson
static void synpred175_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:402:48: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:402:48: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:402:48: ( LTERM )*

        for (;;)
        {
            int alt375=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA375_0 = LA(1);
                if ( (LA375_0 == LTERM) ) 
                {
                    alt375=1;
                }

            }
            switch (alt375) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred175_Emerson3274); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred175_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop375;	/* break out of the loop */
        	    break;
            }
        }
        loop375: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred175_Emerson3277);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred175_EmersonEx; /* Prevent compiler warnings */
rulesynpred175_EmersonEx: ;

}
// $ANTLR end synpred175_Emerson

// $ANTLR start synpred177_Emerson
static void synpred177_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:402:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:402:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:402:136: ( LTERM )*

        for (;;)
        {
            int alt376=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA376_0 = LA(1);
                if ( (LA376_0 == LTERM) ) 
                {
                    alt376=1;
                }

            }
            switch (alt376) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred177_Emerson3293); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred177_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop376;	/* break out of the loop */
        	    break;
            }
        }
        loop376: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred177_Emerson3296);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred177_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred177_EmersonEx; /* Prevent compiler warnings */
rulesynpred177_EmersonEx: ;

}
// $ANTLR end synpred177_Emerson

// $ANTLR start synpred182_Emerson
static void synpred182_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:403:85: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:403:85: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:403:85: ( LTERM )*

        for (;;)
        {
            int alt380=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA380_0 = LA(1);
                if ( (LA380_0 == LTERM) ) 
                {
                    alt380=1;
                }

            }
            switch (alt380) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred182_Emerson3342); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred182_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop380;	/* break out of the loop */
        	    break;
            }
        }
        loop380: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred182_Emerson3345);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred182_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred182_EmersonEx; /* Prevent compiler warnings */
rulesynpred182_EmersonEx: ;

}
// $ANTLR end synpred182_Emerson

// $ANTLR start synpred184_Emerson
static void synpred184_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:403:172: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:403:172: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:403:172: ( LTERM )*

        for (;;)
        {
            int alt381=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA381_0 = LA(1);
                if ( (LA381_0 == LTERM) ) 
                {
                    alt381=1;
                }

            }
            switch (alt381) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred184_Emerson3360); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred184_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop381;	/* break out of the loop */
        	    break;
            }
        }
        loop381: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred184_Emerson3363);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred184_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred184_EmersonEx; /* Prevent compiler warnings */
rulesynpred184_EmersonEx: ;

}
// $ANTLR end synpred184_Emerson

// $ANTLR start synpred188_Emerson
static void synpred188_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:414:82: ( ( LTERM )* arguments )
    // .//Emerson.g:414:82: ( LTERM )* arguments
    {

        // .//Emerson.g:414:82: ( LTERM )*

        for (;;)
        {
            int alt382=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA382_0 = LA(1);
                if ( (LA382_0 == LTERM) ) 
                {
                    alt382=1;
                }

            }
            switch (alt382) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred188_Emerson3449); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred188_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop382;	/* break out of the loop */
        	    break;
            }
        }
        loop382: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_arguments_in_synpred188_Emerson3452);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred188_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred188_EmersonEx; /* Prevent compiler warnings */
rulesynpred188_EmersonEx: ;

}
// $ANTLR end synpred188_Emerson

// $ANTLR start synpred190_Emerson
static void synpred190_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:414:138: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:414:138: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:414:138: ( LTERM )*

        for (;;)
        {
            int alt383=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA383_0 = LA(1);
                if ( (LA383_0 == LTERM) ) 
                {
                    alt383=1;
                }

            }
            switch (alt383) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred190_Emerson3467); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred190_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop383;	/* break out of the loop */
        	    break;
            }
        }
        loop383: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred190_Emerson3470);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred190_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred190_EmersonEx; /* Prevent compiler warnings */
rulesynpred190_EmersonEx: ;

}
// $ANTLR end synpred190_Emerson

// $ANTLR start synpred192_Emerson
static void synpred192_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:414:207: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:414:207: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:414:207: ( LTERM )*

        for (;;)
        {
            int alt384=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA384_0 = LA(1);
                if ( (LA384_0 == LTERM) ) 
                {
                    alt384=1;
                }

            }
            switch (alt384) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred192_Emerson3485); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred192_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop384;	/* break out of the loop */
        	    break;
            }
        }
        loop384: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred192_Emerson3488);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred192_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred192_EmersonEx; /* Prevent compiler warnings */
rulesynpred192_EmersonEx: ;

}
// $ANTLR end synpred192_Emerson

// $ANTLR start synpred195_Emerson
static void synpred195_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:424:15: ( LTERM )
    // .//Emerson.g:424:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred195_Emerson3557); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred195_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred195_EmersonEx; /* Prevent compiler warnings */
rulesynpred195_EmersonEx: ;

}
// $ANTLR end synpred195_Emerson

// $ANTLR start synpred198_Emerson
static void synpred198_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:424:11: ( '(' ( LTERM )* ( expression )? ( LTERM )* ')' )
    // .//Emerson.g:424:11: '(' ( LTERM )* ( expression )? ( LTERM )* ')'
    {
         MATCHT(140, &FOLLOW_140_in_synpred198_Emerson3555); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred198_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:424:15: ( LTERM )*

        for (;;)
        {
            int alt385=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA385_0 = LA(1);
                if ( (LA385_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA385_2 = LA(2);
                        if ( (synpred195_Emerson(ctx)) ) 
                        {
                            alt385=1;
                        }

                    }
                }

            }
            switch (alt385) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred198_Emerson3557); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred198_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop385;	/* break out of the loop */
        	    break;
            }
        }
        loop385: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:424:22: ( expression )?
        {
            int alt386=2;
            {
                int LA386_0 = LA(1);
                if ( (((LA386_0 >= Identifier) && (LA386_0 <= StringLiteral)) || ((LA386_0 >= 139) && (LA386_0 <= 140)) || LA386_0 == 143 || ((LA386_0 >= 166) && (LA386_0 <= 167)) || LA386_0 == 191 || ((LA386_0 >= 196) && (LA386_0 <= 197)) || ((LA386_0 >= 201) && (LA386_0 <= 212))) ) 
                {
                    alt386=1;
                }
            }
            switch (alt386) 
            {
        	case 1:
        	    // .//Emerson.g:424:23: expression
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_in_synpred198_Emerson3561);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred198_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:424:36: ( LTERM )*

        for (;;)
        {
            int alt387=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA387_0 = LA(1);
                if ( (LA387_0 == LTERM) ) 
                {
                    alt387=1;
                }

            }
            switch (alt387) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred198_Emerson3565); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred198_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop387;	/* break out of the loop */
        	    break;
            }
        }
        loop387: ; /* Jump out to here if this rule does not match */

         MATCHT(141, &FOLLOW_141_in_synpred198_Emerson3568); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred198_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred198_EmersonEx; /* Prevent compiler warnings */
rulesynpred198_EmersonEx: ;

}
// $ANTLR end synpred198_Emerson

// $ANTLR start synpred216_Emerson
static void synpred216_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstruct_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgConstruct_return

	EmersonParser_msgConstruct_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_msgConstruct_return




    // .//Emerson.g:450:13: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct )
    // .//Emerson.g:450:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct
    {

        // .//Emerson.g:450:13: ( LTERM )*

        for (;;)
        {
            int alt389=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA389_0 = LA(1);
                if ( (LA389_0 == LTERM) ) 
                {
                    alt389=1;
                }

            }
            switch (alt389) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred216_Emerson3863); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred216_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop389;	/* break out of the loop */
        	    break;
            }
        }
        loop389: ; /* Jump out to here if this rule does not match */

         MATCHT(178, &FOLLOW_178_in_synpred216_Emerson3866); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred216_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:450:25: ( LTERM )*

        for (;;)
        {
            int alt390=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA390_0 = LA(1);
                if ( (LA390_0 == LTERM) ) 
                {
                    alt390=1;
                }

            }
            switch (alt390) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred216_Emerson3868); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred216_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop390;	/* break out of the loop */
        	    break;
            }
        }
        loop390: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstruct_in_synpred216_Emerson3873);
        e2=msgConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred216_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(178, &FOLLOW_178_in_synpred216_Emerson3875); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred216_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_msgConstruct_in_synpred216_Emerson3879);
        e3=msgConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred216_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred216_EmersonEx; /* Prevent compiler warnings */
rulesynpred216_EmersonEx: ;

}
// $ANTLR end synpred216_Emerson

// $ANTLR start synpred219_Emerson
static void synpred219_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstruct_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_msgConstruct_return

    // .//Emerson.g:451:13: ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct )
    // .//Emerson.g:451:13: ( LTERM )* '<<' ( LTERM )* e4= msgConstruct
    {

        // .//Emerson.g:451:13: ( LTERM )*

        for (;;)
        {
            int alt391=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA391_0 = LA(1);
                if ( (LA391_0 == LTERM) ) 
                {
                    alt391=1;
                }

            }
            switch (alt391) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred219_Emerson3910); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred219_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop391;	/* break out of the loop */
        	    break;
            }
        }
        loop391: ; /* Jump out to here if this rule does not match */

         MATCHT(178, &FOLLOW_178_in_synpred219_Emerson3913); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred219_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:451:25: ( LTERM )*

        for (;;)
        {
            int alt392=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA392_0 = LA(1);
                if ( (LA392_0 == LTERM) ) 
                {
                    alt392=1;
                }

            }
            switch (alt392) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred219_Emerson3915); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred219_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop392;	/* break out of the loop */
        	    break;
            }
        }
        loop392: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstruct_in_synpred219_Emerson3920);
        e4=msgConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred219_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred219_EmersonEx; /* Prevent compiler warnings */
rulesynpred219_EmersonEx: ;

}
// $ANTLR end synpred219_Emerson

// $ANTLR start synpred222_Emerson
static void synpred222_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgSenderConstruct_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgSenderConstruct_return

    // .//Emerson.g:457:12: ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct )
    // .//Emerson.g:457:12: ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct
    {

        // .//Emerson.g:457:12: ( LTERM )*

        for (;;)
        {
            int alt393=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA393_0 = LA(1);
                if ( (LA393_0 == LTERM) ) 
                {
                    alt393=1;
                }

            }
            switch (alt393) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred222_Emerson3980); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred222_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop393;	/* break out of the loop */
        	    break;
            }
        }
        loop393: ; /* Jump out to here if this rule does not match */

         MATCHT(179, &FOLLOW_179_in_synpred222_Emerson3983); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred222_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:457:24: ( LTERM )*

        for (;;)
        {
            int alt394=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA394_0 = LA(1);
                if ( (LA394_0 == LTERM) ) 
                {
                    alt394=1;
                }

            }
            switch (alt394) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred222_Emerson3985); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred222_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop394;	/* break out of the loop */
        	    break;
            }
        }
        loop394: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_synpred222_Emerson3990);
        e2=msgSenderConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred222_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred222_EmersonEx; /* Prevent compiler warnings */
rulesynpred222_EmersonEx: ;

}
// $ANTLR end synpred222_Emerson

// $ANTLR start synpred225_Emerson
static void synpred225_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_ternaryExpression_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_ternaryExpression_return

    // .//Emerson.g:462:12: ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression )
    // .//Emerson.g:462:12: ( LTERM )* '#' ( LTERM )* e2= ternaryExpression
    {

        // .//Emerson.g:462:12: ( LTERM )*

        for (;;)
        {
            int alt395=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA395_0 = LA(1);
                if ( (LA395_0 == LTERM) ) 
                {
                    alt395=1;
                }

            }
            switch (alt395) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred225_Emerson4048); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred225_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop395;	/* break out of the loop */
        	    break;
            }
        }
        loop395: ; /* Jump out to here if this rule does not match */

         MATCHT(180, &FOLLOW_180_in_synpred225_Emerson4051); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred225_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:462:23: ( LTERM )*

        for (;;)
        {
            int alt396=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA396_0 = LA(1);
                if ( (LA396_0 == LTERM) ) 
                {
                    alt396=1;
                }

            }
            switch (alt396) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred225_Emerson4053); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred225_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop396;	/* break out of the loop */
        	    break;
            }
        }
        loop396: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_ternaryExpression_in_synpred225_Emerson4058);
        e2=ternaryExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred225_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred225_EmersonEx; /* Prevent compiler warnings */
rulesynpred225_EmersonEx: ;

}
// $ANTLR end synpred225_Emerson

// $ANTLR start synpred230_Emerson
static void synpred230_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_assignmentExpression_return expr1;
	#undef	RETURN_TYPE_expr1
	#define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

	EmersonParser_assignmentExpression_return expr2;
	#undef	RETURN_TYPE_expr2
	#define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return




    // .//Emerson.g:467:57: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression )
    // .//Emerson.g:467:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
    {

        // .//Emerson.g:467:57: ( LTERM )*

        for (;;)
        {
            int alt397=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA397_0 = LA(1);
                if ( (LA397_0 == LTERM) ) 
                {
                    alt397=1;
                }

            }
            switch (alt397) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred230_Emerson4107); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred230_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop397;	/* break out of the loop */
        	    break;
            }
        }
        loop397: ; /* Jump out to here if this rule does not match */

         MATCHT(181, &FOLLOW_181_in_synpred230_Emerson4110); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred230_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:467:68: ( LTERM )*

        for (;;)
        {
            int alt398=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA398_0 = LA(1);
                if ( (LA398_0 == LTERM) ) 
                {
                    alt398=1;
                }

            }
            switch (alt398) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred230_Emerson4112); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred230_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop398;	/* break out of the loop */
        	    break;
            }
        }
        loop398: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred230_Emerson4117);
        expr1=assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred230_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:467:102: ( LTERM )*

        for (;;)
        {
            int alt399=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA399_0 = LA(1);
                if ( (LA399_0 == LTERM) ) 
                {
                    alt399=1;
                }

            }
            switch (alt399) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred230_Emerson4119); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred230_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop399;	/* break out of the loop */
        	    break;
            }
        }
        loop399: ; /* Jump out to here if this rule does not match */

         MATCHT(160, &FOLLOW_160_in_synpred230_Emerson4122); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred230_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:467:113: ( LTERM )*

        for (;;)
        {
            int alt400=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA400_0 = LA(1);
                if ( (LA400_0 == LTERM) ) 
                {
                    alt400=1;
                }

            }
            switch (alt400) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred230_Emerson4124); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred230_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop400;	/* break out of the loop */
        	    break;
            }
        }
        loop400: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred230_Emerson4129);
        expr2=assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred230_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred230_EmersonEx; /* Prevent compiler warnings */
rulesynpred230_EmersonEx: ;

}
// $ANTLR end synpred230_Emerson

// $ANTLR start synpred233_Emerson
static void synpred233_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstructNoIn_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgConstructNoIn_return

	EmersonParser_msgConstructNoIn_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_msgConstructNoIn_return




    // .//Emerson.g:478:13: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn )
    // .//Emerson.g:478:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn
    {

        // .//Emerson.g:478:13: ( LTERM )*

        for (;;)
        {
            int alt401=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA401_0 = LA(1);
                if ( (LA401_0 == LTERM) ) 
                {
                    alt401=1;
                }

            }
            switch (alt401) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred233_Emerson4218); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred233_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop401;	/* break out of the loop */
        	    break;
            }
        }
        loop401: ; /* Jump out to here if this rule does not match */

         MATCHT(178, &FOLLOW_178_in_synpred233_Emerson4221); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred233_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:478:25: ( LTERM )*

        for (;;)
        {
            int alt402=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA402_0 = LA(1);
                if ( (LA402_0 == LTERM) ) 
                {
                    alt402=1;
                }

            }
            switch (alt402) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred233_Emerson4223); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred233_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop402;	/* break out of the loop */
        	    break;
            }
        }
        loop402: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred233_Emerson4228);
        e2=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred233_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(178, &FOLLOW_178_in_synpred233_Emerson4230); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred233_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred233_Emerson4234);
        e3=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred233_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred233_EmersonEx; /* Prevent compiler warnings */
rulesynpred233_EmersonEx: ;

}
// $ANTLR end synpred233_Emerson

// $ANTLR start synpred236_Emerson
static void synpred236_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstructNoIn_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_msgConstructNoIn_return

	EmersonParser_msgConstructNoIn_return e5;
	#undef	RETURN_TYPE_e5
	#define	RETURN_TYPE_e5 EmersonParser_msgConstructNoIn_return




    // .//Emerson.g:479:13: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn )
    // .//Emerson.g:479:13: e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn
    {
        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred236_Emerson4267);
        e4=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred236_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:479:33: ( LTERM )*

        for (;;)
        {
            int alt403=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA403_0 = LA(1);
                if ( (LA403_0 == LTERM) ) 
                {
                    alt403=1;
                }

            }
            switch (alt403) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred236_Emerson4269); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred236_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop403;	/* break out of the loop */
        	    break;
            }
        }
        loop403: ; /* Jump out to here if this rule does not match */

         MATCHT(178, &FOLLOW_178_in_synpred236_Emerson4272); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred236_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:479:45: ( LTERM )*

        for (;;)
        {
            int alt404=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA404_0 = LA(1);
                if ( (LA404_0 == LTERM) ) 
                {
                    alt404=1;
                }

            }
            switch (alt404) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred236_Emerson4274); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred236_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop404;	/* break out of the loop */
        	    break;
            }
        }
        loop404: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred236_Emerson4279);
        e5=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred236_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred236_EmersonEx; /* Prevent compiler warnings */
rulesynpred236_EmersonEx: ;

}
// $ANTLR end synpred236_Emerson

// $ANTLR start synpred238_Emerson
static void synpred238_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgSenderConstructNoIn_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgSenderConstructNoIn_return

    // .//Emerson.g:485:12: ( ( LTERM )* '>>' e2= msgSenderConstructNoIn )
    // .//Emerson.g:485:12: ( LTERM )* '>>' e2= msgSenderConstructNoIn
    {

        // .//Emerson.g:485:12: ( LTERM )*

        for (;;)
        {
            int alt405=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA405_0 = LA(1);
                if ( (LA405_0 == LTERM) ) 
                {
                    alt405=1;
                }

            }
            switch (alt405) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred238_Emerson4350); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred238_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop405;	/* break out of the loop */
        	    break;
            }
        }
        loop405: ; /* Jump out to here if this rule does not match */

         MATCHT(179, &FOLLOW_179_in_synpred238_Emerson4353); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred238_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_synpred238_Emerson4357);
        e2=msgSenderConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred238_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred238_EmersonEx; /* Prevent compiler warnings */
rulesynpred238_EmersonEx: ;

}
// $ANTLR end synpred238_Emerson

// $ANTLR start synpred240_Emerson
static void synpred240_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_ternaryExpressionNoIn_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_ternaryExpressionNoIn_return

    // .//Emerson.g:490:12: ( ( LTERM )* '#' e2= ternaryExpressionNoIn )
    // .//Emerson.g:490:12: ( LTERM )* '#' e2= ternaryExpressionNoIn
    {

        // .//Emerson.g:490:12: ( LTERM )*

        for (;;)
        {
            int alt406=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA406_0 = LA(1);
                if ( (LA406_0 == LTERM) ) 
                {
                    alt406=1;
                }

            }
            switch (alt406) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred240_Emerson4423); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred240_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop406;	/* break out of the loop */
        	    break;
            }
        }
        loop406: ; /* Jump out to here if this rule does not match */

         MATCHT(180, &FOLLOW_180_in_synpred240_Emerson4426); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred240_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_synpred240_Emerson4430);
        e2=ternaryExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred240_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred240_EmersonEx; /* Prevent compiler warnings */
rulesynpred240_EmersonEx: ;

}
// $ANTLR end synpred240_Emerson

// $ANTLR start synpred245_Emerson
static void synpred245_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_assignmentExpressionNoIn_return expr1;
	#undef	RETURN_TYPE_expr1
	#define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

	EmersonParser_assignmentExpressionNoIn_return expr2;
	#undef	RETURN_TYPE_expr2
	#define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return




    // .//Emerson.g:496:65: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn )
    // .//Emerson.g:496:65: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
    {

        // .//Emerson.g:496:65: ( LTERM )*

        for (;;)
        {
            int alt407=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA407_0 = LA(1);
                if ( (LA407_0 == LTERM) ) 
                {
                    alt407=1;
                }

            }
            switch (alt407) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred245_Emerson4504); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred245_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop407;	/* break out of the loop */
        	    break;
            }
        }
        loop407: ; /* Jump out to here if this rule does not match */

         MATCHT(181, &FOLLOW_181_in_synpred245_Emerson4507); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred245_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:496:76: ( LTERM )*

        for (;;)
        {
            int alt408=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA408_0 = LA(1);
                if ( (LA408_0 == LTERM) ) 
                {
                    alt408=1;
                }

            }
            switch (alt408) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred245_Emerson4509); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred245_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop408;	/* break out of the loop */
        	    break;
            }
        }
        loop408: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4514);
        expr1=assignmentExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred245_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:496:114: ( LTERM )*

        for (;;)
        {
            int alt409=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA409_0 = LA(1);
                if ( (LA409_0 == LTERM) ) 
                {
                    alt409=1;
                }

            }
            switch (alt409) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred245_Emerson4516); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred245_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop409;	/* break out of the loop */
        	    break;
            }
        }
        loop409: ; /* Jump out to here if this rule does not match */

         MATCHT(160, &FOLLOW_160_in_synpred245_Emerson4519); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred245_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:496:125: ( LTERM )*

        for (;;)
        {
            int alt410=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA410_0 = LA(1);
                if ( (LA410_0 == LTERM) ) 
                {
                    alt410=1;
                }

            }
            switch (alt410) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred245_Emerson4521); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred245_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop410;	/* break out of the loop */
        	    break;
            }
        }
        loop410: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_synpred245_Emerson4526);
        expr2=assignmentExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred245_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred245_EmersonEx; /* Prevent compiler warnings */
rulesynpred245_EmersonEx: ;

}
// $ANTLR end synpred245_Emerson

// $ANTLR start synpred292_Emerson
static void synpred292_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:569:55: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression )
    // .//Emerson.g:569:55: ( LTERM )* relationalOps ( LTERM )* additiveExpression
    {

        // .//Emerson.g:569:55: ( LTERM )*

        for (;;)
        {
            int alt435=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA435_0 = LA(1);
                if ( (LA435_0 == LTERM) ) 
                {
                    alt435=1;
                }

            }
            switch (alt435) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred292_Emerson5244); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred292_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop435;	/* break out of the loop */
        	    break;
            }
        }
        loop435: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_relationalOps_in_synpred292_Emerson5247);
        relationalOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred292_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:569:76: ( LTERM )*

        for (;;)
        {
            int alt436=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA436_0 = LA(1);
                if ( (LA436_0 == LTERM) ) 
                {
                    alt436=1;
                }

            }
            switch (alt436) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred292_Emerson5249); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred292_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop436;	/* break out of the loop */
        	    break;
            }
        }
        loop436: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred292_Emerson5252);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred292_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred292_EmersonEx; /* Prevent compiler warnings */
rulesynpred292_EmersonEx: ;

}
// $ANTLR end synpred292_Emerson

// $ANTLR start synpred300_Emerson
static void synpred300_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:587:55: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression )
    // .//Emerson.g:587:55: ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression
    {

        // .//Emerson.g:587:55: ( LTERM )*

        for (;;)
        {
            int alt437=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA437_0 = LA(1);
                if ( (LA437_0 == LTERM) ) 
                {
                    alt437=1;
                }

            }
            switch (alt437) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred300_Emerson5383); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred300_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop437;	/* break out of the loop */
        	    break;
            }
        }
        loop437: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_synpred300_Emerson5386);
        relationalOpsNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred300_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:587:80: ( LTERM )*

        for (;;)
        {
            int alt438=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA438_0 = LA(1);
                if ( (LA438_0 == LTERM) ) 
                {
                    alt438=1;
                }

            }
            switch (alt438) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred300_Emerson5388); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred300_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop438;	/* break out of the loop */
        	    break;
            }
        }
        loop438: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred300_Emerson5391);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred300_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred300_EmersonEx; /* Prevent compiler warnings */
rulesynpred300_EmersonEx: ;

}
// $ANTLR end synpred300_Emerson

// $ANTLR start synpred303_Emerson
static void synpred303_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:592:59: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression )
    // .//Emerson.g:592:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
    {

        // .//Emerson.g:592:59: ( LTERM )*

        for (;;)
        {
            int alt439=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA439_0 = LA(1);
                if ( (LA439_0 == LTERM) ) 
                {
                    alt439=1;
                }

            }
            switch (alt439) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred303_Emerson5425); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred303_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop439;	/* break out of the loop */
        	    break;
            }
        }
        loop439: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_addOps_in_synpred303_Emerson5428);
        addOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred303_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:592:73: ( LTERM )*

        for (;;)
        {
            int alt440=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA440_0 = LA(1);
                if ( (LA440_0 == LTERM) ) 
                {
                    alt440=1;
                }

            }
            switch (alt440) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred303_Emerson5430); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred303_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop440;	/* break out of the loop */
        	    break;
            }
        }
        loop440: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_synpred303_Emerson5433);
        multiplicativeExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred303_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred303_EmersonEx; /* Prevent compiler warnings */
rulesynpred303_EmersonEx: ;

}
// $ANTLR end synpred303_Emerson

// $ANTLR start synpred309_Emerson
static void synpred309_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:607:4: ( leftHandSideExpression '--' )
    // .//Emerson.g:607:4: leftHandSideExpression '--'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred309_Emerson5541);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred309_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(201, &FOLLOW_201_in_synpred309_Emerson5543); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred309_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred309_EmersonEx; /* Prevent compiler warnings */
rulesynpred309_EmersonEx: ;

}
// $ANTLR end synpred309_Emerson

// $ANTLR start synpred310_Emerson
static void synpred310_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:608:4: ( leftHandSideExpression '++' )
    // .//Emerson.g:608:4: leftHandSideExpression '++'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred310_Emerson5557);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred310_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(202, &FOLLOW_202_in_synpred310_Emerson5559); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred310_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred310_EmersonEx; /* Prevent compiler warnings */
rulesynpred310_EmersonEx: ;

}
// $ANTLR end synpred310_Emerson

// $ANTLR start synpred321_Emerson
static void synpred321_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:634:11: ( vectorLiteral )
    // .//Emerson.g:634:12: vectorLiteral
    {
        FOLLOWPUSH(FOLLOW_vectorLiteral_in_synpred321_Emerson5762);
        vectorLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred321_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred321_EmersonEx; /* Prevent compiler warnings */
rulesynpred321_EmersonEx: ;

}
// $ANTLR end synpred321_Emerson

// $ANTLR start synpred322_Emerson
static void synpred322_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:635:11: ( quaternionLiteral )
    // .//Emerson.g:635:12: quaternionLiteral
    {
        FOLLOWPUSH(FOLLOW_quaternionLiteral_in_synpred322_Emerson5780);
        quaternionLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred322_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred322_EmersonEx; /* Prevent compiler warnings */
rulesynpred322_EmersonEx: ;

}
// $ANTLR end synpred322_Emerson

// $ANTLR start synpred327_Emerson
static void synpred327_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:640:4: ( objectLiteral )
    // .//Emerson.g:640:4: objectLiteral
    {
        FOLLOWPUSH(FOLLOW_objectLiteral_in_synpred327_Emerson5817);
        objectLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred327_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred327_EmersonEx; /* Prevent compiler warnings */
rulesynpred327_EmersonEx: ;

}
// $ANTLR end synpred327_Emerson

// $ANTLR start synpred328_Emerson
static void synpred328_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:641:11: ( patternLiteral )
    // .//Emerson.g:641:11: patternLiteral
    {
        FOLLOWPUSH(FOLLOW_patternLiteral_in_synpred328_Emerson5829);
        patternLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred328_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred328_EmersonEx; /* Prevent compiler warnings */
rulesynpred328_EmersonEx: ;

}
// $ANTLR end synpred328_Emerson

// $ANTLR start synpred345_Emerson
static void synpred345_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_vectorLiteralField_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_vectorLiteralField_return






    // .//Emerson.g:650:11: ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' )
    // .//Emerson.g:650:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>'
    {
         MATCHT(191, &FOLLOW_191_in_synpred345_Emerson5948); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:15: ( LTERM )*

        for (;;)
        {
            int alt443=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA443_0 = LA(1);
                if ( (LA443_0 == LTERM) ) 
                {
                    alt443=1;
                }

            }
            switch (alt443) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred345_Emerson5950); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred345_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop443;	/* break out of the loop */
        	    break;
            }
        }
        loop443: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred345_Emerson5955);
        e1=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:44: ( LTERM )*

        for (;;)
        {
            int alt444=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA444_0 = LA(1);
                if ( (LA444_0 == LTERM) ) 
                {
                    alt444=1;
                }

            }
            switch (alt444) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred345_Emerson5957); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred345_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop444;	/* break out of the loop */
        	    break;
            }
        }
        loop444: ; /* Jump out to here if this rule does not match */

         MATCHT(142, &FOLLOW_142_in_synpred345_Emerson5960); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:55: ( LTERM )*

        for (;;)
        {
            int alt445=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA445_0 = LA(1);
                if ( (LA445_0 == LTERM) ) 
                {
                    alt445=1;
                }

            }
            switch (alt445) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred345_Emerson5962); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred345_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop445;	/* break out of the loop */
        	    break;
            }
        }
        loop445: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred345_Emerson5967);
        e2=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:84: ( LTERM )*

        for (;;)
        {
            int alt446=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA446_0 = LA(1);
                if ( (LA446_0 == LTERM) ) 
                {
                    alt446=1;
                }

            }
            switch (alt446) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred345_Emerson5969); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred345_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop446;	/* break out of the loop */
        	    break;
            }
        }
        loop446: ; /* Jump out to here if this rule does not match */

         MATCHT(142, &FOLLOW_142_in_synpred345_Emerson5972); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:95: ( LTERM )*

        for (;;)
        {
            int alt447=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA447_0 = LA(1);
                if ( (LA447_0 == LTERM) ) 
                {
                    alt447=1;
                }

            }
            switch (alt447) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred345_Emerson5974); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred345_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop447;	/* break out of the loop */
        	    break;
            }
        }
        loop447: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred345_Emerson5979);
        e3=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:124: ( LTERM )*

        for (;;)
        {
            int alt448=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA448_0 = LA(1);
                if ( (LA448_0 == LTERM) ) 
                {
                    alt448=1;
                }

            }
            switch (alt448) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred345_Emerson5981); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred345_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop448;	/* break out of the loop */
        	    break;
            }
        }
        loop448: ; /* Jump out to here if this rule does not match */

         MATCHT(142, &FOLLOW_142_in_synpred345_Emerson5984); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:135: ( LTERM )*

        for (;;)
        {
            int alt449=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA449_0 = LA(1);
                if ( (LA449_0 == LTERM) ) 
                {
                    alt449=1;
                }

            }
            switch (alt449) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred345_Emerson5986); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred345_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop449;	/* break out of the loop */
        	    break;
            }
        }
        loop449: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred345_Emerson5991);
        e4=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:164: ( LTERM )*

        for (;;)
        {
            int alt450=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA450_0 = LA(1);
                if ( (LA450_0 == LTERM) ) 
                {
                    alt450=1;
                }

            }
            switch (alt450) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred345_Emerson5993); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred345_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop450;	/* break out of the loop */
        	    break;
            }
        }
        loop450: ; /* Jump out to here if this rule does not match */

         MATCHT(192, &FOLLOW_192_in_synpred345_Emerson5995); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred345_EmersonEx; /* Prevent compiler warnings */
rulesynpred345_EmersonEx: ;

}
// $ANTLR end synpred345_Emerson

// $ANTLR start synpred354_Emerson
static void synpred354_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_vectorLiteralField_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_vectorLiteralField_return






    // .//Emerson.g:651:11: ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' )
    // .//Emerson.g:651:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>'
    {
         MATCHT(191, &FOLLOW_191_in_synpred354_Emerson6025); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred354_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:15: ( LTERM )*

        for (;;)
        {
            int alt451=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA451_0 = LA(1);
                if ( (LA451_0 == LTERM) ) 
                {
                    alt451=1;
                }

            }
            switch (alt451) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred354_Emerson6027); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred354_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop451;	/* break out of the loop */
        	    break;
            }
        }
        loop451: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred354_Emerson6032);
        e1=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred354_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:44: ( LTERM )*

        for (;;)
        {
            int alt452=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA452_0 = LA(1);
                if ( (LA452_0 == LTERM) ) 
                {
                    alt452=1;
                }

            }
            switch (alt452) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred354_Emerson6034); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred354_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop452;	/* break out of the loop */
        	    break;
            }
        }
        loop452: ; /* Jump out to here if this rule does not match */

         MATCHT(142, &FOLLOW_142_in_synpred354_Emerson6037); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred354_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:55: ( LTERM )*

        for (;;)
        {
            int alt453=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA453_0 = LA(1);
                if ( (LA453_0 == LTERM) ) 
                {
                    alt453=1;
                }

            }
            switch (alt453) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred354_Emerson6039); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred354_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop453;	/* break out of the loop */
        	    break;
            }
        }
        loop453: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred354_Emerson6044);
        e2=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred354_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:84: ( LTERM )*

        for (;;)
        {
            int alt454=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA454_0 = LA(1);
                if ( (LA454_0 == LTERM) ) 
                {
                    alt454=1;
                }

            }
            switch (alt454) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred354_Emerson6046); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred354_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop454;	/* break out of the loop */
        	    break;
            }
        }
        loop454: ; /* Jump out to here if this rule does not match */

         MATCHT(142, &FOLLOW_142_in_synpred354_Emerson6049); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred354_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:95: ( LTERM )*

        for (;;)
        {
            int alt455=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA455_0 = LA(1);
                if ( (LA455_0 == LTERM) ) 
                {
                    alt455=1;
                }

            }
            switch (alt455) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred354_Emerson6051); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred354_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop455;	/* break out of the loop */
        	    break;
            }
        }
        loop455: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred354_Emerson6056);
        e3=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred354_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:124: ( LTERM )*

        for (;;)
        {
            int alt456=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA456_0 = LA(1);
                if ( (LA456_0 == LTERM) ) 
                {
                    alt456=1;
                }

            }
            switch (alt456) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred354_Emerson6058); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred354_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop456;	/* break out of the loop */
        	    break;
            }
        }
        loop456: ; /* Jump out to here if this rule does not match */

         MATCHT(145, &FOLLOW_145_in_synpred354_Emerson6061); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred354_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:135: ( LTERM )*

        for (;;)
        {
            int alt457=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA457_0 = LA(1);
                if ( (LA457_0 == LTERM) ) 
                {
                    alt457=1;
                }

            }
            switch (alt457) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred354_Emerson6063); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred354_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop457;	/* break out of the loop */
        	    break;
            }
        }
        loop457: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred354_Emerson6068);
        e4=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred354_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:164: ( LTERM )*

        for (;;)
        {
            int alt458=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA458_0 = LA(1);
                if ( (LA458_0 == LTERM) ) 
                {
                    alt458=1;
                }

            }
            switch (alt458) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred354_Emerson6070); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred354_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop458;	/* break out of the loop */
        	    break;
            }
        }
        loop458: ; /* Jump out to here if this rule does not match */

         MATCHT(192, &FOLLOW_192_in_synpred354_Emerson6072); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred354_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred354_EmersonEx; /* Prevent compiler warnings */
rulesynpred354_EmersonEx: ;

}
// $ANTLR end synpred354_Emerson

// $ANTLR start synpred359_Emerson
static void synpred359_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:659:11: ( additiveExpression )
    // .//Emerson.g:659:11: additiveExpression
    {
        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred359_Emerson6173);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred359_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred359_EmersonEx; /* Prevent compiler warnings */
rulesynpred359_EmersonEx: ;

}
// $ANTLR end synpred359_Emerson

// $ANTLR start synpred360_Emerson
static void synpred360_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:661:11: ( NumericLiteral )
    // .//Emerson.g:661:11: NumericLiteral
    {
         MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_synpred360_Emerson6186); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred360_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred360_EmersonEx; /* Prevent compiler warnings */
rulesynpred360_EmersonEx: ;

}
// $ANTLR end synpred360_Emerson

// $ANTLR start synpred361_Emerson
static void synpred361_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:662:11: ( callExpression )
    // .//Emerson.g:662:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred361_Emerson6198);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred361_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred361_EmersonEx; /* Prevent compiler warnings */
rulesynpred361_EmersonEx: ;

}
// $ANTLR end synpred361_Emerson

// $ANTLR start synpred364_Emerson
static void synpred364_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:673:9: ( LTERM )
    // .//Emerson.g:673:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred364_Emerson6293); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred364_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred364_EmersonEx; /* Prevent compiler warnings */
rulesynpred364_EmersonEx: ;

}
// $ANTLR end synpred364_Emerson

// $ANTLR start synpred367_Emerson
static void synpred367_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:673:5: ( '[' ( LTERM )* ( expression )? ( LTERM )* ']' )
    // .//Emerson.g:673:5: '[' ( LTERM )* ( expression )? ( LTERM )* ']'
    {
         MATCHT(167, &FOLLOW_167_in_synpred367_Emerson6291); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred367_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:673:9: ( LTERM )*

        for (;;)
        {
            int alt459=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA459_0 = LA(1);
                if ( (LA459_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA459_2 = LA(2);
                        if ( (synpred364_Emerson(ctx)) ) 
                        {
                            alt459=1;
                        }

                    }
                }

            }
            switch (alt459) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred367_Emerson6293); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred367_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop459;	/* break out of the loop */
        	    break;
            }
        }
        loop459: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:673:16: ( expression )?
        {
            int alt460=2;
            {
                int LA460_0 = LA(1);
                if ( (((LA460_0 >= Identifier) && (LA460_0 <= StringLiteral)) || ((LA460_0 >= 139) && (LA460_0 <= 140)) || LA460_0 == 143 || ((LA460_0 >= 166) && (LA460_0 <= 167)) || LA460_0 == 191 || ((LA460_0 >= 196) && (LA460_0 <= 197)) || ((LA460_0 >= 201) && (LA460_0 <= 212))) ) 
                {
                    alt460=1;
                }
            }
            switch (alt460) 
            {
        	case 1:
        	    // .//Emerson.g:673:17: expression
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_in_synpred367_Emerson6297);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred367_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:673:30: ( LTERM )*

        for (;;)
        {
            int alt461=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA461_0 = LA(1);
                if ( (LA461_0 == LTERM) ) 
                {
                    alt461=1;
                }

            }
            switch (alt461) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred367_Emerson6301); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred367_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop461;	/* break out of the loop */
        	    break;
            }
        }
        loop461: ; /* Jump out to here if this rule does not match */

         MATCHT(168, &FOLLOW_168_in_synpred367_Emerson6304); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred367_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred367_EmersonEx; /* Prevent compiler warnings */
rulesynpred367_EmersonEx: ;

}
// $ANTLR end synpred367_Emerson

// $ANTLR start synpred373_Emerson
static void synpred373_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:679:9: ( LTERM )
    // .//Emerson.g:679:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred373_Emerson6382); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred373_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred373_EmersonEx; /* Prevent compiler warnings */
rulesynpred373_EmersonEx: ;

}
// $ANTLR end synpred373_Emerson

// $ANTLR start synpred376_Emerson
static void synpred376_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:679:5: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' )
    // .//Emerson.g:679:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
    {
         MATCHT(143, &FOLLOW_143_in_synpred376_Emerson6380); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred376_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:679:9: ( LTERM )*

        for (;;)
        {
            int alt463=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA463_0 = LA(1);
                if ( (LA463_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA463_2 = LA(2);
                        if ( (synpred373_Emerson(ctx)) ) 
                        {
                            alt463=1;
                        }

                    }
                }

            }
            switch (alt463) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred376_Emerson6382); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred376_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop463;	/* break out of the loop */
        	    break;
            }
        }
        loop463: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:679:16: ( propertyNameAndValue )?
        {
            int alt464=2;
            {
                int LA464_0 = LA(1);
                if ( (((LA464_0 >= Identifier) && (LA464_0 <= StringLiteral))) ) 
                {
                    alt464=1;
                }
            }
            switch (alt464) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: propertyNameAndValue
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred376_Emerson6385);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred376_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:679:38: ( LTERM )*

        for (;;)
        {
            int alt465=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA465_0 = LA(1);
                if ( (LA465_0 == LTERM) ) 
                {
                    alt465=1;
                }

            }
            switch (alt465) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred376_Emerson6388); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred376_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop465;	/* break out of the loop */
        	    break;
            }
        }
        loop465: ; /* Jump out to here if this rule does not match */

         MATCHT(144, &FOLLOW_144_in_synpred376_Emerson6391); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred376_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred376_EmersonEx; /* Prevent compiler warnings */
rulesynpred376_EmersonEx: ;

}
// $ANTLR end synpred376_Emerson

// $ANTLR start synpred382_Emerson
static void synpred382_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:685:9: ( LTERM )
    // .//Emerson.g:685:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred382_Emerson6467); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred382_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred382_EmersonEx; /* Prevent compiler warnings */
rulesynpred382_EmersonEx: ;

}
// $ANTLR end synpred382_Emerson

// $ANTLR start synpred385_Emerson
static void synpred385_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:685:5: ( '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}' )
    // .//Emerson.g:685:5: '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}'
    {
         MATCHT(143, &FOLLOW_143_in_synpred385_Emerson6465); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred385_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:685:9: ( LTERM )*

        for (;;)
        {
            int alt467=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA467_0 = LA(1);
                if ( (LA467_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA467_2 = LA(2);
                        if ( (synpred382_Emerson(ctx)) ) 
                        {
                            alt467=1;
                        }

                    }
                }

            }
            switch (alt467) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred385_Emerson6467); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred385_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop467;	/* break out of the loop */
        	    break;
            }
        }
        loop467: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:685:16: ( nameValueProto )?
        {
            int alt468=2;
            alt468 = cdfa468.predict(ctx, RECOGNIZER, ISTREAM, &cdfa468);
            if  (HASEXCEPTION())
            {
                goto rulesynpred385_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt468) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: nameValueProto
        	    {
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_synpred385_Emerson6470);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred385_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:685:32: ( LTERM )*

        for (;;)
        {
            int alt469=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA469_0 = LA(1);
                if ( (LA469_0 == LTERM) ) 
                {
                    alt469=1;
                }

            }
            switch (alt469) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred385_Emerson6473); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred385_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop469;	/* break out of the loop */
        	    break;
            }
        }
        loop469: ; /* Jump out to here if this rule does not match */

         MATCHT(144, &FOLLOW_144_in_synpred385_Emerson6476); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred385_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred385_EmersonEx; /* Prevent compiler warnings */
rulesynpred385_EmersonEx: ;

}
// $ANTLR end synpred385_Emerson

// $ANTLR start synpred386_Emerson
static void synpred386_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:686:9: ( LTERM )
    // .//Emerson.g:686:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred386_Emerson6493); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred386_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred386_EmersonEx; /* Prevent compiler warnings */
rulesynpred386_EmersonEx: ;

}
// $ANTLR end synpred386_Emerson

// $ANTLR start synpred387_Emerson
static void synpred387_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:686:40: ( LTERM )
    // .//Emerson.g:686:40: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred387_Emerson6504); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred387_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred387_EmersonEx; /* Prevent compiler warnings */
rulesynpred387_EmersonEx: ;

}
// $ANTLR end synpred387_Emerson

// $ANTLR start synpred396_Emerson
static void synpred396_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:695:79: ( LTERM )
    // .//Emerson.g:695:79: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred396_Emerson6613); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred396_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred396_EmersonEx; /* Prevent compiler warnings */
rulesynpred396_EmersonEx: ;

}
// $ANTLR end synpred396_Emerson
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred26_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred190_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred190_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred373_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred373_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred154_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred154_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred157_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred157_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred22_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred22_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred219_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred219_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred292_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred292_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred123_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred123_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred68_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred68_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred1_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred245_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred245_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred137_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred137_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred321_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred321_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred28_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred28_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred175_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred175_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred76_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred76_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred309_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred309_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred112_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred112_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred152_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred152_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred133_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred133_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred131_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred131_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred62_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred62_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred310_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred310_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred144_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred144_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred386_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred386_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred364_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred364_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred230_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred230_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred128_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred128_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred354_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred354_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred64_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred64_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred139_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred139_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred65_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred65_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred51_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred51_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred238_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred238_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred367_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred367_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred376_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred376_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred39_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred39_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred53_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred53_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred29_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred29_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred188_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred188_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred41_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred41_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred126_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred126_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred385_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred385_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred95_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred95_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred120_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred120_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred184_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred184_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred172_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred172_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred240_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred240_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred195_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred195_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred345_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred345_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred4_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred4_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred328_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred328_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred163_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred163_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred222_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred222_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred156_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred156_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred69_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred69_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred300_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred300_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred216_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred216_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred192_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred192_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred359_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred359_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred164_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred164_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred303_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred303_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred107_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred107_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred11_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred11_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred177_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred177_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred396_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred396_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred14_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred14_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred198_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred198_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred322_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred322_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred236_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred236_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred170_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred170_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred382_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred382_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred361_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred361_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred8_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred8_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred233_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred233_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred87_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred87_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred160_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred160_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred182_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred182_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred25_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred25_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred24_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred24_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred387_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred387_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred327_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred327_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred360_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred360_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred225_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred225_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
