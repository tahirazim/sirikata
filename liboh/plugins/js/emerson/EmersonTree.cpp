/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//EmersonTree.g
 *     -                            On : 2011-06-07 15:47:11
 *     -           for the tree parser : EmersonTreeTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

    #include <stdlib.h>
    #include <string.h>
    #include <antlr3.h>
    #include "Util.h"
    #define APP(s)  program_string->append(program_string, s);

    
    #define CHECK_RESOURCES()               \
    {                                       \
    APP("(function()\n");                   \
    APP("{ \n");                            \
    APP("var tmp = function()\n");          \
    APP("{\n");                             \
    APP("return this;");                    \
    APP("};");                              \
    APP("var tmpGlobal = tmp();");          \
    APP("if (! tmpGlobal.__checkResources8_8_3_1__())"); \
    APP("throw '__resource_error__';");     \
    APP("})();");                           \
    }

    
    #ifndef __SIRIKATA_INSIDE_WHEN_PRED__
    #define __SIRIKATA_INSIDE_WHEN_PRED__
    static bool insideWhenPred = false;
    #endif

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonTree.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonTree_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonTree_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonTree_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpression scope set 
 */
static pEmersonTree_assignmentExpression_SCOPE   pEmersonTree_assignmentExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpression_SCOPE
pEmersonTree_assignmentExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionStack->size(ctx->pEmersonTree_assignmentExpressionStack) > ctx->pEmersonTree_assignmentExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE)ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionStack->push(ctx->pEmersonTree_assignmentExpressionStack, newAttributes, (void (*)(void *))assignmentExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpressionNoIn scope set 
 */
static pEmersonTree_assignmentExpressionNoIn_SCOPE   pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpressionNoIn_SCOPE
pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionNoInStack->size(ctx->pEmersonTree_assignmentExpressionNoInStack) > ctx->pEmersonTree_assignmentExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE)ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionNoInStack->push(ctx->pEmersonTree_assignmentExpressionNoInStack, newAttributes, (void (*)(void *))assignmentExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpression scope set 
 */
static pEmersonTree_relationalExpression_SCOPE   pEmersonTree_relationalExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpression_SCOPE
pEmersonTree_relationalExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionStack->size(ctx->pEmersonTree_relationalExpressionStack) > ctx->pEmersonTree_relationalExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE)ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionStack->push(ctx->pEmersonTree_relationalExpressionStack, newAttributes, (void (*)(void *))relationalExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpressionNoIn scope set 
 */
static pEmersonTree_relationalExpressionNoIn_SCOPE   pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpressionNoIn_SCOPE
pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionNoInStack->size(ctx->pEmersonTree_relationalExpressionNoInStack) > ctx->pEmersonTree_relationalExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE)ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionNoInStack->push(ctx->pEmersonTree_relationalExpressionNoInStack, newAttributes, (void (*)(void *))relationalExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_shiftExpression scope set 
 */
static pEmersonTree_shiftExpression_SCOPE   pEmersonTree_shiftExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL shiftExpressionFree(pEmersonTree_shiftExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL shiftExpressionFree(pEmersonTree_shiftExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree shiftExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_shiftExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_shiftExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_shiftExpression_SCOPE
pEmersonTree_shiftExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_shiftExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_shiftExpressionStack->size(ctx->pEmersonTree_shiftExpressionStack) > ctx->pEmersonTree_shiftExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_shiftExpression_SCOPE)ctx->pEmersonTree_shiftExpressionStack->get(ctx->pEmersonTree_shiftExpressionStack, ctx->pEmersonTree_shiftExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_shiftExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_shiftExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_shiftExpressionStack->push(ctx->pEmersonTree_shiftExpressionStack, newAttributes, (void (*)(void *))shiftExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_shiftExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonTreeTokenNames[214+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "VECTOR",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_BLOCK",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "LEFT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "RIGHT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "TRIPLE_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "LEFT_SHIFT",
        (pANTLR3_UINT8) "RIGHT_SHIFT",
        (pANTLR3_UINT8) "TRIPLE_SHIFT",
        (pANTLR3_UINT8) "ADD_OP",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE_OP",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "EXPR_LIST",
        (pANTLR3_UINT8) "COND_EXPR",
        (pANTLR3_UINT8) "COND_EXPR_NOIN",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_SEND",
        (pANTLR3_UINT8) "MESSAGE_SEND_WITHOUT_SENDER",
        (pANTLR3_UINT8) "MESSAGE_SEND_WITH_SENDER",
        (pANTLR3_UINT8) "MESSAGE_RECV",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "PATTERN_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE_PROTO",
        (pANTLR3_UINT8) "BLANK_NAME_VAL_PROT",
        (pANTLR3_UINT8) "NAME",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "VERBATIM",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "VerbatimStringCharacter",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'<<='",
        (pANTLR3_UINT8) "'>>='",
        (pANTLR3_UINT8) "'>>>='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'>>>'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionStack
 */
void
pEmersonTree_assignmentExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpression)->free != NULL)
	{
        SCOPE_TOP(assignmentExpression)->free(SCOPE_TOP(assignmentExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit--;
    SCOPE_TOP(assignmentExpression) = (pEmersonTree_assignmentExpression_SCOPE)(ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionNoInStack
 */
void
pEmersonTree_assignmentExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(assignmentExpressionNoIn)->free(SCOPE_TOP(assignmentExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit--;
    SCOPE_TOP(assignmentExpressionNoIn) = (pEmersonTree_assignmentExpressionNoIn_SCOPE)(ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionStack
 */
void
pEmersonTree_relationalExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpression)->free != NULL)
	{
        SCOPE_TOP(relationalExpression)->free(SCOPE_TOP(relationalExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionStack_limit--;
    SCOPE_TOP(relationalExpression) = (pEmersonTree_relationalExpression_SCOPE)(ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionNoInStack
 */
void
pEmersonTree_relationalExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(relationalExpressionNoIn)->free(SCOPE_TOP(relationalExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit--;
    SCOPE_TOP(relationalExpressionNoIn) = (pEmersonTree_relationalExpressionNoIn_SCOPE)(ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_shiftExpressionStack
 */
void
pEmersonTree_shiftExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(shiftExpression)->free != NULL)
	{
        SCOPE_TOP(shiftExpression)->free(SCOPE_TOP(shiftExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_shiftExpressionStack_limit--;
    SCOPE_TOP(shiftExpression) = (pEmersonTree_shiftExpression_SCOPE)(ctx->pEmersonTree_shiftExpressionStack->get(ctx->pEmersonTree_shiftExpressionStack, ctx->pEmersonTree_shiftExpressionStack_limit - 1));
}


// Forward declare the locally static matching functions we have generated.
//
static pANTLR3_STRING	program    (pEmersonTree ctx);
static void	sourceElements    (pEmersonTree ctx);
static void	sourceElement    (pEmersonTree ctx);
static void	functionDeclaration    (pEmersonTree ctx);
static void	functionExpression    (pEmersonTree ctx);
static void	formalParameterList    (pEmersonTree ctx);
static void	functionBody    (pEmersonTree ctx);
static void	statement    (pEmersonTree ctx);
static void	noOpStatement    (pEmersonTree ctx);
static void	statementBlock    (pEmersonTree ctx);
static void	statementList    (pEmersonTree ctx);
static void	variableStatement    (pEmersonTree ctx);
static void	variableDeclarationList    (pEmersonTree ctx);
static void	variableDeclarationListNoIn    (pEmersonTree ctx);
static void	variableDeclaration    (pEmersonTree ctx);
static void	variableDeclarationNoIn    (pEmersonTree ctx);
static void	initialiser    (pEmersonTree ctx);
static void	initialiserNoIn    (pEmersonTree ctx);
static void	expressionStatement    (pEmersonTree ctx);
static void	ifStatement    (pEmersonTree ctx);
static void	iterationStatement    (pEmersonTree ctx);
static void	doWhileStatement    (pEmersonTree ctx);
static void	whileStatement    (pEmersonTree ctx);
static void	forStatement    (pEmersonTree ctx);
static void	forStatementInitialiserPart    (pEmersonTree ctx);
static void	forInStatement    (pEmersonTree ctx);
static void	forInStatementInitialiserPart    (pEmersonTree ctx);
static void	continueStatement    (pEmersonTree ctx);
static void	breakStatement    (pEmersonTree ctx);
static void	returnStatement    (pEmersonTree ctx);
static void	withStatement    (pEmersonTree ctx);
static void	labelledStatement    (pEmersonTree ctx);
static void	switchStatement    (pEmersonTree ctx);
static void	caseBlock    (pEmersonTree ctx);
static void	caseClause    (pEmersonTree ctx);
static void	defaultClause    (pEmersonTree ctx);
static void	caseClauseSeenDefault    (pEmersonTree ctx);
static void	throwStatement    (pEmersonTree ctx);
static void	whenStatement    (pEmersonTree ctx);
static void	whenPred    (pEmersonTree ctx);
static void	whenCheckedListFirst    (pEmersonTree ctx);
static void	whenCheckedListSubsequent    (pEmersonTree ctx);
static void	tryStatement    (pEmersonTree ctx);
static void	catchFinallyBlock    (pEmersonTree ctx);
static void	catchBlock    (pEmersonTree ctx);
static void	finallyBlock    (pEmersonTree ctx);
static void	msgSendStatement    (pEmersonTree ctx);
static void	memAndCallExpression    (pEmersonTree ctx);
static void	msgRecvStatement    (pEmersonTree ctx);
static void	catchClause    (pEmersonTree ctx);
static void	finallyClause    (pEmersonTree ctx);
static void	expression    (pEmersonTree ctx);
static void	expressionNoIn    (pEmersonTree ctx);
static void	assignmentExpression    (pEmersonTree ctx);
static void	assignmentExpressionNoIn    (pEmersonTree ctx);
static void	leftHandSideExpression    (pEmersonTree ctx);
static void	newExpression    (pEmersonTree ctx);
static void	propertyReferenceSuffix1    (pEmersonTree ctx);
static void	indexSuffix1    (pEmersonTree ctx);
static void	memberExpression    (pEmersonTree ctx);
static void	memberExpressionSuffix    (pEmersonTree ctx);
static void	callExpression    (pEmersonTree ctx);
static void	callExpressionSuffix    (pEmersonTree ctx);
static void	arguments    (pEmersonTree ctx);
static void	indexSuffix    (pEmersonTree ctx);
static void	propertyReferenceSuffix    (pEmersonTree ctx);
static void	assignmentOperator    (pEmersonTree ctx);
static void	ternaryExpression    (pEmersonTree ctx);
static void	ternaryExpressionNoIn    (pEmersonTree ctx);
static void	conditionalExpression    (pEmersonTree ctx);
static void	conditionalExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpression    (pEmersonTree ctx);
static void	logicalORExpression    (pEmersonTree ctx);
static void	logicalORExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseORExpression    (pEmersonTree ctx);
static void	bitwiseORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseXORExpression    (pEmersonTree ctx);
static void	bitwiseXORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseANDExpression    (pEmersonTree ctx);
static void	bitwiseANDExpressionNoIn    (pEmersonTree ctx);
static void	equalityExpression    (pEmersonTree ctx);
static void	equalityExpressionNoIn    (pEmersonTree ctx);
static void	relationalOps    (pEmersonTree ctx);
static void	relationalExpression    (pEmersonTree ctx);
static void	relationalOpsNoIn    (pEmersonTree ctx);
static void	relationalExpressionNoIn    (pEmersonTree ctx);
static void	shiftOps    (pEmersonTree ctx);
static void	shiftExpression    (pEmersonTree ctx);
static void	additiveExpression    (pEmersonTree ctx);
static void	multiplicativeExpression    (pEmersonTree ctx);
static void	unaryOps    (pEmersonTree ctx);
static void	unaryExpression    (pEmersonTree ctx);
static void	postfixExpression    (pEmersonTree ctx);
static void	primaryExpression    (pEmersonTree ctx);
static void	vectorLiteral    (pEmersonTree ctx);
static void	vectorLiteralField    (pEmersonTree ctx);
static void	dollarExpression    (pEmersonTree ctx);
static void	arrayLiteral    (pEmersonTree ctx);
static void	objectLiteral    (pEmersonTree ctx);
static void	patternLiteral    (pEmersonTree ctx);
static void	nameValueProto    (pEmersonTree ctx);
static void	propertyNameAndValue    (pEmersonTree ctx);
static void	propertyName    (pEmersonTree ctx);
static void	literal    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred30_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred47_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred60_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred61_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred62_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred88_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred89_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred92_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred96_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred101_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred102_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred162_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred182_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred183_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred184_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred185_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred186_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred188_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred189_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred191_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred192_EmersonTree    (pEmersonTree ctx);
static void	EmersonTreeFree(pEmersonTree ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//EmersonTree.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonTreeNewSSD(instream, NULL);
}

/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonTree ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonTree) ANTLR3_CALLOC(1, sizeof(EmersonTree));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonTree.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our EmersonTree interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->noOpStatement	= noOpStatement;
    ctx->statementBlock	= statementBlock;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->expressionStatement	= expressionStatement;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->labelledStatement	= labelledStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->caseClauseSeenDefault	= caseClauseSeenDefault;
    ctx->throwStatement	= throwStatement;
    ctx->whenStatement	= whenStatement;
    ctx->whenPred	= whenPred;
    ctx->whenCheckedListFirst	= whenCheckedListFirst;
    ctx->whenCheckedListSubsequent	= whenCheckedListSubsequent;
    ctx->tryStatement	= tryStatement;
    ctx->catchFinallyBlock	= catchFinallyBlock;
    ctx->catchBlock	= catchBlock;
    ctx->finallyBlock	= finallyBlock;
    ctx->msgSendStatement	= msgSendStatement;
    ctx->memAndCallExpression	= memAndCallExpression;
    ctx->msgRecvStatement	= msgRecvStatement;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->ternaryExpression	= ternaryExpression;
    ctx->ternaryExpressionNoIn	= ternaryExpressionNoIn;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->shiftOps	= shiftOps;
    ctx->shiftExpression	= shiftExpression;
    ctx->additiveExpression	= additiveExpression;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->vectorLiteral	= vectorLiteral;
    ctx->vectorLiteralField	= vectorLiteralField;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->patternLiteral	= patternLiteral;
    ctx->nameValueProto	= nameValueProto;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred30_EmersonTree	= synpred30_EmersonTree;
    ctx->synpred47_EmersonTree	= synpred47_EmersonTree;
    ctx->synpred60_EmersonTree	= synpred60_EmersonTree;
    ctx->synpred61_EmersonTree	= synpred61_EmersonTree;
    ctx->synpred62_EmersonTree	= synpred62_EmersonTree;
    ctx->synpred88_EmersonTree	= synpred88_EmersonTree;
    ctx->synpred89_EmersonTree	= synpred89_EmersonTree;
    ctx->synpred92_EmersonTree	= synpred92_EmersonTree;
    ctx->synpred96_EmersonTree	= synpred96_EmersonTree;
    ctx->synpred101_EmersonTree	= synpred101_EmersonTree;
    ctx->synpred102_EmersonTree	= synpred102_EmersonTree;
    ctx->synpred162_EmersonTree	= synpred162_EmersonTree;
    ctx->synpred182_EmersonTree	= synpred182_EmersonTree;
    ctx->synpred183_EmersonTree	= synpred183_EmersonTree;
    ctx->synpred184_EmersonTree	= synpred184_EmersonTree;
    ctx->synpred185_EmersonTree	= synpred185_EmersonTree;
    ctx->synpred186_EmersonTree	= synpred186_EmersonTree;
    ctx->synpred188_EmersonTree	= synpred188_EmersonTree;
    ctx->synpred189_EmersonTree	= synpred189_EmersonTree;
    ctx->synpred191_EmersonTree	= synpred191_EmersonTree;
    ctx->synpred192_EmersonTree	= synpred192_EmersonTree;
    ctx->free			= EmersonTreeFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionPush     = pEmersonTree_assignmentExpressionPush;
    ctx->pEmersonTree_assignmentExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInPush     = pEmersonTree_assignmentExpressionNoInPush;
    ctx->pEmersonTree_assignmentExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionNoInTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionPush     = pEmersonTree_relationalExpressionPush;
    ctx->pEmersonTree_relationalExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInPush     = pEmersonTree_relationalExpressionNoInPush;
    ctx->pEmersonTree_relationalExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionNoInTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_shiftExpressionPush     = pEmersonTree_shiftExpressionPush;
    ctx->pEmersonTree_shiftExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_shiftExpressionStack_limit    = 0;
    ctx->pEmersonTree_shiftExpressionTop      = NULL;


        
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonTreeTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonTreeFree(pEmersonTree ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionStack->free(ctx->pEmersonTree_assignmentExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInStack->free(ctx->pEmersonTree_assignmentExpressionNoInStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionStack->free(ctx->pEmersonTree_relationalExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInStack->free(ctx->pEmersonTree_relationalExpressionNoInStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_shiftExpressionStack->free(ctx->pEmersonTree_shiftExpressionStack);

    
        
	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonTreeTokenNames; 
}


        pANTLR3_STRING program_string;
        ANTLR3_UINT32 program_line;
        ANTLR3_UINT32 line_pos;
        extern pEmersonTree _treeParser;
        

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_PROG_in_program76  */
static	ANTLR3_BITWORD FOLLOW_PROG_in_program76_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PROG_in_program76	= { FOLLOW_PROG_in_program76_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program121  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program121	= { FOLLOW_sourceElements_in_program121_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements182  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements182_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE02), ANTLR3_UINT64_LIT(0x00000070C8000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements182	= { FOLLOW_sourceElement_in_sourceElements182_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement205  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement205	= { FOLLOW_functionDeclaration_in_sourceElement205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement213  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement213	= { FOLLOW_statement_in_sourceElement213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_DECL_in_functionDeclaration232  */
static	ANTLR3_BITWORD FOLLOW_FUNC_DECL_in_functionDeclaration232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_DECL_in_functionDeclaration232	= { FOLLOW_FUNC_DECL_in_functionDeclaration232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration264  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration264_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE00), ANTLR3_UINT64_LIT(0x00000074CC000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration264	= { FOLLOW_Identifier_in_functionDeclaration264_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration298  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration298_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE00), ANTLR3_UINT64_LIT(0x00000074CC000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration298	= { FOLLOW_formalParameterList_in_functionDeclaration298_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration363  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration363	= { FOLLOW_functionBody_in_functionDeclaration363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_EXPR_in_functionExpression407  */
static	ANTLR3_BITWORD FOLLOW_FUNC_EXPR_in_functionExpression407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_EXPR_in_functionExpression407	= { FOLLOW_FUNC_EXPR_in_functionExpression407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression451  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression451_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE00), ANTLR3_UINT64_LIT(0x00000074CC000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression451	= { FOLLOW_Identifier_in_functionExpression451_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression518  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression518_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE00), ANTLR3_UINT64_LIT(0x00000074CC000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression518	= { FOLLOW_formalParameterList_in_functionExpression518_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression579  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression579	= { FOLLOW_functionBody_in_functionExpression579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_PARAMS_in_formalParameterList627  */
static	ANTLR3_BITWORD FOLLOW_FUNC_PARAMS_in_formalParameterList627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_PARAMS_in_formalParameterList627	= { FOLLOW_FUNC_PARAMS_in_formalParameterList627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList648  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList648	= { FOLLOW_Identifier_in_formalParameterList648_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList718  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList718	= { FOLLOW_Identifier_in_formalParameterList718_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody748  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody748_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody748	= { FOLLOW_sourceElements_in_functionBody748_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EMPTY_FUNC_BODY_in_functionBody753  */
static	ANTLR3_BITWORD FOLLOW_EMPTY_FUNC_BODY_in_functionBody753_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EMPTY_FUNC_BODY_in_functionBody753	= { FOLLOW_EMPTY_FUNC_BODY_in_functionBody753_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_statement769  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_statement769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_statement769	= { FOLLOW_noOpStatement_in_statement769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_statement777  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_statement777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_statement777	= { FOLLOW_msgRecvStatement_in_statement777_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_statement789  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_statement789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_statement789	= { FOLLOW_msgSendStatement_in_statement789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement797  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement797	= { FOLLOW_statementBlock_in_statement797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement805  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement805	= { FOLLOW_variableStatement_in_statement805_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement813  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement813	= { FOLLOW_expressionStatement_in_statement813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement821  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement821	= { FOLLOW_ifStatement_in_statement821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement829  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement829	= { FOLLOW_iterationStatement_in_statement829_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement837  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement837	= { FOLLOW_continueStatement_in_statement837_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement845  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement845	= { FOLLOW_breakStatement_in_statement845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement853  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement853	= { FOLLOW_returnStatement_in_statement853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement861  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement861	= { FOLLOW_withStatement_in_statement861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement869  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement869	= { FOLLOW_switchStatement_in_statement869_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_statement877  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_statement877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_statement877	= { FOLLOW_labelledStatement_in_statement877_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement885  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement885	= { FOLLOW_throwStatement_in_statement885_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenStatement_in_statement893  */
static	ANTLR3_BITWORD FOLLOW_whenStatement_in_statement893_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenStatement_in_statement893	= { FOLLOW_whenStatement_in_statement893_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement901  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement901	= { FOLLOW_tryStatement_in_statement901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOOP_in_noOpStatement926  */
static	ANTLR3_BITWORD FOLLOW_NOOP_in_noOpStatement926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOOP_in_noOpStatement926	= { FOLLOW_NOOP_in_noOpStatement926_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock972  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock972	= { FOLLOW_statementList_in_statementBlock972_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLIST_in_statementList1001  */
static	ANTLR3_BITWORD FOLLOW_SLIST_in_statementList1001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SLIST_in_statementList1001	= { FOLLOW_SLIST_in_statementList1001_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1017  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1017_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE08), ANTLR3_UINT64_LIT(0x00000070C8000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1017	= { FOLLOW_statement_in_statementList1017_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_variableStatement1083  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_variableStatement1083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_variableStatement1083	= { FOLLOW_VARLIST_in_variableStatement1083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1111  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1111	= { FOLLOW_variableDeclarationList_in_variableStatement1111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1131  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1131	= { FOLLOW_variableDeclaration_in_variableDeclarationList1131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1171  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1171	= { FOLLOW_variableDeclaration_in_variableDeclarationList1171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1194  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1194_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1194	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1194_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclaration1221  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclaration1221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclaration1221	= { FOLLOW_VAR_in_variableDeclaration1221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1235  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1235	= { FOLLOW_Identifier_in_variableDeclaration1235_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1313  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1313	= { FOLLOW_initialiser_in_variableDeclaration1313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclarationNoIn1373  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclarationNoIn1373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclarationNoIn1373	= { FOLLOW_VAR_in_variableDeclarationNoIn1373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1392  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1392_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1392	= { FOLLOW_Identifier_in_variableDeclarationNoIn1392_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1470  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1470	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_initialiser1513  */
static	ANTLR3_BITWORD FOLLOW_expression_in_initialiser1513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_initialiser1513	= { FOLLOW_expression_in_initialiser1513_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_initialiserNoIn1526  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_initialiserNoIn1526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_initialiserNoIn1526	= { FOLLOW_expressionNoIn_in_initialiserNoIn1526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1540  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1540	= { FOLLOW_expression_in_expressionStatement1540_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IF_in_ifStatement1553  */
static	ANTLR3_BITWORD FOLLOW_IF_in_ifStatement1553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IF_in_ifStatement1553	= { FOLLOW_IF_in_ifStatement1553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1582  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1582_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE08), ANTLR3_UINT64_LIT(0x00000070C8000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1582	= { FOLLOW_expression_in_ifStatement1582_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1612  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1612_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE08), ANTLR3_UINT64_LIT(0x00000070C8000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1612	= { FOLLOW_statement_in_ifStatement1612_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1706  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1706	= { FOLLOW_statement_in_ifStatement1706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1761  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1761	= { FOLLOW_doWhileStatement_in_iterationStatement1761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1766  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1766	= { FOLLOW_whileStatement_in_iterationStatement1766_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1771  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1771_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1771	= { FOLLOW_forStatement_in_iterationStatement1771_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1776  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1776	= { FOLLOW_forInStatement_in_iterationStatement1776_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DO_in_doWhileStatement1803  */
static	ANTLR3_BITWORD FOLLOW_DO_in_doWhileStatement1803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DO_in_doWhileStatement1803	= { FOLLOW_DO_in_doWhileStatement1803_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1831  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1831_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1831	= { FOLLOW_statement_in_doWhileStatement1831_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1859  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1859	= { FOLLOW_expression_in_doWhileStatement1859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHILE_in_whileStatement1910  */
static	ANTLR3_BITWORD FOLLOW_WHILE_in_whileStatement1910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHILE_in_whileStatement1910	= { FOLLOW_WHILE_in_whileStatement1910_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1938  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1938_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE08), ANTLR3_UINT64_LIT(0x00000070C8000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1938	= { FOLLOW_expression_in_whileStatement1938_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1967  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1967	= { FOLLOW_statement_in_whileStatement1967_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FOR_in_forStatement2017  */
static	ANTLR3_BITWORD FOLLOW_FOR_in_forStatement2017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FOR_in_forStatement2017	= { FOLLOW_FOR_in_forStatement2017_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORINIT_in_forStatement2048  */
static	ANTLR3_BITWORD FOLLOW_FORINIT_in_forStatement2048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORINIT_in_forStatement2048	= { FOLLOW_FORINIT_in_forStatement2048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement2050  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement2050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement2050	= { FOLLOW_forStatementInitialiserPart_in_forStatement2050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORCOND_in_forStatement2083  */
static	ANTLR3_BITWORD FOLLOW_FORCOND_in_forStatement2083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORCOND_in_forStatement2083	= { FOLLOW_FORCOND_in_forStatement2083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2085  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2085	= { FOLLOW_expression_in_forStatement2085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORITER_in_forStatement2119  */
static	ANTLR3_BITWORD FOLLOW_FORITER_in_forStatement2119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORITER_in_forStatement2119	= { FOLLOW_FORITER_in_forStatement2119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2121  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2121	= { FOLLOW_expression_in_forStatement2121_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement2154  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement2154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement2154	= { FOLLOW_statement_in_forStatement2154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart2193  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart2193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart2193	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart2193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_forStatementInitialiserPart2202  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_forStatementInitialiserPart2202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_forStatementInitialiserPart2202	= { FOLLOW_VARLIST_in_forStatementInitialiserPart2202_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2204  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2204	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2204_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORIN_in_forInStatement2230  */
static	ANTLR3_BITWORD FOLLOW_FORIN_in_forInStatement2230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORIN_in_forInStatement2230	= { FOLLOW_FORIN_in_forInStatement2230_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement2252  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement2252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement2252	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement2252_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement2273  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement2273_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE08), ANTLR3_UINT64_LIT(0x00000070C8000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement2273	= { FOLLOW_expression_in_forInStatement2273_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement2294  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement2294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement2294	= { FOLLOW_statement_in_forInStatement2294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2326  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2326	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2326_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_forInStatementInitialiserPart2332  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_forInStatementInitialiserPart2332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_forInStatementInitialiserPart2332	= { FOLLOW_VAR_in_forInStatementInitialiserPart2332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2334  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2334	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTINUE_in_continueStatement2359  */
static	ANTLR3_BITWORD FOLLOW_CONTINUE_in_continueStatement2359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTINUE_in_continueStatement2359	= { FOLLOW_CONTINUE_in_continueStatement2359_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2395  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2395_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2395	= { FOLLOW_Identifier_in_continueStatement2395_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BREAK_in_breakStatement2452  */
static	ANTLR3_BITWORD FOLLOW_BREAK_in_breakStatement2452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BREAK_in_breakStatement2452	= { FOLLOW_BREAK_in_breakStatement2452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2486  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2486	= { FOLLOW_Identifier_in_breakStatement2486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RETURN_in_returnStatement2545  */
static	ANTLR3_BITWORD FOLLOW_RETURN_in_returnStatement2545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RETURN_in_returnStatement2545	= { FOLLOW_RETURN_in_returnStatement2545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2582  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2582	= { FOLLOW_expression_in_returnStatement2582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WITH_in_withStatement2618  */
static	ANTLR3_BITWORD FOLLOW_WITH_in_withStatement2618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WITH_in_withStatement2618	= { FOLLOW_WITH_in_withStatement2618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2644  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2644_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE08), ANTLR3_UINT64_LIT(0x00000070C8000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2644	= { FOLLOW_expression_in_withStatement2644_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2680  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2680	= { FOLLOW_statement_in_withStatement2680_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LABEL_in_labelledStatement2706  */
static	ANTLR3_BITWORD FOLLOW_LABEL_in_labelledStatement2706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LABEL_in_labelledStatement2706	= { FOLLOW_LABEL_in_labelledStatement2706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_labelledStatement2717  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_labelledStatement2717_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE08), ANTLR3_UINT64_LIT(0x00000070C8000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_labelledStatement2717	= { FOLLOW_Identifier_in_labelledStatement2717_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labelledStatement2738  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labelledStatement2738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labelledStatement2738	= { FOLLOW_statement_in_labelledStatement2738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SWITCH_in_switchStatement2773  */
static	ANTLR3_BITWORD FOLLOW_SWITCH_in_switchStatement2773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SWITCH_in_switchStatement2773	= { FOLLOW_SWITCH_in_switchStatement2773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2794  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2794_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2794	= { FOLLOW_expression_in_switchStatement2794_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2815  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2815	= { FOLLOW_caseBlock_in_switchStatement2815_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_BLOCK_in_caseBlock2854  */
static	ANTLR3_BITWORD FOLLOW_CASE_BLOCK_in_caseBlock2854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_BLOCK_in_caseBlock2854	= { FOLLOW_CASE_BLOCK_in_caseBlock2854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2864  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2864	= { FOLLOW_caseClause_in_caseBlock2864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_BLOCK_in_caseBlock2880  */
static	ANTLR3_BITWORD FOLLOW_CASE_BLOCK_in_caseBlock2880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_BLOCK_in_caseBlock2880	= { FOLLOW_CASE_BLOCK_in_caseBlock2880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2890  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2890	= { FOLLOW_defaultClause_in_caseBlock2890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClause2920  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClause2920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClause2920	= { FOLLOW_CASE_in_caseClause2920_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause2940  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause2940_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause2940	= { FOLLOW_expression_in_caseClause2940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2960  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2960_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2960	= { FOLLOW_statementList_in_caseClause2960_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseClause2971  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseClause2971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseClause2971	= { FOLLOW_caseClause_in_caseClause2971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClause2992  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClause2992_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClause2992	= { FOLLOW_CASE_in_caseClause2992_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause3012  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause3012_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause3012	= { FOLLOW_expression_in_caseClause3012_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause3032  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause3032_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause3032	= { FOLLOW_statementList_in_caseClause3032_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseClause3043  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseClause3043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseClause3043	= { FOLLOW_defaultClause_in_caseClause3043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DEFAULT_in_defaultClause3070  */
static	ANTLR3_BITWORD FOLLOW_DEFAULT_in_defaultClause3070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DEFAULT_in_defaultClause3070	= { FOLLOW_DEFAULT_in_defaultClause3070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause3090  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause3090_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause3090	= { FOLLOW_statementList_in_defaultClause3090_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_defaultClause3101  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_defaultClause3101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_defaultClause3101	= { FOLLOW_caseClauseSeenDefault_in_defaultClause3101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClauseSeenDefault3129  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClauseSeenDefault3129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClauseSeenDefault3129	= { FOLLOW_CASE_in_caseClauseSeenDefault3129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClauseSeenDefault3149  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClauseSeenDefault3149_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClauseSeenDefault3149	= { FOLLOW_expression_in_caseClauseSeenDefault3149_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClauseSeenDefault3169  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClauseSeenDefault3169_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClauseSeenDefault3169	= { FOLLOW_statementList_in_caseClauseSeenDefault3169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3180  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3180	= { FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3180_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_THROW_in_throwStatement3215  */
static	ANTLR3_BITWORD FOLLOW_THROW_in_throwStatement3215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_THROW_in_throwStatement3215	= { FOLLOW_THROW_in_throwStatement3215_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement3235  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement3235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement3235	= { FOLLOW_expression_in_throwStatement3235_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHEN_in_whenStatement3262  */
static	ANTLR3_BITWORD FOLLOW_WHEN_in_whenStatement3262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHEN_in_whenStatement3262	= { FOLLOW_WHEN_in_whenStatement3262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenPred_in_whenStatement3282  */
static	ANTLR3_BITWORD FOLLOW_whenPred_in_whenStatement3282_bits[]	= { ANTLR3_UINT64_LIT(0x0000024685F1CE00), ANTLR3_UINT64_LIT(0x00000074CC000000) };
static  ANTLR3_BITSET_LIST FOLLOW_whenPred_in_whenStatement3282	= { FOLLOW_whenPred_in_whenStatement3282_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_whenStatement3302  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_whenStatement3302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_whenStatement3302	= { FOLLOW_functionBody_in_whenStatement3302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHEN_PRED_in_whenPred3341  */
static	ANTLR3_BITWORD FOLLOW_WHEN_PRED_in_whenPred3341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHEN_PRED_in_whenPred3341	= { FOLLOW_WHEN_PRED_in_whenPred3341_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenPred3351  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenPred3351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenPred3351	= { FOLLOW_expression_in_whenPred3351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst3375  */
static	ANTLR3_BITWORD FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst3375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst3375	= { FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst3375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListFirst3395  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListFirst3395_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListFirst3395	= { FOLLOW_expression_in_whenCheckedListFirst3395_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst3416  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst3416_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst3416	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst3416_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3457  */
static	ANTLR3_BITWORD FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3457	= { FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListSubsequent3477  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListSubsequent3477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListSubsequent3477	= { FOLLOW_expression_in_whenCheckedListSubsequent3477_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3498  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000008) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3498	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3498_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRY_in_tryStatement3551  */
static	ANTLR3_BITWORD FOLLOW_TRY_in_tryStatement3551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TRY_in_tryStatement3551	= { FOLLOW_TRY_in_tryStatement3551_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement3579  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement3579_bits[]	= { ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement3579	= { FOLLOW_statementBlock_in_tryStatement3579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchFinallyBlock_in_tryStatement3593  */
static	ANTLR3_BITWORD FOLLOW_catchFinallyBlock_in_tryStatement3593_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_catchFinallyBlock_in_tryStatement3593	= { FOLLOW_catchFinallyBlock_in_tryStatement3593_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchBlock_in_catchFinallyBlock3631  */
static	ANTLR3_BITWORD FOLLOW_catchBlock_in_catchFinallyBlock3631_bits[]	= { ANTLR3_UINT64_LIT(0x0000001800000002) };
static  ANTLR3_BITSET_LIST FOLLOW_catchBlock_in_catchFinallyBlock3631	= { FOLLOW_catchBlock_in_catchFinallyBlock3631_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3633  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3633	= { FOLLOW_finallyBlock_in_catchFinallyBlock3633_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3646  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3646_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3646	= { FOLLOW_finallyBlock_in_catchFinallyBlock3646_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchBlock3672  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchBlock3672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchBlock3672	= { FOLLOW_CATCH_in_catchBlock3672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchBlock3700  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchBlock3700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchBlock3700	= { FOLLOW_Identifier_in_catchBlock3700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchBlock3728  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchBlock3728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchBlock3728	= { FOLLOW_statementBlock_in_catchBlock3728_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyBlock3781  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyBlock3781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyBlock3781	= { FOLLOW_FINALLY_in_finallyBlock3781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyBlock3809  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyBlock3809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyBlock3809	= { FOLLOW_statementBlock_in_finallyBlock3809_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3862  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3862	= { FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3862_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement3890  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement3890_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement3890	= { FOLLOW_leftHandSideExpression_in_msgSendStatement3890_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement3918  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement3918_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000C8), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement3918	= { FOLLOW_leftHandSideExpression_in_msgSendStatement3918_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement3980  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement3980_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000C8), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement3980	= { FOLLOW_memberExpression_in_msgSendStatement3980_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement4034  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement4034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement4034	= { FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement4034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement4062  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement4062_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement4062	= { FOLLOW_leftHandSideExpression_in_msgSendStatement4062_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement4102  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement4102_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement4102	= { FOLLOW_leftHandSideExpression_in_msgSendStatement4102_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement4130  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement4130_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000C8), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement4130	= { FOLLOW_leftHandSideExpression_in_msgSendStatement4130_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement4192  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement4192_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000C8), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement4192	= { FOLLOW_memberExpression_in_msgSendStatement4192_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memAndCallExpression4317  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memAndCallExpression4317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memAndCallExpression4317	= { FOLLOW_memberExpression_in_memAndCallExpression4317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_memAndCallExpression4321  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_memAndCallExpression4321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_memAndCallExpression4321	= { FOLLOW_callExpression_in_memAndCallExpression4321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_msgRecvStatement4340  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_msgRecvStatement4340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_msgRecvStatement4340	= { FOLLOW_MESSAGE_RECV_in_msgRecvStatement4340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement4356  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement4356_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement4356	= { FOLLOW_memAndCallExpression_in_msgRecvStatement4356_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement4373  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement4373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement4373	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement4373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_msgRecvStatement4401  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_msgRecvStatement4401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_msgRecvStatement4401	= { FOLLOW_MESSAGE_RECV_in_msgRecvStatement4401_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement4413  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement4413_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement4413	= { FOLLOW_memAndCallExpression_in_msgRecvStatement4413_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement4426  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement4426_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement4426	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement4426_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement4438  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement4438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement4438	= { FOLLOW_memAndCallExpression_in_msgRecvStatement4438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_msgRecvStatement4461  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_msgRecvStatement4461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_msgRecvStatement4461	= { FOLLOW_MESSAGE_RECV_in_msgRecvStatement4461_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_msgRecvStatement4477  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_msgRecvStatement4477_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_msgRecvStatement4477	= { FOLLOW_callExpression_in_msgRecvStatement4477_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement4494  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement4494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement4494	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement4494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchClause4520  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchClause4520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchClause4520	= { FOLLOW_CATCH_in_catchClause4520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause4535  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause4535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause4535	= { FOLLOW_Identifier_in_catchClause4535_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause4556  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause4556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause4556	= { FOLLOW_statementBlock_in_catchClause4556_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyClause4576  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyClause4576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyClause4576	= { FOLLOW_FINALLY_in_finallyClause4576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause4589  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause4589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause4589	= { FOLLOW_statementBlock_in_finallyClause4589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_LIST_in_expression4614  */
static	ANTLR3_BITWORD FOLLOW_EXPR_LIST_in_expression4614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_LIST_in_expression4614	= { FOLLOW_EXPR_LIST_in_expression4614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression4616  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression4616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression4616	= { FOLLOW_assignmentExpression_in_expression4616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COND_EXPR_in_expression4630  */
static	ANTLR3_BITWORD FOLLOW_COND_EXPR_in_expression4630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COND_EXPR_in_expression4630	= { FOLLOW_COND_EXPR_in_expression4630_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_expression4632  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_expression4632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_expression4632	= { FOLLOW_conditionalExpression_in_expression4632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_LIST_in_expressionNoIn4646  */
static	ANTLR3_BITWORD FOLLOW_EXPR_LIST_in_expressionNoIn4646_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_LIST_in_expressionNoIn4646	= { FOLLOW_EXPR_LIST_in_expressionNoIn4646_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4648  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4648	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4648_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4662  */
static	ANTLR3_BITWORD FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4662	= { FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4664  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4664	= { FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4664_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpression4722  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpression4722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpression4722	= { FOLLOW_ASSIGN_in_assignmentExpression4722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpression4759  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpression4759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpression4759	= { FOLLOW_MULT_ASSIGN_in_assignmentExpression4759_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpression4789  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpression4789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpression4789	= { FOLLOW_DIV_ASSIGN_in_assignmentExpression4789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpression4820  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpression4820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpression4820	= { FOLLOW_MOD_ASSIGN_in_assignmentExpression4820_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpression4851  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpression4851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpression4851	= { FOLLOW_ADD_ASSIGN_in_assignmentExpression4851_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpression4883  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpression4883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpression4883	= { FOLLOW_SUB_ASSIGN_in_assignmentExpression4883_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpression4915  */
static	ANTLR3_BITWORD FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpression4915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpression4915	= { FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpression4915_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4939  */
static	ANTLR3_BITWORD FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4939	= { FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4939_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4962  */
static	ANTLR3_BITWORD FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4962	= { FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4962_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpression4984  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpression4984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpression4984	= { FOLLOW_AND_ASSIGN_in_assignmentExpression4984_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpression5015  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpression5015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpression5015	= { FOLLOW_EXP_ASSIGN_in_assignmentExpression5015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpression5046  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpression5046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpression5046	= { FOLLOW_OR_ASSIGN_in_assignmentExpression5046_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression5088  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression5088_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00001420000E0), ANTLR3_UINT64_LIT(0x0007018211FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression5088	= { FOLLOW_leftHandSideExpression_in_assignmentExpression5088_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression5117  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression5117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression5117	= { FOLLOW_conditionalExpression_in_assignmentExpression5117_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn5179  */
static	ANTLR3_BITWORD FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn5179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn5179	= { FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn5179_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5181  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5181	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpressionNoIn5201  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpressionNoIn5201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpressionNoIn5201	= { FOLLOW_ASSIGN_in_assignmentExpressionNoIn5201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn5225  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn5225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn5225	= { FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn5225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn5243  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn5243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn5243	= { FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn5243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn5263  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn5263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn5263	= { FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn5263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn5282  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn5282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn5282	= { FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn5282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn5302  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn5302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn5302	= { FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn5302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5321  */
static	ANTLR3_BITWORD FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5321	= { FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5333  */
static	ANTLR3_BITWORD FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5333	= { FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5333_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn5344  */
static	ANTLR3_BITWORD FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn5344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn5344	= { FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn5344_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn5354  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn5354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn5354	= { FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn5354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn5373  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn5373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn5373	= { FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn5373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5392  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5392_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5392	= { FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5392_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5425  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5425_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00001420000E0), ANTLR3_UINT64_LIT(0x0007018211FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5425	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5425_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5440  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5440	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5440_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression5457  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression5457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression5457	= { FOLLOW_callExpression_in_leftHandSideExpression5457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression5462  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression5462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression5462	= { FOLLOW_newExpression_in_leftHandSideExpression5462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression5474  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression5474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression5474	= { FOLLOW_memberExpression_in_newExpression5474_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_newExpression5481  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_newExpression5481_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_newExpression5481	= { FOLLOW_NEW_in_newExpression5481_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression5483  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression5483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression5483	= { FOLLOW_newExpression_in_newExpression5483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix15496  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix15496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix15496	= { FOLLOW_Identifier_in_propertyReferenceSuffix15496_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix15508  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix15508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix15508	= { FOLLOW_expression_in_indexSuffix15508_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression5517  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression5517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression5517	= { FOLLOW_primaryExpression_in_memberExpression5517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression5520  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression5520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression5520	= { FOLLOW_functionExpression_in_memberExpression5520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression5525  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression5525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression5525	= { FOLLOW_DOT_in_memberExpression5525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5527  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5527	= { FOLLOW_memberExpression_in_memberExpression5527_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression5531  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression5531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression5531	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression5531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_memberExpression5538  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_memberExpression5538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_memberExpression5538	= { FOLLOW_ARRAY_INDEX_in_memberExpression5538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5540  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5540	= { FOLLOW_memberExpression_in_memberExpression5540_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression5544  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression5544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression5544	= { FOLLOW_indexSuffix1_in_memberExpression5544_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_memberExpression5552  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_memberExpression5552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_memberExpression5552	= { FOLLOW_NEW_in_memberExpression5552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5556  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5556	= { FOLLOW_memberExpression_in_memberExpression5556_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression5558  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression5558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression5558	= { FOLLOW_arguments_in_memberExpression5558_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression5564  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression5564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression5564	= { FOLLOW_DOT_in_memberExpression5564_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5568  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5568	= { FOLLOW_memberExpression_in_memberExpression5568_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix5579  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix5579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix5579	= { FOLLOW_indexSuffix_in_memberExpressionSuffix5579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5584  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5584	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5584_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression5597  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression5597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression5597	= { FOLLOW_CALL_in_callExpression5597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression5599  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression5599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression5599	= { FOLLOW_memberExpression_in_callExpression5599_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression5601  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression5601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression5601	= { FOLLOW_arguments_in_callExpression5601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_callExpression5609  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_callExpression5609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_callExpression5609	= { FOLLOW_ARRAY_INDEX_in_callExpression5609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5611  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5611	= { FOLLOW_callExpression_in_callExpression5611_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression5615  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression5615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression5615	= { FOLLOW_indexSuffix1_in_callExpression5615_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_callExpression5624  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_callExpression5624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_callExpression5624	= { FOLLOW_DOT_in_callExpression5624_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5626  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5626	= { FOLLOW_callExpression_in_callExpression5626_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression5630  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression5630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression5630	= { FOLLOW_propertyReferenceSuffix1_in_callExpression5630_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression5637  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression5637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression5637	= { FOLLOW_CALL_in_callExpression5637_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5639  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5639	= { FOLLOW_callExpression_in_callExpression5639_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression5641  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression5641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression5641	= { FOLLOW_arguments_in_callExpression5641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix5655  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix5655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix5655	= { FOLLOW_arguments_in_callExpressionSuffix5655_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix5660  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix5660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix5660	= { FOLLOW_indexSuffix_in_callExpressionSuffix5660_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5665  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5665	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5678  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5678	= { FOLLOW_ARGLIST_in_arguments5678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5688  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5688_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5688	= { FOLLOW_ARGLIST_in_arguments5688_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments5708  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments5708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments5708	= { FOLLOW_expression_in_arguments5708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5733  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5733	= { FOLLOW_ARGLIST_in_arguments5733_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments5749  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments5749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments5749	= { FOLLOW_expression_in_arguments5749_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments5777  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments5777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments5777	= { FOLLOW_expression_in_arguments5777_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_indexSuffix5817  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_indexSuffix5817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_indexSuffix5817	= { FOLLOW_ARRAY_INDEX_in_indexSuffix5817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix5819  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix5819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix5819	= { FOLLOW_expression_in_indexSuffix5819_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_propertyReferenceSuffix5834  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_propertyReferenceSuffix5834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_propertyReferenceSuffix5834	= { FOLLOW_DOT_in_propertyReferenceSuffix5834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix5836  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix5836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix5836	= { FOLLOW_Identifier_in_propertyReferenceSuffix5836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignmentOperator0  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignmentOperator0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignmentOperator0	= { FOLLOW_set_in_assignmentOperator0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_in_ternaryExpression5897  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_in_ternaryExpression5897_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_in_ternaryExpression5897	= { FOLLOW_TERNARYOP_in_ternaryExpression5897_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_ternaryExpression5925  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_ternaryExpression5925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_ternaryExpression5925	= { FOLLOW_logicalORExpression_in_ternaryExpression5925_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ternaryExpression5953  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ternaryExpression5953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ternaryExpression5953	= { FOLLOW_expression_in_ternaryExpression5953_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ternaryExpression5981  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ternaryExpression5981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ternaryExpression5981	= { FOLLOW_expression_in_ternaryExpression5981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_in_ternaryExpressionNoIn6034  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_in_ternaryExpressionNoIn6034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_in_ternaryExpressionNoIn6034	= { FOLLOW_TERNARYOP_in_ternaryExpressionNoIn6034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6062  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6062	= { FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6062_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6090  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6090	= { FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6090_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6118  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6118	= { FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6118_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_conditionalExpression6163  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_conditionalExpression6163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_conditionalExpression6163	= { FOLLOW_ternaryExpression_in_conditionalExpression6163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression6175  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression6175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression6175	= { FOLLOW_logicalORExpression_in_conditionalExpression6175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn6186  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn6186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn6186	= { FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn6186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn6198  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn6198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn6198	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn6198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression6218  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression6218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression6218	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression6218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpression6223  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpression6223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpression6223	= { FOLLOW_AND_in_logicalANDExpression6223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalANDExpression6225  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalANDExpression6225_bits[]	= { ANTLR3_UINT64_LIT(0xFF000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalANDExpression6225	= { FOLLOW_logicalANDExpression_in_logicalANDExpression6225_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression6229  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression6229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression6229	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression6229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression6242  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression6242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression6242	= { FOLLOW_logicalANDExpression_in_logicalORExpression6242_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpression6247  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpression6247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpression6247	= { FOLLOW_OR_in_logicalORExpression6247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_logicalORExpression6249  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_logicalORExpression6249_bits[]	= { ANTLR3_UINT64_LIT(0xFF800001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_logicalORExpression6249	= { FOLLOW_logicalORExpression_in_logicalORExpression6249_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression6253  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression6253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression6253	= { FOLLOW_logicalANDExpression_in_logicalORExpression6253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6266  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6266	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6266_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpressionNoIn6271  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpressionNoIn6271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpressionNoIn6271	= { FOLLOW_OR_in_logicalORExpressionNoIn6271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6273  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6273_bits[]	= { ANTLR3_UINT64_LIT(0xFF800001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6273	= { FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6273_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6275  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6275	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6290  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6290	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpressionNoIn6296  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpressionNoIn6296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpressionNoIn6296	= { FOLLOW_AND_in_logicalANDExpressionNoIn6296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6298  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6298_bits[]	= { ANTLR3_UINT64_LIT(0xFF000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6298	= { FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6298_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6302  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6302	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6316  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6316_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6316	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6316_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpression6322  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpression6322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpression6322	= { FOLLOW_BIT_OR_in_bitwiseORExpression6322_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_bitwiseORExpression6324  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_bitwiseORExpression6324_bits[]	= { ANTLR3_UINT64_LIT(0xFE000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_bitwiseORExpression6324	= { FOLLOW_bitwiseORExpression_in_bitwiseORExpression6324_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6328  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6328	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6341  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6341	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6341_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6348  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6348	= { FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6348_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6350  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6350_bits[]	= { ANTLR3_UINT64_LIT(0xFE000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6350	= { FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6350_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6354  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6354	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6366  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6366	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpression6373  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpression6373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpression6373	= { FOLLOW_EXP_in_bitwiseXORExpression6373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6377  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6377_bits[]	= { ANTLR3_UINT64_LIT(0xFC000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6377	= { FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6377_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6381  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6381	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6393  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6393	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpressionNoIn6399  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpressionNoIn6399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpressionNoIn6399	= { FOLLOW_EXP_in_bitwiseXORExpressionNoIn6399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6403  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6403_bits[]	= { ANTLR3_UINT64_LIT(0xFC000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6403	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6403_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6406  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6406	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6406_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression6420  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression6420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression6420	= { FOLLOW_equalityExpression_in_bitwiseANDExpression6420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpression6426  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpression6426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpression6426	= { FOLLOW_BIT_AND_in_bitwiseANDExpression6426_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6430  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6430_bits[]	= { ANTLR3_UINT64_LIT(0xF8000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6430	= { FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6430_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression6434  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression6434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression6434	= { FOLLOW_equalityExpression_in_bitwiseANDExpression6434_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6448  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6448	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6455  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6455	= { FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6455_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6459  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6459_bits[]	= { ANTLR3_UINT64_LIT(0xF8000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6459	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6459_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6463  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6463	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6463_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6476  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6476	= { FOLLOW_relationalExpression_in_equalityExpression6476_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpression6482  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpression6482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpression6482	= { FOLLOW_EQUALS_in_equalityExpression6482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression6486  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression6486_bits[]	= { ANTLR3_UINT64_LIT(0x80000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression6486	= { FOLLOW_equalityExpression_in_equalityExpression6486_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6490  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6490	= { FOLLOW_relationalExpression_in_equalityExpression6490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpression6497  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpression6497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpression6497	= { FOLLOW_NOT_EQUALS_in_equalityExpression6497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression6501  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression6501_bits[]	= { ANTLR3_UINT64_LIT(0x80000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression6501	= { FOLLOW_equalityExpression_in_equalityExpression6501_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6505  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6505	= { FOLLOW_relationalExpression_in_equalityExpression6505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpression6512  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpression6512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpression6512	= { FOLLOW_IDENT_in_equalityExpression6512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression6516  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression6516_bits[]	= { ANTLR3_UINT64_LIT(0x80000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression6516	= { FOLLOW_equalityExpression_in_equalityExpression6516_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6520  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6520	= { FOLLOW_relationalExpression_in_equalityExpression6520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpression6527  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpression6527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpression6527	= { FOLLOW_NOT_IDENT_in_equalityExpression6527_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression6531  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression6531_bits[]	= { ANTLR3_UINT64_LIT(0x80000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression6531	= { FOLLOW_equalityExpression_in_equalityExpression6531_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6535  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6535	= { FOLLOW_relationalExpression_in_equalityExpression6535_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6545  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6545	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpressionNoIn6551  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpressionNoIn6551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpressionNoIn6551	= { FOLLOW_EQUALS_in_equalityExpressionNoIn6551_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6553  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6553_bits[]	= { ANTLR3_UINT64_LIT(0x80000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6553	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6553_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6557  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6557	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6557_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6564  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6564	= { FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6564_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6566  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6566_bits[]	= { ANTLR3_UINT64_LIT(0x80000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6566	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6566_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6570  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6570	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpressionNoIn6577  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpressionNoIn6577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpressionNoIn6577	= { FOLLOW_IDENT_in_equalityExpressionNoIn6577_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6579  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6579_bits[]	= { ANTLR3_UINT64_LIT(0x80000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6579	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6579_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6583  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6583	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6583_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6590  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6590	= { FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6590_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6592  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6592_bits[]	= { ANTLR3_UINT64_LIT(0x80000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6592	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6592_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6596  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6596	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6596_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOps6609  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOps6609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOps6609	= { FOLLOW_LESS_THAN_in_relationalOps6609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOps6615  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOps6615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOps6615	= { FOLLOW_GREATER_THAN_in_relationalOps6615_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOps6621  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOps6621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOps6621	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOps6621_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6628  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6628	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOps6634  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOps6634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOps6634	= { FOLLOW_INSTANCE_OF_in_relationalOps6634_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IN_in_relationalOps6640  */
static	ANTLR3_BITWORD FOLLOW_IN_in_relationalOps6640_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IN_in_relationalOps6640	= { FOLLOW_IN_in_relationalOps6640_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression6658  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression6658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression6658	= { FOLLOW_shiftExpression_in_relationalExpression6658_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression6672  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression6672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression6672	= { FOLLOW_relationalOps_in_relationalExpression6672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_relationalExpression6681  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_relationalExpression6681_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FE0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_relationalExpression6681	= { FOLLOW_relationalExpression_in_relationalExpression6681_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression6693  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression6693_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression6693	= { FOLLOW_shiftExpression_in_relationalExpression6693_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOpsNoIn6709  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOpsNoIn6709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOpsNoIn6709	= { FOLLOW_LESS_THAN_in_relationalOpsNoIn6709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOpsNoIn6715  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOpsNoIn6715_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOpsNoIn6715	= { FOLLOW_GREATER_THAN_in_relationalOpsNoIn6715_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6721  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6721	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6721_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6727  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6727	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6727_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6733  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6733	= { FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6733_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn6753  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn6753_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn6753	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn6753_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6768  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6768_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6768	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6768_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6776  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6776_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7FE0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6776	= { FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6776_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn6792  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn6792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn6792	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn6792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEFT_SHIFT_in_shiftOps6813  */
static	ANTLR3_BITWORD FOLLOW_LEFT_SHIFT_in_shiftOps6813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LEFT_SHIFT_in_shiftOps6813	= { FOLLOW_LEFT_SHIFT_in_shiftOps6813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RIGHT_SHIFT_in_shiftOps6820  */
static	ANTLR3_BITWORD FOLLOW_RIGHT_SHIFT_in_shiftOps6820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RIGHT_SHIFT_in_shiftOps6820	= { FOLLOW_RIGHT_SHIFT_in_shiftOps6820_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRIPLE_SHIFT_in_shiftOps6827  */
static	ANTLR3_BITWORD FOLLOW_TRIPLE_SHIFT_in_shiftOps6827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_TRIPLE_SHIFT_in_shiftOps6827	= { FOLLOW_TRIPLE_SHIFT_in_shiftOps6827_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression6843  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression6843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression6843	= { FOLLOW_additiveExpression_in_shiftExpression6843_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftOps_in_shiftExpression6849  */
static	ANTLR3_BITWORD FOLLOW_shiftOps_in_shiftExpression6849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftOps_in_shiftExpression6849	= { FOLLOW_shiftOps_in_shiftExpression6849_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_shiftExpression6859  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_shiftExpression6859_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7F00), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_shiftExpression6859	= { FOLLOW_shiftExpression_in_shiftExpression6859_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression6875  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression6875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression6875	= { FOLLOW_additiveExpression_in_shiftExpression6875_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression6903  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression6903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression6903	= { FOLLOW_multiplicativeExpression_in_additiveExpression6903_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_OP_in_additiveExpression6916  */
static	ANTLR3_BITWORD FOLLOW_ADD_OP_in_additiveExpression6916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_OP_in_additiveExpression6916	= { FOLLOW_ADD_OP_in_additiveExpression6916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression6949  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression6949_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7C00), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression6949	= { FOLLOW_additiveExpression_in_additiveExpression6949_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression6979  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression6979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression6979	= { FOLLOW_multiplicativeExpression_in_additiveExpression6979_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_in_additiveExpression7022  */
static	ANTLR3_BITWORD FOLLOW_SUB_in_additiveExpression7022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_in_additiveExpression7022	= { FOLLOW_SUB_in_additiveExpression7022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression7053  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression7053_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF7C00), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression7053	= { FOLLOW_additiveExpression_in_additiveExpression7053_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression7084  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression7084_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression7084	= { FOLLOW_multiplicativeExpression_in_additiveExpression7084_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression7129  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression7129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression7129	= { FOLLOW_unaryExpression_in_multiplicativeExpression7129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_in_multiplicativeExpression7136  */
static	ANTLR3_BITWORD FOLLOW_MULT_in_multiplicativeExpression7136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_in_multiplicativeExpression7136	= { FOLLOW_MULT_in_multiplicativeExpression7136_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression7144  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression7144_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF6000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression7144	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression7144_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression7160  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression7160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression7160	= { FOLLOW_unaryExpression_in_multiplicativeExpression7160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_in_multiplicativeExpression7173  */
static	ANTLR3_BITWORD FOLLOW_DIV_in_multiplicativeExpression7173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_in_multiplicativeExpression7173	= { FOLLOW_DIV_in_multiplicativeExpression7173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression7175  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression7175_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF6000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression7175	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression7175_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression7179  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression7179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression7179	= { FOLLOW_unaryExpression_in_multiplicativeExpression7179_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_in_multiplicativeExpression7186  */
static	ANTLR3_BITWORD FOLLOW_MOD_in_multiplicativeExpression7186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_in_multiplicativeExpression7186	= { FOLLOW_MOD_in_multiplicativeExpression7186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression7188  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression7188_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018011FF6000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression7188	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression7188_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression7192  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression7192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression7192	= { FOLLOW_unaryExpression_in_multiplicativeExpression7192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unaryOps0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unaryOps0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unaryOps0	= { FOLLOW_set_in_unaryOps0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression7254  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression7254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression7254	= { FOLLOW_postfixExpression_in_unaryExpression7254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_OP_in_unaryExpression7278  */
static	ANTLR3_BITWORD FOLLOW_DELETE_OP_in_unaryExpression7278_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_OP_in_unaryExpression7278	= { FOLLOW_DELETE_OP_in_unaryExpression7278_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VOID_in_unaryExpression7300  */
static	ANTLR3_BITWORD FOLLOW_VOID_in_unaryExpression7300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VOID_in_unaryExpression7300	= { FOLLOW_VOID_in_unaryExpression7300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TYPEOF_in_unaryExpression7322  */
static	ANTLR3_BITWORD FOLLOW_TYPEOF_in_unaryExpression7322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TYPEOF_in_unaryExpression7322	= { FOLLOW_TYPEOF_in_unaryExpression7322_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_unaryExpression7342  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_unaryExpression7342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_unaryExpression7342	= { FOLLOW_PLUSPLUS_in_unaryExpression7342_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_unaryExpression7360  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_unaryExpression7360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_unaryExpression7360	= { FOLLOW_MINUSMINUS_in_unaryExpression7360_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_PLUS_in_unaryExpression7376  */
static	ANTLR3_BITWORD FOLLOW_UNARY_PLUS_in_unaryExpression7376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_PLUS_in_unaryExpression7376	= { FOLLOW_UNARY_PLUS_in_unaryExpression7376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_MINUS_in_unaryExpression7392  */
static	ANTLR3_BITWORD FOLLOW_UNARY_MINUS_in_unaryExpression7392_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_MINUS_in_unaryExpression7392	= { FOLLOW_UNARY_MINUS_in_unaryExpression7392_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMPLEMENT_in_unaryExpression7407  */
static	ANTLR3_BITWORD FOLLOW_COMPLEMENT_in_unaryExpression7407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COMPLEMENT_in_unaryExpression7407	= { FOLLOW_COMPLEMENT_in_unaryExpression7407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_unaryExpression7423  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_unaryExpression7423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_unaryExpression7423	= { FOLLOW_NOT_in_unaryExpression7423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression7452  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression7452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression7452	= { FOLLOW_unaryExpression_in_unaryExpression7452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression7477  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression7477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression7477	= { FOLLOW_leftHandSideExpression_in_postfixExpression7477_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_postfixExpression7490  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_postfixExpression7490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_postfixExpression7490	= { FOLLOW_MINUSMINUS_in_postfixExpression7490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression7492  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression7492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression7492	= { FOLLOW_leftHandSideExpression_in_postfixExpression7492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_postfixExpression7501  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_postfixExpression7501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_postfixExpression7501	= { FOLLOW_PLUSPLUS_in_postfixExpression7501_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression7503  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression7503_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression7503	= { FOLLOW_leftHandSideExpression_in_postfixExpression7503_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_213_in_primaryExpression7524  */
static	ANTLR3_BITWORD FOLLOW_213_in_primaryExpression7524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_213_in_primaryExpression7524	= { FOLLOW_213_in_primaryExpression7524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression7531  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression7531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression7531	= { FOLLOW_Identifier_in_primaryExpression7531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression7549  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression7549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression7549	= { FOLLOW_dollarExpression_in_primaryExpression7549_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression7554  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression7554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression7554	= { FOLLOW_literal_in_primaryExpression7554_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression7559  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression7559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression7559	= { FOLLOW_arrayLiteral_in_primaryExpression7559_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression7564  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression7564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression7564	= { FOLLOW_objectLiteral_in_primaryExpression7564_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_primaryExpression7576  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_primaryExpression7576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_primaryExpression7576	= { FOLLOW_patternLiteral_in_primaryExpression7576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_in_primaryExpression7582  */
static	ANTLR3_BITWORD FOLLOW_PAREN_in_primaryExpression7582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_in_primaryExpression7582	= { FOLLOW_PAREN_in_primaryExpression7582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression7586  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression7586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression7586	= { FOLLOW_expression_in_primaryExpression7586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_primaryExpression7601  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_primaryExpression7601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_primaryExpression7601	= { FOLLOW_vectorLiteral_in_primaryExpression7601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR_in_vectorLiteral7622  */
static	ANTLR3_BITWORD FOLLOW_VECTOR_in_vectorLiteral7622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR_in_vectorLiteral7622	= { FOLLOW_VECTOR_in_vectorLiteral7622_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral7653  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral7653_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018211FF7FE0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral7653	= { FOLLOW_vectorLiteralField_in_vectorLiteral7653_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral7700  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral7700_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018211FF7FE0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral7700	= { FOLLOW_vectorLiteralField_in_vectorLiteral7700_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral7747  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral7747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral7747	= { FOLLOW_vectorLiteralField_in_vectorLiteral7747_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_vectorLiteralField7832  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_vectorLiteralField7832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_vectorLiteralField7832	= { FOLLOW_ternaryExpression_in_vectorLiteralField7832_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_vectorLiteralField7844  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_vectorLiteralField7844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_vectorLiteralField7844	= { FOLLOW_shiftExpression_in_vectorLiteralField7844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_vectorLiteralField7856  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_vectorLiteralField7856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_vectorLiteralField7856	= { FOLLOW_NumericLiteral_in_vectorLiteralField7856_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_vectorLiteralField7870  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_vectorLiteralField7870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_vectorLiteralField7870	= { FOLLOW_callExpression_in_vectorLiteralField7870_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_vectorLiteralField7882  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_vectorLiteralField7882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_vectorLiteralField7882	= { FOLLOW_memberExpression_in_vectorLiteralField7882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7917  */
static	ANTLR3_BITWORD FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7917_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7917	= { FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7917_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression7945  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression7945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression7945	= { FOLLOW_Identifier_in_dollarExpression7945_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral8010  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral8010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral8010	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral8010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral8020  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral8020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral8020	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral8020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral8039  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral8039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral8039	= { FOLLOW_expression_in_arrayLiteral8039_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral8062  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral8062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral8062	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral8062_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral8076  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral8076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral8076	= { FOLLOW_expression_in_arrayLiteral8076_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral8105  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral8105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral8105	= { FOLLOW_expression_in_arrayLiteral8105_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral8142  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral8142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral8142	= { FOLLOW_OBJ_LITERAL_in_objectLiteral8142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral8152  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral8152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral8152	= { FOLLOW_OBJ_LITERAL_in_objectLiteral8152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral8189  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral8189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral8189	= { FOLLOW_propertyNameAndValue_in_objectLiteral8189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral8215  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral8215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral8215	= { FOLLOW_OBJ_LITERAL_in_objectLiteral8215_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral8233  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral8233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral8233	= { FOLLOW_propertyNameAndValue_in_objectLiteral8233_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral8262  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral8262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral8262	= { FOLLOW_propertyNameAndValue_in_objectLiteral8262_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral8305  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral8305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral8305	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral8305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral8315  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral8315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral8315	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral8315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral8324  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral8324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral8324	= { FOLLOW_nameValueProto_in_patternLiteral8324_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral8336  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral8336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral8336	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral8336_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral8356  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral8356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000060000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral8356	= { FOLLOW_nameValueProto_in_patternLiteral8356_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral8385  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral8385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000060000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral8385	= { FOLLOW_nameValueProto_in_patternLiteral8385_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8450  */
static	ANTLR3_BITWORD FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8450	= { FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8450_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_in_nameValueProto8473  */
static	ANTLR3_BITWORD FOLLOW_NAME_in_nameValueProto8473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_in_nameValueProto8473	= { FOLLOW_NAME_in_nameValueProto8473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_nameValueProto8485  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_nameValueProto8485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_nameValueProto8485	= { FOLLOW_propertyName_in_nameValueProto8485_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUE_in_nameValueProto8528  */
static	ANTLR3_BITWORD FOLLOW_VALUE_in_nameValueProto8528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUE_in_nameValueProto8528	= { FOLLOW_VALUE_in_nameValueProto8528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_nameValueProto8557  */
static	ANTLR3_BITWORD FOLLOW_expression_in_nameValueProto8557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_nameValueProto8557	= { FOLLOW_expression_in_nameValueProto8557_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PROTO_in_nameValueProto8606  */
static	ANTLR3_BITWORD FOLLOW_PROTO_in_nameValueProto8606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PROTO_in_nameValueProto8606	= { FOLLOW_PROTO_in_nameValueProto8606_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_nameValueProto8634  */
static	ANTLR3_BITWORD FOLLOW_expression_in_nameValueProto8634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_nameValueProto8634	= { FOLLOW_expression_in_nameValueProto8634_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8675  */
static	ANTLR3_BITWORD FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8675	= { FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_VALUE_in_propertyNameAndValue8705  */
static	ANTLR3_BITWORD FOLLOW_NAME_VALUE_in_propertyNameAndValue8705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_VALUE_in_propertyNameAndValue8705	= { FOLLOW_NAME_VALUE_in_propertyNameAndValue8705_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue8718  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue8718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue8718	= { FOLLOW_propertyName_in_propertyNameAndValue8718_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_propertyNameAndValue8737  */
static	ANTLR3_BITWORD FOLLOW_expression_in_propertyNameAndValue8737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_propertyNameAndValue8737	= { FOLLOW_expression_in_propertyNameAndValue8737_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyName8749  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyName8749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyName8749	= { FOLLOW_Identifier_in_propertyName8749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_propertyName8756  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_propertyName8756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_propertyName8756	= { FOLLOW_StringLiteral_in_propertyName8756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_propertyName8773  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_propertyName8773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_propertyName8773	= { FOLLOW_NumericLiteral_in_propertyName8773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_215_in_literal8787  */
static	ANTLR3_BITWORD FOLLOW_215_in_literal8787_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_215_in_literal8787	= { FOLLOW_215_in_literal8787_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_216_in_literal8794  */
static	ANTLR3_BITWORD FOLLOW_216_in_literal8794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_216_in_literal8794	= { FOLLOW_216_in_literal8794_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_217_in_literal8801  */
static	ANTLR3_BITWORD FOLLOW_217_in_literal8801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_217_in_literal8801	= { FOLLOW_217_in_literal8801_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_literal8807  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_literal8807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_literal8807	= { FOLLOW_StringLiteral_in_literal8807_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_literal8824  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_literal8824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_literal8824	= { FOLLOW_NumericLiteral_in_literal8824_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred30_EmersonTree1612  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred30_EmersonTree1612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred30_EmersonTree1612	= { FOLLOW_statement_in_synpred30_EmersonTree1612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_synpred47_EmersonTree2920  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_synpred47_EmersonTree2920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_synpred47_EmersonTree2920	= { FOLLOW_CASE_in_synpred47_EmersonTree2920_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred47_EmersonTree2940  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred47_EmersonTree2940_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred47_EmersonTree2940	= { FOLLOW_expression_in_synpred47_EmersonTree2940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_synpred47_EmersonTree2960  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_synpred47_EmersonTree2960_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_synpred47_EmersonTree2960	= { FOLLOW_statementList_in_synpred47_EmersonTree2960_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_synpred47_EmersonTree2971  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_synpred47_EmersonTree2971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_synpred47_EmersonTree2971	= { FOLLOW_caseClause_in_synpred47_EmersonTree2971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred60_EmersonTree4317  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred60_EmersonTree4317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred60_EmersonTree4317	= { FOLLOW_memberExpression_in_synpred60_EmersonTree4317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_synpred61_EmersonTree4340  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_synpred61_EmersonTree4340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_synpred61_EmersonTree4340	= { FOLLOW_MESSAGE_RECV_in_synpred61_EmersonTree4340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred61_EmersonTree4356  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred61_EmersonTree4356_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred61_EmersonTree4356	= { FOLLOW_memAndCallExpression_in_synpred61_EmersonTree4356_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred61_EmersonTree4373  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred61_EmersonTree4373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred61_EmersonTree4373	= { FOLLOW_leftHandSideExpression_in_synpred61_EmersonTree4373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_synpred62_EmersonTree4401  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_synpred62_EmersonTree4401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_synpred62_EmersonTree4401	= { FOLLOW_MESSAGE_RECV_in_synpred62_EmersonTree4401_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4413  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4413_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4413	= { FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4413_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred62_EmersonTree4426  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred62_EmersonTree4426_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0007018010006000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003A00000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred62_EmersonTree4426	= { FOLLOW_leftHandSideExpression_in_synpred62_EmersonTree4426_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4438  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4438	= { FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred88_EmersonTree5457  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred88_EmersonTree5457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred88_EmersonTree5457	= { FOLLOW_callExpression_in_synpred88_EmersonTree5457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred89_EmersonTree5474  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred89_EmersonTree5474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred89_EmersonTree5474	= { FOLLOW_memberExpression_in_synpred89_EmersonTree5474_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_synpred92_EmersonTree5525  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_synpred92_EmersonTree5525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_synpred92_EmersonTree5525	= { FOLLOW_DOT_in_synpred92_EmersonTree5525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred92_EmersonTree5527  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred92_EmersonTree5527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred92_EmersonTree5527	= { FOLLOW_memberExpression_in_synpred92_EmersonTree5527_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred92_EmersonTree5531  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred92_EmersonTree5531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred92_EmersonTree5531	= { FOLLOW_propertyReferenceSuffix1_in_synpred92_EmersonTree5531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_synpred96_EmersonTree5597  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_synpred96_EmersonTree5597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_synpred96_EmersonTree5597	= { FOLLOW_CALL_in_synpred96_EmersonTree5597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred96_EmersonTree5599  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred96_EmersonTree5599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred96_EmersonTree5599	= { FOLLOW_memberExpression_in_synpred96_EmersonTree5599_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred96_EmersonTree5601  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred96_EmersonTree5601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred96_EmersonTree5601	= { FOLLOW_arguments_in_synpred96_EmersonTree5601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred101_EmersonTree5678  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred101_EmersonTree5678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred101_EmersonTree5678	= { FOLLOW_ARGLIST_in_synpred101_EmersonTree5678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred102_EmersonTree5688  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred102_EmersonTree5688_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred102_EmersonTree5688	= { FOLLOW_ARGLIST_in_synpred102_EmersonTree5688_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred102_EmersonTree5708  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred102_EmersonTree5708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred102_EmersonTree5708	= { FOLLOW_expression_in_synpred102_EmersonTree5708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_synpred162_EmersonTree7254  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_synpred162_EmersonTree7254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_synpred162_EmersonTree7254	= { FOLLOW_postfixExpression_in_synpred162_EmersonTree7254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_synpred182_EmersonTree7844  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_synpred182_EmersonTree7844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_synpred182_EmersonTree7844	= { FOLLOW_shiftExpression_in_synpred182_EmersonTree7844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_synpred183_EmersonTree7856  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_synpred183_EmersonTree7856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_synpred183_EmersonTree7856	= { FOLLOW_NumericLiteral_in_synpred183_EmersonTree7856_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred184_EmersonTree7870  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred184_EmersonTree7870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred184_EmersonTree7870	= { FOLLOW_callExpression_in_synpred184_EmersonTree7870_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred185_EmersonTree8010  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred185_EmersonTree8010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred185_EmersonTree8010	= { FOLLOW_ARRAY_LITERAL_in_synpred185_EmersonTree8010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred186_EmersonTree8020  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred186_EmersonTree8020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred186_EmersonTree8020	= { FOLLOW_ARRAY_LITERAL_in_synpred186_EmersonTree8020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred186_EmersonTree8039  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred186_EmersonTree8039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred186_EmersonTree8039	= { FOLLOW_expression_in_synpred186_EmersonTree8039_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_synpred188_EmersonTree8142  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_synpred188_EmersonTree8142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_synpred188_EmersonTree8142	= { FOLLOW_OBJ_LITERAL_in_synpred188_EmersonTree8142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_synpred189_EmersonTree8152  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_synpred189_EmersonTree8152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_synpred189_EmersonTree8152	= { FOLLOW_OBJ_LITERAL_in_synpred189_EmersonTree8152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred189_EmersonTree8189  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred189_EmersonTree8189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred189_EmersonTree8189	= { FOLLOW_propertyNameAndValue_in_synpred189_EmersonTree8189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_synpred191_EmersonTree8305  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_synpred191_EmersonTree8305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_synpred191_EmersonTree8305	= { FOLLOW_PATTERN_LITERAL_in_synpred191_EmersonTree8305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_synpred192_EmersonTree8315  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_synpred192_EmersonTree8315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_synpred192_EmersonTree8315	= { FOLLOW_PATTERN_LITERAL_in_synpred192_EmersonTree8315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_synpred192_EmersonTree8324  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_synpred192_EmersonTree8324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_synpred192_EmersonTree8324	= { FOLLOW_nameValueProto_in_synpred192_EmersonTree8324_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    283:13: ( statement )?
 */
static const ANTLR3_INT32 dfa15_eot[25] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa15_eof[25] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa15_min[25] =
    {
	3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 
	-1
    };
static const ANTLR3_INT32 dfa15_max[25] =
    {
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	-1, -1
    };
static const ANTLR3_INT32 dfa15_accept[25] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa15_special[25] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
	20, 21, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa15_T_empty	    NULL

static const ANTLR3_INT32 dfa15_T0[] =
    {
	23, -1, -1, -1, -1, -1, 5, 9, 6, -1, -1, 10, 11, 12, -1, -1, -1, 13, 15, 
	14, 16, 17, -1, 21, -1, -1, -1, -1, 1, -1, 22, 20, -1, -1, -1, 18, -1, 
	-1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	7, 8, -1, -1, -1, -1, 3, 4, 2
    };static const ANTLR3_INT32 dfa15_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa15_transitions[] =
{
    dfa15_T0, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, 
    dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, 
    dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, 
    dfa15_T1, dfa15_T1, dfa15_T_empty, dfa15_T_empty	
};

static ANTLR3_INT32 dfa15_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA15_1;

    	    ANTLR3_MARKER index15_1;


    		LA15_1 = LA(1);

    	 
    	    index15_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA15_2;

    	    ANTLR3_MARKER index15_2;


    		LA15_2 = LA(1);

    	 
    	    index15_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA15_3;

    	    ANTLR3_MARKER index15_3;


    		LA15_3 = LA(1);

    	 
    	    index15_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA15_4;

    	    ANTLR3_MARKER index15_4;


    		LA15_4 = LA(1);

    	 
    	    index15_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA15_5;

    	    ANTLR3_MARKER index15_5;


    		LA15_5 = LA(1);

    	 
    	    index15_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA15_6;

    	    ANTLR3_MARKER index15_6;


    		LA15_6 = LA(1);

    	 
    	    index15_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA15_7;

    	    ANTLR3_MARKER index15_7;


    		LA15_7 = LA(1);

    	 
    	    index15_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA15_8;

    	    ANTLR3_MARKER index15_8;


    		LA15_8 = LA(1);

    	 
    	    index15_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA15_9;

    	    ANTLR3_MARKER index15_9;


    		LA15_9 = LA(1);

    	 
    	    index15_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA15_10;

    	    ANTLR3_MARKER index15_10;


    		LA15_10 = LA(1);

    	 
    	    index15_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA15_11;

    	    ANTLR3_MARKER index15_11;


    		LA15_11 = LA(1);

    	 
    	    index15_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA15_12;

    	    ANTLR3_MARKER index15_12;


    		LA15_12 = LA(1);

    	 
    	    index15_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA15_13;

    	    ANTLR3_MARKER index15_13;


    		LA15_13 = LA(1);

    	 
    	    index15_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA15_14;

    	    ANTLR3_MARKER index15_14;


    		LA15_14 = LA(1);

    	 
    	    index15_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA15_15;

    	    ANTLR3_MARKER index15_15;


    		LA15_15 = LA(1);

    	 
    	    index15_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA15_16;

    	    ANTLR3_MARKER index15_16;


    		LA15_16 = LA(1);

    	 
    	    index15_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA15_17;

    	    ANTLR3_MARKER index15_17;


    		LA15_17 = LA(1);

    	 
    	    index15_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA15_18;

    	    ANTLR3_MARKER index15_18;


    		LA15_18 = LA(1);

    	 
    	    index15_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 18:
        
    	{
    	    ANTLR3_UINT32 LA15_19;

    	    ANTLR3_MARKER index15_19;


    		LA15_19 = LA(1);

    	 
    	    index15_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 19:
        
    	{
    	    ANTLR3_UINT32 LA15_20;

    	    ANTLR3_MARKER index15_20;


    		LA15_20 = LA(1);

    	 
    	    index15_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 20:
        
    	{
    	    ANTLR3_UINT32 LA15_21;

    	    ANTLR3_MARKER index15_21;


    		LA15_21 = LA(1);

    	 
    	    index15_21 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_21);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 21:
        
    	{
    	    ANTLR3_UINT32 LA15_22;

    	    ANTLR3_MARKER index15_22;


    		LA15_22 = LA(1);

    	 
    	    index15_22 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index15_22);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"283:13: ( statement )?";
    EXCEPTION->decisionNum  = 15;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 15
 */
static
ANTLR3_CYCLIC_DFA cdfa15
    =	{
	    15,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"283:13: ( statement )?",	
	    (CDFA_SPECIAL_FUNC) dfa15_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa15_eot,	    /* EOT table			    */
	    dfa15_eof,	    /* EOF table			    */
	    dfa15_min,	    /* Minimum tokens for each state    */
	    dfa15_max,	    /* Maximum tokens for each state    */
	    dfa15_accept,	/* Accept table			    */
	    dfa15_special,	/* Special transition states	    */
	    dfa15_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 15
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    806:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static const ANTLR3_INT32 dfa43_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa43_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa43_min[19] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa43_max[19] =
    {
	217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 
	-1
    };
static const ANTLR3_INT32 dfa43_accept[19] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa43_special[19] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa43_T_empty	    NULL

static const ANTLR3_INT32 dfa43_T0[] =
    {
	18, 16, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa43_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa43_transitions[] =
{
    dfa43_T0, dfa43_T_empty, dfa43_T_empty, dfa43_T_empty, dfa43_T_empty, 
    dfa43_T_empty, dfa43_T_empty, dfa43_T_empty, dfa43_T_empty, dfa43_T_empty, 
    dfa43_T_empty, dfa43_T_empty, dfa43_T_empty, dfa43_T_empty, dfa43_T_empty, 
    dfa43_T1, dfa43_T1, dfa43_T_empty, dfa43_T_empty	
};

static ANTLR3_INT32 dfa43_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA43_15;

    	    ANTLR3_MARKER index43_15;


    		LA43_15 = LA(1);

    	 
    	    index43_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred60_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index43_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA43_16;

    	    ANTLR3_MARKER index43_16;


    		LA43_16 = LA(1);

    	 
    	    index43_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred60_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index43_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"806:1: memAndCallExpression : ( memberExpression | callExpression );";
    EXCEPTION->decisionNum  = 43;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 43
 */
static
ANTLR3_CYCLIC_DFA cdfa43
    =	{
	    43,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"806:1: memAndCallExpression : ( memberExpression | callExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa43_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa43_eot,	    /* EOT table			    */
	    dfa43_eof,	    /* EOF table			    */
	    dfa43_min,	    /* Minimum tokens for each state    */
	    dfa43_max,	    /* Maximum tokens for each state    */
	    dfa43_accept,	/* Accept table			    */
	    dfa43_special,	/* Special transition states	    */
	    dfa43_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 43
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    974:1: leftHandSideExpression : ( callExpression | newExpression );
 */
static const ANTLR3_INT32 dfa50_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa50_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa50_min[19] =
    {
	5, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa50_max[19] =
    {
	217, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa50_accept[19] =
    {
	-1, 1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa50_special[19] =
    {	
	-1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa50_T_empty	    NULL

static const ANTLR3_INT32 dfa50_T0[] =
    {
	1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 4, -1, -1, -1, -1, 4, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4, 4, -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, -1, 4, 4, 4
    };static const ANTLR3_INT32 dfa50_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa50_transitions[] =
{
    dfa50_T0, dfa50_T_empty, dfa50_T1, dfa50_T1, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T_empty, dfa50_T_empty, dfa50_T_empty	
};

static ANTLR3_INT32 dfa50_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA50_2;

    	    ANTLR3_MARKER index50_2;


    		LA50_2 = LA(1);

    	 
    	    index50_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred88_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index50_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA50_3;

    	    ANTLR3_MARKER index50_3;


    		LA50_3 = LA(1);

    	 
    	    index50_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred88_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index50_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"974:1: leftHandSideExpression : ( callExpression | newExpression );";
    EXCEPTION->decisionNum  = 50;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 50
 */
static
ANTLR3_CYCLIC_DFA cdfa50
    =	{
	    50,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"974:1: leftHandSideExpression : ( callExpression | newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa50_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa50_eot,	    /* EOT table			    */
	    dfa50_eof,	    /* EOF table			    */
	    dfa50_min,	    /* Minimum tokens for each state    */
	    dfa50_max,	    /* Maximum tokens for each state    */
	    dfa50_accept,	/* Accept table			    */
	    dfa50_special,	/* Special transition states	    */
	    dfa50_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 50
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    979:1: newExpression : ( memberExpression | ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa51_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa51_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa51_min[19] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa51_max[19] =
    {
	217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	-1
    };
static const ANTLR3_INT32 dfa51_accept[19] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa51_special[19] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa51_T_empty	    NULL

static const ANTLR3_INT32 dfa51_T0[] =
    {
	1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	17, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa51_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa51_transitions[] =
{
    dfa51_T0, dfa51_T_empty, dfa51_T_empty, dfa51_T_empty, dfa51_T_empty, 
    dfa51_T_empty, dfa51_T_empty, dfa51_T_empty, dfa51_T_empty, dfa51_T_empty, 
    dfa51_T_empty, dfa51_T_empty, dfa51_T_empty, dfa51_T_empty, dfa51_T_empty, 
    dfa51_T_empty, dfa51_T_empty, dfa51_T1, dfa51_T_empty	
};

static ANTLR3_INT32 dfa51_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA51_17;

    	    ANTLR3_MARKER index51_17;


    		LA51_17 = LA(1);

    	 
    	    index51_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred89_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index51_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"979:1: newExpression : ( memberExpression | ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 51;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 51
 */
static
ANTLR3_CYCLIC_DFA cdfa51
    =	{
	    51,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"979:1: newExpression : ( memberExpression | ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa51_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa51_eot,	    /* EOT table			    */
	    dfa51_eof,	    /* EOF table			    */
	    dfa51_min,	    /* Minimum tokens for each state    */
	    dfa51_max,	    /* Maximum tokens for each state    */
	    dfa51_accept,	/* Accept table			    */
	    dfa51_special,	/* Special transition states	    */
	    dfa51_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 51
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    993:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static const ANTLR3_INT32 dfa52_eot[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa52_eof[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa52_min[20] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa52_max[20] =
    {
	217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa52_accept[20] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 4, 5, 3, 
	6
    };
static const ANTLR3_INT32 dfa52_special[20] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa52_T_empty	    NULL

static const ANTLR3_INT32 dfa52_T0[] =
    {
	16, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 17, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa52_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa52_transitions[] =
{
    dfa52_T0, dfa52_T_empty, dfa52_T_empty, dfa52_T_empty, dfa52_T_empty, 
    dfa52_T_empty, dfa52_T_empty, dfa52_T_empty, dfa52_T_empty, dfa52_T_empty, 
    dfa52_T_empty, dfa52_T_empty, dfa52_T_empty, dfa52_T_empty, dfa52_T_empty, 
    dfa52_T1, dfa52_T_empty, dfa52_T_empty, dfa52_T_empty, dfa52_T_empty	
};

static ANTLR3_INT32 dfa52_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA52_15;

    	    ANTLR3_MARKER index52_15;


    		LA52_15 = LA(1);

    	 
    	    index52_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred92_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index52_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"993:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );";
    EXCEPTION->decisionNum  = 52;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 52
 */
static
ANTLR3_CYCLIC_DFA cdfa52
    =	{
	    52,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"993:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa52_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa52_eot,	    /* EOT table			    */
	    dfa52_eof,	    /* EOF table			    */
	    dfa52_min,	    /* Minimum tokens for each state    */
	    dfa52_max,	    /* Maximum tokens for each state    */
	    dfa52_accept,	/* Accept table			    */
	    dfa52_special,	/* Special transition states	    */
	    dfa52_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 52
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1334:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );
 */
static const ANTLR3_INT32 dfa81_eot[28] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa81_eof[28] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa81_min[28] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, 0, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa81_max[28] =
    {
	217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, 0, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa81_accept[28] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa81_special[28] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, 1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa81_T_empty	    NULL

static const ANTLR3_INT32 dfa81_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 
	21, 21, 21, 20, 19, 21, 21, 21, 21, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa81_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa81_transitions[] =
{
    dfa81_T0, dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, 
    dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, 
    dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, 
    dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, dfa81_T1, 
    dfa81_T1, dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, dfa81_T_empty, 
    dfa81_T_empty, dfa81_T_empty, dfa81_T_empty	
};

static ANTLR3_INT32 dfa81_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA81_19;

    	    ANTLR3_MARKER index81_19;


    		LA81_19 = LA(1);

    	 
    	    index81_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred162_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index81_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA81_20;

    	    ANTLR3_MARKER index81_20;


    		LA81_20 = LA(1);

    	 
    	    index81_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred162_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index81_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1334:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );";
    EXCEPTION->decisionNum  = 81;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 81
 */
static
ANTLR3_CYCLIC_DFA cdfa81
    =	{
	    81,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1334:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa81_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa81_eot,	    /* EOT table			    */
	    dfa81_eof,	    /* EOF table			    */
	    dfa81_min,	    /* Minimum tokens for each state    */
	    dfa81_max,	    /* Maximum tokens for each state    */
	    dfa81_accept,	/* Accept table			    */
	    dfa81_special,	/* Special transition states	    */
	    dfa81_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 81
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1404:1: vectorLiteralField : ( ternaryExpression | shiftExpression | NumericLiteral | callExpression | memberExpression );
 */
static const ANTLR3_INT32 dfa84_eot[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_eof[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_min[40] =
    {
	5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_max[40] =
    {
	217, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_accept[40] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 4, 5, 3
    };
static const ANTLR3_INT32 dfa84_special[40] =
    {	
	-1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa84_T_empty	    NULL

static const ANTLR3_INT32 dfa84_T0[] =
    {
	2, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 19, -1, -1, -1, -1, 17, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 13, 
	14, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, 18, -1, -1, -1, 
	-1, 1, -1, -1, -1, -1, -1, 16, 15, -1, -1, -1, -1, -1, -1, -1, 6, 12, 11, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 8, 9, 10
    };static const ANTLR3_INT32 dfa84_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa84_transitions[] =
{
    dfa84_T0, dfa84_T_empty, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, 
    dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, 
    dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T_empty, 
    dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, 
    dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, 
    dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, 
    dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty	
};

static ANTLR3_INT32 dfa84_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA84_2;

    	    ANTLR3_MARKER index84_2;


    		LA84_2 = LA(1);

    	 
    	    index84_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (synpred184_EmersonTree(ctx)) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index84_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA84_3;

    	    ANTLR3_MARKER index84_3;


    		LA84_3 = LA(1);

    	 
    	    index84_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (synpred184_EmersonTree(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA84_4;

    	    ANTLR3_MARKER index84_4;


    		LA84_4 = LA(1);

    	 
    	    index84_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (synpred184_EmersonTree(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA84_5;

    	    ANTLR3_MARKER index84_5;


    		LA84_5 = LA(1);

    	 
    	    index84_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA84_6;

    	    ANTLR3_MARKER index84_6;


    		LA84_6 = LA(1);

    	 
    	    index84_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA84_7;

    	    ANTLR3_MARKER index84_7;


    		LA84_7 = LA(1);

    	 
    	    index84_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA84_8;

    	    ANTLR3_MARKER index84_8;


    		LA84_8 = LA(1);

    	 
    	    index84_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA84_9;

    	    ANTLR3_MARKER index84_9;


    		LA84_9 = LA(1);

    	 
    	    index84_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA84_10;

    	    ANTLR3_MARKER index84_10;


    		LA84_10 = LA(1);

    	 
    	    index84_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA84_11;

    	    ANTLR3_MARKER index84_11;


    		LA84_11 = LA(1);

    	 
    	    index84_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA84_12;

    	    ANTLR3_MARKER index84_12;


    		LA84_12 = LA(1);

    	 
    	    index84_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (synpred183_EmersonTree(ctx)) )
    	    {
    	        s = 39;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA84_13;

    	    ANTLR3_MARKER index84_13;


    		LA84_13 = LA(1);

    	 
    	    index84_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA84_14;

    	    ANTLR3_MARKER index84_14;


    		LA84_14 = LA(1);

    	 
    	    index84_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA84_15;

    	    ANTLR3_MARKER index84_15;


    		LA84_15 = LA(1);

    	 
    	    index84_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA84_16;

    	    ANTLR3_MARKER index84_16;


    		LA84_16 = LA(1);

    	 
    	    index84_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA84_17;

    	    ANTLR3_MARKER index84_17;


    		LA84_17 = LA(1);

    	 
    	    index84_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA84_18;

    	    ANTLR3_MARKER index84_18;


    		LA84_18 = LA(1);

    	 
    	    index84_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA84_19;

    	    ANTLR3_MARKER index84_19;


    		LA84_19 = LA(1);

    	 
    	    index84_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index84_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1404:1: vectorLiteralField : ( ternaryExpression | shiftExpression | NumericLiteral | callExpression | memberExpression );";
    EXCEPTION->decisionNum  = 84;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 84
 */
static
ANTLR3_CYCLIC_DFA cdfa84
    =	{
	    84,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1404:1: vectorLiteralField : ( ternaryExpression | shiftExpression | NumericLiteral | callExpression | memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa84_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa84_eot,	    /* EOT table			    */
	    dfa84_eof,	    /* EOF table			    */
	    dfa84_min,	    /* Minimum tokens for each state    */
	    dfa84_max,	    /* Maximum tokens for each state    */
	    dfa84_accept,	/* Accept table			    */
	    dfa84_special,	/* Special transition states	    */
	    dfa84_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 84
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//EmersonTree.g:50:1: program returns [pANTLR3_STRING s] : ^( PROG ( sourceElements )? ) ;
 */
static pANTLR3_STRING
program(pEmersonTree ctx)
{   
    pANTLR3_STRING s = NULL;

    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:51:2: ( ^( PROG ( sourceElements )? ) )
        // .//EmersonTree.g:51:3: ^( PROG ( sourceElements )? )
        {
             MATCHT(PROG, &FOLLOW_PROG_in_program76); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return s;
            }

            if ( BACKTRACKING==0 ) 
            {

                                pANTLR3_STRING_FACTORY factory = antlr3StringFactoryNew();
                                program_string = factory->newRaw(factory);
                            
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return s;
                }

                // .//EmersonTree.g:56:13: ( sourceElements )?
                {
                    int alt1=2;
                    {
                        int LA1_0 = LA(1);
                        if ( (((LA1_0 >= SLIST) && (LA1_0 <= VARLIST)) || ((LA1_0 >= DO) && (LA1_0 <= FOR)) || ((LA1_0 >= FORIN) && (LA1_0 <= WITH)) || LA1_0 == WHEN || LA1_0 == NOOP || ((LA1_0 >= TRY) && (LA1_0 <= THROW)) || LA1_0 == SWITCH || LA1_0 == LABEL || LA1_0 == FUNC_DECL || ((LA1_0 >= EXPR_LIST) && (LA1_0 <= COND_EXPR)) || ((LA1_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA1_0 <= MESSAGE_RECV))) ) 
                        {
                            alt1=1;
                        }
                    }
                    switch (alt1) 
                    {
                	case 1:
                	    // .//EmersonTree.g:57:15: sourceElements
                	    {
                	        FOLLOWPUSH(FOLLOW_sourceElements_in_program121);
                	        sourceElements(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleprogramEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return s;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return s;
                }
            }
            if ( BACKTRACKING==0 ) 
            {

                            s = program_string;
                         
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return s;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//EmersonTree.g:67:1: sourceElements : ( sourceElement )+ ;
 */
static void
sourceElements(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:68:5: ( ( sourceElement )+ )
        // .//EmersonTree.g:68:6: ( sourceElement )+
        {
            // .//EmersonTree.g:68:6: ( sourceElement )+
            {
                int cnt2=0;

                for (;;)
                {
                    int alt2=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA2_0 = LA(1);
            	    if ( (((LA2_0 >= SLIST) && (LA2_0 <= VARLIST)) || ((LA2_0 >= DO) && (LA2_0 <= FOR)) || ((LA2_0 >= FORIN) && (LA2_0 <= WITH)) || LA2_0 == WHEN || LA2_0 == NOOP || ((LA2_0 >= TRY) && (LA2_0 <= THROW)) || LA2_0 == SWITCH || LA2_0 == LABEL || LA2_0 == FUNC_DECL || ((LA2_0 >= EXPR_LIST) && (LA2_0 <= COND_EXPR)) || ((LA2_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA2_0 <= MESSAGE_RECV))) ) 
            	    {
            	        alt2=1;
            	    }

            	}
            	switch (alt2) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:68:7: sourceElement
            	        {
            	            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements182);
            	            sourceElement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulesourceElementsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }
            	            if ( BACKTRACKING==0 ) 
            	            {
            	                APP("\n"); 
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt2 >= 1 )
            		{
            		    goto loop2;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulesourceElementsEx;
            	}
            	cnt2++;
                }
                loop2: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//EmersonTree.g:71:1: sourceElement : ( functionDeclaration | statement );
 */
static void
sourceElement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:72:5: ( functionDeclaration | statement )
            
            ANTLR3_UINT32 alt3;

            alt3=2;


            {
                int LA3_0 = LA(1);
                if ( (LA3_0 == FUNC_DECL) ) 
                {
                    alt3=1;
                }
                else if ( (((LA3_0 >= SLIST) && (LA3_0 <= VARLIST)) || ((LA3_0 >= DO) && (LA3_0 <= FOR)) || ((LA3_0 >= FORIN) && (LA3_0 <= WITH)) || LA3_0 == WHEN || LA3_0 == NOOP || ((LA3_0 >= TRY) && (LA3_0 <= THROW)) || LA3_0 == SWITCH || LA3_0 == LABEL || ((LA3_0 >= EXPR_LIST) && (LA3_0 <= COND_EXPR)) || ((LA3_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA3_0 <= MESSAGE_RECV))) ) 
                {
                    alt3=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 3;
                    EXCEPTION->state        = 0;


                    goto rulesourceElementEx;
                }
            }
            switch (alt3) 
            {
        	case 1:
        	    // .//EmersonTree.g:72:7: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement205);
        	        functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:73:7: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement213);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(";"); 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//EmersonTree.g:77:1: functionDeclaration : ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static void
functionDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier1;

    /* Initialize rule variables
     */


    Identifier1       = NULL;

    {
        // .//EmersonTree.g:78:2: ( ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:78:4: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
        {
             MATCHT(FUNC_DECL, &FOLLOW_FUNC_DECL_in_functionDeclaration232); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("function ");
                              
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier1 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration264); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier1->getText(Identifier1))->chars);
                                APP("( ");
                              
            }

            // .//EmersonTree.g:87:15: ( formalParameterList )?
            {
                int alt4=2;
                {
                    int LA4_0 = LA(1);
                    if ( (LA4_0 == FUNC_PARAMS) ) 
                    {
                        alt4=1;
                    }
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//EmersonTree.g:87:16: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration298);
            	        formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" )");
                                APP("\n{\n");
                              
            }
            if ( BACKTRACKING==0 ) 
            {

                                 CHECK_RESOURCES();
                              
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration363);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}");
                              
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//EmersonTree.g:103:1: functionExpression : ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static void
functionExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier2;

    /* Initialize rule variables
     */


    Identifier2       = NULL;

    {
        // .//EmersonTree.g:104:2: ( ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:104:4: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
        {
             MATCHT(FUNC_EXPR, &FOLLOW_FUNC_EXPR_in_functionExpression407); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                               APP("function ");
                             
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:108:14: ( Identifier )?
            {
                int alt5=2;
                {
                    int LA5_0 = LA(1);
                    if ( (LA5_0 == Identifier) ) 
                    {
                        alt5=1;
                    }
                }
                switch (alt5) 
                {
            	case 1:
            	    // .//EmersonTree.g:109:16: Identifier
            	    {
            	        Identifier2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression451); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP((const char*)(Identifier2->getText(Identifier2))->chars);
            	                             
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("( ");
                             
            }

            // .//EmersonTree.g:117:14: ( formalParameterList )?
            {
                int alt6=2;
                {
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == FUNC_PARAMS) ) 
                    {
                        alt6=1;
                    }
                }
                switch (alt6) 
                {
            	case 1:
            	    // .//EmersonTree.g:117:15: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression518);
            	        formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("  )");
                               APP("\n{\n");
                             
            }
            if ( BACKTRACKING==0 ) 
            {

                                 CHECK_RESOURCES();
                             
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression579);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("\n}");
                             
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//EmersonTree.g:133:1: formalParameterList : ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) ;
 */
static void
formalParameterList(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    id1;
    pANTLR3_BASE_TREE    id2;

    /* Initialize rule variables
     */


    id1       = NULL;
    id2       = NULL;

    {
        // .//EmersonTree.g:134:3: ( ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) )
        // .//EmersonTree.g:134:5: ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* )
        {
             MATCHT(FUNC_PARAMS, &FOLLOW_FUNC_PARAMS_in_formalParameterList627); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:135:17: (id1= Identifier )
            // .//EmersonTree.g:135:18: id1= Identifier
            {
                id1 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList648); 
                if  (HASEXCEPTION())
                {
                    goto ruleformalParameterListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {
                    APP((const char*)(id1->getText(id1))->chars); 
                }

            }


            // .//EmersonTree.g:137:9: (id2= Identifier )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == Identifier) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//EmersonTree.g:138:18: id2= Identifier
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP(", ");
            	                             
            	        }
            	        id2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList718); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	            APP((const char*)(id2->getText(id2))->chars);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//EmersonTree.g:148:1: functionBody : ( sourceElements | EMPTY_FUNC_BODY );
 */
static void
functionBody(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:149:2: ( sourceElements | EMPTY_FUNC_BODY )
            
            ANTLR3_UINT32 alt8;

            alt8=2;


            {
                int LA8_0 = LA(1);
                if ( (((LA8_0 >= SLIST) && (LA8_0 <= VARLIST)) || ((LA8_0 >= DO) && (LA8_0 <= FOR)) || ((LA8_0 >= FORIN) && (LA8_0 <= WITH)) || LA8_0 == WHEN || LA8_0 == NOOP || ((LA8_0 >= TRY) && (LA8_0 <= THROW)) || LA8_0 == SWITCH || LA8_0 == LABEL || LA8_0 == FUNC_DECL || ((LA8_0 >= EXPR_LIST) && (LA8_0 <= COND_EXPR)) || ((LA8_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA8_0 <= MESSAGE_RECV))) ) 
                {
                    alt8=1;
                }
                else if ( (LA8_0 == EMPTY_FUNC_BODY) ) 
                {
                    alt8=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 8;
                    EXCEPTION->state        = 0;


                    goto rulefunctionBodyEx;
                }
            }
            switch (alt8) 
            {
        	case 1:
        	    // .//EmersonTree.g:149:4: sourceElements
        	    {
        	        FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody748);
        	        sourceElements(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:150:4: EMPTY_FUNC_BODY
        	    {
        	         MATCHT(EMPTY_FUNC_BODY, &FOLLOW_EMPTY_FUNC_BODY_in_functionBody753); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//EmersonTree.g:154:1: statement : ( noOpStatement | msgRecvStatement | msgSendStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | switchStatement | labelledStatement | throwStatement | whenStatement | tryStatement );
 */
static void
statement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:155:5: ( noOpStatement | msgRecvStatement | msgSendStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | switchStatement | labelledStatement | throwStatement | whenStatement | tryStatement )
            
            ANTLR3_UINT32 alt9;

            alt9=17;

            switch ( LA(1) ) 
            {
            case NOOP:
            	{
            		alt9=1;
            	}
                break;
            case MESSAGE_RECV:
            	{
            		alt9=2;
            	}
                break;
            case MESSAGE_SEND_WITHOUT_SENDER:
            case MESSAGE_SEND_WITH_SENDER:
            	{
            		alt9=3;
            	}
                break;
            case SLIST:
            	{
            		alt9=4;
            	}
                break;
            case VARLIST:
            	{
            		alt9=5;
            	}
                break;
            case EXPR_LIST:
            case COND_EXPR:
            	{
            		alt9=6;
            	}
                break;
            case IF:
            	{
            		alt9=7;
            	}
                break;
            case DO:
            case WHILE:
            case FOR:
            case FORIN:
            	{
            		alt9=8;
            	}
                break;
            case CONTINUE:
            	{
            		alt9=9;
            	}
                break;
            case BREAK:
            	{
            		alt9=10;
            	}
                break;
            case RETURN:
            	{
            		alt9=11;
            	}
                break;
            case WITH:
            	{
            		alt9=12;
            	}
                break;
            case SWITCH:
            	{
            		alt9=13;
            	}
                break;
            case LABEL:
            	{
            		alt9=14;
            	}
                break;
            case THROW:
            	{
            		alt9=15;
            	}
                break;
            case WHEN:
            	{
            		alt9=16;
            	}
                break;
            case TRY:
            	{
            		alt9=17;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // .//EmersonTree.g:155:7: noOpStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_noOpStatement_in_statement769);
        	        noOpStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:156:7: msgRecvStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_statement777);
        	        msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:157:7: msgSendStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_msgSendStatement_in_statement789);
        	        msgSendStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:158:7: statementBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement797);
        	        statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:159:7: variableStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement805);
        	        variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:160:7: expressionStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement813);
        	        expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:161:7: ifStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement821);
        	        ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:162:7: iterationStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement829);
        	        iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // .//EmersonTree.g:163:7: continueStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement837);
        	        continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 10:
        	    // .//EmersonTree.g:164:7: breakStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement845);
        	        breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 11:
        	    // .//EmersonTree.g:165:7: returnStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement853);
        	        returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 12:
        	    // .//EmersonTree.g:166:7: withStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement861);
        	        withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 13:
        	    // .//EmersonTree.g:167:7: switchStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement869);
        	        switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 14:
        	    // .//EmersonTree.g:168:7: labelledStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_labelledStatement_in_statement877);
        	        labelledStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 15:
        	    // .//EmersonTree.g:169:7: throwStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement885);
        	        throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 16:
        	    // .//EmersonTree.g:170:7: whenStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whenStatement_in_statement893);
        	        whenStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 17:
        	    // .//EmersonTree.g:171:7: tryStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement901);
        	        tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start noOpStatement
 * .//EmersonTree.g:174:1: noOpStatement : ^( NOOP ) ;
 */
static void
noOpStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:175:9: ( ^( NOOP ) )
        // .//EmersonTree.g:175:11: ^( NOOP )
        {
             MATCHT(NOOP, &FOLLOW_NOOP_in_noOpStatement926); 
            if  (HASEXCEPTION())
            {
                goto rulenoOpStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                          
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoOpStatementEx; /* Prevent compiler warnings */
    rulenoOpStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end noOpStatement */

/** 
 * $ANTLR start statementBlock
 * .//EmersonTree.g:181:1: statementBlock : statementList ;
 */
static void
statementBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:182:2: ( statementList )
        // .//EmersonTree.g:182:4: statementList
        {
            if ( BACKTRACKING==0 ) 
            {
                APP(" {\n "); 
            }
            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock972);
            statementList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                  
                            APP(" }\n");
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start statementList
 * .//EmersonTree.g:187:1: statementList : ^( SLIST ( statement )* ) ;
 */
static void
statementList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:188:2: ( ^( SLIST ( statement )* ) )
        // .//EmersonTree.g:188:5: ^( SLIST ( statement )* )
        {
             MATCHT(SLIST, &FOLLOW_SLIST_in_statementList1001); 
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:190:13: ( statement )*

                for (;;)
                {
                    int alt10=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA10_0 = LA(1);
                        if ( (((LA10_0 >= SLIST) && (LA10_0 <= VARLIST)) || ((LA10_0 >= DO) && (LA10_0 <= FOR)) || ((LA10_0 >= FORIN) && (LA10_0 <= WITH)) || LA10_0 == WHEN || LA10_0 == NOOP || ((LA10_0 >= TRY) && (LA10_0 <= THROW)) || LA10_0 == SWITCH || LA10_0 == LABEL || ((LA10_0 >= EXPR_LIST) && (LA10_0 <= COND_EXPR)) || ((LA10_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA10_0 <= MESSAGE_RECV))) ) 
                        {
                            alt10=1;
                        }

                    }
                    switch (alt10) 
                    {
                	case 1:
                	    // .//EmersonTree.g:190:14: statement
                	    {
                	        FOLLOWPUSH(FOLLOW_statement_in_statementList1017);
                	        statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulestatementListEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	            			        APP("; \n");					  
                	                            
                	        }

                	    }
                	    break;

                	default:
                	    goto loop10;	/* break out of the loop */
                	    break;
                    }
                }
                loop10: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//EmersonTree.g:197:1: variableStatement : ^( VARLIST variableDeclarationList ) ;
 */
static void
variableStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:198:2: ( ^( VARLIST variableDeclarationList ) )
        // .//EmersonTree.g:198:5: ^( VARLIST variableDeclarationList )
        {
             MATCHT(VARLIST, &FOLLOW_VARLIST_in_variableStatement1083); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("var ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1111);
            variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//EmersonTree.g:206:1: variableDeclarationList : variableDeclaration ( variableDeclaration )* ;
 */
static void
variableDeclarationList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:207:2: ( variableDeclaration ( variableDeclaration )* )
        // .//EmersonTree.g:207:4: variableDeclaration ( variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1131);
            variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:208:9: ( variableDeclaration )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == VAR) ) 
                    {
                        alt11=1;
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//EmersonTree.g:209:13: variableDeclaration
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(", ");
            	                        
            	        }
            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1171);
            	        variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//EmersonTree.g:216:1: variableDeclarationListNoIn : ( variableDeclarationNoIn )+ ;
 */
static void
variableDeclarationListNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:217:2: ( ( variableDeclarationNoIn )+ )
        // .//EmersonTree.g:217:4: ( variableDeclarationNoIn )+
        {
            // .//EmersonTree.g:217:4: ( variableDeclarationNoIn )+
            {
                int cnt12=0;

                for (;;)
                {
                    int alt12=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA12_0 = LA(1);
            	    if ( (LA12_0 == VAR) ) 
            	    {
            	        alt12=1;
            	    }

            	}
            	switch (alt12) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:0:0: variableDeclarationNoIn
            	        {
            	            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1194);
            	            variableDeclarationNoIn(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulevariableDeclarationListNoInEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt12 >= 1 )
            		{
            		    goto loop12;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulevariableDeclarationListNoInEx;
            	}
            	cnt12++;
                }
                loop12: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//EmersonTree.g:220:1: variableDeclaration : ^( VAR Identifier ( initialiser )? ) ;
 */
static void
variableDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier3;

    /* Initialize rule variables
     */


    Identifier3       = NULL;

    {
        // .//EmersonTree.g:221:2: ( ^( VAR Identifier ( initialiser )? ) )
        // .//EmersonTree.g:221:4: ^( VAR Identifier ( initialiser )? )
        {
             MATCHT(VAR, &FOLLOW_VAR_in_variableDeclaration1221); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier3 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1235); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier3->getText(Identifier3))->chars);
                            
            }

            // .//EmersonTree.g:228:13: ( initialiser )?
            {
                int alt13=2;
                {
                    int LA13_0 = LA(1);
                    if ( (((LA13_0 >= EXPR_LIST) && (LA13_0 <= COND_EXPR))) ) 
                    {
                        alt13=1;
                    }
                }
                switch (alt13) 
                {
            	case 1:
            	    // .//EmersonTree.g:229:17: initialiser
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1313);
            	        initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//EmersonTree.g:237:1: variableDeclarationNoIn : ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static void
variableDeclarationNoIn(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier4;

    /* Initialize rule variables
     */


    Identifier4       = NULL;

    {
        // .//EmersonTree.g:238:2: ( ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//EmersonTree.g:239:9: ^( VAR Identifier ( initialiserNoIn )? )
        {
             MATCHT(VAR, &FOLLOW_VAR_in_variableDeclarationNoIn1373); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("var ");
                			
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier4 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1392); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier4->getText(Identifier4))->chars);
                            
            }

            // .//EmersonTree.g:249:13: ( initialiserNoIn )?
            {
                int alt14=2;
                {
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == EXPR_LIST || LA14_0 == COND_EXPR_NOIN) ) 
                    {
                        alt14=1;
                    }
                }
                switch (alt14) 
                {
            	case 1:
            	    // .//EmersonTree.g:250:17: initialiserNoIn
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1470);
            	        initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//EmersonTree.g:259:1: initialiser : expression ;
 */
static void
initialiser(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:260:2: ( expression )
        // .//EmersonTree.g:260:4: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_initialiser1513);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//EmersonTree.g:263:1: initialiserNoIn : expressionNoIn ;
 */
static void
initialiserNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:264:2: ( expressionNoIn )
        // .//EmersonTree.g:264:4: expressionNoIn
        {
            FOLLOWPUSH(FOLLOW_expressionNoIn_in_initialiserNoIn1526);
            expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start expressionStatement
 * .//EmersonTree.g:268:1: expressionStatement : expression ;
 */
static void
expressionStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:269:2: ( expression )
        // .//EmersonTree.g:269:4: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1540);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start ifStatement
 * .//EmersonTree.g:272:1: ifStatement : ^( IF expression ( statement )? ( statement )? ) ;
 */
static void
ifStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:273:2: ( ^( IF expression ( statement )? ( statement )? ) )
        // .//EmersonTree.g:273:4: ^( IF expression ( statement )? ( statement )? )
        {
             MATCHT(IF, &FOLLOW_IF_in_ifStatement1553); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                
                                APP(" if ");
                                APP(" ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1582);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) \n{");
                            
            }

            // .//EmersonTree.g:283:13: ( statement )?
            {
                int alt15=2;
                alt15 = cdfa15.predict(ctx, RECOGNIZER, ISTREAM, &cdfa15);
                if  (HASEXCEPTION())
                {
                    goto ruleifStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                switch (alt15) 
                {
            	case 1:
            	    // .//EmersonTree.g:283:14: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1612);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(" \n");
            	                        
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            // .//EmersonTree.g:291:13: ( statement )?
            {
                int alt16=2;
                {
                    int LA16_0 = LA(1);
                    if ( (((LA16_0 >= SLIST) && (LA16_0 <= VARLIST)) || ((LA16_0 >= DO) && (LA16_0 <= FOR)) || ((LA16_0 >= FORIN) && (LA16_0 <= WITH)) || LA16_0 == WHEN || LA16_0 == NOOP || ((LA16_0 >= TRY) && (LA16_0 <= THROW)) || LA16_0 == SWITCH || LA16_0 == LABEL || ((LA16_0 >= EXPR_LIST) && (LA16_0 <= COND_EXPR)) || ((LA16_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA16_0 <= MESSAGE_RECV))) ) 
                    {
                        alt16=1;
                    }
                }
                switch (alt16) 
                {
            	case 1:
            	    // .//EmersonTree.g:292:17: statement
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP("else \n{");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1706);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP("\n}");
            	                            
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//EmersonTree.g:303:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static void
iterationStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:304:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt17;

            alt17=4;

            switch ( LA(1) ) 
            {
            case DO:
            	{
            		alt17=1;
            	}
                break;
            case WHILE:
            	{
            		alt17=2;
            	}
                break;
            case FOR:
            	{
            		alt17=3;
            	}
                break;
            case FORIN:
            	{
            		alt17=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 17;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt17) 
            {
        	case 1:
        	    // .//EmersonTree.g:304:4: doWhileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1761);
        	        doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:305:4: whileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1766);
        	        whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:306:4: forStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1771);
        	        forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:307:4: forInStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1776);
        	        forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//EmersonTree.g:310:1: doWhileStatement : ^( DO statement expression ) ;
 */
static void
doWhileStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:311:2: ( ^( DO statement expression ) )
        // .//EmersonTree.g:311:4: ^( DO statement expression )
        {
             MATCHT(DO, &FOLLOW_DO_in_doWhileStatement1803); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" do ");  						  
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1831);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                                APP("while ( " );      
                            
            }
            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1859);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) ");  
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//EmersonTree.g:331:1: whileStatement : ^( WHILE expression statement ) ;
 */
static void
whileStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:332:2: ( ^( WHILE expression statement ) )
        // .//EmersonTree.g:332:4: ^( WHILE expression statement )
        {
             MATCHT(WHILE, &FOLLOW_WHILE_in_whileStatement1910); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" while ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1938);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) "); 
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }
            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1967);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//EmersonTree.g:351:1: forStatement : ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) ;
 */
static void
forStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:352:2: ( ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) )
        // .//EmersonTree.g:352:4: ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement )
        {
             MATCHT(FOR, &FOLLOW_FOR_in_forStatement2017); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" for ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:357:13: ( ^( FORINIT forStatementInitialiserPart ) )?
            {
                int alt18=2;
                {
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == FORINIT) ) 
                    {
                        alt18=1;
                    }
                }
                switch (alt18) 
                {
            	case 1:
            	    // .//EmersonTree.g:357:14: ^( FORINIT forStatementInitialiserPart )
            	    {
            	         MATCHT(FORINIT, &FOLLOW_FORINIT_in_forStatement2048); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement2050);
            	        forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ; ");
                            
            }

            // .//EmersonTree.g:361:13: ( ^( FORCOND expression ) )?
            {
                int alt19=2;
                {
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == FORCOND) ) 
                    {
                        alt19=1;
                    }
                }
                switch (alt19) 
                {
            	case 1:
            	    // .//EmersonTree.g:361:14: ^( FORCOND expression )
            	    {
            	         MATCHT(FORCOND, &FOLLOW_FORCOND_in_forStatement2083); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2085);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ; ");
                            
            }

            // .//EmersonTree.g:365:13: ( ^( FORITER expression ) )?
            {
                int alt20=2;
                {
                    int LA20_0 = LA(1);
                    if ( (LA20_0 == FORITER) ) 
                    {
                        alt20=1;
                    }
                }
                switch (alt20) 
                {
            	case 1:
            	    // .//EmersonTree.g:365:14: ^( FORITER expression )
            	    {
            	         MATCHT(FORITER, &FOLLOW_FORITER_in_forStatement2119); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2121);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) ");
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }
            FOLLOWPUSH(FOLLOW_statement_in_forStatement2154);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//EmersonTree.g:379:1: forStatementInitialiserPart : ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) );
 */
static void
forStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:380:5: ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt21;

            alt21=2;


            {
                int LA21_0 = LA(1);
                if ( (LA21_0 == EXPR_LIST || LA21_0 == COND_EXPR_NOIN) ) 
                {
                    alt21=1;
                }
                else if ( (LA21_0 == VARLIST) ) 
                {
                    alt21=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 21;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt21) 
            {
        	case 1:
        	    // .//EmersonTree.g:380:7: expressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart2193);
        	        expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:381:7: ^( VARLIST variableDeclarationListNoIn )
        	    {
        	         MATCHT(VARLIST, &FOLLOW_VARLIST_in_forStatementInitialiserPart2202); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2204);
        	        variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//EmersonTree.g:384:1: forInStatement : ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static void
forInStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:385:2: ( ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//EmersonTree.g:385:4: ^( FORIN forInStatementInitialiserPart expression statement )
        {
             MATCHT(FORIN, &FOLLOW_FORIN_in_forInStatement2230); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(" for ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement2252);
            forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" in ");
                        
            }
            FOLLOWPUSH(FOLLOW_expression_in_forInStatement2273);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) ");
                            //resource checking
                            APP("{\n");
                            CHECK_RESOURCES();
                        
            }
            FOLLOWPUSH(FOLLOW_statement_in_forInStatement2294);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP("\n}\n");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//EmersonTree.g:409:1: forInStatementInitialiserPart : ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) );
 */
static void
forInStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:410:2: ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt22;

            alt22=2;


            {
                int LA22_0 = LA(1);
                if ( (((LA22_0 >= CALL) && (LA22_0 <= DOT)) || LA22_0 == NEW || LA22_0 == VECTOR || LA22_0 == DOLLAR_EXPRESSION || ((LA22_0 >= ARRAY_LITERAL) && (LA22_0 <= OBJ_LITERAL)) || LA22_0 == FUNC_EXPR || ((LA22_0 >= PAREN) && (LA22_0 <= PATTERN_LITERAL)) || ((LA22_0 >= Identifier) && (LA22_0 <= StringLiteral)) || LA22_0 == 213 || ((LA22_0 >= 215) && (LA22_0 <= 217))) ) 
                {
                    alt22=1;
                }
                else if ( (LA22_0 == VAR) ) 
                {
                    alt22=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 22;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//EmersonTree.g:410:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2326);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:411:4: ^( VAR variableDeclarationNoIn )
        	    {
        	         MATCHT(VAR, &FOLLOW_VAR_in_forInStatementInitialiserPart2332); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2334);
        	        variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//EmersonTree.g:414:1: continueStatement : ^( CONTINUE ( Identifier )? ) ;
 */
static void
continueStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier5;

    /* Initialize rule variables
     */


    Identifier5       = NULL;

    {
        // .//EmersonTree.g:415:5: ( ^( CONTINUE ( Identifier )? ) )
        // .//EmersonTree.g:415:7: ^( CONTINUE ( Identifier )? )
        {
             MATCHT(CONTINUE, &FOLLOW_CONTINUE_in_continueStatement2359); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("continue ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:420:9: ( Identifier )?
                {
                    int alt23=2;
                    {
                        int LA23_0 = LA(1);
                        if ( (LA23_0 == Identifier) ) 
                        {
                            alt23=1;
                        }
                    }
                    switch (alt23) 
                    {
                	case 1:
                	    // .//EmersonTree.g:421:13: Identifier
                	    {
                	        Identifier5 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2395); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecontinueStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            APP((const char*)(Identifier5->getText(Identifier5))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//EmersonTree.g:429:1: breakStatement : ^( BREAK ( Identifier )? ) ;
 */
static void
breakStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier6;

    /* Initialize rule variables
     */


    Identifier6       = NULL;

    {
        // .//EmersonTree.g:430:5: ( ^( BREAK ( Identifier )? ) )
        // .//EmersonTree.g:430:7: ^( BREAK ( Identifier )? )
        {
             MATCHT(BREAK, &FOLLOW_BREAK_in_breakStatement2452); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("break ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:435:9: ( Identifier )?
                {
                    int alt24=2;
                    {
                        int LA24_0 = LA(1);
                        if ( (LA24_0 == Identifier) ) 
                        {
                            alt24=1;
                        }
                    }
                    switch (alt24) 
                    {
                	case 1:
                	    // .//EmersonTree.g:436:13: Identifier
                	    {
                	        Identifier6 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2486); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulebreakStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            APP((const char*)(Identifier6->getText(Identifier6))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//EmersonTree.g:444:1: returnStatement : ^( RETURN ( expression )? ) ;
 */
static void
returnStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:445:5: ( ^( RETURN ( expression )? ) )
        // .//EmersonTree.g:445:7: ^( RETURN ( expression )? )
        {
             MATCHT(RETURN, &FOLLOW_RETURN_in_returnStatement2545); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("return ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:450:9: ( expression )?
                {
                    int alt25=2;
                    {
                        int LA25_0 = LA(1);
                        if ( (((LA25_0 >= EXPR_LIST) && (LA25_0 <= COND_EXPR))) ) 
                        {
                            alt25=1;
                        }
                    }
                    switch (alt25) 
                    {
                	case 1:
                	    // .//EmersonTree.g:451:13: expression
                	    {
                	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2582);
                	        expression(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulereturnStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//EmersonTree.g:456:1: withStatement : ^( WITH expression statement ) ;
 */
static void
withStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:457:5: ( ^( WITH expression statement ) )
        // .//EmersonTree.g:457:7: ^( WITH expression statement )
        {
             MATCHT(WITH, &FOLLOW_WITH_in_withStatement2618); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {
                APP("with ( ");
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_withStatement2644);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                APP(" )");
            }
            FOLLOWPUSH(FOLLOW_statement_in_withStatement2680);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start labelledStatement
 * .//EmersonTree.g:468:1: labelledStatement : ^( LABEL Identifier statement ) ;
 */
static void
labelledStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier7;

    /* Initialize rule variables
     */


    Identifier7       = NULL;

    {
        // .//EmersonTree.g:469:5: ( ^( LABEL Identifier statement ) )
        // .//EmersonTree.g:469:7: ^( LABEL Identifier statement )
        {
             MATCHT(LABEL, &FOLLOW_LABEL_in_labelledStatement2706); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier7 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_labelledStatement2717); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP((const char*)(Identifier7->getText(Identifier7))->chars);
                            APP(" : \n");
                        
            }
            FOLLOWPUSH(FOLLOW_statement_in_labelledStatement2738);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelabelledStatementEx; /* Prevent compiler warnings */
    rulelabelledStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end labelledStatement */

/** 
 * $ANTLR start switchStatement
 * .//EmersonTree.g:479:1: switchStatement : ^( SWITCH expression caseBlock ) ;
 */
static void
switchStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:480:5: ( ^( SWITCH expression caseBlock ) )
        // .//EmersonTree.g:480:7: ^( SWITCH expression caseBlock )
        {
             MATCHT(SWITCH, &FOLLOW_SWITCH_in_switchStatement2773); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(" switch ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2794);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) \n");
                            APP("{ \n");
                        
            }
            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2815);
            caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP("} \n");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//EmersonTree.g:501:1: caseBlock : ( ^( CASE_BLOCK ( caseClause )? ) | ^( CASE_BLOCK defaultClause ) );
 */
static void
caseBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:502:5: ( ^( CASE_BLOCK ( caseClause )? ) | ^( CASE_BLOCK defaultClause ) )
            
            ANTLR3_UINT32 alt27;

            alt27=2;


            {
                int LA27_0 = LA(1);
                if ( (LA27_0 == CASE_BLOCK) ) 
                {

                    {
                        int LA27_1 = LA(2);
                        if ( (LA27_1 == DOWN) ) 
                        {

                            {
                                int LA27_2 = LA(3);
                                if ( (LA27_2 == DEFAULT) ) 
                                {
                                    alt27=2;
                                }
                                else if ( (LA27_2 == UP || LA27_2 == CASE) ) 
                                {
                                    alt27=1;
                                }
                                else 
                                {
                                    if (BACKTRACKING>0)
                                    {
                                        FAILEDFLAG = ANTLR3_TRUE; 
                                        return ;
                                    }
                                
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                    EXCEPTION->message      = (void *)"";
                                    EXCEPTION->decisionNum  = 27;
                                    EXCEPTION->state        = 2;


                                    goto rulecaseBlockEx;
                                }
                            }
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 27;
                            EXCEPTION->state        = 1;


                            goto rulecaseBlockEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 27;
                    EXCEPTION->state        = 0;


                    goto rulecaseBlockEx;
                }
            }
            switch (alt27) 
            {
        	case 1:
        	    // .//EmersonTree.g:502:7: ^( CASE_BLOCK ( caseClause )? )
        	    {
        	         MATCHT(CASE_BLOCK, &FOLLOW_CASE_BLOCK_in_caseBlock2854); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	            // .//EmersonTree.g:503:9: ( caseClause )?
        	            {
        	                int alt26=2;
        	                {
        	                    int LA26_0 = LA(1);
        	                    if ( (LA26_0 == CASE) ) 
        	                    {
        	                        alt26=1;
        	                    }
        	                }
        	                switch (alt26) 
        	                {
        	            	case 1:
        	            	    // .//EmersonTree.g:0:0: caseClause
        	            	    {
        	            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2864);
        	            	        caseClause(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulecaseBlockEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }

        	            	    }
        	            	    break;

        	                }
        	            }

        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:505:7: ^( CASE_BLOCK defaultClause )
        	    {
        	         MATCHT(CASE_BLOCK, &FOLLOW_CASE_BLOCK_in_caseBlock2880); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2890);
        	        defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//EmersonTree.g:511:1: caseClause : ( ^( CASE expression ( statementList )? ( caseClause )? ) | ^( CASE expression ( statementList )? defaultClause ) );
 */
static void
caseClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:512:5: ( ^( CASE expression ( statementList )? ( caseClause )? ) | ^( CASE expression ( statementList )? defaultClause ) )
            
            ANTLR3_UINT32 alt31;

            alt31=2;


            {
                int LA31_0 = LA(1);
                if ( (LA31_0 == CASE) ) 
                {

                    {
                        int LA31_1 = LA(2);
                        if ( (synpred47_EmersonTree(ctx)) ) 
                        {
                            alt31=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt31=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 31;
                            EXCEPTION->state        = 1;


                            goto rulecaseClauseEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 31;
                    EXCEPTION->state        = 0;


                    goto rulecaseClauseEx;
                }
            }
            switch (alt31) 
            {
        	case 1:
        	    // .//EmersonTree.g:512:7: ^( CASE expression ( statementList )? ( caseClause )? )
        	    {
        	         MATCHT(CASE, &FOLLOW_CASE_in_caseClause2920); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("case ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_caseClause2940);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(":");
        	                    
        	        }

        	        // .//EmersonTree.g:520:9: ( statementList )?
        	        {
        	            int alt28=2;
        	            {
        	                int LA28_0 = LA(1);
        	                if ( (LA28_0 == SLIST) ) 
        	                {
        	                    alt28=1;
        	                }
        	            }
        	            switch (alt28) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2960);
        	        	        statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//EmersonTree.g:521:9: ( caseClause )?
        	        {
        	            int alt29=2;
        	            {
        	                int LA29_0 = LA(1);
        	                if ( (LA29_0 == CASE) ) 
        	                {
        	                    alt29=1;
        	                }
        	            }
        	            switch (alt29) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseClause2971);
        	        	        caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:523:7: ^( CASE expression ( statementList )? defaultClause )
        	    {
        	         MATCHT(CASE, &FOLLOW_CASE_in_caseClause2992); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("case ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_caseClause3012);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(":");
        	                    
        	        }

        	        // .//EmersonTree.g:531:9: ( statementList )?
        	        {
        	            int alt30=2;
        	            {
        	                int LA30_0 = LA(1);
        	                if ( (LA30_0 == SLIST) ) 
        	                {
        	                    alt30=1;
        	                }
        	            }
        	            switch (alt30) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause3032);
        	        	        statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseClause3043);
        	        defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//EmersonTree.g:536:1: defaultClause : ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static void
defaultClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:537:5: ( ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//EmersonTree.g:537:6: ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
        {
             MATCHT(DEFAULT, &FOLLOW_DEFAULT_in_defaultClause3070); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("default: ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:541:9: ( statementList )?
                {
                    int alt32=2;
                    {
                        int LA32_0 = LA(1);
                        if ( (LA32_0 == SLIST) ) 
                        {
                            alt32=1;
                        }
                    }
                    switch (alt32) 
                    {
                	case 1:
                	    // .//EmersonTree.g:0:0: statementList
                	    {
                	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause3090);
                	        statementList(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledefaultClauseEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                // .//EmersonTree.g:542:9: ( caseClauseSeenDefault )?
                {
                    int alt33=2;
                    {
                        int LA33_0 = LA(1);
                        if ( (LA33_0 == CASE) ) 
                        {
                            alt33=1;
                        }
                    }
                    switch (alt33) 
                    {
                	case 1:
                	    // .//EmersonTree.g:0:0: caseClauseSeenDefault
                	    {
                	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_defaultClause3101);
                	        caseClauseSeenDefault(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledefaultClauseEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start caseClauseSeenDefault
 * .//EmersonTree.g:546:1: caseClauseSeenDefault : ^( CASE expression ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static void
caseClauseSeenDefault(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:547:5: ( ^( CASE expression ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//EmersonTree.g:547:7: ^( CASE expression ( statementList )? ( caseClauseSeenDefault )? )
        {
             MATCHT(CASE, &FOLLOW_CASE_in_caseClauseSeenDefault3129); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("case ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_caseClauseSeenDefault3149);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(":");
                        
            }

            // .//EmersonTree.g:555:9: ( statementList )?
            {
                int alt34=2;
                {
                    int LA34_0 = LA(1);
                    if ( (LA34_0 == SLIST) ) 
                    {
                        alt34=1;
                    }
                }
                switch (alt34) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClauseSeenDefault3169);
            	        statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            // .//EmersonTree.g:556:9: ( caseClauseSeenDefault )?
            {
                int alt35=2;
                {
                    int LA35_0 = LA(1);
                    if ( (LA35_0 == CASE) ) 
                    {
                        alt35=1;
                    }
                }
                switch (alt35) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3180);
            	        caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseSeenDefaultEx; /* Prevent compiler warnings */
    rulecaseClauseSeenDefaultEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseClauseSeenDefault */

/** 
 * $ANTLR start throwStatement
 * .//EmersonTree.g:562:1: throwStatement : ^( THROW expression ) ;
 */
static void
throwStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:563:5: ( ^( THROW expression ) )
        // .//EmersonTree.g:563:7: ^( THROW expression )
        {
             MATCHT(THROW, &FOLLOW_THROW_in_throwStatement3215); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("throw ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_throwStatement3235);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start whenStatement
 * .//EmersonTree.g:571:1: whenStatement : ^( WHEN whenPred functionBody ) ;
 */
static void
whenStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:572:5: ( ^( WHEN whenPred functionBody ) )
        // .//EmersonTree.g:572:7: ^( WHEN whenPred functionBody )
        {
             MATCHT(WHEN, &FOLLOW_WHEN_in_whenStatement3262); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(" util.create_when( ");
                            insideWhenPred = true;
                            APP(" [ util.create_quoted('");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_whenPred_in_whenStatement3282);
            whenPred(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            //FIXME: potential problem if last statement in array is
                            //dollar syntax.
                            APP("')],\n");

                            insideWhenPred = false;
                            //open function for callback
                            APP("function(){ ");
                              
                        
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_whenStatement3302);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            //close function for callback
                            APP(" }");
                            //close create_when
                            APP(");");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenStatementEx; /* Prevent compiler warnings */
    rulewhenStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whenStatement */

/** 
 * $ANTLR start whenPred
 * .//EmersonTree.g:600:1: whenPred : ^( WHEN_PRED expression ) ;
 */
static void
whenPred(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:601:5: ( ^( WHEN_PRED expression ) )
        // .//EmersonTree.g:601:7: ^( WHEN_PRED expression )
        {
             MATCHT(WHEN_PRED, &FOLLOW_WHEN_PRED_in_whenPred3341); 
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whenPred3351);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenPredEx; /* Prevent compiler warnings */
    rulewhenPredEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whenPred */

/** 
 * $ANTLR start whenCheckedListFirst
 * .//EmersonTree.g:606:1: whenCheckedListFirst : ^( WHEN_CHECKED_LIST_FIRST expression ( whenCheckedListSubsequent )? ) ;
 */
static void
whenCheckedListFirst(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:607:5: ( ^( WHEN_CHECKED_LIST_FIRST expression ( whenCheckedListSubsequent )? ) )
        // .//EmersonTree.g:607:7: ^( WHEN_CHECKED_LIST_FIRST expression ( whenCheckedListSubsequent )? )
        {
             MATCHT(WHEN_CHECKED_LIST_FIRST, &FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst3375); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListFirst3395);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            //expression will automatically fill in correct values here
                        
            }

            // .//EmersonTree.g:614:9: ( whenCheckedListSubsequent )?
            {
                int alt36=2;
                {
                    int LA36_0 = LA(1);
                    if ( (LA36_0 == WHEN_CHECKED_LIST_SUBSEQUENT) ) 
                    {
                        alt36=1;
                    }
                }
                switch (alt36) 
                {
            	case 1:
            	    // .//EmersonTree.g:614:10: whenCheckedListSubsequent
            	    {
            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst3416);
            	        whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                    
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListFirstEx; /* Prevent compiler warnings */
    rulewhenCheckedListFirstEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whenCheckedListFirst */

/** 
 * $ANTLR start whenCheckedListSubsequent
 * .//EmersonTree.g:621:1: whenCheckedListSubsequent : ^( WHEN_CHECKED_LIST_SUBSEQUENT expression ( whenCheckedListSubsequent )* ) ;
 */
static void
whenCheckedListSubsequent(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:622:5: ( ^( WHEN_CHECKED_LIST_SUBSEQUENT expression ( whenCheckedListSubsequent )* ) )
        // .//EmersonTree.g:622:7: ^( WHEN_CHECKED_LIST_SUBSEQUENT expression ( whenCheckedListSubsequent )* )
        {
             MATCHT(WHEN_CHECKED_LIST_SUBSEQUENT, &FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3457); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(",");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListSubsequent3477);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            //expression will automatically fill in correct values here
                        
            }

            // .//EmersonTree.g:630:9: ( whenCheckedListSubsequent )*

            for (;;)
            {
                int alt37=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA37_0 = LA(1);
                    if ( (LA37_0 == WHEN_CHECKED_LIST_SUBSEQUENT) ) 
                    {
                        alt37=1;
                    }

                }
                switch (alt37) 
                {
            	case 1:
            	    // .//EmersonTree.g:630:10: whenCheckedListSubsequent
            	    {
            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3498);
            	        whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                    
            	        }

            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListSubsequentEx; /* Prevent compiler warnings */
    rulewhenCheckedListSubsequentEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whenCheckedListSubsequent */

/** 
 * $ANTLR start tryStatement
 * .//EmersonTree.g:637:1: tryStatement : ^( TRY statementBlock catchFinallyBlock ) ;
 */
static void
tryStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:638:9: ( ^( TRY statementBlock catchFinallyBlock ) )
        // .//EmersonTree.g:638:11: ^( TRY statementBlock catchFinallyBlock )
        {
             MATCHT(TRY, &FOLLOW_TRY_in_tryStatement3551); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("try\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement3579);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_catchFinallyBlock_in_tryStatement3593);
            catchFinallyBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchFinallyBlock
 * .//EmersonTree.g:647:1: catchFinallyBlock : ( catchBlock ( finallyBlock )? | finallyBlock );
 */
static void
catchFinallyBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:648:9: ( catchBlock ( finallyBlock )? | finallyBlock )
            
            ANTLR3_UINT32 alt39;

            alt39=2;


            {
                int LA39_0 = LA(1);
                if ( (LA39_0 == CATCH) ) 
                {
                    alt39=1;
                }
                else if ( (LA39_0 == FINALLY) ) 
                {
                    alt39=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 39;
                    EXCEPTION->state        = 0;


                    goto rulecatchFinallyBlockEx;
                }
            }
            switch (alt39) 
            {
        	case 1:
        	    // .//EmersonTree.g:648:11: catchBlock ( finallyBlock )?
        	    {
        	        FOLLOWPUSH(FOLLOW_catchBlock_in_catchFinallyBlock3631);
        	        catchBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:648:22: ( finallyBlock )?
        	        {
        	            int alt38=2;
        	            {
        	                int LA38_0 = LA(1);
        	                if ( (LA38_0 == FINALLY) ) 
        	                {
        	                    alt38=1;
        	                }
        	            }
        	            switch (alt38) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: finallyBlock
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3633);
        	        	        finallyBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:649:11: finallyBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3646);
        	        finallyBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchFinallyBlockEx; /* Prevent compiler warnings */
    rulecatchFinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchFinallyBlock */

/** 
 * $ANTLR start catchBlock
 * .//EmersonTree.g:652:1: catchBlock : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchBlock(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier8;

    /* Initialize rule variables
     */


    Identifier8       = NULL;

    {
        // .//EmersonTree.g:653:9: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:653:11: ^( CATCH Identifier statementBlock )
        {
             MATCHT(CATCH, &FOLLOW_CATCH_in_catchBlock3672); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("catch (");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier8 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchBlock3700); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier8->getText(Identifier8))->chars);
                                APP( ")\n");
                                APP(" {  \n");
                                APP(" if ( system.__isResetting() ) \n { \n");
                                APP("throw '__resetting__';\n}\n");
                                CHECK_RESOURCES();
                            
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchBlock3728);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("  } \n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchBlockEx; /* Prevent compiler warnings */
    rulecatchBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchBlock */

/** 
 * $ANTLR start finallyBlock
 * .//EmersonTree.g:673:1: finallyBlock : ^( FINALLY statementBlock ) ;
 */
static void
finallyBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:674:9: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:674:11: ^( FINALLY statementBlock )
        {
             MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyBlock3781); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("finally \n");
                                APP(" {  \n");  
                                APP(" if ( system.__isResetting() ) \n { \n");
                                APP("throw '__resetting__';\n}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyBlock3809);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyBlockEx; /* Prevent compiler warnings */
    rulefinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyBlock */

/** 
 * $ANTLR start msgSendStatement
 * .//EmersonTree.g:688:1: msgSendStatement : ( ^( MESSAGE_SEND_WITHOUT_SENDER leftHandSideExpression leftHandSideExpression ( memberExpression )* ) | ^( MESSAGE_SEND_WITH_SENDER leftHandSideExpression leftHandSideExpression leftHandSideExpression ( memberExpression )* ) );
 */
static void
msgSendStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:689:9: ( ^( MESSAGE_SEND_WITHOUT_SENDER leftHandSideExpression leftHandSideExpression ( memberExpression )* ) | ^( MESSAGE_SEND_WITH_SENDER leftHandSideExpression leftHandSideExpression leftHandSideExpression ( memberExpression )* ) )
            
            ANTLR3_UINT32 alt42;

            alt42=2;


            {
                int LA42_0 = LA(1);
                if ( (LA42_0 == MESSAGE_SEND_WITHOUT_SENDER) ) 
                {
                    alt42=1;
                }
                else if ( (LA42_0 == MESSAGE_SEND_WITH_SENDER) ) 
                {
                    alt42=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 42;
                    EXCEPTION->state        = 0;


                    goto rulemsgSendStatementEx;
                }
            }
            switch (alt42) 
            {
        	case 1:
        	    // .//EmersonTree.g:689:11: ^( MESSAGE_SEND_WITHOUT_SENDER leftHandSideExpression leftHandSideExpression ( memberExpression )* )
        	    {
        	         MATCHT(MESSAGE_SEND_WITHOUT_SENDER, &FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3862); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("system.sendMessage(system.self," );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement3890);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //message to send
        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement3918);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //recipient
        	                        
        	        }

        	        // .//EmersonTree.g:702:13: ( memberExpression )*

        	        for (;;)
        	        {
        	            int alt40=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA40_0 = LA(1);
        	                if ( (((LA40_0 >= ARRAY_INDEX) && (LA40_0 <= DOT)) || LA40_0 == NEW || LA40_0 == VECTOR || LA40_0 == DOLLAR_EXPRESSION || ((LA40_0 >= ARRAY_LITERAL) && (LA40_0 <= OBJ_LITERAL)) || LA40_0 == FUNC_EXPR || ((LA40_0 >= PAREN) && (LA40_0 <= PATTERN_LITERAL)) || ((LA40_0 >= Identifier) && (LA40_0 <= StringLiteral)) || LA40_0 == 213 || ((LA40_0 >= 215) && (LA40_0 <= 217))) ) 
        	                {
        	                    alt40=1;
        	                }

        	            }
        	            switch (alt40) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:703:16: memberExpression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                                //optional what to do in case of failure
        	        	                                APP(",");
        	        	                           
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement3980);
        	        	        memberExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgSendStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop40;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop40: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" )");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:713:11: ^( MESSAGE_SEND_WITH_SENDER leftHandSideExpression leftHandSideExpression leftHandSideExpression ( memberExpression )* )
        	    {
        	         MATCHT(MESSAGE_SEND_WITH_SENDER, &FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement4034); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("system.sendMessage(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement4062);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //sender
        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement4102);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //message to send
        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement4130);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //recipient
        	                        
        	        }

        	        // .//EmersonTree.g:731:13: ( memberExpression )*

        	        for (;;)
        	        {
        	            int alt41=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA41_0 = LA(1);
        	                if ( (((LA41_0 >= ARRAY_INDEX) && (LA41_0 <= DOT)) || LA41_0 == NEW || LA41_0 == VECTOR || LA41_0 == DOLLAR_EXPRESSION || ((LA41_0 >= ARRAY_LITERAL) && (LA41_0 <= OBJ_LITERAL)) || LA41_0 == FUNC_EXPR || ((LA41_0 >= PAREN) && (LA41_0 <= PATTERN_LITERAL)) || ((LA41_0 >= Identifier) && (LA41_0 <= StringLiteral)) || LA41_0 == 213 || ((LA41_0 >= 215) && (LA41_0 <= 217))) ) 
        	                {
        	                    alt41=1;
        	                }

        	            }
        	            switch (alt41) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:732:16: memberExpression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                                //optional what to do in case of failure
        	        	                                APP(",");
        	        	                           
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement4192);
        	        	        memberExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgSendStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop41;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop41: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" )");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSendStatementEx; /* Prevent compiler warnings */
    rulemsgSendStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgSendStatement */

/** 
 * $ANTLR start memAndCallExpression
 * .//EmersonTree.g:806:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static void
memAndCallExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:807:1: ( memberExpression | callExpression )
            
            ANTLR3_UINT32 alt43;

            alt43=2;

            alt43 = cdfa43.predict(ctx, RECOGNIZER, ISTREAM, &cdfa43);
            if  (HASEXCEPTION())
            {
                goto rulememAndCallExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt43) 
            {
        	case 1:
        	    // .//EmersonTree.g:807:3: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memAndCallExpression4317);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:808:3: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_memAndCallExpression4321);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememAndCallExpressionEx; /* Prevent compiler warnings */
    rulememAndCallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memAndCallExpression */

/** 
 * $ANTLR start msgRecvStatement
 * .//EmersonTree.g:811:1: msgRecvStatement : ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression ) | ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression ) | ^( MESSAGE_RECV callExpression leftHandSideExpression ) );
 */
static void
msgRecvStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:812:2: ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression ) | ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression ) | ^( MESSAGE_RECV callExpression leftHandSideExpression ) )
            
            ANTLR3_UINT32 alt44;

            alt44=3;


            {
                int LA44_0 = LA(1);
                if ( (LA44_0 == MESSAGE_RECV) ) 
                {

                    {
                        int LA44_1 = LA(2);
                        if ( (synpred61_EmersonTree(ctx)) ) 
                        {
                            alt44=1;
                        }
                        else if ( (synpred62_EmersonTree(ctx)) ) 
                        {
                            alt44=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt44=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 44;
                            EXCEPTION->state        = 1;


                            goto rulemsgRecvStatementEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 44;
                    EXCEPTION->state        = 0;


                    goto rulemsgRecvStatementEx;
                }
            }
            switch (alt44) 
            {
        	case 1:
        	    // .//EmersonTree.g:812:4: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression )
        	    {
        	         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_msgRecvStatement4340); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("system.registerHandler( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement4356);
        	        memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(", ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement4373);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(", null) ");  // No sender case
        	                
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:829:3: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression )
        	    {
        	         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_msgRecvStatement4401); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP("system.registerHandler( ");
        	                
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement4413);
        	        memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(", ");
        	                
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement4426);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(", ");
        	                
        	        }
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement4438);
        	        memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(") "); // Case with sender
        	               
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:848:3: ^( MESSAGE_RECV callExpression leftHandSideExpression )
        	    {
        	         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_msgRecvStatement4461); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("system.registerHandler( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_msgRecvStatement4477);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(", ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement4494);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(", null) ");  // No sender case
        	                
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvStatementEx; /* Prevent compiler warnings */
    rulemsgRecvStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgRecvStatement */

/** 
 * $ANTLR start catchClause
 * .//EmersonTree.g:867:1: catchClause : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchClause(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier9;

    /* Initialize rule variables
     */


    Identifier9       = NULL;

    {
        // .//EmersonTree.g:868:2: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:868:4: ^( CATCH Identifier statementBlock )
        {
             MATCHT(CATCH, &FOLLOW_CATCH_in_catchClause4520); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                					  APP(" catch ( ");
                					
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier9 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause4535); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                					  APP((const char*)(Identifier9->getText(Identifier9))->chars);
                					  APP(" ) ");

                					
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause4556);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//EmersonTree.g:883:1: finallyClause : ^( FINALLY statementBlock ) ;
 */
static void
finallyClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:884:2: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:884:4: ^( FINALLY statementBlock )
        {
             MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyClause4576); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                				  APP(" finally ");

                				
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause4589);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start expression
 * .//EmersonTree.g:895:1: expression : ( ^( EXPR_LIST assignmentExpression ) | ^( COND_EXPR conditionalExpression ) );
 */
static void
expression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:896:2: ( ^( EXPR_LIST assignmentExpression ) | ^( COND_EXPR conditionalExpression ) )
            
            ANTLR3_UINT32 alt45;

            alt45=2;


            {
                int LA45_0 = LA(1);
                if ( (LA45_0 == EXPR_LIST) ) 
                {
                    alt45=1;
                }
                else if ( (LA45_0 == COND_EXPR) ) 
                {
                    alt45=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 45;
                    EXCEPTION->state        = 0;


                    goto ruleexpressionEx;
                }
            }
            switch (alt45) 
            {
        	case 1:
        	    // .//EmersonTree.g:896:4: ^( EXPR_LIST assignmentExpression )
        	    {
        	         MATCHT(EXPR_LIST, &FOLLOW_EXPR_LIST_in_expression4614); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression4616);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:897:11: ^( COND_EXPR conditionalExpression )
        	    {
        	         MATCHT(COND_EXPR, &FOLLOW_COND_EXPR_in_expression4630); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_expression4632);
        	        conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//EmersonTree.g:900:1: expressionNoIn : ( ^( EXPR_LIST assignmentExpressionNoIn ) | ^( COND_EXPR_NOIN conditionalExpressionNoIn ) );
 */
static void
expressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:901:2: ( ^( EXPR_LIST assignmentExpressionNoIn ) | ^( COND_EXPR_NOIN conditionalExpressionNoIn ) )
            
            ANTLR3_UINT32 alt46;

            alt46=2;


            {
                int LA46_0 = LA(1);
                if ( (LA46_0 == EXPR_LIST) ) 
                {
                    alt46=1;
                }
                else if ( (LA46_0 == COND_EXPR_NOIN) ) 
                {
                    alt46=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 46;
                    EXCEPTION->state        = 0;


                    goto ruleexpressionNoInEx;
                }
            }
            switch (alt46) 
            {
        	case 1:
        	    // .//EmersonTree.g:901:4: ^( EXPR_LIST assignmentExpressionNoIn )
        	    {
        	         MATCHT(EXPR_LIST, &FOLLOW_EXPR_LIST_in_expressionNoIn4646); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4648);
        	        assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:902:11: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	    {
        	         MATCHT(COND_EXPR_NOIN, &FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4662); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4664);
        	        conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//EmersonTree.g:906:1: assignmentExpression : ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpression ) ;
 */
static void
assignmentExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionTop = pEmersonTree_assignmentExpressionPush(ctx);
    {
        // .//EmersonTree.g:912:9: ( ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpression ) )
        // .//EmersonTree.g:912:11: ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpression )
        {

            // .//EmersonTree.g:913:13: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
            {
                int alt47=12;
                switch ( LA(1) ) 
                {
                case ASSIGN:
                	{
                		alt47=1;
                	}
                    break;
                case MULT_ASSIGN:
                	{
                		alt47=2;
                	}
                    break;
                case DIV_ASSIGN:
                	{
                		alt47=3;
                	}
                    break;
                case MOD_ASSIGN:
                	{
                		alt47=4;
                	}
                    break;
                case ADD_ASSIGN:
                	{
                		alt47=5;
                	}
                    break;
                case SUB_ASSIGN:
                	{
                		alt47=6;
                	}
                    break;
                case LEFT_SHIFT_ASSIGN:
                	{
                		alt47=7;
                	}
                    break;
                case RIGHT_SHIFT_ASSIGN:
                	{
                		alt47=8;
                	}
                    break;
                case TRIPLE_SHIFT_ASSIGN:
                	{
                		alt47=9;
                	}
                    break;
                case AND_ASSIGN:
                	{
                		alt47=10;
                	}
                    break;
                case EXP_ASSIGN:
                	{
                		alt47=11;
                	}
                    break;
                case OR_ASSIGN:
                	{
                		alt47=12;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_assignmentExpressionPop(ctx);

                        return ;
                    }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 47;
                    EXCEPTION->state        = 0;


                    goto ruleassignmentExpressionEx;
                }

                switch (alt47) 
                {
            	case 1:
            	    // .//EmersonTree.g:914:17: ASSIGN
            	    {
            	         MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpression4722); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " = ";    
            	        }

            	    }
            	    break;
            	case 2:
            	    // .//EmersonTree.g:915:19: MULT_ASSIGN
            	    {
            	         MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpression4759); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " *= ";  
            	        }

            	    }
            	    break;
            	case 3:
            	    // .//EmersonTree.g:916:19: DIV_ASSIGN
            	    {
            	         MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpression4789); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " /= ";  
            	        }

            	    }
            	    break;
            	case 4:
            	    // .//EmersonTree.g:917:19: MOD_ASSIGN
            	    {
            	         MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpression4820); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " %= ";  
            	        }

            	    }
            	    break;
            	case 5:
            	    // .//EmersonTree.g:918:19: ADD_ASSIGN
            	    {
            	         MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpression4851); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " += ";  
            	        }

            	    }
            	    break;
            	case 6:
            	    // .//EmersonTree.g:919:19: SUB_ASSIGN
            	    {
            	         MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpression4883); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " -= ";  
            	        }

            	    }
            	    break;
            	case 7:
            	    // .//EmersonTree.g:920:19: LEFT_SHIFT_ASSIGN
            	    {
            	         MATCHT(LEFT_SHIFT_ASSIGN, &FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpression4915); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " <<= "; 
            	        }

            	    }
            	    break;
            	case 8:
            	    // .//EmersonTree.g:921:19: RIGHT_SHIFT_ASSIGN
            	    {
            	         MATCHT(RIGHT_SHIFT_ASSIGN, &FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4939); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " >>= "; 
            	        }

            	    }
            	    break;
            	case 9:
            	    // .//EmersonTree.g:922:19: TRIPLE_SHIFT_ASSIGN
            	    {
            	         MATCHT(TRIPLE_SHIFT_ASSIGN, &FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4962); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= "  >>>= "; 
            	        }

            	    }
            	    break;
            	case 10:
            	    // .//EmersonTree.g:923:19: AND_ASSIGN
            	    {
            	         MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpression4984); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " &= "; 
            	        }

            	    }
            	    break;
            	case 11:
            	    // .//EmersonTree.g:924:19: EXP_ASSIGN
            	    {
            	         MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpression5015); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " ^= "; 
            	        }

            	    }
            	    break;
            	case 12:
            	    // .//EmersonTree.g:925:19: OR_ASSIGN
            	    {
            	         MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpression5046); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " |= "; 
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_assignmentExpressionPop(ctx);

                return ;
            }
            FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression5088);
            leftHandSideExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_assignmentExpressionPop(ctx);

                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ");
                                APP(	(SCOPE_TOP(assignmentExpression))->op);
                                APP(" ");
                            
            }
            FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression5117);
            conditionalExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_assignmentExpressionPop(ctx);

                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_assignmentExpressionPop(ctx);

                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    pEmersonTree_assignmentExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//EmersonTree.g:940:1: assignmentExpressionNoIn : ( ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpressionNoIn ) );
 */
static void
assignmentExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionNoInTop = pEmersonTree_assignmentExpressionNoInPush(ctx);
    {
        {
            //  .//EmersonTree.g:946:2: ( ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpressionNoIn ) )
            
            ANTLR3_UINT32 alt49;

            alt49=2;


            {
                int LA49_0 = LA(1);
                if ( (LA49_0 == COND_EXPR_NOIN) ) 
                {
                    alt49=1;
                }
                else if ( (((LA49_0 >= ASSIGN) && (LA49_0 <= OR_ASSIGN))) ) 
                {
                    alt49=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_assignmentExpressionNoInPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 49;
                    EXCEPTION->state        = 0;


                    goto ruleassignmentExpressionNoInEx;
                }
            }
            switch (alt49) 
            {
        	case 1:
        	    // .//EmersonTree.g:946:4: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	    {
        	         MATCHT(COND_EXPR_NOIN, &FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn5179); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5181);
        	        conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:947:4: ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpressionNoIn )
        	    {

        	        // .//EmersonTree.g:948:6: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        	        {
        	            int alt48=12;
        	            switch ( LA(1) ) 
        	            {
        	            case ASSIGN:
        	            	{
        	            		alt48=1;
        	            	}
        	                break;
        	            case MULT_ASSIGN:
        	            	{
        	            		alt48=2;
        	            	}
        	                break;
        	            case DIV_ASSIGN:
        	            	{
        	            		alt48=3;
        	            	}
        	                break;
        	            case MOD_ASSIGN:
        	            	{
        	            		alt48=4;
        	            	}
        	                break;
        	            case ADD_ASSIGN:
        	            	{
        	            		alt48=5;
        	            	}
        	                break;
        	            case SUB_ASSIGN:
        	            	{
        	            		alt48=6;
        	            	}
        	                break;
        	            case LEFT_SHIFT_ASSIGN:
        	            	{
        	            		alt48=7;
        	            	}
        	                break;
        	            case RIGHT_SHIFT_ASSIGN:
        	            	{
        	            		alt48=8;
        	            	}
        	                break;
        	            case TRIPLE_SHIFT_ASSIGN:
        	            	{
        	            		alt48=9;
        	            	}
        	                break;
        	            case AND_ASSIGN:
        	            	{
        	            		alt48=10;
        	            	}
        	                break;
        	            case EXP_ASSIGN:
        	            	{
        	            		alt48=11;
        	            	}
        	                break;
        	            case OR_ASSIGN:
        	            	{
        	            		alt48=12;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionNoInPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 48;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionNoInEx;
        	            }

        	            switch (alt48) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:949:6: ASSIGN
        	        	    {
        	        	         MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpressionNoIn5201); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " = ";    
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:950:7: MULT_ASSIGN
        	        	    {
        	        	         MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn5225); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " *= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:951:7: DIV_ASSIGN
        	        	    {
        	        	         MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn5243); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " /= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:952:8: MOD_ASSIGN
        	        	    {
        	        	         MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn5263); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " %= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:953:8: ADD_ASSIGN
        	        	    {
        	        	         MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn5282); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " += ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // .//EmersonTree.g:954:8: SUB_ASSIGN
        	        	    {
        	        	         MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn5302); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " -= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // .//EmersonTree.g:955:7: LEFT_SHIFT_ASSIGN
        	        	    {
        	        	         MATCHT(LEFT_SHIFT_ASSIGN, &FOLLOW_LEFT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5321); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " <<= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // .//EmersonTree.g:956:7: RIGHT_SHIFT_ASSIGN
        	        	    {
        	        	         MATCHT(RIGHT_SHIFT_ASSIGN, &FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn5333); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " >>= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // .//EmersonTree.g:957:7: TRIPLE_SHIFT_ASSIGN
        	        	    {
        	        	         MATCHT(TRIPLE_SHIFT_ASSIGN, &FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn5344); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= "  >>>= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 10:
        	        	    // .//EmersonTree.g:958:7: AND_ASSIGN
        	        	    {
        	        	         MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn5354); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " &= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 11:
        	        	    // .//EmersonTree.g:959:7: EXP_ASSIGN
        	        	    {
        	        	         MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn5373); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " ^= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 12:
        	        	    // .//EmersonTree.g:960:7: OR_ASSIGN
        	        	    {
        	        	         MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5392); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " |= "; 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5425);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            					  APP(" ");
        	            					  APP(	(SCOPE_TOP(assignmentExpressionNoIn))->op);
        	            					  APP(" ");
        	            					
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5440);
        	        conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    pEmersonTree_assignmentExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//EmersonTree.g:974:1: leftHandSideExpression : ( callExpression | newExpression );
 */
static void
leftHandSideExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:975:2: ( callExpression | newExpression )
            
            ANTLR3_UINT32 alt50;

            alt50=2;

            alt50 = cdfa50.predict(ctx, RECOGNIZER, ISTREAM, &cdfa50);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt50) 
            {
        	case 1:
        	    // .//EmersonTree.g:975:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression5457);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:976:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression5462);
        	        newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//EmersonTree.g:979:1: newExpression : ( memberExpression | ^( NEW newExpression ) );
 */
static void
newExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:980:2: ( memberExpression | ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt51;

            alt51=2;

            alt51 = cdfa51.predict(ctx, RECOGNIZER, ISTREAM, &cdfa51);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt51) 
            {
        	case 1:
        	    // .//EmersonTree.g:980:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression5474);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:981:4: ^( NEW newExpression )
        	    {
        	         MATCHT(NEW, &FOLLOW_NEW_in_newExpression5481); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression5483);
        	        newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//EmersonTree.g:985:1: propertyReferenceSuffix1 : Identifier ;
 */
static void
propertyReferenceSuffix1(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier10;

    /* Initialize rule variables
     */


    Identifier10       = NULL;

    {
        // .//EmersonTree.g:986:1: ( Identifier )
        // .//EmersonTree.g:986:3: Identifier
        {
            Identifier10 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix15496); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                 APP((const char*)(Identifier10->getText(Identifier10))->chars);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start indexSuffix1
 * .//EmersonTree.g:989:1: indexSuffix1 : expression ;
 */
static void
indexSuffix1(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:990:1: ( expression )
        // .//EmersonTree.g:990:3: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix15508);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//EmersonTree.g:993:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static void
memberExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:994:1: ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) )
            
            ANTLR3_UINT32 alt52;

            alt52=6;

            alt52 = cdfa52.predict(ctx, RECOGNIZER, ISTREAM, &cdfa52);
            if  (HASEXCEPTION())
            {
                goto rulememberExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt52) 
            {
        	case 1:
        	    // .//EmersonTree.g:994:3: primaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression5517);
        	        primaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:995:2: functionExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression5520);
        	        functionExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:996:3: ^( DOT memberExpression propertyReferenceSuffix1 )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_memberExpression5525); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5527);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("."); 
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression5531);
        	        propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:997:3: ^( ARRAY_INDEX memberExpression indexSuffix1 )
        	    {
        	         MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_memberExpression5538); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5540);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression5544);
        	        indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ] "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:998:3: ^( NEW memberExpression arguments )
        	    {
        	         MATCHT(NEW, &FOLLOW_NEW_in_memberExpression5552); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("new "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5556);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_memberExpression5558);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:999:3: ^( DOT memberExpression )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_memberExpression5564); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(".");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5568);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//EmersonTree.g:1002:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix );
 */
static void
memberExpressionSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1003:2: ( indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt53;

            alt53=2;


            {
                int LA53_0 = LA(1);
                if ( (LA53_0 == ARRAY_INDEX) ) 
                {
                    alt53=1;
                }
                else if ( (LA53_0 == DOT) ) 
                {
                    alt53=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 53;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt53) 
            {
        	case 1:
        	    // .//EmersonTree.g:1003:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix5579);
        	        indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1004:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5584);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//EmersonTree.g:1007:1: callExpression : ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) );
 */
static void
callExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1008:2: ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) )
            
            ANTLR3_UINT32 alt54;

            alt54=4;

            switch ( LA(1) ) 
            {
            case CALL:
            	{

            		{
            		    int LA54_1 = LA(2);
            		    if ( (synpred96_EmersonTree(ctx)) ) 
            		    {
            		        alt54=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt54=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return ;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 54;
            		        EXCEPTION->state        = 1;


            		        goto rulecallExpressionEx;
            		    }
            		}
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt54=2;
            	}
                break;
            case DOT:
            	{
            		alt54=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 54;
                EXCEPTION->state        = 0;


                goto rulecallExpressionEx;
            }

            switch (alt54) 
            {
        	case 1:
        	    // .//EmersonTree.g:1008:4: ^( CALL memberExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression5597); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression5599);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression5601);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1009:4: ^( ARRAY_INDEX callExpression indexSuffix1 )
        	    {
        	         MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_callExpression5609); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5611);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("[ "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression5615);
        	        indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ]"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1010:4: ^( DOT callExpression propertyReferenceSuffix1 )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_callExpression5624); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5626);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(".");
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression5630);
        	        propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1011:4: ^( CALL callExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression5637); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5639);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression5641);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//EmersonTree.g:1016:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix );
 */
static void
callExpressionSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1017:2: ( arguments | indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt55;

            alt55=3;

            switch ( LA(1) ) 
            {
            case ARGLIST:
            	{
            		alt55=1;
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt55=2;
            	}
                break;
            case DOT:
            	{
            		alt55=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 55;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt55) 
            {
        	case 1:
        	    // .//EmersonTree.g:1017:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix5655);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1018:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix5660);
        	        indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1019:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5665);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//EmersonTree.g:1022:1: arguments : ( ^( ARGLIST ) | ^( ARGLIST ( expression ) ) | ^( ARGLIST expression ( expression )* ) );
 */
static void
arguments(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1023:3: ( ^( ARGLIST ) | ^( ARGLIST ( expression ) ) | ^( ARGLIST expression ( expression )* ) )
            
            ANTLR3_UINT32 alt57;

            alt57=3;


            {
                int LA57_0 = LA(1);
                if ( (LA57_0 == ARGLIST) ) 
                {

                    {
                        int LA57_1 = LA(2);
                        if ( (synpred101_EmersonTree(ctx)) ) 
                        {
                            alt57=1;
                        }
                        else if ( (synpred102_EmersonTree(ctx)) ) 
                        {
                            alt57=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt57=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 57;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 57;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt57) 
            {
        	case 1:
        	    // .//EmersonTree.g:1023:5: ^( ARGLIST )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5678); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("( )"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1024:5: ^( ARGLIST ( expression ) )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5688); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1026:8: ( expression )
        	        // .//EmersonTree.g:1026:9: expression
        	        {
        	            FOLLOWPUSH(FOLLOW_expression_in_arguments5708);
        	            expression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1030:5: ^( ARGLIST expression ( expression )* )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5733); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP("( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_arguments5749);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1035:7: ( expression )*

        	        for (;;)
        	        {
        	            int alt56=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA56_0 = LA(1);
        	                if ( (((LA56_0 >= EXPR_LIST) && (LA56_0 <= COND_EXPR))) ) 
        	                {
        	                    alt56=1;
        	                }

        	            }
        	            switch (alt56) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1036:9: expression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                        APP(", ");
        	        	                    
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arguments5777);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop56;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop56: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(" ) ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//EmersonTree.g:1048:1: indexSuffix : ^( ARRAY_INDEX expression ) ;
 */
static void
indexSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1049:2: ( ^( ARRAY_INDEX expression ) )
        // .//EmersonTree.g:1049:4: ^( ARRAY_INDEX expression )
        {
             MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_indexSuffix5817); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix5819);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//EmersonTree.g:1052:1: propertyReferenceSuffix : ^( DOT Identifier ) ;
 */
static void
propertyReferenceSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1053:2: ( ^( DOT Identifier ) )
        // .//EmersonTree.g:1053:4: ^( DOT Identifier )
        {
             MATCHT(DOT, &FOLLOW_DOT_in_propertyReferenceSuffix5834); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix5836); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//EmersonTree.g:1056:1: assignmentOperator : ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN );
 */
static void
assignmentOperator(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1057:2: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= ASSIGN) && (LA(1) <= OR_ASSIGN)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_assignmentOperator0);    goto ruleassignmentOperatorEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start ternaryExpression
 * .//EmersonTree.g:1062:1: ternaryExpression : ^( TERNARYOP logicalORExpression expression expression ) ;
 */
static void
ternaryExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1063:9: ( ^( TERNARYOP logicalORExpression expression expression ) )
        // .//EmersonTree.g:1063:11: ^( TERNARYOP logicalORExpression expression expression )
        {
             MATCHT(TERNARYOP, &FOLLOW_TERNARYOP_in_ternaryExpression5897); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP( " ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_logicalORExpression_in_ternaryExpression5925);
            logicalORExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP( " ) ? ( ");
                            
            }
            FOLLOWPUSH(FOLLOW_expression_in_ternaryExpression5953);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) : ( ");
                            
            }
            FOLLOWPUSH(FOLLOW_expression_in_ternaryExpression5981);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) " );
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionEx; /* Prevent compiler warnings */
    ruleternaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ternaryExpression */

/** 
 * $ANTLR start ternaryExpressionNoIn
 * .//EmersonTree.g:1082:1: ternaryExpressionNoIn : ^( TERNARYOP logicalORExpressionNoIn expressionNoIn expressionNoIn ) ;
 */
static void
ternaryExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1083:9: ( ^( TERNARYOP logicalORExpressionNoIn expressionNoIn expressionNoIn ) )
        // .//EmersonTree.g:1083:11: ^( TERNARYOP logicalORExpressionNoIn expressionNoIn expressionNoIn )
        {
             MATCHT(TERNARYOP, &FOLLOW_TERNARYOP_in_ternaryExpressionNoIn6034); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP( " ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6062);
            logicalORExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP( " ) ? ( ");
                            
            }
            FOLLOWPUSH(FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6090);
            expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) : ( ");
                            
            }
            FOLLOWPUSH(FOLLOW_expressionNoIn_in_ternaryExpressionNoIn6118);
            expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) " );
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionNoInEx; /* Prevent compiler warnings */
    ruleternaryExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ternaryExpressionNoIn */

/** 
 * $ANTLR start conditionalExpression
 * .//EmersonTree.g:1102:1: conditionalExpression : ( ternaryExpression | logicalORExpression );
 */
static void
conditionalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1103:2: ( ternaryExpression | logicalORExpression )
            
            ANTLR3_UINT32 alt58;

            alt58=2;


            {
                int LA58_0 = LA(1);
                if ( (LA58_0 == TERNARYOP) ) 
                {
                    alt58=1;
                }
                else if ( (((LA58_0 >= CALL) && (LA58_0 <= DOT)) || LA58_0 == NEW || LA58_0 == VECTOR || LA58_0 == DOLLAR_EXPRESSION || ((LA58_0 >= OR) && (LA58_0 <= OBJ_LITERAL)) || ((LA58_0 >= DELETE_OP) && (LA58_0 <= NOT)) || LA58_0 == FUNC_EXPR || ((LA58_0 >= PAREN) && (LA58_0 <= PATTERN_LITERAL)) || ((LA58_0 >= Identifier) && (LA58_0 <= StringLiteral)) || LA58_0 == 213 || ((LA58_0 >= 215) && (LA58_0 <= 217))) ) 
                {
                    alt58=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 58;
                    EXCEPTION->state        = 0;


                    goto ruleconditionalExpressionEx;
                }
            }
            switch (alt58) 
            {
        	case 1:
        	    // .//EmersonTree.g:1103:4: ternaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_conditionalExpression6163);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1104:11: logicalORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression6175);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//EmersonTree.g:1107:1: conditionalExpressionNoIn : ( ternaryExpressionNoIn | logicalORExpressionNoIn );
 */
static void
conditionalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1108:2: ( ternaryExpressionNoIn | logicalORExpressionNoIn )
            
            ANTLR3_UINT32 alt59;

            alt59=2;


            {
                int LA59_0 = LA(1);
                if ( (LA59_0 == TERNARYOP) ) 
                {
                    alt59=1;
                }
                else if ( (((LA59_0 >= CALL) && (LA59_0 <= DOT)) || LA59_0 == NEW || LA59_0 == VECTOR || LA59_0 == DOLLAR_EXPRESSION || ((LA59_0 >= OR) && (LA59_0 <= INSTANCE_OF)) || ((LA59_0 >= LEFT_SHIFT) && (LA59_0 <= OBJ_LITERAL)) || ((LA59_0 >= DELETE_OP) && (LA59_0 <= NOT)) || LA59_0 == FUNC_EXPR || ((LA59_0 >= PAREN) && (LA59_0 <= PATTERN_LITERAL)) || ((LA59_0 >= Identifier) && (LA59_0 <= StringLiteral)) || LA59_0 == 213 || ((LA59_0 >= 215) && (LA59_0 <= 217))) ) 
                {
                    alt59=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 59;
                    EXCEPTION->state        = 0;


                    goto ruleconditionalExpressionNoInEx;
                }
            }
            switch (alt59) 
            {
        	case 1:
        	    // .//EmersonTree.g:1108:4: ternaryExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn6186);
        	        ternaryExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1109:11: logicalORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn6198);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpression
 * .//EmersonTree.g:1113:1: logicalANDExpression : ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) );
 */
static void
logicalANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1114:2: ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) )
            
            ANTLR3_UINT32 alt60;

            alt60=2;


            {
                int LA60_0 = LA(1);
                if ( (((LA60_0 >= CALL) && (LA60_0 <= DOT)) || LA60_0 == NEW || LA60_0 == VECTOR || LA60_0 == DOLLAR_EXPRESSION || ((LA60_0 >= BIT_OR) && (LA60_0 <= OBJ_LITERAL)) || ((LA60_0 >= DELETE_OP) && (LA60_0 <= NOT)) || LA60_0 == FUNC_EXPR || ((LA60_0 >= PAREN) && (LA60_0 <= PATTERN_LITERAL)) || ((LA60_0 >= Identifier) && (LA60_0 <= StringLiteral)) || LA60_0 == 213 || ((LA60_0 >= 215) && (LA60_0 <= 217))) ) 
                {
                    alt60=1;
                }
                else if ( (LA60_0 == AND) ) 
                {
                    alt60=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 60;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionEx;
                }
            }
            switch (alt60) 
            {
        	case 1:
        	    // .//EmersonTree.g:1114:4: bitwiseORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression6218);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1115:3: ^( AND logicalANDExpression bitwiseORExpression )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpression6223); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalANDExpression6225);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression6229);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpression
 * .//EmersonTree.g:1119:1: logicalORExpression : ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) );
 */
static void
logicalORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1120:2: ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) )
            
            ANTLR3_UINT32 alt61;

            alt61=2;


            {
                int LA61_0 = LA(1);
                if ( (((LA61_0 >= CALL) && (LA61_0 <= DOT)) || LA61_0 == NEW || LA61_0 == VECTOR || LA61_0 == DOLLAR_EXPRESSION || ((LA61_0 >= AND) && (LA61_0 <= OBJ_LITERAL)) || ((LA61_0 >= DELETE_OP) && (LA61_0 <= NOT)) || LA61_0 == FUNC_EXPR || ((LA61_0 >= PAREN) && (LA61_0 <= PATTERN_LITERAL)) || ((LA61_0 >= Identifier) && (LA61_0 <= StringLiteral)) || LA61_0 == 213 || ((LA61_0 >= 215) && (LA61_0 <= 217))) ) 
                {
                    alt61=1;
                }
                else if ( (LA61_0 == OR) ) 
                {
                    alt61=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 61;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionEx;
                }
            }
            switch (alt61) 
            {
        	case 1:
        	    // .//EmersonTree.g:1120:4: logicalANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression6242);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1121:3: ^( OR logicalORExpression logicalANDExpression )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpression6247); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_logicalORExpression6249);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression6253);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//EmersonTree.g:1124:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) );
 */
static void
logicalORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1125:2: ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt62;

            alt62=2;


            {
                int LA62_0 = LA(1);
                if ( (((LA62_0 >= CALL) && (LA62_0 <= DOT)) || LA62_0 == NEW || LA62_0 == VECTOR || LA62_0 == DOLLAR_EXPRESSION || ((LA62_0 >= AND) && (LA62_0 <= INSTANCE_OF)) || ((LA62_0 >= LEFT_SHIFT) && (LA62_0 <= OBJ_LITERAL)) || ((LA62_0 >= DELETE_OP) && (LA62_0 <= NOT)) || LA62_0 == FUNC_EXPR || ((LA62_0 >= PAREN) && (LA62_0 <= PATTERN_LITERAL)) || ((LA62_0 >= Identifier) && (LA62_0 <= StringLiteral)) || LA62_0 == 213 || ((LA62_0 >= 215) && (LA62_0 <= 217))) ) 
                {
                    alt62=1;
                }
                else if ( (LA62_0 == OR) ) 
                {
                    alt62=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 62;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionNoInEx;
                }
            }
            switch (alt62) 
            {
        	case 1:
        	    // .//EmersonTree.g:1125:4: logicalANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6266);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1126:3: ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpressionNoIn6271); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6273);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || ");
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6275);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//EmersonTree.g:1130:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) );
 */
static void
logicalANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1131:2: ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt63;

            alt63=2;


            {
                int LA63_0 = LA(1);
                if ( (((LA63_0 >= CALL) && (LA63_0 <= DOT)) || LA63_0 == NEW || LA63_0 == VECTOR || LA63_0 == DOLLAR_EXPRESSION || ((LA63_0 >= BIT_OR) && (LA63_0 <= INSTANCE_OF)) || ((LA63_0 >= LEFT_SHIFT) && (LA63_0 <= OBJ_LITERAL)) || ((LA63_0 >= DELETE_OP) && (LA63_0 <= NOT)) || LA63_0 == FUNC_EXPR || ((LA63_0 >= PAREN) && (LA63_0 <= PATTERN_LITERAL)) || ((LA63_0 >= Identifier) && (LA63_0 <= StringLiteral)) || LA63_0 == 213 || ((LA63_0 >= 215) && (LA63_0 <= 217))) ) 
                {
                    alt63=1;
                }
                else if ( (LA63_0 == AND) ) 
                {
                    alt63=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 63;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionNoInEx;
                }
            }
            switch (alt63) 
            {
        	case 1:
        	    // .//EmersonTree.g:1131:4: bitwiseORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6290);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1132:3: ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpressionNoIn6296); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6298);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6302);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//EmersonTree.g:1135:1: bitwiseORExpression : ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) );
 */
static void
bitwiseORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1136:2: ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) )
            
            ANTLR3_UINT32 alt64;

            alt64=2;


            {
                int LA64_0 = LA(1);
                if ( (((LA64_0 >= CALL) && (LA64_0 <= DOT)) || LA64_0 == NEW || LA64_0 == VECTOR || LA64_0 == DOLLAR_EXPRESSION || ((LA64_0 >= EXP) && (LA64_0 <= OBJ_LITERAL)) || ((LA64_0 >= DELETE_OP) && (LA64_0 <= NOT)) || LA64_0 == FUNC_EXPR || ((LA64_0 >= PAREN) && (LA64_0 <= PATTERN_LITERAL)) || ((LA64_0 >= Identifier) && (LA64_0 <= StringLiteral)) || LA64_0 == 213 || ((LA64_0 >= 215) && (LA64_0 <= 217))) ) 
                {
                    alt64=1;
                }
                else if ( (LA64_0 == BIT_OR) ) 
                {
                    alt64=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 64;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionEx;
                }
            }
            switch (alt64) 
            {
        	case 1:
        	    // .//EmersonTree.g:1136:4: bitwiseXORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6316);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1137:3: ^( BIT_OR bitwiseORExpression bitwiseXORExpression )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpression6322); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_bitwiseORExpression6324);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" | "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6328);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//EmersonTree.g:1140:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) );
 */
static void
bitwiseORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1141:2: ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt65;

            alt65=2;


            {
                int LA65_0 = LA(1);
                if ( (((LA65_0 >= CALL) && (LA65_0 <= DOT)) || LA65_0 == NEW || LA65_0 == VECTOR || LA65_0 == DOLLAR_EXPRESSION || ((LA65_0 >= EXP) && (LA65_0 <= INSTANCE_OF)) || ((LA65_0 >= LEFT_SHIFT) && (LA65_0 <= OBJ_LITERAL)) || ((LA65_0 >= DELETE_OP) && (LA65_0 <= NOT)) || LA65_0 == FUNC_EXPR || ((LA65_0 >= PAREN) && (LA65_0 <= PATTERN_LITERAL)) || ((LA65_0 >= Identifier) && (LA65_0 <= StringLiteral)) || LA65_0 == 213 || ((LA65_0 >= 215) && (LA65_0 <= 217))) ) 
                {
                    alt65=1;
                }
                else if ( (LA65_0 == BIT_OR) ) 
                {
                    alt65=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 65;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionNoInEx;
                }
            }
            switch (alt65) 
            {
        	case 1:
        	    // .//EmersonTree.g:1141:4: bitwiseXORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6341);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1142:3: ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6348); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6350);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" | ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6354);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//EmersonTree.g:1145:1: bitwiseXORExpression : ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) );
 */
static void
bitwiseXORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1146:1: ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) )
            
            ANTLR3_UINT32 alt66;

            alt66=2;


            {
                int LA66_0 = LA(1);
                if ( (((LA66_0 >= CALL) && (LA66_0 <= DOT)) || LA66_0 == NEW || LA66_0 == VECTOR || LA66_0 == DOLLAR_EXPRESSION || ((LA66_0 >= BIT_AND) && (LA66_0 <= OBJ_LITERAL)) || ((LA66_0 >= DELETE_OP) && (LA66_0 <= NOT)) || LA66_0 == FUNC_EXPR || ((LA66_0 >= PAREN) && (LA66_0 <= PATTERN_LITERAL)) || ((LA66_0 >= Identifier) && (LA66_0 <= StringLiteral)) || LA66_0 == 213 || ((LA66_0 >= 215) && (LA66_0 <= 217))) ) 
                {
                    alt66=1;
                }
                else if ( (LA66_0 == EXP) ) 
                {
                    alt66=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 66;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionEx;
                }
            }
            switch (alt66) 
            {
        	case 1:
        	    // .//EmersonTree.g:1146:3: bitwiseANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6366);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1147:3: ^( EXP e= bitwiseXORExpression bitwiseANDExpression )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpression6373); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6377);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6381);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//EmersonTree.g:1150:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) );
 */
static void
bitwiseXORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1151:2: ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt67;

            alt67=2;


            {
                int LA67_0 = LA(1);
                if ( (((LA67_0 >= CALL) && (LA67_0 <= DOT)) || LA67_0 == NEW || LA67_0 == VECTOR || LA67_0 == DOLLAR_EXPRESSION || ((LA67_0 >= BIT_AND) && (LA67_0 <= INSTANCE_OF)) || ((LA67_0 >= LEFT_SHIFT) && (LA67_0 <= OBJ_LITERAL)) || ((LA67_0 >= DELETE_OP) && (LA67_0 <= NOT)) || LA67_0 == FUNC_EXPR || ((LA67_0 >= PAREN) && (LA67_0 <= PATTERN_LITERAL)) || ((LA67_0 >= Identifier) && (LA67_0 <= StringLiteral)) || LA67_0 == 213 || ((LA67_0 >= 215) && (LA67_0 <= 217))) ) 
                {
                    alt67=1;
                }
                else if ( (LA67_0 == EXP) ) 
                {
                    alt67=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 67;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionNoInEx;
                }
            }
            switch (alt67) 
            {
        	case 1:
        	    // .//EmersonTree.g:1151:4: bitwiseANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6393);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1152:3: ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpressionNoIn6399); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6403);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6406);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//EmersonTree.g:1155:1: bitwiseANDExpression : ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) );
 */
static void
bitwiseANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1156:2: ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) )
            
            ANTLR3_UINT32 alt68;

            alt68=2;


            {
                int LA68_0 = LA(1);
                if ( (((LA68_0 >= CALL) && (LA68_0 <= DOT)) || LA68_0 == NEW || LA68_0 == VECTOR || LA68_0 == DOLLAR_EXPRESSION || ((LA68_0 >= EQUALS) && (LA68_0 <= OBJ_LITERAL)) || ((LA68_0 >= DELETE_OP) && (LA68_0 <= NOT)) || LA68_0 == FUNC_EXPR || ((LA68_0 >= PAREN) && (LA68_0 <= PATTERN_LITERAL)) || ((LA68_0 >= Identifier) && (LA68_0 <= StringLiteral)) || LA68_0 == 213 || ((LA68_0 >= 215) && (LA68_0 <= 217))) ) 
                {
                    alt68=1;
                }
                else if ( (LA68_0 == BIT_AND) ) 
                {
                    alt68=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 68;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionEx;
                }
            }
            switch (alt68) 
            {
        	case 1:
        	    // .//EmersonTree.g:1156:4: equalityExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression6420);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1157:4: ^( BIT_AND e= bitwiseANDExpression equalityExpression )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpression6426); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6430);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression6434);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//EmersonTree.g:1160:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) );
 */
static void
bitwiseANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1161:2: ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) )
            
            ANTLR3_UINT32 alt69;

            alt69=2;


            {
                int LA69_0 = LA(1);
                if ( (((LA69_0 >= CALL) && (LA69_0 <= DOT)) || LA69_0 == NEW || LA69_0 == VECTOR || LA69_0 == DOLLAR_EXPRESSION || ((LA69_0 >= EQUALS) && (LA69_0 <= INSTANCE_OF)) || ((LA69_0 >= LEFT_SHIFT) && (LA69_0 <= OBJ_LITERAL)) || ((LA69_0 >= DELETE_OP) && (LA69_0 <= NOT)) || LA69_0 == FUNC_EXPR || ((LA69_0 >= PAREN) && (LA69_0 <= PATTERN_LITERAL)) || ((LA69_0 >= Identifier) && (LA69_0 <= StringLiteral)) || LA69_0 == 213 || ((LA69_0 >= 215) && (LA69_0 <= 217))) ) 
                {
                    alt69=1;
                }
                else if ( (LA69_0 == BIT_AND) ) 
                {
                    alt69=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 69;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionNoInEx;
                }
            }
            switch (alt69) 
            {
        	case 1:
        	    // .//EmersonTree.g:1161:4: equalityExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6448);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1162:4: ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6455); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6459);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6463);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//EmersonTree.g:1165:1: equalityExpression : ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) );
 */
static void
equalityExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1166:2: ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) )
            
            ANTLR3_UINT32 alt70;

            alt70=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case LEFT_SHIFT:
            case RIGHT_SHIFT:
            case TRIPLE_SHIFT:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 213:
            case 215:
            case 216:
            case 217:
            	{
            		alt70=1;
            	}
                break;
            case EQUALS:
            	{
            		alt70=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt70=3;
            	}
                break;
            case IDENT:
            	{
            		alt70=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt70=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 70;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionEx;
            }

            switch (alt70) 
            {
        	case 1:
        	    // .//EmersonTree.g:1166:4: relationalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6476);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1167:4: ^( EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpression6482); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression6486);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" == ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6490);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1168:4: ^( NOT_EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpression6497); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression6501);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" != ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6505);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1169:4: ^( IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpression6512); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression6516);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" === ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6520);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1170:4: ^( NOT_IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpression6527); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression6531);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" !== ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6535);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//EmersonTree.g:1173:1: equalityExpressionNoIn : ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) );
 */
static void
equalityExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1174:1: ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) )
            
            ANTLR3_UINT32 alt71;

            alt71=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case LEFT_SHIFT:
            case RIGHT_SHIFT:
            case TRIPLE_SHIFT:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 213:
            case 215:
            case 216:
            case 217:
            	{
            		alt71=1;
            	}
                break;
            case EQUALS:
            	{
            		alt71=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt71=3;
            	}
                break;
            case IDENT:
            	{
            		alt71=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt71=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 71;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionNoInEx;
            }

            switch (alt71) 
            {
        	case 1:
        	    // .//EmersonTree.g:1174:3: relationalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6545);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1175:3: ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpressionNoIn6551); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6553);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" == ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6557);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1176:3: ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6564); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6566);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" != ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6570);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1177:3: ^( IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpressionNoIn6577); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6579);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" === "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6583);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1178:3: ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6590); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6592);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" !== ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6596);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//EmersonTree.g:1183:1: relationalOps : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN );
 */
static void
relationalOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1184:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN )
            
            ANTLR3_UINT32 alt72;

            alt72=6;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt72=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt72=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt72=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt72=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt72=5;
            	}
                break;
            case IN:
            	{
            		alt72=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 72;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt72) 
            {
        	case 1:
        	    // .//EmersonTree.g:1184:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOps6609); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               	(SCOPE_TOP(relationalExpression))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1185:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOps6615); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">" ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1186:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOps6621); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "<=" ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1187:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6628); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1188:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOps6634); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "instanceOf" ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1189:3: IN
        	    {
        	         MATCHT(IN, &FOLLOW_IN_in_relationalOps6640); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "in" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//EmersonTree.g:1192:1: relationalExpression : ( shiftExpression | ^( relationalOps e= relationalExpression shiftExpression ) );
 */
static void
relationalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionTop = pEmersonTree_relationalExpressionPush(ctx);
    {
        {
            //  .//EmersonTree.g:1198:2: ( shiftExpression | ^( relationalOps e= relationalExpression shiftExpression ) )
            
            ANTLR3_UINT32 alt73;

            alt73=2;


            {
                int LA73_0 = LA(1);
                if ( (((LA73_0 >= CALL) && (LA73_0 <= DOT)) || LA73_0 == NEW || LA73_0 == VECTOR || LA73_0 == DOLLAR_EXPRESSION || ((LA73_0 >= LEFT_SHIFT) && (LA73_0 <= OBJ_LITERAL)) || ((LA73_0 >= DELETE_OP) && (LA73_0 <= NOT)) || LA73_0 == FUNC_EXPR || ((LA73_0 >= PAREN) && (LA73_0 <= PATTERN_LITERAL)) || ((LA73_0 >= Identifier) && (LA73_0 <= StringLiteral)) || LA73_0 == 213 || ((LA73_0 >= 215) && (LA73_0 <= 217))) ) 
                {
                    alt73=1;
                }
                else if ( (((LA73_0 >= LESS_THAN) && (LA73_0 <= IN))) ) 
                {
                    alt73=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 73;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionEx;
                }
            }
            switch (alt73) 
            {
        	case 1:
        	    // .//EmersonTree.g:1198:4: shiftExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression6658);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1200:2: ^( relationalOps e= relationalExpression shiftExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression6672);
        	        relationalOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_relationalExpression6681);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            				  APP(" ");
        	            				  APP(	(SCOPE_TOP(relationalExpression))->op );
        	            				  APP(" ");
        	            				
        	        }
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression6693);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    pEmersonTree_relationalExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//EmersonTree.g:1212:1: relationalOpsNoIn : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF );
 */
static void
relationalOpsNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1213:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF )
            
            ANTLR3_UINT32 alt74;

            alt74=5;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt74=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt74=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt74=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt74=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt74=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 74;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt74) 
            {
        	case 1:
        	    // .//EmersonTree.g:1213:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOpsNoIn6709); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              	(SCOPE_TOP(relationalExpressionNoIn))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1214:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOpsNoIn6715); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">"; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1215:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6721); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "<= " ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1216:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6727); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1217:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6733); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "instanceOf" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//EmersonTree.g:1220:1: relationalExpressionNoIn : ( shiftExpression | ^( relationalOpsNoIn relationalExpressionNoIn shiftExpression ) );
 */
static void
relationalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionNoInTop = pEmersonTree_relationalExpressionNoInPush(ctx);
    {
        {
            //  .//EmersonTree.g:1226:2: ( shiftExpression | ^( relationalOpsNoIn relationalExpressionNoIn shiftExpression ) )
            
            ANTLR3_UINT32 alt75;

            alt75=2;


            {
                int LA75_0 = LA(1);
                if ( (((LA75_0 >= CALL) && (LA75_0 <= DOT)) || LA75_0 == NEW || LA75_0 == VECTOR || LA75_0 == DOLLAR_EXPRESSION || ((LA75_0 >= LEFT_SHIFT) && (LA75_0 <= OBJ_LITERAL)) || ((LA75_0 >= DELETE_OP) && (LA75_0 <= NOT)) || LA75_0 == FUNC_EXPR || ((LA75_0 >= PAREN) && (LA75_0 <= PATTERN_LITERAL)) || ((LA75_0 >= Identifier) && (LA75_0 <= StringLiteral)) || LA75_0 == 213 || ((LA75_0 >= 215) && (LA75_0 <= 217))) ) 
                {
                    alt75=1;
                }
                else if ( (((LA75_0 >= LESS_THAN) && (LA75_0 <= INSTANCE_OF))) ) 
                {
                    alt75=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionNoInPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 75;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionNoInEx;
                }
            }
            switch (alt75) 
            {
        	case 1:
        	    // .//EmersonTree.g:1226:4: shiftExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn6753);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1227:5: ^( relationalOpsNoIn relationalExpressionNoIn shiftExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6768);
        	        relationalOpsNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6776);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            						  APP(" ");
        	            						  APP(	(SCOPE_TOP(relationalExpressionNoIn))->op);
        	            						  APP(" ");
        	            						
        	        }
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn6792);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    pEmersonTree_relationalExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start shiftOps
 * .//EmersonTree.g:1240:1: shiftOps : ( LEFT_SHIFT | RIGHT_SHIFT | TRIPLE_SHIFT );
 */
static void
shiftOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1241:1: ( LEFT_SHIFT | RIGHT_SHIFT | TRIPLE_SHIFT )
            
            ANTLR3_UINT32 alt76;

            alt76=3;

            switch ( LA(1) ) 
            {
            case LEFT_SHIFT:
            	{
            		alt76=1;
            	}
                break;
            case RIGHT_SHIFT:
            	{
            		alt76=2;
            	}
                break;
            case TRIPLE_SHIFT:
            	{
            		alt76=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 76;
                EXCEPTION->state        = 0;


                goto ruleshiftOpsEx;
            }

            switch (alt76) 
            {
        	case 1:
        	    // .//EmersonTree.g:1241:3: LEFT_SHIFT
        	    {
        	         MATCHT(LEFT_SHIFT, &FOLLOW_LEFT_SHIFT_in_shiftOps6813); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(shiftExpression))->op= "<<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1242:3: RIGHT_SHIFT
        	    {
        	         MATCHT(RIGHT_SHIFT, &FOLLOW_RIGHT_SHIFT_in_shiftOps6820); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(shiftExpression))->op= ">>" ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1243:3: TRIPLE_SHIFT
        	    {
        	         MATCHT(TRIPLE_SHIFT, &FOLLOW_TRIPLE_SHIFT_in_shiftOps6827); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(shiftExpression))->op= ">>>"; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftOpsEx; /* Prevent compiler warnings */
    ruleshiftOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end shiftOps */

/** 
 * $ANTLR start shiftExpression
 * .//EmersonTree.g:1246:1: shiftExpression : ( additiveExpression | ^( shiftOps e= shiftExpression additiveExpression ) );
 */
static void
shiftExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_shiftExpressionTop = pEmersonTree_shiftExpressionPush(ctx);
    {
        {
            //  .//EmersonTree.g:1251:2: ( additiveExpression | ^( shiftOps e= shiftExpression additiveExpression ) )
            
            ANTLR3_UINT32 alt77;

            alt77=2;


            {
                int LA77_0 = LA(1);
                if ( (((LA77_0 >= CALL) && (LA77_0 <= DOT)) || LA77_0 == NEW || LA77_0 == VECTOR || LA77_0 == DOLLAR_EXPRESSION || ((LA77_0 >= ADD_OP) && (LA77_0 <= OBJ_LITERAL)) || ((LA77_0 >= DELETE_OP) && (LA77_0 <= NOT)) || LA77_0 == FUNC_EXPR || ((LA77_0 >= PAREN) && (LA77_0 <= PATTERN_LITERAL)) || ((LA77_0 >= Identifier) && (LA77_0 <= StringLiteral)) || LA77_0 == 213 || ((LA77_0 >= 215) && (LA77_0 <= 217))) ) 
                {
                    alt77=1;
                }
                else if ( (((LA77_0 >= LEFT_SHIFT) && (LA77_0 <= TRIPLE_SHIFT))) ) 
                {
                    alt77=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_shiftExpressionPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 77;
                    EXCEPTION->state        = 0;


                    goto ruleshiftExpressionEx;
                }
            }
            switch (alt77) 
            {
        	case 1:
        	    // .//EmersonTree.g:1251:4: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression6843);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1252:4: ^( shiftOps e= shiftExpression additiveExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_shiftOps_in_shiftExpression6849);
        	        shiftOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_shiftExpression6859);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            						  APP(" ");
        	            						  APP(	(SCOPE_TOP(shiftExpression))->op);
        	            						  APP(" ");
        	            						
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression6875);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftExpressionEx; /* Prevent compiler warnings */
    ruleshiftExpressionEx: ;
    pEmersonTree_shiftExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end shiftExpression */

/** 
 * $ANTLR start additiveExpression
 * .//EmersonTree.g:1265:1: additiveExpression : ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) );
 */
static void
additiveExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1266:9: ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) )
            
            ANTLR3_UINT32 alt78;

            alt78=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 213:
            case 215:
            case 216:
            case 217:
            	{
            		alt78=1;
            	}
                break;
            case ADD_OP:
            	{
            		alt78=2;
            	}
                break;
            case SUB:
            	{
            		alt78=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 78;
                EXCEPTION->state        = 0;


                goto ruleadditiveExpressionEx;
            }

            switch (alt78) 
            {
        	case 1:
        	    // .//EmersonTree.g:1266:11: multiplicativeExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression6903);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1267:11: ^( ADD_OP e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(ADD_OP, &FOLLOW_ADD_OP_in_additiveExpression6916); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.plus( " );
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression6949);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression6979);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1280:11: ^( SUB e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(SUB, &FOLLOW_SUB_in_additiveExpression7022); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.minus( " );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression7053);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression7084);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multiplicativeExpression
 * .//EmersonTree.g:1296:1: multiplicativeExpression : ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) );
 */
static void
multiplicativeExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1308:2: ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) )
            
            ANTLR3_UINT32 alt79;

            alt79=4;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 213:
            case 215:
            case 216:
            case 217:
            	{
            		alt79=1;
            	}
                break;
            case MULT:
            	{
            		alt79=2;
            	}
                break;
            case DIV:
            	{
            		alt79=3;
            	}
                break;
            case MOD:
            	{
            		alt79=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 79;
                EXCEPTION->state        = 0;


                goto rulemultiplicativeExpressionEx;
            }

            switch (alt79) 
            {
        	case 1:
        	    // .//EmersonTree.g:1308:4: unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression7129);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1309:4: ^( MULT multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MULT, &FOLLOW_MULT_in_multiplicativeExpression7136); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression7144);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            					  APP(" * ");
        	            					 
        	            					
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression7160);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1317:4: ^( DIV multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(DIV, &FOLLOW_DIV_in_multiplicativeExpression7173); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression7175);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" / ");
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression7179);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1318:4: ^( MOD multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MOD, &FOLLOW_MOD_in_multiplicativeExpression7186); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression7188);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" % ");
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression7192);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start unaryOps
 * .//EmersonTree.g:1321:1: unaryOps : ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT );
 */
static void
unaryOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1322:1: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= DELETE_OP) && (LA(1) <= NOT)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unaryOps0);    goto ruleunaryOpsEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//EmersonTree.g:1334:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );
 */
static void
unaryExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1335:9: ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) )
            
            ANTLR3_UINT32 alt81;

            alt81=2;

            alt81 = cdfa81.predict(ctx, RECOGNIZER, ISTREAM, &cdfa81);
            if  (HASEXCEPTION())
            {
                goto ruleunaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt81) 
            {
        	case 1:
        	    // .//EmersonTree.g:1335:11: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression7254);
        	        postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1336:4: ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression )
        	    {

        	        // .//EmersonTree.g:1338:6: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT )
        	        {
        	            int alt80=9;
        	            switch ( LA(1) ) 
        	            {
        	            case DELETE_OP:
        	            	{
        	            		alt80=1;
        	            	}
        	                break;
        	            case VOID:
        	            	{
        	            		alt80=2;
        	            	}
        	                break;
        	            case TYPEOF:
        	            	{
        	            		alt80=3;
        	            	}
        	                break;
        	            case PLUSPLUS:
        	            	{
        	            		alt80=4;
        	            	}
        	                break;
        	            case MINUSMINUS:
        	            	{
        	            		alt80=5;
        	            	}
        	                break;
        	            case UNARY_PLUS:
        	            	{
        	            		alt80=6;
        	            	}
        	                break;
        	            case UNARY_MINUS:
        	            	{
        	            		alt80=7;
        	            	}
        	                break;
        	            case COMPLEMENT:
        	            	{
        	            		alt80=8;
        	            	}
        	                break;
        	            case NOT:
        	            	{
        	            		alt80=9;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 80;
        	                EXCEPTION->state        = 0;


        	                goto ruleunaryExpressionEx;
        	            }

        	            switch (alt80) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1339:8: DELETE_OP
        	        	    {
        	        	         MATCHT(DELETE_OP, &FOLLOW_DELETE_OP_in_unaryExpression7278); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("delete ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:1340:10: VOID
        	        	    {
        	        	         MATCHT(VOID, &FOLLOW_VOID_in_unaryExpression7300); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	               APP("void");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:1341:10: TYPEOF
        	        	    {
        	        	         MATCHT(TYPEOF, &FOLLOW_TYPEOF_in_unaryExpression7322); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("typeof ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:1342:10: PLUSPLUS
        	        	    {
        	        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_unaryExpression7342); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("++");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:1343:10: MINUSMINUS
        	        	    {
        	        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_unaryExpression7360); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("--");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // .//EmersonTree.g:1344:10: UNARY_PLUS
        	        	    {
        	        	         MATCHT(UNARY_PLUS, &FOLLOW_UNARY_PLUS_in_unaryExpression7376); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("+");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // .//EmersonTree.g:1345:10: UNARY_MINUS
        	        	    {
        	        	         MATCHT(UNARY_MINUS, &FOLLOW_UNARY_MINUS_in_unaryExpression7392); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("-");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // .//EmersonTree.g:1346:10: COMPLEMENT
        	        	    {
        	        	         MATCHT(COMPLEMENT, &FOLLOW_COMPLEMENT_in_unaryExpression7407); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("~");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // .//EmersonTree.g:1347:10: NOT
        	        	    {
        	        	         MATCHT(NOT, &FOLLOW_NOT_in_unaryExpression7423); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("!");
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression7452);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start postfixExpression
 * .//EmersonTree.g:1356:1: postfixExpression : ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) );
 */
static void
postfixExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1357:9: ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) )
            
            ANTLR3_UINT32 alt82;

            alt82=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 213:
            case 215:
            case 216:
            case 217:
            	{
            		alt82=1;
            	}
                break;
            case MINUSMINUS:
            	{
            		alt82=2;
            	}
                break;
            case PLUSPLUS:
            	{
            		alt82=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 82;
                EXCEPTION->state        = 0;


                goto rulepostfixExpressionEx;
            }

            switch (alt82) 
            {
        	case 1:
        	    // .//EmersonTree.g:1357:10: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression7477);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1358:11: ^( MINUSMINUS leftHandSideExpression )
        	    {
        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_postfixExpression7490); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression7492);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("--");
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1359:4: ^( PLUSPLUS leftHandSideExpression )
        	    {
        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_postfixExpression7501); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression7503);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("++");
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start primaryExpression
 * .//EmersonTree.g:1362:1: primaryExpression : ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | ^( PAREN expression ) | vectorLiteral );
 */
static void
primaryExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier11;

    /* Initialize rule variables
     */


    Identifier11       = NULL;

    {
        {
            //  .//EmersonTree.g:1363:2: ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | ^( PAREN expression ) | vectorLiteral )
            
            ANTLR3_UINT32 alt83;

            alt83=9;

            switch ( LA(1) ) 
            {
            case 213:
            	{
            		alt83=1;
            	}
                break;
            case Identifier:
            	{
            		alt83=2;
            	}
                break;
            case DOLLAR_EXPRESSION:
            	{
            		alt83=3;
            	}
                break;
            case NumericLiteral:
            case StringLiteral:
            case 215:
            case 216:
            case 217:
            	{
            		alt83=4;
            	}
                break;
            case ARRAY_LITERAL:
            	{
            		alt83=5;
            	}
                break;
            case OBJ_LITERAL:
            	{
            		alt83=6;
            	}
                break;
            case PATTERN_LITERAL:
            	{
            		alt83=7;
            	}
                break;
            case PAREN:
            	{
            		alt83=8;
            	}
                break;
            case VECTOR:
            	{
            		alt83=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 83;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt83) 
            {
        	case 1:
        	    // .//EmersonTree.g:1363:4: 'this'
        	    {
        	         MATCHT(213, &FOLLOW_213_in_primaryExpression7524); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("this");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1364:4: Identifier
        	    {
        	        Identifier11 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression7531); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	                        APP((const char*)(Identifier11->getText(Identifier11))->chars);
        	            	  
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1368:11: dollarExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression7549);
        	        dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1369:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression7554);
        	        literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1370:4: arrayLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression7559);
        	        arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1371:4: objectLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression7564);
        	        objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:1372:11: patternLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_patternLiteral_in_primaryExpression7576);
        	        patternLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:1373:4: ^( PAREN expression )
        	    {
        	         MATCHT(PAREN, &FOLLOW_PAREN_in_primaryExpression7582); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression7586);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )");
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // .//EmersonTree.g:1374:11: vectorLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_vectorLiteral_in_primaryExpression7601);
        	        vectorLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start vectorLiteral
 * .//EmersonTree.g:1379:1: vectorLiteral : ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) ) ;
 */
static void
vectorLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1380:9: ( ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) ) )
        // .//EmersonTree.g:1380:11: ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) )
        {
             MATCHT(VECTOR, &FOLLOW_VECTOR_in_vectorLiteral7622); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("( new util.Vec3(");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:1384:13: (exp1= vectorLiteralField )
            // .//EmersonTree.g:1384:14: exp1= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral7653);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1389:13: (exp2= vectorLiteralField )
            // .//EmersonTree.g:1389:14: exp2= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral7700);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1394:13: (exp3= vectorLiteralField )
            // .//EmersonTree.g:1394:14: exp3= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral7747);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(") )");
                                  
                }

            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralEx; /* Prevent compiler warnings */
    rulevectorLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end vectorLiteral */

/** 
 * $ANTLR start vectorLiteralField
 * .//EmersonTree.g:1404:1: vectorLiteralField : ( ternaryExpression | shiftExpression | NumericLiteral | callExpression | memberExpression );
 */
static void
vectorLiteralField(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    NumericLiteral12;

    /* Initialize rule variables
     */


    NumericLiteral12       = NULL;

    {
        {
            //  .//EmersonTree.g:1405:9: ( ternaryExpression | shiftExpression | NumericLiteral | callExpression | memberExpression )
            
            ANTLR3_UINT32 alt84;

            alt84=5;

            alt84 = cdfa84.predict(ctx, RECOGNIZER, ISTREAM, &cdfa84);
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralFieldEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt84) 
            {
        	case 1:
        	    // .//EmersonTree.g:1405:11: ternaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_vectorLiteralField7832);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1406:11: shiftExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_vectorLiteralField7844);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1407:11: NumericLiteral
        	    {
        	        NumericLiteral12 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_vectorLiteralField7856); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP((const char*)(NumericLiteral12->getText(NumericLiteral12))->chars);
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1408:11: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_vectorLiteralField7870);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1409:11: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_vectorLiteralField7882);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralFieldEx; /* Prevent compiler warnings */
    rulevectorLiteralFieldEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end vectorLiteralField */

/** 
 * $ANTLR start dollarExpression
 * .//EmersonTree.g:1413:1: dollarExpression : ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static void
dollarExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier13;

    /* Initialize rule variables
     */


    Identifier13       = NULL;

    {
        // .//EmersonTree.g:1414:9: ( ^( DOLLAR_EXPRESSION Identifier ) )
        // .//EmersonTree.g:1414:11: ^( DOLLAR_EXPRESSION Identifier )
        {
             MATCHT(DOLLAR_EXPRESSION, &FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7917); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                if (insideWhenPred)
                                    APP("'),");

                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier13 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression7945); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier13->getText(Identifier13))->chars);

                                if (insideWhenPred)
                                   APP(",util.create_quoted('");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//EmersonTree.g:1433:1: arrayLiteral : ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( expression ) ) | ^( ARRAY_LITERAL expression ( expression )* ) );
 */
static void
arrayLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1434:3: ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( expression ) ) | ^( ARRAY_LITERAL expression ( expression )* ) )
            
            ANTLR3_UINT32 alt86;

            alt86=3;


            {
                int LA86_0 = LA(1);
                if ( (LA86_0 == ARRAY_LITERAL) ) 
                {

                    {
                        int LA86_1 = LA(2);
                        if ( (synpred185_EmersonTree(ctx)) ) 
                        {
                            alt86=1;
                        }
                        else if ( (synpred186_EmersonTree(ctx)) ) 
                        {
                            alt86=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt86=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 86;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 86;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt86) 
            {
        	case 1:
        	    // .//EmersonTree.g:1434:5: ^( ARRAY_LITERAL )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral8010); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("[ ]"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1435:5: ^( ARRAY_LITERAL ( expression ) )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral8020); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1437:8: ( expression )
        	        // .//EmersonTree.g:1437:9: expression
        	        {
        	            FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral8039);
        	            expression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ]"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1440:5: ^( ARRAY_LITERAL expression ( expression )* )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral8062); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("[ ");
        	                 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral8076);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1446:6: ( expression )*

        	        for (;;)
        	        {
        	            int alt85=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA85_0 = LA(1);
        	                if ( (((LA85_0 >= EXPR_LIST) && (LA85_0 <= COND_EXPR))) ) 
        	                {
        	                    alt85=1;
        	                }

        	            }
        	            switch (alt85) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1447:7: expression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                     APP(", ");
        	        	                  
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral8105);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop85;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop85: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP(" ] ");
        	                 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//EmersonTree.g:1459:1: objectLiteral : ( ^( OBJ_LITERAL ) | ^( OBJ_LITERAL ( propertyNameAndValue ) ) | ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static void
objectLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1460:3: ( ^( OBJ_LITERAL ) | ^( OBJ_LITERAL ( propertyNameAndValue ) ) | ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt88;

            alt88=3;


            {
                int LA88_0 = LA(1);
                if ( (LA88_0 == OBJ_LITERAL) ) 
                {

                    {
                        int LA88_1 = LA(2);
                        if ( (synpred188_EmersonTree(ctx)) ) 
                        {
                            alt88=1;
                        }
                        else if ( (synpred189_EmersonTree(ctx)) ) 
                        {
                            alt88=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt88=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 88;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 88;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt88) 
            {
        	case 1:
        	    // .//EmersonTree.g:1460:4: ^( OBJ_LITERAL )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral8142); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("{ }");
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1461:4: ^( OBJ_LITERAL ( propertyNameAndValue ) )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral8152); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("{ "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1464:13: ( propertyNameAndValue )
        	        // .//EmersonTree.g:1464:14: propertyNameAndValue
        	        {
        	            FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral8189);
        	            propertyNameAndValue(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" }"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1468:3: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral8215); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("{ ");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral8233);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1472:5: ( propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt87=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA87_0 = LA(1);
        	                if ( (LA87_0 == NAME_VALUE) ) 
        	                {
        	                    alt87=1;
        	                }

        	            }
        	            switch (alt87) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1473:7: propertyNameAndValue
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             
        	        	            					  APP(", "); 
        	        	            					
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral8262);
        	        	        propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop87;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop87: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	            				  APP(" } "); 
        	            				
        	            				
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start patternLiteral
 * .//EmersonTree.g:1490:1: patternLiteral : ( ^( PATTERN_LITERAL ) | ^( PATTERN_LITERAL nameValueProto ) | ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) );
 */
static void
patternLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1492:3: ( ^( PATTERN_LITERAL ) | ^( PATTERN_LITERAL nameValueProto ) | ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) )
            
            ANTLR3_UINT32 alt90;

            alt90=3;


            {
                int LA90_0 = LA(1);
                if ( (LA90_0 == PATTERN_LITERAL) ) 
                {

                    {
                        int LA90_1 = LA(2);
                        if ( (synpred191_EmersonTree(ctx)) ) 
                        {
                            alt90=1;
                        }
                        else if ( (synpred192_EmersonTree(ctx)) ) 
                        {
                            alt90=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt90=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 90;
                            EXCEPTION->state        = 1;


                            goto rulepatternLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 90;
                    EXCEPTION->state        = 0;


                    goto rulepatternLiteralEx;
                }
            }
            switch (alt90) 
            {
        	case 1:
        	    // .//EmersonTree.g:1492:4: ^( PATTERN_LITERAL )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral8305); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("new util.Pattern()");
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1493:4: ^( PATTERN_LITERAL nameValueProto )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral8315); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral8324);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1496:4: ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral8336); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ ");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral8356);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1500:5: ( nameValueProto )*

        	        for (;;)
        	        {
        	            int alt89=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA89_0 = LA(1);
        	                if ( (((LA89_0 >= NAME_VALUE_PROTO) && (LA89_0 <= BLANK_NAME_VAL_PROT))) ) 
        	                {
        	                    alt89=1;
        	                }

        	            }
        	            switch (alt89) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1501:7: nameValueProto
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             
        	        	            					  APP(", "); 
        	        	            					
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral8385);
        	        	        nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop89;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop89: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	            				  APP(" ] "); 
        	            				
        	            				
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepatternLiteralEx; /* Prevent compiler warnings */
    rulepatternLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end patternLiteral */

/** 
 * $ANTLR start nameValueProto
 * .//EmersonTree.g:1518:1: nameValueProto : ( ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE expression ) )? ( ^( PROTO expression ) )? ) | ^( BLANK_NAME_VAL_PROT ) );
 */
static void
nameValueProto(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1519:3: ( ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE expression ) )? ( ^( PROTO expression ) )? ) | ^( BLANK_NAME_VAL_PROT ) )
            
            ANTLR3_UINT32 alt93;

            alt93=2;


            {
                int LA93_0 = LA(1);
                if ( (LA93_0 == NAME_VALUE_PROTO) ) 
                {
                    alt93=1;
                }
                else if ( (LA93_0 == BLANK_NAME_VAL_PROT) ) 
                {
                    alt93=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 93;
                    EXCEPTION->state        = 0;


                    goto rulenameValueProtoEx;
                }
            }
            switch (alt93) 
            {
        	case 1:
        	    // .//EmersonTree.g:1519:5: ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE expression ) )? ( ^( PROTO expression ) )? )
        	    {
        	         MATCHT(NAME_VALUE_PROTO, &FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8450); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("new util.Pattern( ");
        	                      
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(NAME, &FOLLOW_NAME_in_nameValueProto8473); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyName_in_nameValueProto8485);
        	        propertyName(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1527:10: ( ^( VALUE expression ) )?
        	        {
        	            int alt91=2;
        	            {
        	                int LA91_0 = LA(1);
        	                if ( (LA91_0 == VALUE) ) 
        	                {
        	                    alt91=1;
        	                }
        	            }
        	            switch (alt91) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1528:10: ^( VALUE expression )
        	        	    {
        	        	         MATCHT(VALUE, &FOLLOW_VALUE_in_nameValueProto8528); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                          APP(", ");
        	        	                        
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_nameValueProto8557);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//EmersonTree.g:1536:10: ( ^( PROTO expression ) )?
        	        {
        	            int alt92=2;
        	            {
        	                int LA92_0 = LA(1);
        	                if ( (LA92_0 == PROTO) ) 
        	                {
        	                    alt92=1;
        	                }
        	            }
        	            switch (alt92) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1538:10: ^( PROTO expression )
        	        	    {
        	        	         MATCHT(PROTO, &FOLLOW_PROTO_in_nameValueProto8606); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                          APP(", ");
        	        	                        
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_nameValueProto8634);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(" )");
        	                     
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1549:5: ^( BLANK_NAME_VAL_PROT )
        	    {
        	         MATCHT(BLANK_NAME_VAL_PROT, &FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8675); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("new util.Pattern()");
        	                    
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenameValueProtoEx; /* Prevent compiler warnings */
    rulenameValueProtoEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end nameValueProto */

/** 
 * $ANTLR start propertyNameAndValue
 * .//EmersonTree.g:1556:1: propertyNameAndValue : ^( NAME_VALUE propertyName expression ) ;
 */
static void
propertyNameAndValue(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1557:2: ( ^( NAME_VALUE propertyName expression ) )
        // .//EmersonTree.g:1557:4: ^( NAME_VALUE propertyName expression )
        {
             MATCHT(NAME_VALUE, &FOLLOW_NAME_VALUE_in_propertyNameAndValue8705); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue8718);
            propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                	APP(" : ");
            }
            FOLLOWPUSH(FOLLOW_expression_in_propertyNameAndValue8737);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start propertyName
 * .//EmersonTree.g:1563:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static void
propertyName(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier14;
    pANTLR3_BASE_TREE    StringLiteral15;
    pANTLR3_BASE_TREE    NumericLiteral16;

    /* Initialize rule variables
     */


    Identifier14       = NULL;
    StringLiteral15       = NULL;
    NumericLiteral16       = NULL;

    {
        {
            //  .//EmersonTree.g:1564:2: ( Identifier | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt94;

            alt94=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            	{
            		alt94=1;
            	}
                break;
            case StringLiteral:
            	{
            		alt94=2;
            	}
                break;
            case NumericLiteral:
            	{
            		alt94=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 94;
                EXCEPTION->state        = 0;


                goto rulepropertyNameEx;
            }

            switch (alt94) 
            {
        	case 1:
        	    // .//EmersonTree.g:1564:4: Identifier
        	    {
        	        Identifier14 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyName8749); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP((const char*)(Identifier14->getText(Identifier14))->chars); 
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1565:4: StringLiteral
        	    {
        	        StringLiteral15 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_propertyName8756); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         APP((const char*)(StringLiteral15->getText(StringLiteral15))->chars);  
        	                      
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1569:4: NumericLiteral
        	    {
        	        NumericLiteral16 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_propertyName8773); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP((const char*)(NumericLiteral16->getText(NumericLiteral16))->chars);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//EmersonTree.g:1573:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static void
literal(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    StringLiteral17;
    pANTLR3_BASE_TREE    NumericLiteral18;

    /* Initialize rule variables
     */


    StringLiteral17       = NULL;
    NumericLiteral18       = NULL;

    {
        {
            //  .//EmersonTree.g:1574:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt95;

            alt95=5;

            switch ( LA(1) ) 
            {
            case 215:
            	{
            		alt95=1;
            	}
                break;
            case 216:
            	{
            		alt95=2;
            	}
                break;
            case 217:
            	{
            		alt95=3;
            	}
                break;
            case StringLiteral:
            	{
            		alt95=4;
            	}
                break;
            case NumericLiteral:
            	{
            		alt95=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 95;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;
            }

            switch (alt95) 
            {
        	case 1:
        	    // .//EmersonTree.g:1574:4: 'null'
        	    {
        	         MATCHT(215, &FOLLOW_215_in_literal8787); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("null");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1575:4: 'true'
        	    {
        	         MATCHT(216, &FOLLOW_216_in_literal8794); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("true"); 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1576:4: 'false'
        	    {
        	         MATCHT(217, &FOLLOW_217_in_literal8801); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP("false");
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1577:4: StringLiteral
        	    {
        	        StringLiteral17 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_literal8807); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                          const char* input = (const char*)(StringLiteral17->getText(StringLiteral17))->chars;
        	                          int len = (StringLiteral17->getText(StringLiteral17))->size;
        	                          char firstChar = *input;
        	                          if(firstChar == '@')
        	                          {
        	                            std::string str_input(input,len);
        	                            str_input = str_input.substr(1, str_input.size() -2);
        	                            std::string escaped = emerson_escapeMultiline(str_input.c_str());
        	                            APP("\"");
        	                            APP(escaped.c_str());
        	                            APP("\"");
        	                          }
        	                          else APP((const char*)(StringLiteral17->getText(StringLiteral17))->chars);
        	                    
        	                    
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1594:4: NumericLiteral
        	    {
        	        NumericLiteral18 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_literal8824); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP((const char*)(NumericLiteral18->getText(NumericLiteral18))->chars);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end literal */

// $ANTLR start synpred30_EmersonTree
static void synpred30_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:283:14: ( statement )
    // .//EmersonTree.g:283:14: statement
    {
        FOLLOWPUSH(FOLLOW_statement_in_synpred30_EmersonTree1612);
        statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred30_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred30_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred30_EmersonTreeEx: ;

}
// $ANTLR end synpred30_EmersonTree

// $ANTLR start synpred47_EmersonTree
static void synpred47_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:512:7: ( ^( CASE expression ( statementList )? ( caseClause )? ) )
    // .//EmersonTree.g:512:7: ^( CASE expression ( statementList )? ( caseClause )? )
    {
         MATCHT(CASE, &FOLLOW_CASE_in_synpred47_EmersonTree2920); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred47_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred47_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expression_in_synpred47_EmersonTree2940);
        expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred47_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//EmersonTree.g:520:9: ( statementList )?
        {
            int alt97=2;
            {
                int LA97_0 = LA(1);
                if ( (LA97_0 == SLIST) ) 
                {
                    alt97=1;
                }
            }
            switch (alt97) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: statementList
        	    {
        	        FOLLOWPUSH(FOLLOW_statementList_in_synpred47_EmersonTree2960);
        	        statementList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred47_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//EmersonTree.g:521:9: ( caseClause )?
        {
            int alt98=2;
            {
                int LA98_0 = LA(1);
                if ( (LA98_0 == CASE) ) 
                {
                    alt98=1;
                }
            }
            switch (alt98) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: caseClause
        	    {
        	        FOLLOWPUSH(FOLLOW_caseClause_in_synpred47_EmersonTree2971);
        	        caseClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred47_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred47_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred47_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred47_EmersonTreeEx: ;

}
// $ANTLR end synpred47_EmersonTree

// $ANTLR start synpred60_EmersonTree
static void synpred60_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:807:3: ( memberExpression )
    // .//EmersonTree.g:807:3: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred60_EmersonTree4317);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred60_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred60_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred60_EmersonTreeEx: ;

}
// $ANTLR end synpred60_EmersonTree

// $ANTLR start synpred61_EmersonTree
static void synpred61_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:812:4: ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression ) )
    // .//EmersonTree.g:812:4: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression )
    {
         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_synpred61_EmersonTree4340); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred61_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred61_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred61_EmersonTree4356);
        memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred61_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred61_EmersonTree4373);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred61_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred61_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred61_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred61_EmersonTreeEx: ;

}
// $ANTLR end synpred61_EmersonTree

// $ANTLR start synpred62_EmersonTree
static void synpred62_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:829:3: ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression ) )
    // .//EmersonTree.g:829:3: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression )
    {
         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_synpred62_EmersonTree4401); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4413);
        memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred62_EmersonTree4426);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred62_EmersonTree4438);
        memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred62_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred62_EmersonTreeEx: ;

}
// $ANTLR end synpred62_EmersonTree

// $ANTLR start synpred88_EmersonTree
static void synpred88_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:975:4: ( callExpression )
    // .//EmersonTree.g:975:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred88_EmersonTree5457);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred88_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred88_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred88_EmersonTreeEx: ;

}
// $ANTLR end synpred88_EmersonTree

// $ANTLR start synpred89_EmersonTree
static void synpred89_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:980:4: ( memberExpression )
    // .//EmersonTree.g:980:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred89_EmersonTree5474);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred89_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred89_EmersonTreeEx: ;

}
// $ANTLR end synpred89_EmersonTree

// $ANTLR start synpred92_EmersonTree
static void synpred92_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:996:3: ( ^( DOT memberExpression propertyReferenceSuffix1 ) )
    // .//EmersonTree.g:996:3: ^( DOT memberExpression propertyReferenceSuffix1 )
    {
         MATCHT(DOT, &FOLLOW_DOT_in_synpred92_EmersonTree5525); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred92_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred92_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred92_EmersonTree5527);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred92_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred92_EmersonTree5531);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred92_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred92_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred92_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred92_EmersonTreeEx: ;

}
// $ANTLR end synpred92_EmersonTree

// $ANTLR start synpred96_EmersonTree
static void synpred96_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1008:4: ( ^( CALL memberExpression arguments ) )
    // .//EmersonTree.g:1008:4: ^( CALL memberExpression arguments )
    {
         MATCHT(CALL, &FOLLOW_CALL_in_synpred96_EmersonTree5597); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred96_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred96_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred96_EmersonTree5599);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred96_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_arguments_in_synpred96_EmersonTree5601);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred96_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred96_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred96_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred96_EmersonTreeEx: ;

}
// $ANTLR end synpred96_EmersonTree

// $ANTLR start synpred101_EmersonTree
static void synpred101_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1023:5: ( ^( ARGLIST ) )
    // .//EmersonTree.g:1023:5: ^( ARGLIST )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred101_EmersonTree5678); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred101_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred101_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred101_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred101_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred101_EmersonTreeEx: ;

}
// $ANTLR end synpred101_EmersonTree

// $ANTLR start synpred102_EmersonTree
static void synpred102_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1024:5: ( ^( ARGLIST ( expression ) ) )
    // .//EmersonTree.g:1024:5: ^( ARGLIST ( expression ) )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred102_EmersonTree5688); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred102_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred102_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1026:8: ( expression )
        // .//EmersonTree.g:1026:9: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_synpred102_EmersonTree5708);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred102_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred102_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred102_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred102_EmersonTreeEx: ;

}
// $ANTLR end synpred102_EmersonTree

// $ANTLR start synpred162_EmersonTree
static void synpred162_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1335:11: ( postfixExpression )
    // .//EmersonTree.g:1335:11: postfixExpression
    {
        FOLLOWPUSH(FOLLOW_postfixExpression_in_synpred162_EmersonTree7254);
        postfixExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred162_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred162_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred162_EmersonTreeEx: ;

}
// $ANTLR end synpred162_EmersonTree

// $ANTLR start synpred182_EmersonTree
static void synpred182_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1406:11: ( shiftExpression )
    // .//EmersonTree.g:1406:11: shiftExpression
    {
        FOLLOWPUSH(FOLLOW_shiftExpression_in_synpred182_EmersonTree7844);
        shiftExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred182_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred182_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred182_EmersonTreeEx: ;

}
// $ANTLR end synpred182_EmersonTree

// $ANTLR start synpred183_EmersonTree
static void synpred183_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1407:11: ( NumericLiteral )
    // .//EmersonTree.g:1407:11: NumericLiteral
    {
         MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_synpred183_EmersonTree7856); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred183_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred183_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred183_EmersonTreeEx: ;

}
// $ANTLR end synpred183_EmersonTree

// $ANTLR start synpred184_EmersonTree
static void synpred184_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1408:11: ( callExpression )
    // .//EmersonTree.g:1408:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred184_EmersonTree7870);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred184_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred184_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred184_EmersonTreeEx: ;

}
// $ANTLR end synpred184_EmersonTree

// $ANTLR start synpred185_EmersonTree
static void synpred185_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1434:5: ( ^( ARRAY_LITERAL ) )
    // .//EmersonTree.g:1434:5: ^( ARRAY_LITERAL )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred185_EmersonTree8010); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred185_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred185_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred185_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred185_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred185_EmersonTreeEx: ;

}
// $ANTLR end synpred185_EmersonTree

// $ANTLR start synpred186_EmersonTree
static void synpred186_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1435:5: ( ^( ARRAY_LITERAL ( expression ) ) )
    // .//EmersonTree.g:1435:5: ^( ARRAY_LITERAL ( expression ) )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred186_EmersonTree8020); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred186_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred186_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1437:8: ( expression )
        // .//EmersonTree.g:1437:9: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_synpred186_EmersonTree8039);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred186_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred186_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred186_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred186_EmersonTreeEx: ;

}
// $ANTLR end synpred186_EmersonTree

// $ANTLR start synpred188_EmersonTree
static void synpred188_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1460:4: ( ^( OBJ_LITERAL ) )
    // .//EmersonTree.g:1460:4: ^( OBJ_LITERAL )
    {
         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_synpred188_EmersonTree8142); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred188_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred188_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred188_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred188_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred188_EmersonTreeEx: ;

}
// $ANTLR end synpred188_EmersonTree

// $ANTLR start synpred189_EmersonTree
static void synpred189_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1461:4: ( ^( OBJ_LITERAL ( propertyNameAndValue ) ) )
    // .//EmersonTree.g:1461:4: ^( OBJ_LITERAL ( propertyNameAndValue ) )
    {
         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_synpred189_EmersonTree8152); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred189_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred189_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1464:13: ( propertyNameAndValue )
        // .//EmersonTree.g:1464:14: propertyNameAndValue
        {
            FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred189_EmersonTree8189);
            propertyNameAndValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred189_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred189_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred189_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred189_EmersonTreeEx: ;

}
// $ANTLR end synpred189_EmersonTree

// $ANTLR start synpred191_EmersonTree
static void synpred191_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1492:4: ( ^( PATTERN_LITERAL ) )
    // .//EmersonTree.g:1492:4: ^( PATTERN_LITERAL )
    {
         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_synpred191_EmersonTree8305); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred191_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred191_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred191_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred191_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred191_EmersonTreeEx: ;

}
// $ANTLR end synpred191_EmersonTree

// $ANTLR start synpred192_EmersonTree
static void synpred192_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1493:4: ( ^( PATTERN_LITERAL nameValueProto ) )
    // .//EmersonTree.g:1493:4: ^( PATTERN_LITERAL nameValueProto )
    {
         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_synpred192_EmersonTree8315); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred192_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred192_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_nameValueProto_in_synpred192_EmersonTree8324);
        nameValueProto(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred192_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred192_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred192_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred192_EmersonTreeEx: ;

}
// $ANTLR end synpred192_EmersonTree
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred188_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred188_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred30_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred30_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred88_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred88_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred185_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred185_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred186_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred186_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred102_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred102_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred96_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred96_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred92_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred92_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred192_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred192_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred189_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred189_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred89_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred89_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred47_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred47_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred162_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred162_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred62_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred62_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred191_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred191_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred183_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred183_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred60_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred60_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred101_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred101_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred182_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred182_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred184_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred184_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred61_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred61_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
