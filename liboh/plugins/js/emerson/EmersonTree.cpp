/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//EmersonTree.g
 *     -                            On : 2011-06-10 17:33:58
 *     -           for the tree parser : EmersonTreeTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

    #include <stdlib.h>
    #include <string.h>
    #include <antlr3.h>
    #include "Util.h"
    #define APP(s)  program_string->append(program_string, s);

    
    // #define CHECK_RESOURCES()               \
    // {                                       \
    // APP("(function()\n");                   \
    // APP("{ \n");                            \
    // APP("var tmp = function()\n");          \
    // APP("{\n");                             \
    // APP("return this;");                    \
    // APP("};");                              \
    // APP("var tmpGlobal = tmp();");          \
    // APP("if (! tmpGlobal.__checkResources8_8_3_1__())"); \
    // APP("throw '__resource_error__';");     \
    // APP("})();");                           \
    // }

    #define CHECK_RESOURCES()                 \
    {                                         \
    APP("\nif ( ! __checkResources8_8_3_1__() )\n");  \
    APP("{ \nthrow '__resource_error__'; \n}\n");   \
    }


    
    
    #ifndef __SIRIKATA_INSIDE_WHEN_PRED__
    #define __SIRIKATA_INSIDE_WHEN_PRED__
    static bool insideWhenPred = false;
    #endif

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonTree.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonTree_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonTree_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonTree_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpression scope set 
 */
static pEmersonTree_assignmentExpression_SCOPE   pEmersonTree_assignmentExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpression_SCOPE
pEmersonTree_assignmentExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionStack->size(ctx->pEmersonTree_assignmentExpressionStack) > ctx->pEmersonTree_assignmentExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE)ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionStack->push(ctx->pEmersonTree_assignmentExpressionStack, newAttributes, (void (*)(void *))assignmentExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpressionNoIn scope set 
 */
static pEmersonTree_assignmentExpressionNoIn_SCOPE   pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpressionNoIn_SCOPE
pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionNoInStack->size(ctx->pEmersonTree_assignmentExpressionNoInStack) > ctx->pEmersonTree_assignmentExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE)ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionNoInStack->push(ctx->pEmersonTree_assignmentExpressionNoInStack, newAttributes, (void (*)(void *))assignmentExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpression scope set 
 */
static pEmersonTree_relationalExpression_SCOPE   pEmersonTree_relationalExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpression_SCOPE
pEmersonTree_relationalExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionStack->size(ctx->pEmersonTree_relationalExpressionStack) > ctx->pEmersonTree_relationalExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE)ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionStack->push(ctx->pEmersonTree_relationalExpressionStack, newAttributes, (void (*)(void *))relationalExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpressionNoIn scope set 
 */
static pEmersonTree_relationalExpressionNoIn_SCOPE   pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpressionNoIn_SCOPE
pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionNoInStack->size(ctx->pEmersonTree_relationalExpressionNoInStack) > ctx->pEmersonTree_relationalExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE)ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionNoInStack->push(ctx->pEmersonTree_relationalExpressionNoInStack, newAttributes, (void (*)(void *))relationalExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonTreeTokenNames[202+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "VECTOR",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_BLOCK",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "ADD_OP",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE_OP",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "EXPR_LIST",
        (pANTLR3_UINT8) "COND_EXPR",
        (pANTLR3_UINT8) "COND_EXPR_NOIN",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_SEND",
        (pANTLR3_UINT8) "MESSAGE_SEND_WITHOUT_SENDER",
        (pANTLR3_UINT8) "MESSAGE_SEND_WITH_SENDER",
        (pANTLR3_UINT8) "MESSAGE_RECV",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "PATTERN_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE_PROTO",
        (pANTLR3_UINT8) "BLANK_NAME_VAL_PROT",
        (pANTLR3_UINT8) "NAME",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "VERBATIM",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "VerbatimStringCharacter",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionStack
 */
void
pEmersonTree_assignmentExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpression)->free != NULL)
	{
        SCOPE_TOP(assignmentExpression)->free(SCOPE_TOP(assignmentExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit--;
    SCOPE_TOP(assignmentExpression) = (pEmersonTree_assignmentExpression_SCOPE)(ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionNoInStack
 */
void
pEmersonTree_assignmentExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(assignmentExpressionNoIn)->free(SCOPE_TOP(assignmentExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit--;
    SCOPE_TOP(assignmentExpressionNoIn) = (pEmersonTree_assignmentExpressionNoIn_SCOPE)(ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionStack
 */
void
pEmersonTree_relationalExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpression)->free != NULL)
	{
        SCOPE_TOP(relationalExpression)->free(SCOPE_TOP(relationalExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionStack_limit--;
    SCOPE_TOP(relationalExpression) = (pEmersonTree_relationalExpression_SCOPE)(ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionNoInStack
 */
void
pEmersonTree_relationalExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(relationalExpressionNoIn)->free(SCOPE_TOP(relationalExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit--;
    SCOPE_TOP(relationalExpressionNoIn) = (pEmersonTree_relationalExpressionNoIn_SCOPE)(ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit - 1));
}


// Forward declare the locally static matching functions we have generated.
//
static pANTLR3_STRING	program    (pEmersonTree ctx);
static void	sourceElements    (pEmersonTree ctx);
static void	sourceElement    (pEmersonTree ctx);
static void	functionDeclaration    (pEmersonTree ctx);
static void	functionExpression    (pEmersonTree ctx);
static void	formalParameterList    (pEmersonTree ctx);
static void	functionBody    (pEmersonTree ctx);
static void	statement    (pEmersonTree ctx);
static void	noOpStatement    (pEmersonTree ctx);
static void	statementBlock    (pEmersonTree ctx);
static void	statementList    (pEmersonTree ctx);
static void	variableStatement    (pEmersonTree ctx);
static void	variableDeclarationList    (pEmersonTree ctx);
static void	variableDeclarationListNoIn    (pEmersonTree ctx);
static void	variableDeclaration    (pEmersonTree ctx);
static void	variableDeclarationNoIn    (pEmersonTree ctx);
static void	initialiser    (pEmersonTree ctx);
static void	initialiserNoIn    (pEmersonTree ctx);
static void	expressionStatement    (pEmersonTree ctx);
static void	ifStatement    (pEmersonTree ctx);
static void	iterationStatement    (pEmersonTree ctx);
static void	doWhileStatement    (pEmersonTree ctx);
static void	whileStatement    (pEmersonTree ctx);
static void	forStatement    (pEmersonTree ctx);
static void	forStatementInitialiserPart    (pEmersonTree ctx);
static void	forInStatement    (pEmersonTree ctx);
static void	forInStatementInitialiserPart    (pEmersonTree ctx);
static void	continueStatement    (pEmersonTree ctx);
static void	breakStatement    (pEmersonTree ctx);
static void	returnStatement    (pEmersonTree ctx);
static void	withStatement    (pEmersonTree ctx);
static void	labelledStatement    (pEmersonTree ctx);
static void	switchStatement    (pEmersonTree ctx);
static void	caseBlock    (pEmersonTree ctx);
static void	caseClause    (pEmersonTree ctx);
static void	defaultClause    (pEmersonTree ctx);
static void	caseClauseSeenDefault    (pEmersonTree ctx);
static void	throwStatement    (pEmersonTree ctx);
static void	tryStatement    (pEmersonTree ctx);
static void	catchFinallyBlock    (pEmersonTree ctx);
static void	catchBlock    (pEmersonTree ctx);
static void	finallyBlock    (pEmersonTree ctx);
static void	msgSendStatement    (pEmersonTree ctx);
static void	memAndCallExpression    (pEmersonTree ctx);
static void	msgRecvStatement    (pEmersonTree ctx);
static void	catchClause    (pEmersonTree ctx);
static void	finallyClause    (pEmersonTree ctx);
static void	expression    (pEmersonTree ctx);
static void	expressionNoIn    (pEmersonTree ctx);
static void	assignmentExpression    (pEmersonTree ctx);
static void	assignmentExpressionNoIn    (pEmersonTree ctx);
static void	leftHandSideExpression    (pEmersonTree ctx);
static void	newExpression    (pEmersonTree ctx);
static void	propertyReferenceSuffix1    (pEmersonTree ctx);
static void	indexSuffix1    (pEmersonTree ctx);
static void	memberExpression    (pEmersonTree ctx);
static void	memberExpressionSuffix    (pEmersonTree ctx);
static void	callExpression    (pEmersonTree ctx);
static void	callExpressionSuffix    (pEmersonTree ctx);
static void	arguments    (pEmersonTree ctx);
static void	indexSuffix    (pEmersonTree ctx);
static void	propertyReferenceSuffix    (pEmersonTree ctx);
static void	assignmentOperator    (pEmersonTree ctx);
static void	ternaryExpression    (pEmersonTree ctx);
static void	ternaryExpressionNoIn    (pEmersonTree ctx);
static void	conditionalExpression    (pEmersonTree ctx);
static void	conditionalExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpression    (pEmersonTree ctx);
static void	logicalORExpression    (pEmersonTree ctx);
static void	logicalORExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseORExpression    (pEmersonTree ctx);
static void	bitwiseORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseXORExpression    (pEmersonTree ctx);
static void	bitwiseXORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseANDExpression    (pEmersonTree ctx);
static void	bitwiseANDExpressionNoIn    (pEmersonTree ctx);
static void	equalityExpression    (pEmersonTree ctx);
static void	equalityExpressionNoIn    (pEmersonTree ctx);
static void	relationalOps    (pEmersonTree ctx);
static void	relationalExpression    (pEmersonTree ctx);
static void	relationalOpsNoIn    (pEmersonTree ctx);
static void	relationalExpressionNoIn    (pEmersonTree ctx);
static void	additiveExpression    (pEmersonTree ctx);
static void	multiplicativeExpression    (pEmersonTree ctx);
static void	unaryOps    (pEmersonTree ctx);
static void	unaryExpression    (pEmersonTree ctx);
static void	postfixExpression    (pEmersonTree ctx);
static void	primaryExpression    (pEmersonTree ctx);
static void	vectorLiteral    (pEmersonTree ctx);
static void	vectorLiteralField    (pEmersonTree ctx);
static void	dollarExpression    (pEmersonTree ctx);
static void	arrayLiteral    (pEmersonTree ctx);
static void	objectLiteral    (pEmersonTree ctx);
static void	patternLiteral    (pEmersonTree ctx);
static void	nameValueProto    (pEmersonTree ctx);
static void	propertyNameAndValue    (pEmersonTree ctx);
static void	propertyName    (pEmersonTree ctx);
static void	literal    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred28_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred45_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred56_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred57_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred58_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred78_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred79_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred82_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred86_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred91_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred92_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred148_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred168_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred169_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred170_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred171_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred172_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred174_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred175_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred177_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred178_EmersonTree    (pEmersonTree ctx);
static void	EmersonTreeFree(pEmersonTree ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//EmersonTree.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonTreeNewSSD(instream, NULL);
}

/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonTree ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonTree) ANTLR3_CALLOC(1, sizeof(EmersonTree));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonTree.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our EmersonTree interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->noOpStatement	= noOpStatement;
    ctx->statementBlock	= statementBlock;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->expressionStatement	= expressionStatement;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->labelledStatement	= labelledStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->caseClauseSeenDefault	= caseClauseSeenDefault;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchFinallyBlock	= catchFinallyBlock;
    ctx->catchBlock	= catchBlock;
    ctx->finallyBlock	= finallyBlock;
    ctx->msgSendStatement	= msgSendStatement;
    ctx->memAndCallExpression	= memAndCallExpression;
    ctx->msgRecvStatement	= msgRecvStatement;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->ternaryExpression	= ternaryExpression;
    ctx->ternaryExpressionNoIn	= ternaryExpressionNoIn;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->additiveExpression	= additiveExpression;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->vectorLiteral	= vectorLiteral;
    ctx->vectorLiteralField	= vectorLiteralField;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->patternLiteral	= patternLiteral;
    ctx->nameValueProto	= nameValueProto;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred28_EmersonTree	= synpred28_EmersonTree;
    ctx->synpred45_EmersonTree	= synpred45_EmersonTree;
    ctx->synpred56_EmersonTree	= synpred56_EmersonTree;
    ctx->synpred57_EmersonTree	= synpred57_EmersonTree;
    ctx->synpred58_EmersonTree	= synpred58_EmersonTree;
    ctx->synpred78_EmersonTree	= synpred78_EmersonTree;
    ctx->synpred79_EmersonTree	= synpred79_EmersonTree;
    ctx->synpred82_EmersonTree	= synpred82_EmersonTree;
    ctx->synpred86_EmersonTree	= synpred86_EmersonTree;
    ctx->synpred91_EmersonTree	= synpred91_EmersonTree;
    ctx->synpred92_EmersonTree	= synpred92_EmersonTree;
    ctx->synpred148_EmersonTree	= synpred148_EmersonTree;
    ctx->synpred168_EmersonTree	= synpred168_EmersonTree;
    ctx->synpred169_EmersonTree	= synpred169_EmersonTree;
    ctx->synpred170_EmersonTree	= synpred170_EmersonTree;
    ctx->synpred171_EmersonTree	= synpred171_EmersonTree;
    ctx->synpred172_EmersonTree	= synpred172_EmersonTree;
    ctx->synpred174_EmersonTree	= synpred174_EmersonTree;
    ctx->synpred175_EmersonTree	= synpred175_EmersonTree;
    ctx->synpred177_EmersonTree	= synpred177_EmersonTree;
    ctx->synpred178_EmersonTree	= synpred178_EmersonTree;
    ctx->free			= EmersonTreeFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionPush     = pEmersonTree_assignmentExpressionPush;
    ctx->pEmersonTree_assignmentExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInPush     = pEmersonTree_assignmentExpressionNoInPush;
    ctx->pEmersonTree_assignmentExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionNoInTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionPush     = pEmersonTree_relationalExpressionPush;
    ctx->pEmersonTree_relationalExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInPush     = pEmersonTree_relationalExpressionNoInPush;
    ctx->pEmersonTree_relationalExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionNoInTop      = NULL;


        
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonTreeTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonTreeFree(pEmersonTree ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionStack->free(ctx->pEmersonTree_assignmentExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInStack->free(ctx->pEmersonTree_assignmentExpressionNoInStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionStack->free(ctx->pEmersonTree_relationalExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInStack->free(ctx->pEmersonTree_relationalExpressionNoInStack);

    
        
	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonTreeTokenNames; 
}


        pANTLR3_STRING program_string;
        ANTLR3_UINT32 program_line;
        ANTLR3_UINT32 line_pos;
        extern pEmersonTree _treeParser;
        

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_PROG_in_program76  */
static	ANTLR3_BITWORD FOLLOW_PROG_in_program76_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PROG_in_program76	= { FOLLOW_PROG_in_program76_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program121  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program121	= { FOLLOW_sourceElements_in_program121_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements182  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements182_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE02), ANTLR3_UINT64_LIT(0x00000000C3200000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements182	= { FOLLOW_sourceElement_in_sourceElements182_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement205  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement205	= { FOLLOW_functionDeclaration_in_sourceElement205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement213  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement213	= { FOLLOW_statement_in_sourceElement213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_DECL_in_functionDeclaration232  */
static	ANTLR3_BITWORD FOLLOW_FUNC_DECL_in_functionDeclaration232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_DECL_in_functionDeclaration232	= { FOLLOW_FUNC_DECL_in_functionDeclaration232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration264  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration264_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE00), ANTLR3_UINT64_LIT(0x00000000D3300000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration264	= { FOLLOW_Identifier_in_functionDeclaration264_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration298  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration298_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE00), ANTLR3_UINT64_LIT(0x00000000D3300000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration298	= { FOLLOW_formalParameterList_in_functionDeclaration298_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration363  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration363	= { FOLLOW_functionBody_in_functionDeclaration363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_EXPR_in_functionExpression407  */
static	ANTLR3_BITWORD FOLLOW_FUNC_EXPR_in_functionExpression407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_EXPR_in_functionExpression407	= { FOLLOW_FUNC_EXPR_in_functionExpression407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression451  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression451_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE00), ANTLR3_UINT64_LIT(0x00000000D3300000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression451	= { FOLLOW_Identifier_in_functionExpression451_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression518  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression518_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE00), ANTLR3_UINT64_LIT(0x00000000D3300000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression518	= { FOLLOW_formalParameterList_in_functionExpression518_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression579  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression579	= { FOLLOW_functionBody_in_functionExpression579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_PARAMS_in_formalParameterList627  */
static	ANTLR3_BITWORD FOLLOW_FUNC_PARAMS_in_formalParameterList627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_PARAMS_in_formalParameterList627	= { FOLLOW_FUNC_PARAMS_in_formalParameterList627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList648  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList648	= { FOLLOW_Identifier_in_formalParameterList648_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList718  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList718	= { FOLLOW_Identifier_in_formalParameterList718_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody748  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody748_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody748	= { FOLLOW_sourceElements_in_functionBody748_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EMPTY_FUNC_BODY_in_functionBody753  */
static	ANTLR3_BITWORD FOLLOW_EMPTY_FUNC_BODY_in_functionBody753_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EMPTY_FUNC_BODY_in_functionBody753	= { FOLLOW_EMPTY_FUNC_BODY_in_functionBody753_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_statement769  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_statement769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_statement769	= { FOLLOW_noOpStatement_in_statement769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_statement777  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_statement777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_statement777	= { FOLLOW_msgSendStatement_in_statement777_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement785  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement785	= { FOLLOW_statementBlock_in_statement785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement793  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement793	= { FOLLOW_variableStatement_in_statement793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement801  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement801	= { FOLLOW_expressionStatement_in_statement801_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement809  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement809	= { FOLLOW_ifStatement_in_statement809_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement817  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement817	= { FOLLOW_iterationStatement_in_statement817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement825  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement825	= { FOLLOW_continueStatement_in_statement825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement833  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement833	= { FOLLOW_breakStatement_in_statement833_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement841  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement841	= { FOLLOW_returnStatement_in_statement841_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement849  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement849	= { FOLLOW_withStatement_in_statement849_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement857  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement857_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement857	= { FOLLOW_switchStatement_in_statement857_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_statement865  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_statement865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_statement865	= { FOLLOW_labelledStatement_in_statement865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement873  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement873	= { FOLLOW_throwStatement_in_statement873_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement881  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement881	= { FOLLOW_tryStatement_in_statement881_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOOP_in_noOpStatement906  */
static	ANTLR3_BITWORD FOLLOW_NOOP_in_noOpStatement906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOOP_in_noOpStatement906	= { FOLLOW_NOOP_in_noOpStatement906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock952  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock952	= { FOLLOW_statementList_in_statementBlock952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLIST_in_statementList981  */
static	ANTLR3_BITWORD FOLLOW_SLIST_in_statementList981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SLIST_in_statementList981	= { FOLLOW_SLIST_in_statementList981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList997  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList997_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE08), ANTLR3_UINT64_LIT(0x00000000C3200000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList997	= { FOLLOW_statement_in_statementList997_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_variableStatement1063  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_variableStatement1063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_variableStatement1063	= { FOLLOW_VARLIST_in_variableStatement1063_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1091  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1091	= { FOLLOW_variableDeclarationList_in_variableStatement1091_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1111  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1111	= { FOLLOW_variableDeclaration_in_variableDeclarationList1111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1151  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1151	= { FOLLOW_variableDeclaration_in_variableDeclarationList1151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1174  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1174	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclaration1201  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclaration1201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclaration1201	= { FOLLOW_VAR_in_variableDeclaration1201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1215  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1215	= { FOLLOW_Identifier_in_variableDeclaration1215_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1293  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1293	= { FOLLOW_initialiser_in_variableDeclaration1293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclarationNoIn1353  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclarationNoIn1353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclarationNoIn1353	= { FOLLOW_VAR_in_variableDeclarationNoIn1353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1372  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1372_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000005000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1372	= { FOLLOW_Identifier_in_variableDeclarationNoIn1372_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1450  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1450	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1450_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_initialiser1493  */
static	ANTLR3_BITWORD FOLLOW_expression_in_initialiser1493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_initialiser1493	= { FOLLOW_expression_in_initialiser1493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_initialiserNoIn1506  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_initialiserNoIn1506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_initialiserNoIn1506	= { FOLLOW_expressionNoIn_in_initialiserNoIn1506_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1520  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1520	= { FOLLOW_expression_in_expressionStatement1520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IF_in_ifStatement1533  */
static	ANTLR3_BITWORD FOLLOW_IF_in_ifStatement1533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IF_in_ifStatement1533	= { FOLLOW_IF_in_ifStatement1533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1562  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1562_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE08), ANTLR3_UINT64_LIT(0x00000000C3200000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1562	= { FOLLOW_expression_in_ifStatement1562_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1592  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1592_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE08), ANTLR3_UINT64_LIT(0x00000000C3200000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1592	= { FOLLOW_statement_in_ifStatement1592_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1686  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1686_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1686	= { FOLLOW_statement_in_ifStatement1686_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1741  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1741	= { FOLLOW_doWhileStatement_in_iterationStatement1741_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1746  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1746	= { FOLLOW_whileStatement_in_iterationStatement1746_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1751  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1751	= { FOLLOW_forStatement_in_iterationStatement1751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1756  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1756	= { FOLLOW_forInStatement_in_iterationStatement1756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DO_in_doWhileStatement1783  */
static	ANTLR3_BITWORD FOLLOW_DO_in_doWhileStatement1783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DO_in_doWhileStatement1783	= { FOLLOW_DO_in_doWhileStatement1783_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1811  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1811	= { FOLLOW_statement_in_doWhileStatement1811_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1839  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1839	= { FOLLOW_expression_in_doWhileStatement1839_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHILE_in_whileStatement1890  */
static	ANTLR3_BITWORD FOLLOW_WHILE_in_whileStatement1890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHILE_in_whileStatement1890	= { FOLLOW_WHILE_in_whileStatement1890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1918  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1918_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE08), ANTLR3_UINT64_LIT(0x00000000C3200000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1918	= { FOLLOW_expression_in_whileStatement1918_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1947  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1947	= { FOLLOW_statement_in_whileStatement1947_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FOR_in_forStatement1997  */
static	ANTLR3_BITWORD FOLLOW_FOR_in_forStatement1997_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FOR_in_forStatement1997	= { FOLLOW_FOR_in_forStatement1997_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORINIT_in_forStatement2028  */
static	ANTLR3_BITWORD FOLLOW_FORINIT_in_forStatement2028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORINIT_in_forStatement2028	= { FOLLOW_FORINIT_in_forStatement2028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement2030  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement2030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement2030	= { FOLLOW_forStatementInitialiserPart_in_forStatement2030_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORCOND_in_forStatement2063  */
static	ANTLR3_BITWORD FOLLOW_FORCOND_in_forStatement2063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORCOND_in_forStatement2063	= { FOLLOW_FORCOND_in_forStatement2063_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2065  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2065	= { FOLLOW_expression_in_forStatement2065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORITER_in_forStatement2099  */
static	ANTLR3_BITWORD FOLLOW_FORITER_in_forStatement2099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORITER_in_forStatement2099	= { FOLLOW_FORITER_in_forStatement2099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2101  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2101	= { FOLLOW_expression_in_forStatement2101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement2134  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement2134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement2134	= { FOLLOW_statement_in_forStatement2134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart2173  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart2173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart2173	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart2173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_forStatementInitialiserPart2182  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_forStatementInitialiserPart2182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_forStatementInitialiserPart2182	= { FOLLOW_VARLIST_in_forStatementInitialiserPart2182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2184  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2184	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORIN_in_forInStatement2210  */
static	ANTLR3_BITWORD FOLLOW_FORIN_in_forInStatement2210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORIN_in_forInStatement2210	= { FOLLOW_FORIN_in_forInStatement2210_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement2232  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement2232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement2232	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement2232_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement2253  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement2253_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE08), ANTLR3_UINT64_LIT(0x00000000C3200000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement2253	= { FOLLOW_expression_in_forInStatement2253_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement2274  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement2274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement2274	= { FOLLOW_statement_in_forInStatement2274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2306  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2306	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2306_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_forInStatementInitialiserPart2312  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_forInStatementInitialiserPart2312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_forInStatementInitialiserPart2312	= { FOLLOW_VAR_in_forInStatementInitialiserPart2312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2314  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2314	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2314_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTINUE_in_continueStatement2339  */
static	ANTLR3_BITWORD FOLLOW_CONTINUE_in_continueStatement2339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTINUE_in_continueStatement2339	= { FOLLOW_CONTINUE_in_continueStatement2339_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2375  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2375	= { FOLLOW_Identifier_in_continueStatement2375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BREAK_in_breakStatement2432  */
static	ANTLR3_BITWORD FOLLOW_BREAK_in_breakStatement2432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BREAK_in_breakStatement2432	= { FOLLOW_BREAK_in_breakStatement2432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2466  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2466	= { FOLLOW_Identifier_in_breakStatement2466_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RETURN_in_returnStatement2526  */
static	ANTLR3_BITWORD FOLLOW_RETURN_in_returnStatement2526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RETURN_in_returnStatement2526	= { FOLLOW_RETURN_in_returnStatement2526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2563  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2563	= { FOLLOW_expression_in_returnStatement2563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WITH_in_withStatement2599  */
static	ANTLR3_BITWORD FOLLOW_WITH_in_withStatement2599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WITH_in_withStatement2599	= { FOLLOW_WITH_in_withStatement2599_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2625  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2625_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE08), ANTLR3_UINT64_LIT(0x00000000C3200000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2625	= { FOLLOW_expression_in_withStatement2625_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2661  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2661_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2661	= { FOLLOW_statement_in_withStatement2661_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LABEL_in_labelledStatement2687  */
static	ANTLR3_BITWORD FOLLOW_LABEL_in_labelledStatement2687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LABEL_in_labelledStatement2687	= { FOLLOW_LABEL_in_labelledStatement2687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_labelledStatement2698  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_labelledStatement2698_bits[]	= { ANTLR3_UINT64_LIT(0x0000024681F1CE08), ANTLR3_UINT64_LIT(0x00000000C3200000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_labelledStatement2698	= { FOLLOW_Identifier_in_labelledStatement2698_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labelledStatement2719  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labelledStatement2719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labelledStatement2719	= { FOLLOW_statement_in_labelledStatement2719_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SWITCH_in_switchStatement2754  */
static	ANTLR3_BITWORD FOLLOW_SWITCH_in_switchStatement2754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SWITCH_in_switchStatement2754	= { FOLLOW_SWITCH_in_switchStatement2754_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2775  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2775_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2775	= { FOLLOW_expression_in_switchStatement2775_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2796  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2796	= { FOLLOW_caseBlock_in_switchStatement2796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_BLOCK_in_caseBlock2835  */
static	ANTLR3_BITWORD FOLLOW_CASE_BLOCK_in_caseBlock2835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_BLOCK_in_caseBlock2835	= { FOLLOW_CASE_BLOCK_in_caseBlock2835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2845  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2845	= { FOLLOW_caseClause_in_caseBlock2845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_BLOCK_in_caseBlock2861  */
static	ANTLR3_BITWORD FOLLOW_CASE_BLOCK_in_caseBlock2861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_BLOCK_in_caseBlock2861	= { FOLLOW_CASE_BLOCK_in_caseBlock2861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2871  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2871_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2871	= { FOLLOW_defaultClause_in_caseBlock2871_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClause2901  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClause2901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClause2901	= { FOLLOW_CASE_in_caseClause2901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause2921  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause2921_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause2921	= { FOLLOW_expression_in_caseClause2921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2941  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2941_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2941	= { FOLLOW_statementList_in_caseClause2941_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseClause2952  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseClause2952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseClause2952	= { FOLLOW_caseClause_in_caseClause2952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClause2973  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClause2973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClause2973	= { FOLLOW_CASE_in_caseClause2973_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause2993  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause2993_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause2993	= { FOLLOW_expression_in_caseClause2993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause3013  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause3013_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause3013	= { FOLLOW_statementList_in_caseClause3013_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseClause3024  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseClause3024_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseClause3024	= { FOLLOW_defaultClause_in_caseClause3024_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DEFAULT_in_defaultClause3051  */
static	ANTLR3_BITWORD FOLLOW_DEFAULT_in_defaultClause3051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DEFAULT_in_defaultClause3051	= { FOLLOW_DEFAULT_in_defaultClause3051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause3071  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause3071_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause3071	= { FOLLOW_statementList_in_defaultClause3071_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_defaultClause3082  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_defaultClause3082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_defaultClause3082	= { FOLLOW_caseClauseSeenDefault_in_defaultClause3082_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClauseSeenDefault3110  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClauseSeenDefault3110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClauseSeenDefault3110	= { FOLLOW_CASE_in_caseClauseSeenDefault3110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClauseSeenDefault3130  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClauseSeenDefault3130_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClauseSeenDefault3130	= { FOLLOW_expression_in_caseClauseSeenDefault3130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClauseSeenDefault3150  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClauseSeenDefault3150_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClauseSeenDefault3150	= { FOLLOW_statementList_in_caseClauseSeenDefault3150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3161  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3161	= { FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_THROW_in_throwStatement3196  */
static	ANTLR3_BITWORD FOLLOW_THROW_in_throwStatement3196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_THROW_in_throwStatement3196	= { FOLLOW_THROW_in_throwStatement3196_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement3216  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement3216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement3216	= { FOLLOW_expression_in_throwStatement3216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRY_in_tryStatement3258  */
static	ANTLR3_BITWORD FOLLOW_TRY_in_tryStatement3258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TRY_in_tryStatement3258	= { FOLLOW_TRY_in_tryStatement3258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement3286  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement3286_bits[]	= { ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement3286	= { FOLLOW_statementBlock_in_tryStatement3286_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchFinallyBlock_in_tryStatement3300  */
static	ANTLR3_BITWORD FOLLOW_catchFinallyBlock_in_tryStatement3300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_catchFinallyBlock_in_tryStatement3300	= { FOLLOW_catchFinallyBlock_in_tryStatement3300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchBlock_in_catchFinallyBlock3338  */
static	ANTLR3_BITWORD FOLLOW_catchBlock_in_catchFinallyBlock3338_bits[]	= { ANTLR3_UINT64_LIT(0x0000001800000002) };
static  ANTLR3_BITSET_LIST FOLLOW_catchBlock_in_catchFinallyBlock3338	= { FOLLOW_catchBlock_in_catchFinallyBlock3338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3340  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3340	= { FOLLOW_finallyBlock_in_catchFinallyBlock3340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3353  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3353	= { FOLLOW_finallyBlock_in_catchFinallyBlock3353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchBlock3379  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchBlock3379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchBlock3379	= { FOLLOW_CATCH_in_catchBlock3379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchBlock3407  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchBlock3407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchBlock3407	= { FOLLOW_Identifier_in_catchBlock3407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchBlock3435  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchBlock3435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchBlock3435	= { FOLLOW_statementBlock_in_catchBlock3435_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyBlock3488  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyBlock3488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyBlock3488	= { FOLLOW_FINALLY_in_finallyBlock3488_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyBlock3516  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyBlock3516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyBlock3516	= { FOLLOW_statementBlock_in_finallyBlock3516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3569  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3569	= { FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3569_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement3597  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement3597_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement3597	= { FOLLOW_leftHandSideExpression_in_msgSendStatement3597_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement3625  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement3625_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000C8), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement3625	= { FOLLOW_leftHandSideExpression_in_msgSendStatement3625_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement3687  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement3687_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000C8), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement3687	= { FOLLOW_memberExpression_in_msgSendStatement3687_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement3741  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement3741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement3741	= { FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement3741_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement3769  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement3769_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement3769	= { FOLLOW_leftHandSideExpression_in_msgSendStatement3769_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement3809  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement3809_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement3809	= { FOLLOW_leftHandSideExpression_in_msgSendStatement3809_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement3837  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement3837_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000C8), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement3837	= { FOLLOW_leftHandSideExpression_in_msgSendStatement3837_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement3899  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement3899_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000C8), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement3899	= { FOLLOW_memberExpression_in_msgSendStatement3899_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memAndCallExpression4024  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memAndCallExpression4024_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memAndCallExpression4024	= { FOLLOW_memberExpression_in_memAndCallExpression4024_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_memAndCallExpression4028  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_memAndCallExpression4028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_memAndCallExpression4028	= { FOLLOW_callExpression_in_memAndCallExpression4028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_msgRecvStatement4047  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_msgRecvStatement4047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_msgRecvStatement4047	= { FOLLOW_MESSAGE_RECV_in_msgRecvStatement4047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement4063  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement4063_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement4063	= { FOLLOW_memAndCallExpression_in_msgRecvStatement4063_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement4080  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement4080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement4080	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement4080_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_msgRecvStatement4108  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_msgRecvStatement4108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_msgRecvStatement4108	= { FOLLOW_MESSAGE_RECV_in_msgRecvStatement4108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement4120  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement4120_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement4120	= { FOLLOW_memAndCallExpression_in_msgRecvStatement4120_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement4133  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement4133_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement4133	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement4133_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement4145  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement4145_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement4145	= { FOLLOW_memAndCallExpression_in_msgRecvStatement4145_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_msgRecvStatement4168  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_msgRecvStatement4168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_msgRecvStatement4168	= { FOLLOW_MESSAGE_RECV_in_msgRecvStatement4168_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_msgRecvStatement4184  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_msgRecvStatement4184_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_msgRecvStatement4184	= { FOLLOW_callExpression_in_msgRecvStatement4184_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement4201  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement4201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement4201	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement4201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchClause4227  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchClause4227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchClause4227	= { FOLLOW_CATCH_in_catchClause4227_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause4242  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause4242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause4242	= { FOLLOW_Identifier_in_catchClause4242_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause4263  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause4263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause4263	= { FOLLOW_statementBlock_in_catchClause4263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyClause4283  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyClause4283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyClause4283	= { FOLLOW_FINALLY_in_finallyClause4283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause4296  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause4296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause4296	= { FOLLOW_statementBlock_in_finallyClause4296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_LIST_in_expression4321  */
static	ANTLR3_BITWORD FOLLOW_EXPR_LIST_in_expression4321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_LIST_in_expression4321	= { FOLLOW_EXPR_LIST_in_expression4321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression4323  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression4323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression4323	= { FOLLOW_assignmentExpression_in_expression4323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COND_EXPR_in_expression4337  */
static	ANTLR3_BITWORD FOLLOW_COND_EXPR_in_expression4337_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COND_EXPR_in_expression4337	= { FOLLOW_COND_EXPR_in_expression4337_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_expression4339  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_expression4339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_expression4339	= { FOLLOW_conditionalExpression_in_expression4339_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_LIST_in_expressionNoIn4353  */
static	ANTLR3_BITWORD FOLLOW_EXPR_LIST_in_expressionNoIn4353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_LIST_in_expressionNoIn4353	= { FOLLOW_EXPR_LIST_in_expressionNoIn4353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4355  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4355	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4355_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4369  */
static	ANTLR3_BITWORD FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4369	= { FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4371  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4371	= { FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4371_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpression4429  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpression4429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpression4429	= { FOLLOW_ASSIGN_in_assignmentExpression4429_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpression4466  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpression4466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpression4466	= { FOLLOW_MULT_ASSIGN_in_assignmentExpression4466_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpression4496  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpression4496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpression4496	= { FOLLOW_DIV_ASSIGN_in_assignmentExpression4496_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpression4527  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpression4527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpression4527	= { FOLLOW_MOD_ASSIGN_in_assignmentExpression4527_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpression4558  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpression4558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpression4558	= { FOLLOW_ADD_ASSIGN_in_assignmentExpression4558_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpression4590  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpression4590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpression4590	= { FOLLOW_SUB_ASSIGN_in_assignmentExpression4590_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpression4622  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpression4622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpression4622	= { FOLLOW_AND_ASSIGN_in_assignmentExpression4622_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpression4653  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpression4653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpression4653	= { FOLLOW_EXP_ASSIGN_in_assignmentExpression4653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpression4684  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpression4684_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpression4684	= { FOLLOW_OR_ASSIGN_in_assignmentExpression4684_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression4726  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression4726_bits[]	= { ANTLR3_UINT64_LIT(0xFFF80001420000E0), ANTLR3_UINT64_LIT(0x00001C070847FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression4726	= { FOLLOW_leftHandSideExpression_in_assignmentExpression4726_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression4755  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression4755_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression4755	= { FOLLOW_conditionalExpression_in_assignmentExpression4755_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4812  */
static	ANTLR3_BITWORD FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4812	= { FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4814  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4814_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4814	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4814_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpressionNoIn4853  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpressionNoIn4853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpressionNoIn4853	= { FOLLOW_ASSIGN_in_assignmentExpressionNoIn4853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4878  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4878	= { FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4896  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4896	= { FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4896_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4915  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4915	= { FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4915_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4934  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4934	= { FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4934_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4954  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4954	= { FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4954_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4974  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4974	= { FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4974_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4993  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4993	= { FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5012  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5012	= { FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5012_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5055  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5055_bits[]	= { ANTLR3_UINT64_LIT(0xFFF80001420000E0), ANTLR3_UINT64_LIT(0x00001C070847FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5055	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5055_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5082  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5082	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5082_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression5120  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression5120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression5120	= { FOLLOW_callExpression_in_leftHandSideExpression5120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression5125  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression5125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression5125	= { FOLLOW_newExpression_in_leftHandSideExpression5125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression5137  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression5137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression5137	= { FOLLOW_memberExpression_in_newExpression5137_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_newExpression5144  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_newExpression5144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_newExpression5144	= { FOLLOW_NEW_in_newExpression5144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression5146  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression5146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression5146	= { FOLLOW_newExpression_in_newExpression5146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix15174  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix15174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix15174	= { FOLLOW_Identifier_in_propertyReferenceSuffix15174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix15186  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix15186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix15186	= { FOLLOW_expression_in_indexSuffix15186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression5195  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression5195_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression5195	= { FOLLOW_primaryExpression_in_memberExpression5195_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression5198  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression5198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression5198	= { FOLLOW_functionExpression_in_memberExpression5198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression5203  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression5203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression5203	= { FOLLOW_DOT_in_memberExpression5203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5205  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5205	= { FOLLOW_memberExpression_in_memberExpression5205_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression5209  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression5209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression5209	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression5209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_memberExpression5216  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_memberExpression5216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_memberExpression5216	= { FOLLOW_ARRAY_INDEX_in_memberExpression5216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5218  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5218	= { FOLLOW_memberExpression_in_memberExpression5218_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression5222  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression5222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression5222	= { FOLLOW_indexSuffix1_in_memberExpression5222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_memberExpression5230  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_memberExpression5230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_memberExpression5230	= { FOLLOW_NEW_in_memberExpression5230_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5234  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5234	= { FOLLOW_memberExpression_in_memberExpression5234_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression5236  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression5236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression5236	= { FOLLOW_arguments_in_memberExpression5236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression5242  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression5242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression5242	= { FOLLOW_DOT_in_memberExpression5242_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5246  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5246	= { FOLLOW_memberExpression_in_memberExpression5246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix5257  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix5257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix5257	= { FOLLOW_indexSuffix_in_memberExpressionSuffix5257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5262  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5262	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression5275  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression5275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression5275	= { FOLLOW_CALL_in_callExpression5275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression5277  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression5277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression5277	= { FOLLOW_memberExpression_in_callExpression5277_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression5279  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression5279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression5279	= { FOLLOW_arguments_in_callExpression5279_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_callExpression5287  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_callExpression5287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_callExpression5287	= { FOLLOW_ARRAY_INDEX_in_callExpression5287_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5289  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5289	= { FOLLOW_callExpression_in_callExpression5289_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression5293  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression5293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression5293	= { FOLLOW_indexSuffix1_in_callExpression5293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_callExpression5302  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_callExpression5302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_callExpression5302	= { FOLLOW_DOT_in_callExpression5302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5304  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5304	= { FOLLOW_callExpression_in_callExpression5304_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression5308  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression5308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression5308	= { FOLLOW_propertyReferenceSuffix1_in_callExpression5308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression5315  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression5315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression5315	= { FOLLOW_CALL_in_callExpression5315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5317  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5317	= { FOLLOW_callExpression_in_callExpression5317_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression5319  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression5319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression5319	= { FOLLOW_arguments_in_callExpression5319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix5333  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix5333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix5333	= { FOLLOW_arguments_in_callExpressionSuffix5333_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix5338  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix5338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix5338	= { FOLLOW_indexSuffix_in_callExpressionSuffix5338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5343  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5343	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5356  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5356	= { FOLLOW_ARGLIST_in_arguments5356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5366  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5366	= { FOLLOW_ARGLIST_in_arguments5366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments5386  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments5386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments5386	= { FOLLOW_expression_in_arguments5386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5411  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5411	= { FOLLOW_ARGLIST_in_arguments5411_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments5427  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments5427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments5427	= { FOLLOW_expression_in_arguments5427_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments5455  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments5455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments5455	= { FOLLOW_expression_in_arguments5455_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_indexSuffix5495  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_indexSuffix5495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_indexSuffix5495	= { FOLLOW_ARRAY_INDEX_in_indexSuffix5495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix5497  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix5497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix5497	= { FOLLOW_expression_in_indexSuffix5497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_propertyReferenceSuffix5512  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_propertyReferenceSuffix5512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_propertyReferenceSuffix5512	= { FOLLOW_DOT_in_propertyReferenceSuffix5512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix5514  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix5514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix5514	= { FOLLOW_Identifier_in_propertyReferenceSuffix5514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignmentOperator0  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignmentOperator0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignmentOperator0	= { FOLLOW_set_in_assignmentOperator0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_in_ternaryExpression5569  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_in_ternaryExpression5569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_in_ternaryExpression5569	= { FOLLOW_TERNARYOP_in_ternaryExpression5569_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_ternaryExpression5597  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_ternaryExpression5597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_ternaryExpression5597	= { FOLLOW_logicalORExpression_in_ternaryExpression5597_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ternaryExpression5625  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ternaryExpression5625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ternaryExpression5625	= { FOLLOW_expression_in_ternaryExpression5625_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ternaryExpression5653  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ternaryExpression5653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ternaryExpression5653	= { FOLLOW_expression_in_ternaryExpression5653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_in_ternaryExpressionNoIn5706  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_in_ternaryExpressionNoIn5706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_in_ternaryExpressionNoIn5706	= { FOLLOW_TERNARYOP_in_ternaryExpressionNoIn5706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn5734  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn5734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000005000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn5734	= { FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn5734_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5762  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000005000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5762	= { FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5762_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5790  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5790	= { FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_conditionalExpression5835  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_conditionalExpression5835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_conditionalExpression5835	= { FOLLOW_ternaryExpression_in_conditionalExpression5835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression5847  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression5847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression5847	= { FOLLOW_logicalORExpression_in_conditionalExpression5847_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_conditionalExpression5859  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_conditionalExpression5859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_conditionalExpression5859	= { FOLLOW_msgRecvStatement_in_conditionalExpression5859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn5878  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn5878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn5878	= { FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn5878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5890  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5890	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_conditionalExpressionNoIn5902  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_conditionalExpressionNoIn5902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_conditionalExpressionNoIn5902	= { FOLLOW_msgRecvStatement_in_conditionalExpressionNoIn5902_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression5930  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression5930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression5930	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression5930_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpression5935  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpression5935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpression5935	= { FOLLOW_AND_in_logicalANDExpression5935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalANDExpression5937  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalANDExpression5937_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalANDExpression5937	= { FOLLOW_logicalANDExpression_in_logicalANDExpression5937_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression5941  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression5941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression5941	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression5941_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression5954  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression5954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression5954	= { FOLLOW_logicalANDExpression_in_logicalORExpression5954_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpression5959  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpression5959_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpression5959	= { FOLLOW_OR_in_logicalORExpression5959_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_logicalORExpression5961  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_logicalORExpression5961_bits[]	= { ANTLR3_UINT64_LIT(0xFFF00001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_logicalORExpression5961	= { FOLLOW_logicalORExpression_in_logicalORExpression5961_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression5965  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression5965_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression5965	= { FOLLOW_logicalANDExpression_in_logicalORExpression5965_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5978  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5978_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5978	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5978_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpressionNoIn5983  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpressionNoIn5983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpressionNoIn5983	= { FOLLOW_OR_in_logicalORExpressionNoIn5983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5985  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5985_bits[]	= { ANTLR3_UINT64_LIT(0xFFF00001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFD), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5985	= { FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5985_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5987  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5987	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5987_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6002  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6002	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpressionNoIn6008  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpressionNoIn6008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpressionNoIn6008	= { FOLLOW_AND_in_logicalANDExpressionNoIn6008_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6010  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6010_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFD), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6010	= { FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6010_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6014  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6014	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6028  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6028	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpression6034  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpression6034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpression6034	= { FOLLOW_BIT_OR_in_bitwiseORExpression6034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_bitwiseORExpression6036  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_bitwiseORExpression6036_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_bitwiseORExpression6036	= { FOLLOW_bitwiseORExpression_in_bitwiseORExpression6036_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6040  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6040	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6053  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6053	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6053_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6060  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6060	= { FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6062  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6062_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFD), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6062	= { FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6062_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6066  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6066_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6066	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6066_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6078  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6078	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6078_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpression6085  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpression6085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpression6085	= { FOLLOW_EXP_in_bitwiseXORExpression6085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6089  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6089_bits[]	= { ANTLR3_UINT64_LIT(0xFF800001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6089	= { FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6089_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6093  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6093	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6093_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6105  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6105	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpressionNoIn6111  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpressionNoIn6111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpressionNoIn6111	= { FOLLOW_EXP_in_bitwiseXORExpressionNoIn6111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6115  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6115_bits[]	= { ANTLR3_UINT64_LIT(0xFF800001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFD), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6115	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6115_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6118  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6118	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6118_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression6132  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression6132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression6132	= { FOLLOW_equalityExpression_in_bitwiseANDExpression6132_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpression6138  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpression6138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpression6138	= { FOLLOW_BIT_AND_in_bitwiseANDExpression6138_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6142  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6142_bits[]	= { ANTLR3_UINT64_LIT(0xFF000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6142	= { FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6142_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression6146  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression6146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression6146	= { FOLLOW_equalityExpression_in_bitwiseANDExpression6146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6160  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6160	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6167  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6167	= { FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6171  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6171_bits[]	= { ANTLR3_UINT64_LIT(0xFF000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFD), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6171	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6171_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6175  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6175	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6188  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6188	= { FOLLOW_relationalExpression_in_equalityExpression6188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpression6194  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpression6194_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpression6194	= { FOLLOW_EQUALS_in_equalityExpression6194_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression6198  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression6198_bits[]	= { ANTLR3_UINT64_LIT(0xF0000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression6198	= { FOLLOW_equalityExpression_in_equalityExpression6198_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6202  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6202	= { FOLLOW_relationalExpression_in_equalityExpression6202_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpression6209  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpression6209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpression6209	= { FOLLOW_NOT_EQUALS_in_equalityExpression6209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression6213  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression6213_bits[]	= { ANTLR3_UINT64_LIT(0xF0000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression6213	= { FOLLOW_equalityExpression_in_equalityExpression6213_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6217  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6217	= { FOLLOW_relationalExpression_in_equalityExpression6217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpression6224  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpression6224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpression6224	= { FOLLOW_IDENT_in_equalityExpression6224_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression6228  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression6228_bits[]	= { ANTLR3_UINT64_LIT(0xF0000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression6228	= { FOLLOW_equalityExpression_in_equalityExpression6228_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6232  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6232	= { FOLLOW_relationalExpression_in_equalityExpression6232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpression6239  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpression6239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpression6239	= { FOLLOW_NOT_IDENT_in_equalityExpression6239_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression6243  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression6243_bits[]	= { ANTLR3_UINT64_LIT(0xF0000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression6243	= { FOLLOW_equalityExpression_in_equalityExpression6243_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression6247  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression6247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression6247	= { FOLLOW_relationalExpression_in_equalityExpression6247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6257  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6257	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpressionNoIn6263  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpressionNoIn6263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpressionNoIn6263	= { FOLLOW_EQUALS_in_equalityExpressionNoIn6263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6265  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6265_bits[]	= { ANTLR3_UINT64_LIT(0xF0000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFD), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6265	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6265_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6269  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6269	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6276  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6276	= { FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6276_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6278  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6278_bits[]	= { ANTLR3_UINT64_LIT(0xF0000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFD), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6278	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6278_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6282  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6282	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpressionNoIn6289  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpressionNoIn6289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpressionNoIn6289	= { FOLLOW_IDENT_in_equalityExpressionNoIn6289_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6291  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6291_bits[]	= { ANTLR3_UINT64_LIT(0xF0000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFD), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6291	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6291_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6295  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6295	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6302  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6302	= { FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6304  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6304_bits[]	= { ANTLR3_UINT64_LIT(0xF0000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFD), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6304	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6304_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6308  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6308	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOps6321  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOps6321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOps6321	= { FOLLOW_LESS_THAN_in_relationalOps6321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOps6327  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOps6327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOps6327	= { FOLLOW_GREATER_THAN_in_relationalOps6327_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOps6333  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOps6333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOps6333	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOps6333_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6340  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6340	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOps6346  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOps6346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOps6346	= { FOLLOW_INSTANCE_OF_in_relationalOps6346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IN_in_relationalOps6352  */
static	ANTLR3_BITWORD FOLLOW_IN_in_relationalOps6352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IN_in_relationalOps6352	= { FOLLOW_IN_in_relationalOps6352_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression6370  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression6370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression6370	= { FOLLOW_additiveExpression_in_relationalExpression6370_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression6384  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression6384_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression6384	= { FOLLOW_relationalOps_in_relationalExpression6384_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_relationalExpression6393  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_relationalExpression6393_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFC), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_relationalExpression6393	= { FOLLOW_relationalExpression_in_relationalExpression6393_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression6405  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression6405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression6405	= { FOLLOW_additiveExpression_in_relationalExpression6405_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOpsNoIn6421  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOpsNoIn6421_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOpsNoIn6421	= { FOLLOW_LESS_THAN_in_relationalOpsNoIn6421_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOpsNoIn6427  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOpsNoIn6427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOpsNoIn6427	= { FOLLOW_GREATER_THAN_in_relationalOpsNoIn6427_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6433  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6433	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6433_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6439  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6439	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6445  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6445	= { FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6445_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn6465  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn6465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn6465	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn6465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6480  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6480	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6480_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6488  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6488_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDFC), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6488	= { FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6488_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn6504  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn6504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn6504	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn6504_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression6536  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression6536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression6536	= { FOLLOW_multiplicativeExpression_in_additiveExpression6536_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_OP_in_additiveExpression6549  */
static	ANTLR3_BITWORD FOLLOW_ADD_OP_in_additiveExpression6549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_OP_in_additiveExpression6549	= { FOLLOW_ADD_OP_in_additiveExpression6549_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression6582  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression6582_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDF0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression6582	= { FOLLOW_additiveExpression_in_additiveExpression6582_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression6612  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression6612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression6612	= { FOLLOW_multiplicativeExpression_in_additiveExpression6612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_in_additiveExpression6655  */
static	ANTLR3_BITWORD FOLLOW_SUB_in_additiveExpression6655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_in_additiveExpression6655	= { FOLLOW_SUB_in_additiveExpression6655_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression6686  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression6686_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FDF0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression6686	= { FOLLOW_additiveExpression_in_additiveExpression6686_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression6717  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression6717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression6717	= { FOLLOW_multiplicativeExpression_in_additiveExpression6717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression6762  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression6762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression6762	= { FOLLOW_unaryExpression_in_multiplicativeExpression6762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_in_multiplicativeExpression6769  */
static	ANTLR3_BITWORD FOLLOW_MULT_in_multiplicativeExpression6769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_in_multiplicativeExpression6769	= { FOLLOW_MULT_in_multiplicativeExpression6769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression6777  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression6777_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FD80), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression6777	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression6777_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression6793  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression6793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression6793	= { FOLLOW_unaryExpression_in_multiplicativeExpression6793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_in_multiplicativeExpression6806  */
static	ANTLR3_BITWORD FOLLOW_DIV_in_multiplicativeExpression6806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_in_multiplicativeExpression6806	= { FOLLOW_DIV_in_multiplicativeExpression6806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression6808  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression6808_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FD80), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression6808	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression6808_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression6812  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression6812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression6812	= { FOLLOW_unaryExpression_in_multiplicativeExpression6812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_in_multiplicativeExpression6819  */
static	ANTLR3_BITWORD FOLLOW_MOD_in_multiplicativeExpression6819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_in_multiplicativeExpression6819	= { FOLLOW_MOD_in_multiplicativeExpression6819_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression6821  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression6821_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C060047FD80), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression6821	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression6821_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression6825  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression6825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression6825	= { FOLLOW_unaryExpression_in_multiplicativeExpression6825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unaryOps0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unaryOps0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unaryOps0	= { FOLLOW_set_in_unaryOps0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression6887  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression6887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression6887	= { FOLLOW_postfixExpression_in_unaryExpression6887_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_OP_in_unaryExpression6911  */
static	ANTLR3_BITWORD FOLLOW_DELETE_OP_in_unaryExpression6911_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_OP_in_unaryExpression6911	= { FOLLOW_DELETE_OP_in_unaryExpression6911_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VOID_in_unaryExpression6933  */
static	ANTLR3_BITWORD FOLLOW_VOID_in_unaryExpression6933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VOID_in_unaryExpression6933	= { FOLLOW_VOID_in_unaryExpression6933_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TYPEOF_in_unaryExpression6955  */
static	ANTLR3_BITWORD FOLLOW_TYPEOF_in_unaryExpression6955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TYPEOF_in_unaryExpression6955	= { FOLLOW_TYPEOF_in_unaryExpression6955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_unaryExpression6975  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_unaryExpression6975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_unaryExpression6975	= { FOLLOW_PLUSPLUS_in_unaryExpression6975_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_unaryExpression6993  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_unaryExpression6993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_unaryExpression6993	= { FOLLOW_MINUSMINUS_in_unaryExpression6993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_PLUS_in_unaryExpression7009  */
static	ANTLR3_BITWORD FOLLOW_UNARY_PLUS_in_unaryExpression7009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_PLUS_in_unaryExpression7009	= { FOLLOW_UNARY_PLUS_in_unaryExpression7009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_MINUS_in_unaryExpression7025  */
static	ANTLR3_BITWORD FOLLOW_UNARY_MINUS_in_unaryExpression7025_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_MINUS_in_unaryExpression7025	= { FOLLOW_UNARY_MINUS_in_unaryExpression7025_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMPLEMENT_in_unaryExpression7040  */
static	ANTLR3_BITWORD FOLLOW_COMPLEMENT_in_unaryExpression7040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COMPLEMENT_in_unaryExpression7040	= { FOLLOW_COMPLEMENT_in_unaryExpression7040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_unaryExpression7056  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_unaryExpression7056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_unaryExpression7056	= { FOLLOW_NOT_in_unaryExpression7056_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression7085  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression7085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression7085	= { FOLLOW_unaryExpression_in_unaryExpression7085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression7110  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression7110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression7110	= { FOLLOW_leftHandSideExpression_in_postfixExpression7110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_postfixExpression7123  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_postfixExpression7123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_postfixExpression7123	= { FOLLOW_MINUSMINUS_in_postfixExpression7123_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression7125  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression7125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression7125	= { FOLLOW_leftHandSideExpression_in_postfixExpression7125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_postfixExpression7134  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_postfixExpression7134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_postfixExpression7134	= { FOLLOW_PLUSPLUS_in_postfixExpression7134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression7136  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression7136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression7136	= { FOLLOW_leftHandSideExpression_in_postfixExpression7136_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_primaryExpression7157  */
static	ANTLR3_BITWORD FOLLOW_201_in_primaryExpression7157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_primaryExpression7157	= { FOLLOW_201_in_primaryExpression7157_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression7164  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression7164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression7164	= { FOLLOW_Identifier_in_primaryExpression7164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression7182  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression7182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression7182	= { FOLLOW_dollarExpression_in_primaryExpression7182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression7187  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression7187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression7187	= { FOLLOW_literal_in_primaryExpression7187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression7192  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression7192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression7192	= { FOLLOW_arrayLiteral_in_primaryExpression7192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression7197  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression7197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression7197	= { FOLLOW_objectLiteral_in_primaryExpression7197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_primaryExpression7209  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_primaryExpression7209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_primaryExpression7209	= { FOLLOW_patternLiteral_in_primaryExpression7209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_in_primaryExpression7215  */
static	ANTLR3_BITWORD FOLLOW_PAREN_in_primaryExpression7215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_in_primaryExpression7215	= { FOLLOW_PAREN_in_primaryExpression7215_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression7219  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression7219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression7219	= { FOLLOW_expression_in_primaryExpression7219_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_primaryExpression7234  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_primaryExpression7234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_primaryExpression7234	= { FOLLOW_vectorLiteral_in_primaryExpression7234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR_in_vectorLiteral7255  */
static	ANTLR3_BITWORD FOLLOW_VECTOR_in_vectorLiteral7255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR_in_vectorLiteral7255	= { FOLLOW_VECTOR_in_vectorLiteral7255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral7286  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral7286_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C060847FDFC), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral7286	= { FOLLOW_vectorLiteralField_in_vectorLiteral7286_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral7333  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral7333_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C060847FDFC), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral7333	= { FOLLOW_vectorLiteralField_in_vectorLiteral7333_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral7380  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral7380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral7380	= { FOLLOW_vectorLiteralField_in_vectorLiteral7380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_vectorLiteralField7465  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_vectorLiteralField7465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_vectorLiteralField7465	= { FOLLOW_ternaryExpression_in_vectorLiteralField7465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_vectorLiteralField7477  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_vectorLiteralField7477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_vectorLiteralField7477	= { FOLLOW_additiveExpression_in_vectorLiteralField7477_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_vectorLiteralField7493  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_vectorLiteralField7493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_vectorLiteralField7493	= { FOLLOW_NumericLiteral_in_vectorLiteralField7493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_vectorLiteralField7507  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_vectorLiteralField7507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_vectorLiteralField7507	= { FOLLOW_callExpression_in_vectorLiteralField7507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_vectorLiteralField7519  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_vectorLiteralField7519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_vectorLiteralField7519	= { FOLLOW_memberExpression_in_vectorLiteralField7519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7554  */
static	ANTLR3_BITWORD FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7554	= { FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7554_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression7582  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression7582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression7582	= { FOLLOW_Identifier_in_dollarExpression7582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral7647  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral7647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral7647	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral7647_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral7657  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral7657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral7657	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral7657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral7676  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral7676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral7676	= { FOLLOW_expression_in_arrayLiteral7676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral7699  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral7699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral7699	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral7699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral7713  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral7713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral7713	= { FOLLOW_expression_in_arrayLiteral7713_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral7742  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral7742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral7742	= { FOLLOW_expression_in_arrayLiteral7742_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral7779  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral7779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral7779	= { FOLLOW_OBJ_LITERAL_in_objectLiteral7779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral7789  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral7789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral7789	= { FOLLOW_OBJ_LITERAL_in_objectLiteral7789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral7826  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral7826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral7826	= { FOLLOW_propertyNameAndValue_in_objectLiteral7826_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral7852  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral7852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral7852	= { FOLLOW_OBJ_LITERAL_in_objectLiteral7852_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral7870  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral7870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral7870	= { FOLLOW_propertyNameAndValue_in_objectLiteral7870_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral7899  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral7899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral7899	= { FOLLOW_propertyNameAndValue_in_objectLiteral7899_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral7942  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral7942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral7942	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral7942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral7952  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral7952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral7952	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral7952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral7961  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral7961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral7961	= { FOLLOW_nameValueProto_in_patternLiteral7961_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral7973  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral7973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral7973	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral7973_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral7993  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral7993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral7993	= { FOLLOW_nameValueProto_in_patternLiteral7993_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral8022  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral8022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral8022	= { FOLLOW_nameValueProto_in_patternLiteral8022_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8087  */
static	ANTLR3_BITWORD FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8087	= { FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_in_nameValueProto8110  */
static	ANTLR3_BITWORD FOLLOW_NAME_in_nameValueProto8110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_in_nameValueProto8110	= { FOLLOW_NAME_in_nameValueProto8110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_nameValueProto8122  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_nameValueProto8122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_nameValueProto8122	= { FOLLOW_propertyName_in_nameValueProto8122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUE_in_nameValueProto8165  */
static	ANTLR3_BITWORD FOLLOW_VALUE_in_nameValueProto8165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUE_in_nameValueProto8165	= { FOLLOW_VALUE_in_nameValueProto8165_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_nameValueProto8194  */
static	ANTLR3_BITWORD FOLLOW_expression_in_nameValueProto8194_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_nameValueProto8194	= { FOLLOW_expression_in_nameValueProto8194_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PROTO_in_nameValueProto8243  */
static	ANTLR3_BITWORD FOLLOW_PROTO_in_nameValueProto8243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PROTO_in_nameValueProto8243	= { FOLLOW_PROTO_in_nameValueProto8243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_nameValueProto8271  */
static	ANTLR3_BITWORD FOLLOW_expression_in_nameValueProto8271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_nameValueProto8271	= { FOLLOW_expression_in_nameValueProto8271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8312  */
static	ANTLR3_BITWORD FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8312	= { FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_VALUE_in_propertyNameAndValue8342  */
static	ANTLR3_BITWORD FOLLOW_NAME_VALUE_in_propertyNameAndValue8342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_VALUE_in_propertyNameAndValue8342	= { FOLLOW_NAME_VALUE_in_propertyNameAndValue8342_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue8355  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue8355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue8355	= { FOLLOW_propertyName_in_propertyNameAndValue8355_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_propertyNameAndValue8374  */
static	ANTLR3_BITWORD FOLLOW_expression_in_propertyNameAndValue8374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_propertyNameAndValue8374	= { FOLLOW_expression_in_propertyNameAndValue8374_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyName8386  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyName8386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyName8386	= { FOLLOW_Identifier_in_propertyName8386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_propertyName8393  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_propertyName8393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_propertyName8393	= { FOLLOW_StringLiteral_in_propertyName8393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_propertyName8410  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_propertyName8410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_propertyName8410	= { FOLLOW_NumericLiteral_in_propertyName8410_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_literal8424  */
static	ANTLR3_BITWORD FOLLOW_203_in_literal8424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_literal8424	= { FOLLOW_203_in_literal8424_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_204_in_literal8431  */
static	ANTLR3_BITWORD FOLLOW_204_in_literal8431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_204_in_literal8431	= { FOLLOW_204_in_literal8431_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_205_in_literal8438  */
static	ANTLR3_BITWORD FOLLOW_205_in_literal8438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_205_in_literal8438	= { FOLLOW_205_in_literal8438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_literal8444  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_literal8444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_literal8444	= { FOLLOW_StringLiteral_in_literal8444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_literal8461  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_literal8461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_literal8461	= { FOLLOW_NumericLiteral_in_literal8461_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred28_EmersonTree1592  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred28_EmersonTree1592_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred28_EmersonTree1592	= { FOLLOW_statement_in_synpred28_EmersonTree1592_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_synpred45_EmersonTree2901  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_synpred45_EmersonTree2901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_synpred45_EmersonTree2901	= { FOLLOW_CASE_in_synpred45_EmersonTree2901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred45_EmersonTree2921  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred45_EmersonTree2921_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred45_EmersonTree2921	= { FOLLOW_expression_in_synpred45_EmersonTree2921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_synpred45_EmersonTree2941  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_synpred45_EmersonTree2941_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_synpred45_EmersonTree2941	= { FOLLOW_statementList_in_synpred45_EmersonTree2941_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_synpred45_EmersonTree2952  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_synpred45_EmersonTree2952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_synpred45_EmersonTree2952	= { FOLLOW_caseClause_in_synpred45_EmersonTree2952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred56_EmersonTree4024  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred56_EmersonTree4024_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred56_EmersonTree4024	= { FOLLOW_memberExpression_in_synpred56_EmersonTree4024_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree4047  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree4047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree4047	= { FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree4047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred57_EmersonTree4063  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred57_EmersonTree4063_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred57_EmersonTree4063	= { FOLLOW_memAndCallExpression_in_synpred57_EmersonTree4063_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree4080  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree4080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree4080	= { FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree4080_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree4108  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree4108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree4108	= { FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree4108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4120  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4120_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4120	= { FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4120_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree4133  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree4133_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x00001C0600400180), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000003A00) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree4133	= { FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree4133_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4145  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4145_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4145	= { FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4145_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred78_EmersonTree5120  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred78_EmersonTree5120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred78_EmersonTree5120	= { FOLLOW_callExpression_in_synpred78_EmersonTree5120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred79_EmersonTree5137  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred79_EmersonTree5137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred79_EmersonTree5137	= { FOLLOW_memberExpression_in_synpred79_EmersonTree5137_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_synpred82_EmersonTree5203  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_synpred82_EmersonTree5203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_synpred82_EmersonTree5203	= { FOLLOW_DOT_in_synpred82_EmersonTree5203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred82_EmersonTree5205  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred82_EmersonTree5205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred82_EmersonTree5205	= { FOLLOW_memberExpression_in_synpred82_EmersonTree5205_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred82_EmersonTree5209  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred82_EmersonTree5209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred82_EmersonTree5209	= { FOLLOW_propertyReferenceSuffix1_in_synpred82_EmersonTree5209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_synpred86_EmersonTree5275  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_synpred86_EmersonTree5275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_synpred86_EmersonTree5275	= { FOLLOW_CALL_in_synpred86_EmersonTree5275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred86_EmersonTree5277  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred86_EmersonTree5277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred86_EmersonTree5277	= { FOLLOW_memberExpression_in_synpred86_EmersonTree5277_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred86_EmersonTree5279  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred86_EmersonTree5279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred86_EmersonTree5279	= { FOLLOW_arguments_in_synpred86_EmersonTree5279_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred91_EmersonTree5356  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred91_EmersonTree5356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred91_EmersonTree5356	= { FOLLOW_ARGLIST_in_synpred91_EmersonTree5356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred92_EmersonTree5366  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred92_EmersonTree5366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred92_EmersonTree5366	= { FOLLOW_ARGLIST_in_synpred92_EmersonTree5366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred92_EmersonTree5386  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred92_EmersonTree5386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred92_EmersonTree5386	= { FOLLOW_expression_in_synpred92_EmersonTree5386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_synpred148_EmersonTree6887  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_synpred148_EmersonTree6887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_synpred148_EmersonTree6887	= { FOLLOW_postfixExpression_in_synpred148_EmersonTree6887_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred168_EmersonTree7477  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred168_EmersonTree7477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred168_EmersonTree7477	= { FOLLOW_additiveExpression_in_synpred168_EmersonTree7477_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_synpred169_EmersonTree7493  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_synpred169_EmersonTree7493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_synpred169_EmersonTree7493	= { FOLLOW_NumericLiteral_in_synpred169_EmersonTree7493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred170_EmersonTree7507  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred170_EmersonTree7507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred170_EmersonTree7507	= { FOLLOW_callExpression_in_synpred170_EmersonTree7507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree7647  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree7647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree7647	= { FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree7647_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree7657  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree7657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree7657	= { FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree7657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred172_EmersonTree7676  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred172_EmersonTree7676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred172_EmersonTree7676	= { FOLLOW_expression_in_synpred172_EmersonTree7676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree7779  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree7779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree7779	= { FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree7779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree7789  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree7789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree7789	= { FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree7789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree7826  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree7826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree7826	= { FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree7826_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree7942  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree7942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree7942	= { FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree7942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree7952  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree7952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree7952	= { FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree7952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_synpred178_EmersonTree7961  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_synpred178_EmersonTree7961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_synpred178_EmersonTree7961	= { FOLLOW_nameValueProto_in_synpred178_EmersonTree7961_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    297:13: ( statement )?
 */
static const ANTLR3_INT32 dfa15_eot[23] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa15_eof[23] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa15_min[23] =
    {
	3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa15_max[23] =
    {
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa15_accept[23] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa15_special[23] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa15_T_empty	    NULL

static const ANTLR3_INT32 dfa15_T0[] =
    {
	21, -1, -1, -1, -1, -1, 4, 8, 5, -1, -1, 9, 10, 11, -1, -1, -1, 12, 14, 
	13, 15, 16, -1, -1, -1, -1, -1, -1, 1, -1, 20, 19, -1, -1, -1, 17, -1, 
	-1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 7, -1, -1, -1, -1, 2, 
	3
    };static const ANTLR3_INT32 dfa15_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa15_transitions[] =
{
    dfa15_T0, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, 
    dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, 
    dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, 
    dfa15_T_empty, dfa15_T_empty	
};

static ANTLR3_INT32 dfa15_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA15_1;

    	    ANTLR3_MARKER index15_1;


    		LA15_1 = LA(1);

    	 
    	    index15_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA15_2;

    	    ANTLR3_MARKER index15_2;


    		LA15_2 = LA(1);

    	 
    	    index15_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA15_3;

    	    ANTLR3_MARKER index15_3;


    		LA15_3 = LA(1);

    	 
    	    index15_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA15_4;

    	    ANTLR3_MARKER index15_4;


    		LA15_4 = LA(1);

    	 
    	    index15_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA15_5;

    	    ANTLR3_MARKER index15_5;


    		LA15_5 = LA(1);

    	 
    	    index15_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA15_6;

    	    ANTLR3_MARKER index15_6;


    		LA15_6 = LA(1);

    	 
    	    index15_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA15_7;

    	    ANTLR3_MARKER index15_7;


    		LA15_7 = LA(1);

    	 
    	    index15_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA15_8;

    	    ANTLR3_MARKER index15_8;


    		LA15_8 = LA(1);

    	 
    	    index15_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA15_9;

    	    ANTLR3_MARKER index15_9;


    		LA15_9 = LA(1);

    	 
    	    index15_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA15_10;

    	    ANTLR3_MARKER index15_10;


    		LA15_10 = LA(1);

    	 
    	    index15_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA15_11;

    	    ANTLR3_MARKER index15_11;


    		LA15_11 = LA(1);

    	 
    	    index15_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA15_12;

    	    ANTLR3_MARKER index15_12;


    		LA15_12 = LA(1);

    	 
    	    index15_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA15_13;

    	    ANTLR3_MARKER index15_13;


    		LA15_13 = LA(1);

    	 
    	    index15_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA15_14;

    	    ANTLR3_MARKER index15_14;


    		LA15_14 = LA(1);

    	 
    	    index15_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA15_15;

    	    ANTLR3_MARKER index15_15;


    		LA15_15 = LA(1);

    	 
    	    index15_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA15_16;

    	    ANTLR3_MARKER index15_16;


    		LA15_16 = LA(1);

    	 
    	    index15_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA15_17;

    	    ANTLR3_MARKER index15_17;


    		LA15_17 = LA(1);

    	 
    	    index15_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA15_18;

    	    ANTLR3_MARKER index15_18;


    		LA15_18 = LA(1);

    	 
    	    index15_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 18:
        
    	{
    	    ANTLR3_UINT32 LA15_19;

    	    ANTLR3_MARKER index15_19;


    		LA15_19 = LA(1);

    	 
    	    index15_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 19:
        
    	{
    	    ANTLR3_UINT32 LA15_20;

    	    ANTLR3_MARKER index15_20;


    		LA15_20 = LA(1);

    	 
    	    index15_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index15_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"297:13: ( statement )?";
    EXCEPTION->decisionNum  = 15;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 15
 */
static
ANTLR3_CYCLIC_DFA cdfa15
    =	{
	    15,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"297:13: ( statement )?",	
	    (CDFA_SPECIAL_FUNC) dfa15_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa15_eot,	    /* EOT table			    */
	    dfa15_eof,	    /* EOF table			    */
	    dfa15_min,	    /* Minimum tokens for each state    */
	    dfa15_max,	    /* Maximum tokens for each state    */
	    dfa15_accept,	/* Accept table			    */
	    dfa15_special,	/* Special transition states	    */
	    dfa15_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 15
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    758:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static const ANTLR3_INT32 dfa41_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa41_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa41_min[19] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa41_max[19] =
    {
	205, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 
	-1
    };
static const ANTLR3_INT32 dfa41_accept[19] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa41_special[19] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa41_T_empty	    NULL

static const ANTLR3_INT32 dfa41_T0[] =
    {
	18, 16, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa41_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa41_transitions[] =
{
    dfa41_T0, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, 
    dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, 
    dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, 
    dfa41_T1, dfa41_T1, dfa41_T_empty, dfa41_T_empty	
};

static ANTLR3_INT32 dfa41_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA41_15;

    	    ANTLR3_MARKER index41_15;


    		LA41_15 = LA(1);

    	 
    	    index41_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred56_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index41_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA41_16;

    	    ANTLR3_MARKER index41_16;


    		LA41_16 = LA(1);

    	 
    	    index41_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred56_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index41_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"758:1: memAndCallExpression : ( memberExpression | callExpression );";
    EXCEPTION->decisionNum  = 41;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 41
 */
static
ANTLR3_CYCLIC_DFA cdfa41
    =	{
	    41,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"758:1: memAndCallExpression : ( memberExpression | callExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa41_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa41_eot,	    /* EOT table			    */
	    dfa41_eof,	    /* EOF table			    */
	    dfa41_min,	    /* Minimum tokens for each state    */
	    dfa41_max,	    /* Maximum tokens for each state    */
	    dfa41_accept,	/* Accept table			    */
	    dfa41_special,	/* Special transition states	    */
	    dfa41_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 41
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    920:1: leftHandSideExpression : ( callExpression | newExpression );
 */
static const ANTLR3_INT32 dfa48_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa48_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa48_min[19] =
    {
	5, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa48_max[19] =
    {
	205, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa48_accept[19] =
    {
	-1, 1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa48_special[19] =
    {	
	-1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa48_T_empty	    NULL

static const ANTLR3_INT32 dfa48_T0[] =
    {
	1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 4, -1, -1, -1, -1, 4, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
	-1, -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, 4, 4, 4
    };static const ANTLR3_INT32 dfa48_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa48_transitions[] =
{
    dfa48_T0, dfa48_T_empty, dfa48_T1, dfa48_T1, dfa48_T_empty, dfa48_T_empty, 
    dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, 
    dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, 
    dfa48_T_empty, dfa48_T_empty, dfa48_T_empty	
};

static ANTLR3_INT32 dfa48_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA48_2;

    	    ANTLR3_MARKER index48_2;


    		LA48_2 = LA(1);

    	 
    	    index48_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred78_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index48_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA48_3;

    	    ANTLR3_MARKER index48_3;


    		LA48_3 = LA(1);

    	 
    	    index48_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred78_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index48_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"920:1: leftHandSideExpression : ( callExpression | newExpression );";
    EXCEPTION->decisionNum  = 48;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 48
 */
static
ANTLR3_CYCLIC_DFA cdfa48
    =	{
	    48,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"920:1: leftHandSideExpression : ( callExpression | newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa48_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa48_eot,	    /* EOT table			    */
	    dfa48_eof,	    /* EOF table			    */
	    dfa48_min,	    /* Minimum tokens for each state    */
	    dfa48_max,	    /* Maximum tokens for each state    */
	    dfa48_accept,	/* Accept table			    */
	    dfa48_special,	/* Special transition states	    */
	    dfa48_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 48
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    925:1: newExpression : ( memberExpression | ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa49_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa49_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa49_min[19] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa49_max[19] =
    {
	205, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	-1
    };
static const ANTLR3_INT32 dfa49_accept[19] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa49_special[19] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa49_T_empty	    NULL

static const ANTLR3_INT32 dfa49_T0[] =
    {
	1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	17, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 
	-1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa49_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa49_transitions[] =
{
    dfa49_T0, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, 
    dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, 
    dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, 
    dfa49_T_empty, dfa49_T_empty, dfa49_T1, dfa49_T_empty	
};

static ANTLR3_INT32 dfa49_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA49_17;

    	    ANTLR3_MARKER index49_17;


    		LA49_17 = LA(1);

    	 
    	    index49_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred79_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index49_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"925:1: newExpression : ( memberExpression | ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 49;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 49
 */
static
ANTLR3_CYCLIC_DFA cdfa49
    =	{
	    49,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"925:1: newExpression : ( memberExpression | ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa49_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa49_eot,	    /* EOT table			    */
	    dfa49_eof,	    /* EOF table			    */
	    dfa49_min,	    /* Minimum tokens for each state    */
	    dfa49_max,	    /* Maximum tokens for each state    */
	    dfa49_accept,	/* Accept table			    */
	    dfa49_special,	/* Special transition states	    */
	    dfa49_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 49
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    939:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static const ANTLR3_INT32 dfa50_eot[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa50_eof[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa50_min[20] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa50_max[20] =
    {
	205, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa50_accept[20] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 4, 5, 3, 
	6
    };
static const ANTLR3_INT32 dfa50_special[20] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa50_T_empty	    NULL

static const ANTLR3_INT32 dfa50_T0[] =
    {
	16, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 17, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa50_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa50_transitions[] =
{
    dfa50_T0, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T1, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty	
};

static ANTLR3_INT32 dfa50_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA50_15;

    	    ANTLR3_MARKER index50_15;


    		LA50_15 = LA(1);

    	 
    	    index50_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred82_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index50_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"939:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );";
    EXCEPTION->decisionNum  = 50;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 50
 */
static
ANTLR3_CYCLIC_DFA cdfa50
    =	{
	    50,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"939:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa50_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa50_eot,	    /* EOT table			    */
	    dfa50_eof,	    /* EOF table			    */
	    dfa50_min,	    /* Minimum tokens for each state    */
	    dfa50_max,	    /* Maximum tokens for each state    */
	    dfa50_accept,	/* Accept table			    */
	    dfa50_special,	/* Special transition states	    */
	    dfa50_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 50
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1260:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );
 */
static const ANTLR3_INT32 dfa77_eot[28] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa77_eof[28] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa77_min[28] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, 0, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa77_max[28] =
    {
	205, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, 0, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa77_accept[28] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa77_special[28] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, 1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa77_T_empty	    NULL

static const ANTLR3_INT32 dfa77_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 21, 21, 21, 20, 19, 21, 
	21, 21, 21, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa77_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa77_transitions[] =
{
    dfa77_T0, dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, 
    dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, 
    dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, 
    dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, dfa77_T1, 
    dfa77_T1, dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, dfa77_T_empty, 
    dfa77_T_empty, dfa77_T_empty, dfa77_T_empty	
};

static ANTLR3_INT32 dfa77_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA77_19;

    	    ANTLR3_MARKER index77_19;


    		LA77_19 = LA(1);

    	 
    	    index77_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred148_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index77_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA77_20;

    	    ANTLR3_MARKER index77_20;


    		LA77_20 = LA(1);

    	 
    	    index77_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred148_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index77_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1260:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );";
    EXCEPTION->decisionNum  = 77;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 77
 */
static
ANTLR3_CYCLIC_DFA cdfa77
    =	{
	    77,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1260:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa77_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa77_eot,	    /* EOT table			    */
	    dfa77_eof,	    /* EOF table			    */
	    dfa77_min,	    /* Minimum tokens for each state    */
	    dfa77_max,	    /* Maximum tokens for each state    */
	    dfa77_accept,	/* Accept table			    */
	    dfa77_special,	/* Special transition states	    */
	    dfa77_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 77
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1330:1: vectorLiteralField : ( ternaryExpression | additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static const ANTLR3_INT32 dfa80_eot[37] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa80_eof[37] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa80_min[37] =
    {
	5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa80_max[37] =
    {
	205, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa80_accept[37] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 5, 3
    };
static const ANTLR3_INT32 dfa80_special[37] =
    {	
	-1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa80_T_empty	    NULL

static const ANTLR3_INT32 dfa80_T0[] =
    {
	2, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 19, -1, -1, -1, -1, 17, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 13, 14, -1, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, -1, -1, -1, 18, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
	-1, 16, 15, -1, -1, -1, -1, -1, -1, -1, 6, 12, 11, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 8, 9, 
	10
    };static const ANTLR3_INT32 dfa80_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa80_transitions[] =
{
    dfa80_T0, dfa80_T_empty, dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T1, 
    dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T1, 
    dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T1, dfa80_T_empty, 
    dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, 
    dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, 
    dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, 
    dfa80_T_empty	
};

static ANTLR3_INT32 dfa80_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA80_2;

    	    ANTLR3_MARKER index80_2;


    		LA80_2 = LA(1);

    	 
    	    index80_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (synpred170_EmersonTree(ctx)) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index80_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA80_3;

    	    ANTLR3_MARKER index80_3;


    		LA80_3 = LA(1);

    	 
    	    index80_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (synpred170_EmersonTree(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA80_4;

    	    ANTLR3_MARKER index80_4;


    		LA80_4 = LA(1);

    	 
    	    index80_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (synpred170_EmersonTree(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA80_5;

    	    ANTLR3_MARKER index80_5;


    		LA80_5 = LA(1);

    	 
    	    index80_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA80_6;

    	    ANTLR3_MARKER index80_6;


    		LA80_6 = LA(1);

    	 
    	    index80_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA80_7;

    	    ANTLR3_MARKER index80_7;


    		LA80_7 = LA(1);

    	 
    	    index80_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA80_8;

    	    ANTLR3_MARKER index80_8;


    		LA80_8 = LA(1);

    	 
    	    index80_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA80_9;

    	    ANTLR3_MARKER index80_9;


    		LA80_9 = LA(1);

    	 
    	    index80_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA80_10;

    	    ANTLR3_MARKER index80_10;


    		LA80_10 = LA(1);

    	 
    	    index80_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA80_11;

    	    ANTLR3_MARKER index80_11;


    		LA80_11 = LA(1);

    	 
    	    index80_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA80_12;

    	    ANTLR3_MARKER index80_12;


    		LA80_12 = LA(1);

    	 
    	    index80_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (synpred169_EmersonTree(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA80_13;

    	    ANTLR3_MARKER index80_13;


    		LA80_13 = LA(1);

    	 
    	    index80_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA80_14;

    	    ANTLR3_MARKER index80_14;


    		LA80_14 = LA(1);

    	 
    	    index80_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA80_15;

    	    ANTLR3_MARKER index80_15;


    		LA80_15 = LA(1);

    	 
    	    index80_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA80_16;

    	    ANTLR3_MARKER index80_16;


    		LA80_16 = LA(1);

    	 
    	    index80_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA80_17;

    	    ANTLR3_MARKER index80_17;


    		LA80_17 = LA(1);

    	 
    	    index80_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA80_18;

    	    ANTLR3_MARKER index80_18;


    		LA80_18 = LA(1);

    	 
    	    index80_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA80_19;

    	    ANTLR3_MARKER index80_19;


    		LA80_19 = LA(1);

    	 
    	    index80_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index80_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1330:1: vectorLiteralField : ( ternaryExpression | additiveExpression | NumericLiteral | callExpression | memberExpression );";
    EXCEPTION->decisionNum  = 80;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 80
 */
static
ANTLR3_CYCLIC_DFA cdfa80
    =	{
	    80,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1330:1: vectorLiteralField : ( ternaryExpression | additiveExpression | NumericLiteral | callExpression | memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa80_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa80_eot,	    /* EOT table			    */
	    dfa80_eof,	    /* EOF table			    */
	    dfa80_min,	    /* Minimum tokens for each state    */
	    dfa80_max,	    /* Maximum tokens for each state    */
	    dfa80_accept,	/* Accept table			    */
	    dfa80_special,	/* Special transition states	    */
	    dfa80_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 80
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//EmersonTree.g:66:1: program returns [pANTLR3_STRING s] : ^( PROG ( sourceElements )? ) ;
 */
static pANTLR3_STRING
program(pEmersonTree ctx)
{   
    pANTLR3_STRING s = NULL;

    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:67:2: ( ^( PROG ( sourceElements )? ) )
        // .//EmersonTree.g:67:3: ^( PROG ( sourceElements )? )
        {
             MATCHT(PROG, &FOLLOW_PROG_in_program76); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return s;
            }

            if ( BACKTRACKING==0 ) 
            {

                                pANTLR3_STRING_FACTORY factory = antlr3StringFactoryNew();
                                program_string = factory->newRaw(factory);
                            
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return s;
                }

                // .//EmersonTree.g:72:13: ( sourceElements )?
                {
                    int alt1=2;
                    {
                        int LA1_0 = LA(1);
                        if ( (((LA1_0 >= SLIST) && (LA1_0 <= VARLIST)) || ((LA1_0 >= DO) && (LA1_0 <= FOR)) || ((LA1_0 >= FORIN) && (LA1_0 <= WITH)) || LA1_0 == NOOP || ((LA1_0 >= TRY) && (LA1_0 <= THROW)) || LA1_0 == SWITCH || LA1_0 == LABEL || LA1_0 == FUNC_DECL || ((LA1_0 >= EXPR_LIST) && (LA1_0 <= COND_EXPR)) || ((LA1_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA1_0 <= MESSAGE_SEND_WITH_SENDER))) ) 
                        {
                            alt1=1;
                        }
                    }
                    switch (alt1) 
                    {
                	case 1:
                	    // .//EmersonTree.g:73:15: sourceElements
                	    {
                	        FOLLOWPUSH(FOLLOW_sourceElements_in_program121);
                	        sourceElements(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleprogramEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return s;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return s;
                }
            }
            if ( BACKTRACKING==0 ) 
            {

                            s = program_string;
                         
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return s;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//EmersonTree.g:83:1: sourceElements : ( sourceElement )+ ;
 */
static void
sourceElements(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:84:5: ( ( sourceElement )+ )
        // .//EmersonTree.g:84:6: ( sourceElement )+
        {
            // .//EmersonTree.g:84:6: ( sourceElement )+
            {
                int cnt2=0;

                for (;;)
                {
                    int alt2=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA2_0 = LA(1);
            	    if ( (((LA2_0 >= SLIST) && (LA2_0 <= VARLIST)) || ((LA2_0 >= DO) && (LA2_0 <= FOR)) || ((LA2_0 >= FORIN) && (LA2_0 <= WITH)) || LA2_0 == NOOP || ((LA2_0 >= TRY) && (LA2_0 <= THROW)) || LA2_0 == SWITCH || LA2_0 == LABEL || LA2_0 == FUNC_DECL || ((LA2_0 >= EXPR_LIST) && (LA2_0 <= COND_EXPR)) || ((LA2_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA2_0 <= MESSAGE_SEND_WITH_SENDER))) ) 
            	    {
            	        alt2=1;
            	    }

            	}
            	switch (alt2) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:84:7: sourceElement
            	        {
            	            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements182);
            	            sourceElement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulesourceElementsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }
            	            if ( BACKTRACKING==0 ) 
            	            {
            	                APP("\n"); 
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt2 >= 1 )
            		{
            		    goto loop2;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulesourceElementsEx;
            	}
            	cnt2++;
                }
                loop2: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//EmersonTree.g:87:1: sourceElement : ( functionDeclaration | statement );
 */
static void
sourceElement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:88:5: ( functionDeclaration | statement )
            
            ANTLR3_UINT32 alt3;

            alt3=2;


            {
                int LA3_0 = LA(1);
                if ( (LA3_0 == FUNC_DECL) ) 
                {
                    alt3=1;
                }
                else if ( (((LA3_0 >= SLIST) && (LA3_0 <= VARLIST)) || ((LA3_0 >= DO) && (LA3_0 <= FOR)) || ((LA3_0 >= FORIN) && (LA3_0 <= WITH)) || LA3_0 == NOOP || ((LA3_0 >= TRY) && (LA3_0 <= THROW)) || LA3_0 == SWITCH || LA3_0 == LABEL || ((LA3_0 >= EXPR_LIST) && (LA3_0 <= COND_EXPR)) || ((LA3_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA3_0 <= MESSAGE_SEND_WITH_SENDER))) ) 
                {
                    alt3=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 3;
                    EXCEPTION->state        = 0;


                    goto rulesourceElementEx;
                }
            }
            switch (alt3) 
            {
        	case 1:
        	    // .//EmersonTree.g:88:7: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement205);
        	        functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:89:7: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement213);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(";"); 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//EmersonTree.g:93:1: functionDeclaration : ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static void
functionDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier1;

    /* Initialize rule variables
     */


    Identifier1       = NULL;

    {
        // .//EmersonTree.g:94:2: ( ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:94:4: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
        {
             MATCHT(FUNC_DECL, &FOLLOW_FUNC_DECL_in_functionDeclaration232); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("function ");
                              
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier1 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration264); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier1->getText(Identifier1))->chars);
                                APP("( ");
                              
            }

            // .//EmersonTree.g:103:15: ( formalParameterList )?
            {
                int alt4=2;
                {
                    int LA4_0 = LA(1);
                    if ( (LA4_0 == FUNC_PARAMS) ) 
                    {
                        alt4=1;
                    }
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//EmersonTree.g:103:16: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration298);
            	        formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" )");
                                APP("\n{\n");
                              
            }
            if ( BACKTRACKING==0 ) 
            {

                                 CHECK_RESOURCES();
                              
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration363);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}");
                              
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//EmersonTree.g:119:1: functionExpression : ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static void
functionExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier2;

    /* Initialize rule variables
     */


    Identifier2       = NULL;

    {
        // .//EmersonTree.g:120:2: ( ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:120:4: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
        {
             MATCHT(FUNC_EXPR, &FOLLOW_FUNC_EXPR_in_functionExpression407); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                               APP("function ");
                             
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:124:14: ( Identifier )?
            {
                int alt5=2;
                {
                    int LA5_0 = LA(1);
                    if ( (LA5_0 == Identifier) ) 
                    {
                        alt5=1;
                    }
                }
                switch (alt5) 
                {
            	case 1:
            	    // .//EmersonTree.g:125:16: Identifier
            	    {
            	        Identifier2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression451); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP((const char*)(Identifier2->getText(Identifier2))->chars);
            	                             
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("( ");
                             
            }

            // .//EmersonTree.g:133:14: ( formalParameterList )?
            {
                int alt6=2;
                {
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == FUNC_PARAMS) ) 
                    {
                        alt6=1;
                    }
                }
                switch (alt6) 
                {
            	case 1:
            	    // .//EmersonTree.g:133:15: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression518);
            	        formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("  )");
                               APP("\n{\n");
                             
            }
            if ( BACKTRACKING==0 ) 
            {

                                 CHECK_RESOURCES();
                             
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression579);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("\n}");
                             
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//EmersonTree.g:149:1: formalParameterList : ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) ;
 */
static void
formalParameterList(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    id1;
    pANTLR3_BASE_TREE    id2;

    /* Initialize rule variables
     */


    id1       = NULL;
    id2       = NULL;

    {
        // .//EmersonTree.g:150:3: ( ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) )
        // .//EmersonTree.g:150:5: ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* )
        {
             MATCHT(FUNC_PARAMS, &FOLLOW_FUNC_PARAMS_in_formalParameterList627); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:151:17: (id1= Identifier )
            // .//EmersonTree.g:151:18: id1= Identifier
            {
                id1 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList648); 
                if  (HASEXCEPTION())
                {
                    goto ruleformalParameterListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {
                    APP((const char*)(id1->getText(id1))->chars); 
                }

            }


            // .//EmersonTree.g:153:9: (id2= Identifier )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == Identifier) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//EmersonTree.g:154:18: id2= Identifier
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP(", ");
            	                             
            	        }
            	        id2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList718); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	            APP((const char*)(id2->getText(id2))->chars);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//EmersonTree.g:164:1: functionBody : ( sourceElements | EMPTY_FUNC_BODY );
 */
static void
functionBody(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:165:2: ( sourceElements | EMPTY_FUNC_BODY )
            
            ANTLR3_UINT32 alt8;

            alt8=2;


            {
                int LA8_0 = LA(1);
                if ( (((LA8_0 >= SLIST) && (LA8_0 <= VARLIST)) || ((LA8_0 >= DO) && (LA8_0 <= FOR)) || ((LA8_0 >= FORIN) && (LA8_0 <= WITH)) || LA8_0 == NOOP || ((LA8_0 >= TRY) && (LA8_0 <= THROW)) || LA8_0 == SWITCH || LA8_0 == LABEL || LA8_0 == FUNC_DECL || ((LA8_0 >= EXPR_LIST) && (LA8_0 <= COND_EXPR)) || ((LA8_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA8_0 <= MESSAGE_SEND_WITH_SENDER))) ) 
                {
                    alt8=1;
                }
                else if ( (LA8_0 == EMPTY_FUNC_BODY) ) 
                {
                    alt8=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 8;
                    EXCEPTION->state        = 0;


                    goto rulefunctionBodyEx;
                }
            }
            switch (alt8) 
            {
        	case 1:
        	    // .//EmersonTree.g:165:4: sourceElements
        	    {
        	        FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody748);
        	        sourceElements(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:166:4: EMPTY_FUNC_BODY
        	    {
        	         MATCHT(EMPTY_FUNC_BODY, &FOLLOW_EMPTY_FUNC_BODY_in_functionBody753); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//EmersonTree.g:170:1: statement : ( noOpStatement | msgSendStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | switchStatement | labelledStatement | throwStatement | tryStatement );
 */
static void
statement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:171:5: ( noOpStatement | msgSendStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | switchStatement | labelledStatement | throwStatement | tryStatement )
            
            ANTLR3_UINT32 alt9;

            alt9=15;

            switch ( LA(1) ) 
            {
            case NOOP:
            	{
            		alt9=1;
            	}
                break;
            case MESSAGE_SEND_WITHOUT_SENDER:
            case MESSAGE_SEND_WITH_SENDER:
            	{
            		alt9=2;
            	}
                break;
            case SLIST:
            	{
            		alt9=3;
            	}
                break;
            case VARLIST:
            	{
            		alt9=4;
            	}
                break;
            case EXPR_LIST:
            case COND_EXPR:
            	{
            		alt9=5;
            	}
                break;
            case IF:
            	{
            		alt9=6;
            	}
                break;
            case DO:
            case WHILE:
            case FOR:
            case FORIN:
            	{
            		alt9=7;
            	}
                break;
            case CONTINUE:
            	{
            		alt9=8;
            	}
                break;
            case BREAK:
            	{
            		alt9=9;
            	}
                break;
            case RETURN:
            	{
            		alt9=10;
            	}
                break;
            case WITH:
            	{
            		alt9=11;
            	}
                break;
            case SWITCH:
            	{
            		alt9=12;
            	}
                break;
            case LABEL:
            	{
            		alt9=13;
            	}
                break;
            case THROW:
            	{
            		alt9=14;
            	}
                break;
            case TRY:
            	{
            		alt9=15;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // .//EmersonTree.g:171:7: noOpStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_noOpStatement_in_statement769);
        	        noOpStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:172:7: msgSendStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_msgSendStatement_in_statement777);
        	        msgSendStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:173:7: statementBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement785);
        	        statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:174:7: variableStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement793);
        	        variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:175:7: expressionStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement801);
        	        expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:176:7: ifStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement809);
        	        ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:177:7: iterationStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement817);
        	        iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:178:7: continueStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement825);
        	        continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // .//EmersonTree.g:179:7: breakStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement833);
        	        breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 10:
        	    // .//EmersonTree.g:180:7: returnStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement841);
        	        returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 11:
        	    // .//EmersonTree.g:181:7: withStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement849);
        	        withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 12:
        	    // .//EmersonTree.g:182:7: switchStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement857);
        	        switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 13:
        	    // .//EmersonTree.g:183:7: labelledStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_labelledStatement_in_statement865);
        	        labelledStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 14:
        	    // .//EmersonTree.g:184:7: throwStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement873);
        	        throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 15:
        	    // .//EmersonTree.g:185:7: tryStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement881);
        	        tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start noOpStatement
 * .//EmersonTree.g:188:1: noOpStatement : ^( NOOP ) ;
 */
static void
noOpStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:189:9: ( ^( NOOP ) )
        // .//EmersonTree.g:189:11: ^( NOOP )
        {
             MATCHT(NOOP, &FOLLOW_NOOP_in_noOpStatement906); 
            if  (HASEXCEPTION())
            {
                goto rulenoOpStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                          
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoOpStatementEx; /* Prevent compiler warnings */
    rulenoOpStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end noOpStatement */

/** 
 * $ANTLR start statementBlock
 * .//EmersonTree.g:195:1: statementBlock : statementList ;
 */
static void
statementBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:196:2: ( statementList )
        // .//EmersonTree.g:196:4: statementList
        {
            if ( BACKTRACKING==0 ) 
            {
                APP(" {\n "); 
            }
            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock952);
            statementList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                  
                            APP(" }\n");
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start statementList
 * .//EmersonTree.g:201:1: statementList : ^( SLIST ( statement )* ) ;
 */
static void
statementList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:202:2: ( ^( SLIST ( statement )* ) )
        // .//EmersonTree.g:202:5: ^( SLIST ( statement )* )
        {
             MATCHT(SLIST, &FOLLOW_SLIST_in_statementList981); 
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:204:13: ( statement )*

                for (;;)
                {
                    int alt10=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA10_0 = LA(1);
                        if ( (((LA10_0 >= SLIST) && (LA10_0 <= VARLIST)) || ((LA10_0 >= DO) && (LA10_0 <= FOR)) || ((LA10_0 >= FORIN) && (LA10_0 <= WITH)) || LA10_0 == NOOP || ((LA10_0 >= TRY) && (LA10_0 <= THROW)) || LA10_0 == SWITCH || LA10_0 == LABEL || ((LA10_0 >= EXPR_LIST) && (LA10_0 <= COND_EXPR)) || ((LA10_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA10_0 <= MESSAGE_SEND_WITH_SENDER))) ) 
                        {
                            alt10=1;
                        }

                    }
                    switch (alt10) 
                    {
                	case 1:
                	    // .//EmersonTree.g:204:14: statement
                	    {
                	        FOLLOWPUSH(FOLLOW_statement_in_statementList997);
                	        statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulestatementListEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	            			        APP("; \n");					  
                	                            
                	        }

                	    }
                	    break;

                	default:
                	    goto loop10;	/* break out of the loop */
                	    break;
                    }
                }
                loop10: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//EmersonTree.g:211:1: variableStatement : ^( VARLIST variableDeclarationList ) ;
 */
static void
variableStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:212:2: ( ^( VARLIST variableDeclarationList ) )
        // .//EmersonTree.g:212:5: ^( VARLIST variableDeclarationList )
        {
             MATCHT(VARLIST, &FOLLOW_VARLIST_in_variableStatement1063); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("var ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1091);
            variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//EmersonTree.g:220:1: variableDeclarationList : variableDeclaration ( variableDeclaration )* ;
 */
static void
variableDeclarationList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:221:2: ( variableDeclaration ( variableDeclaration )* )
        // .//EmersonTree.g:221:4: variableDeclaration ( variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1111);
            variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:222:9: ( variableDeclaration )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == VAR) ) 
                    {
                        alt11=1;
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//EmersonTree.g:223:13: variableDeclaration
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(", ");
            	                        
            	        }
            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1151);
            	        variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//EmersonTree.g:230:1: variableDeclarationListNoIn : ( variableDeclarationNoIn )+ ;
 */
static void
variableDeclarationListNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:231:2: ( ( variableDeclarationNoIn )+ )
        // .//EmersonTree.g:231:4: ( variableDeclarationNoIn )+
        {
            // .//EmersonTree.g:231:4: ( variableDeclarationNoIn )+
            {
                int cnt12=0;

                for (;;)
                {
                    int alt12=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA12_0 = LA(1);
            	    if ( (LA12_0 == VAR) ) 
            	    {
            	        alt12=1;
            	    }

            	}
            	switch (alt12) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:0:0: variableDeclarationNoIn
            	        {
            	            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1174);
            	            variableDeclarationNoIn(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulevariableDeclarationListNoInEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt12 >= 1 )
            		{
            		    goto loop12;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulevariableDeclarationListNoInEx;
            	}
            	cnt12++;
                }
                loop12: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//EmersonTree.g:234:1: variableDeclaration : ^( VAR Identifier ( initialiser )? ) ;
 */
static void
variableDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier3;

    /* Initialize rule variables
     */


    Identifier3       = NULL;

    {
        // .//EmersonTree.g:235:2: ( ^( VAR Identifier ( initialiser )? ) )
        // .//EmersonTree.g:235:4: ^( VAR Identifier ( initialiser )? )
        {
             MATCHT(VAR, &FOLLOW_VAR_in_variableDeclaration1201); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier3 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1215); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier3->getText(Identifier3))->chars);
                            
            }

            // .//EmersonTree.g:242:13: ( initialiser )?
            {
                int alt13=2;
                {
                    int LA13_0 = LA(1);
                    if ( (((LA13_0 >= EXPR_LIST) && (LA13_0 <= COND_EXPR))) ) 
                    {
                        alt13=1;
                    }
                }
                switch (alt13) 
                {
            	case 1:
            	    // .//EmersonTree.g:243:17: initialiser
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1293);
            	        initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//EmersonTree.g:251:1: variableDeclarationNoIn : ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static void
variableDeclarationNoIn(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier4;

    /* Initialize rule variables
     */


    Identifier4       = NULL;

    {
        // .//EmersonTree.g:252:2: ( ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//EmersonTree.g:253:9: ^( VAR Identifier ( initialiserNoIn )? )
        {
             MATCHT(VAR, &FOLLOW_VAR_in_variableDeclarationNoIn1353); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("var ");
                			
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier4 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1372); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier4->getText(Identifier4))->chars);
                            
            }

            // .//EmersonTree.g:263:13: ( initialiserNoIn )?
            {
                int alt14=2;
                {
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == EXPR_LIST || LA14_0 == COND_EXPR_NOIN) ) 
                    {
                        alt14=1;
                    }
                }
                switch (alt14) 
                {
            	case 1:
            	    // .//EmersonTree.g:264:17: initialiserNoIn
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1450);
            	        initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//EmersonTree.g:273:1: initialiser : expression ;
 */
static void
initialiser(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:274:2: ( expression )
        // .//EmersonTree.g:274:4: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_initialiser1493);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//EmersonTree.g:277:1: initialiserNoIn : expressionNoIn ;
 */
static void
initialiserNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:278:2: ( expressionNoIn )
        // .//EmersonTree.g:278:4: expressionNoIn
        {
            FOLLOWPUSH(FOLLOW_expressionNoIn_in_initialiserNoIn1506);
            expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start expressionStatement
 * .//EmersonTree.g:282:1: expressionStatement : expression ;
 */
static void
expressionStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:283:2: ( expression )
        // .//EmersonTree.g:283:4: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1520);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start ifStatement
 * .//EmersonTree.g:286:1: ifStatement : ^( IF expression ( statement )? ( statement )? ) ;
 */
static void
ifStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:287:2: ( ^( IF expression ( statement )? ( statement )? ) )
        // .//EmersonTree.g:287:4: ^( IF expression ( statement )? ( statement )? )
        {
             MATCHT(IF, &FOLLOW_IF_in_ifStatement1533); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                
                                APP(" if ");
                                APP(" ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1562);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) \n{");
                            
            }

            // .//EmersonTree.g:297:13: ( statement )?
            {
                int alt15=2;
                alt15 = cdfa15.predict(ctx, RECOGNIZER, ISTREAM, &cdfa15);
                if  (HASEXCEPTION())
                {
                    goto ruleifStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                switch (alt15) 
                {
            	case 1:
            	    // .//EmersonTree.g:297:14: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1592);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(" \n");
            	                        
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            // .//EmersonTree.g:305:13: ( statement )?
            {
                int alt16=2;
                {
                    int LA16_0 = LA(1);
                    if ( (((LA16_0 >= SLIST) && (LA16_0 <= VARLIST)) || ((LA16_0 >= DO) && (LA16_0 <= FOR)) || ((LA16_0 >= FORIN) && (LA16_0 <= WITH)) || LA16_0 == NOOP || ((LA16_0 >= TRY) && (LA16_0 <= THROW)) || LA16_0 == SWITCH || LA16_0 == LABEL || ((LA16_0 >= EXPR_LIST) && (LA16_0 <= COND_EXPR)) || ((LA16_0 >= MESSAGE_SEND_WITHOUT_SENDER) && (LA16_0 <= MESSAGE_SEND_WITH_SENDER))) ) 
                    {
                        alt16=1;
                    }
                }
                switch (alt16) 
                {
            	case 1:
            	    // .//EmersonTree.g:306:17: statement
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP("else \n{");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1686);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP("\n}");
            	                            
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//EmersonTree.g:317:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static void
iterationStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:318:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt17;

            alt17=4;

            switch ( LA(1) ) 
            {
            case DO:
            	{
            		alt17=1;
            	}
                break;
            case WHILE:
            	{
            		alt17=2;
            	}
                break;
            case FOR:
            	{
            		alt17=3;
            	}
                break;
            case FORIN:
            	{
            		alt17=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 17;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt17) 
            {
        	case 1:
        	    // .//EmersonTree.g:318:4: doWhileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1741);
        	        doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:319:4: whileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1746);
        	        whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:320:4: forStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1751);
        	        forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:321:4: forInStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1756);
        	        forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//EmersonTree.g:324:1: doWhileStatement : ^( DO statement expression ) ;
 */
static void
doWhileStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:325:2: ( ^( DO statement expression ) )
        // .//EmersonTree.g:325:4: ^( DO statement expression )
        {
             MATCHT(DO, &FOLLOW_DO_in_doWhileStatement1783); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" do ");  						  
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1811);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                                APP("while ( " );      
                            
            }
            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1839);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) ");  
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//EmersonTree.g:345:1: whileStatement : ^( WHILE expression statement ) ;
 */
static void
whileStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:346:2: ( ^( WHILE expression statement ) )
        // .//EmersonTree.g:346:4: ^( WHILE expression statement )
        {
             MATCHT(WHILE, &FOLLOW_WHILE_in_whileStatement1890); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" while ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1918);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) "); 
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }
            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1947);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//EmersonTree.g:365:1: forStatement : ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) ;
 */
static void
forStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:366:2: ( ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) )
        // .//EmersonTree.g:366:4: ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement )
        {
             MATCHT(FOR, &FOLLOW_FOR_in_forStatement1997); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" for ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:371:13: ( ^( FORINIT forStatementInitialiserPart ) )?
            {
                int alt18=2;
                {
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == FORINIT) ) 
                    {
                        alt18=1;
                    }
                }
                switch (alt18) 
                {
            	case 1:
            	    // .//EmersonTree.g:371:14: ^( FORINIT forStatementInitialiserPart )
            	    {
            	         MATCHT(FORINIT, &FOLLOW_FORINIT_in_forStatement2028); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement2030);
            	        forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ; ");
                            
            }

            // .//EmersonTree.g:375:13: ( ^( FORCOND expression ) )?
            {
                int alt19=2;
                {
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == FORCOND) ) 
                    {
                        alt19=1;
                    }
                }
                switch (alt19) 
                {
            	case 1:
            	    // .//EmersonTree.g:375:14: ^( FORCOND expression )
            	    {
            	         MATCHT(FORCOND, &FOLLOW_FORCOND_in_forStatement2063); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2065);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ; ");
                            
            }

            // .//EmersonTree.g:379:13: ( ^( FORITER expression ) )?
            {
                int alt20=2;
                {
                    int LA20_0 = LA(1);
                    if ( (LA20_0 == FORITER) ) 
                    {
                        alt20=1;
                    }
                }
                switch (alt20) 
                {
            	case 1:
            	    // .//EmersonTree.g:379:14: ^( FORITER expression )
            	    {
            	         MATCHT(FORITER, &FOLLOW_FORITER_in_forStatement2099); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2101);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) ");
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }
            FOLLOWPUSH(FOLLOW_statement_in_forStatement2134);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//EmersonTree.g:393:1: forStatementInitialiserPart : ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) );
 */
static void
forStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:394:5: ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt21;

            alt21=2;


            {
                int LA21_0 = LA(1);
                if ( (LA21_0 == EXPR_LIST || LA21_0 == COND_EXPR_NOIN) ) 
                {
                    alt21=1;
                }
                else if ( (LA21_0 == VARLIST) ) 
                {
                    alt21=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 21;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt21) 
            {
        	case 1:
        	    // .//EmersonTree.g:394:7: expressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart2173);
        	        expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:395:7: ^( VARLIST variableDeclarationListNoIn )
        	    {
        	         MATCHT(VARLIST, &FOLLOW_VARLIST_in_forStatementInitialiserPart2182); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2184);
        	        variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//EmersonTree.g:398:1: forInStatement : ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static void
forInStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:399:2: ( ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//EmersonTree.g:399:4: ^( FORIN forInStatementInitialiserPart expression statement )
        {
             MATCHT(FORIN, &FOLLOW_FORIN_in_forInStatement2210); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(" for ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement2232);
            forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" in ");
                        
            }
            FOLLOWPUSH(FOLLOW_expression_in_forInStatement2253);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) ");
                            //resource checking
                            APP("{\n");
                            CHECK_RESOURCES();
                        
            }
            FOLLOWPUSH(FOLLOW_statement_in_forInStatement2274);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP("\n}\n");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//EmersonTree.g:423:1: forInStatementInitialiserPart : ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) );
 */
static void
forInStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:424:2: ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt22;

            alt22=2;


            {
                int LA22_0 = LA(1);
                if ( (((LA22_0 >= CALL) && (LA22_0 <= DOT)) || LA22_0 == NEW || LA22_0 == VECTOR || LA22_0 == DOLLAR_EXPRESSION || ((LA22_0 >= ARRAY_LITERAL) && (LA22_0 <= OBJ_LITERAL)) || LA22_0 == FUNC_EXPR || ((LA22_0 >= PAREN) && (LA22_0 <= PATTERN_LITERAL)) || ((LA22_0 >= Identifier) && (LA22_0 <= StringLiteral)) || LA22_0 == 201 || ((LA22_0 >= 203) && (LA22_0 <= 205))) ) 
                {
                    alt22=1;
                }
                else if ( (LA22_0 == VAR) ) 
                {
                    alt22=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 22;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//EmersonTree.g:424:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2306);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:425:4: ^( VAR variableDeclarationNoIn )
        	    {
        	         MATCHT(VAR, &FOLLOW_VAR_in_forInStatementInitialiserPart2312); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2314);
        	        variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//EmersonTree.g:428:1: continueStatement : ^( CONTINUE ( Identifier )? ) ;
 */
static void
continueStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier5;

    /* Initialize rule variables
     */


    Identifier5       = NULL;

    {
        // .//EmersonTree.g:429:5: ( ^( CONTINUE ( Identifier )? ) )
        // .//EmersonTree.g:429:7: ^( CONTINUE ( Identifier )? )
        {
             MATCHT(CONTINUE, &FOLLOW_CONTINUE_in_continueStatement2339); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("continue ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:434:9: ( Identifier )?
                {
                    int alt23=2;
                    {
                        int LA23_0 = LA(1);
                        if ( (LA23_0 == Identifier) ) 
                        {
                            alt23=1;
                        }
                    }
                    switch (alt23) 
                    {
                	case 1:
                	    // .//EmersonTree.g:435:13: Identifier
                	    {
                	        Identifier5 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2375); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecontinueStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            APP((const char*)(Identifier5->getText(Identifier5))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//EmersonTree.g:443:1: breakStatement : ^( BREAK ( Identifier )? ) ;
 */
static void
breakStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier6;

    /* Initialize rule variables
     */


    Identifier6       = NULL;

    {
        // .//EmersonTree.g:444:5: ( ^( BREAK ( Identifier )? ) )
        // .//EmersonTree.g:444:7: ^( BREAK ( Identifier )? )
        {
             MATCHT(BREAK, &FOLLOW_BREAK_in_breakStatement2432); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("break ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:449:9: ( Identifier )?
                {
                    int alt24=2;
                    {
                        int LA24_0 = LA(1);
                        if ( (LA24_0 == Identifier) ) 
                        {
                            alt24=1;
                        }
                    }
                    switch (alt24) 
                    {
                	case 1:
                	    // .//EmersonTree.g:450:13: Identifier
                	    {
                	        Identifier6 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2466); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulebreakStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            APP((const char*)(Identifier6->getText(Identifier6))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//EmersonTree.g:459:1: returnStatement : ^( RETURN ( expression )? ) ;
 */
static void
returnStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:460:5: ( ^( RETURN ( expression )? ) )
        // .//EmersonTree.g:460:7: ^( RETURN ( expression )? )
        {
             MATCHT(RETURN, &FOLLOW_RETURN_in_returnStatement2526); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("return ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:465:9: ( expression )?
                {
                    int alt25=2;
                    {
                        int LA25_0 = LA(1);
                        if ( (((LA25_0 >= EXPR_LIST) && (LA25_0 <= COND_EXPR))) ) 
                        {
                            alt25=1;
                        }
                    }
                    switch (alt25) 
                    {
                	case 1:
                	    // .//EmersonTree.g:466:13: expression
                	    {
                	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2563);
                	        expression(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulereturnStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//EmersonTree.g:471:1: withStatement : ^( WITH expression statement ) ;
 */
static void
withStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:472:5: ( ^( WITH expression statement ) )
        // .//EmersonTree.g:472:7: ^( WITH expression statement )
        {
             MATCHT(WITH, &FOLLOW_WITH_in_withStatement2599); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {
                APP("with ( ");
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_withStatement2625);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                APP(" )");
            }
            FOLLOWPUSH(FOLLOW_statement_in_withStatement2661);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start labelledStatement
 * .//EmersonTree.g:483:1: labelledStatement : ^( LABEL Identifier statement ) ;
 */
static void
labelledStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier7;

    /* Initialize rule variables
     */


    Identifier7       = NULL;

    {
        // .//EmersonTree.g:484:5: ( ^( LABEL Identifier statement ) )
        // .//EmersonTree.g:484:7: ^( LABEL Identifier statement )
        {
             MATCHT(LABEL, &FOLLOW_LABEL_in_labelledStatement2687); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier7 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_labelledStatement2698); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP((const char*)(Identifier7->getText(Identifier7))->chars);
                            APP(" : \n");
                        
            }
            FOLLOWPUSH(FOLLOW_statement_in_labelledStatement2719);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelabelledStatementEx; /* Prevent compiler warnings */
    rulelabelledStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end labelledStatement */

/** 
 * $ANTLR start switchStatement
 * .//EmersonTree.g:494:1: switchStatement : ^( SWITCH expression caseBlock ) ;
 */
static void
switchStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:495:5: ( ^( SWITCH expression caseBlock ) )
        // .//EmersonTree.g:495:7: ^( SWITCH expression caseBlock )
        {
             MATCHT(SWITCH, &FOLLOW_SWITCH_in_switchStatement2754); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(" switch ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2775);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) \n");
                            APP("{ \n");
                        
            }
            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2796);
            caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP("} \n");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//EmersonTree.g:516:1: caseBlock : ( ^( CASE_BLOCK ( caseClause )? ) | ^( CASE_BLOCK defaultClause ) );
 */
static void
caseBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:517:5: ( ^( CASE_BLOCK ( caseClause )? ) | ^( CASE_BLOCK defaultClause ) )
            
            ANTLR3_UINT32 alt27;

            alt27=2;


            {
                int LA27_0 = LA(1);
                if ( (LA27_0 == CASE_BLOCK) ) 
                {

                    {
                        int LA27_1 = LA(2);
                        if ( (LA27_1 == DOWN) ) 
                        {

                            {
                                int LA27_2 = LA(3);
                                if ( (LA27_2 == DEFAULT) ) 
                                {
                                    alt27=2;
                                }
                                else if ( (LA27_2 == UP || LA27_2 == CASE) ) 
                                {
                                    alt27=1;
                                }
                                else 
                                {
                                    if (BACKTRACKING>0)
                                    {
                                        FAILEDFLAG = ANTLR3_TRUE; 
                                        return ;
                                    }
                                
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                    EXCEPTION->message      = (void *)"";
                                    EXCEPTION->decisionNum  = 27;
                                    EXCEPTION->state        = 2;


                                    goto rulecaseBlockEx;
                                }
                            }
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 27;
                            EXCEPTION->state        = 1;


                            goto rulecaseBlockEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 27;
                    EXCEPTION->state        = 0;


                    goto rulecaseBlockEx;
                }
            }
            switch (alt27) 
            {
        	case 1:
        	    // .//EmersonTree.g:517:7: ^( CASE_BLOCK ( caseClause )? )
        	    {
        	         MATCHT(CASE_BLOCK, &FOLLOW_CASE_BLOCK_in_caseBlock2835); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	            // .//EmersonTree.g:518:9: ( caseClause )?
        	            {
        	                int alt26=2;
        	                {
        	                    int LA26_0 = LA(1);
        	                    if ( (LA26_0 == CASE) ) 
        	                    {
        	                        alt26=1;
        	                    }
        	                }
        	                switch (alt26) 
        	                {
        	            	case 1:
        	            	    // .//EmersonTree.g:0:0: caseClause
        	            	    {
        	            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2845);
        	            	        caseClause(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulecaseBlockEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }

        	            	    }
        	            	    break;

        	                }
        	            }

        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:520:7: ^( CASE_BLOCK defaultClause )
        	    {
        	         MATCHT(CASE_BLOCK, &FOLLOW_CASE_BLOCK_in_caseBlock2861); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2871);
        	        defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//EmersonTree.g:526:1: caseClause : ( ^( CASE expression ( statementList )? ( caseClause )? ) | ^( CASE expression ( statementList )? defaultClause ) );
 */
static void
caseClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:527:5: ( ^( CASE expression ( statementList )? ( caseClause )? ) | ^( CASE expression ( statementList )? defaultClause ) )
            
            ANTLR3_UINT32 alt31;

            alt31=2;


            {
                int LA31_0 = LA(1);
                if ( (LA31_0 == CASE) ) 
                {

                    {
                        int LA31_1 = LA(2);
                        if ( (synpred45_EmersonTree(ctx)) ) 
                        {
                            alt31=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt31=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 31;
                            EXCEPTION->state        = 1;


                            goto rulecaseClauseEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 31;
                    EXCEPTION->state        = 0;


                    goto rulecaseClauseEx;
                }
            }
            switch (alt31) 
            {
        	case 1:
        	    // .//EmersonTree.g:527:7: ^( CASE expression ( statementList )? ( caseClause )? )
        	    {
        	         MATCHT(CASE, &FOLLOW_CASE_in_caseClause2901); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("case ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_caseClause2921);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(":");
        	                    
        	        }

        	        // .//EmersonTree.g:535:9: ( statementList )?
        	        {
        	            int alt28=2;
        	            {
        	                int LA28_0 = LA(1);
        	                if ( (LA28_0 == SLIST) ) 
        	                {
        	                    alt28=1;
        	                }
        	            }
        	            switch (alt28) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2941);
        	        	        statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//EmersonTree.g:536:9: ( caseClause )?
        	        {
        	            int alt29=2;
        	            {
        	                int LA29_0 = LA(1);
        	                if ( (LA29_0 == CASE) ) 
        	                {
        	                    alt29=1;
        	                }
        	            }
        	            switch (alt29) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseClause2952);
        	        	        caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:538:7: ^( CASE expression ( statementList )? defaultClause )
        	    {
        	         MATCHT(CASE, &FOLLOW_CASE_in_caseClause2973); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("case ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_caseClause2993);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(":");
        	                    
        	        }

        	        // .//EmersonTree.g:546:9: ( statementList )?
        	        {
        	            int alt30=2;
        	            {
        	                int LA30_0 = LA(1);
        	                if ( (LA30_0 == SLIST) ) 
        	                {
        	                    alt30=1;
        	                }
        	            }
        	            switch (alt30) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause3013);
        	        	        statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseClause3024);
        	        defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//EmersonTree.g:551:1: defaultClause : ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static void
defaultClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:552:5: ( ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//EmersonTree.g:552:6: ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
        {
             MATCHT(DEFAULT, &FOLLOW_DEFAULT_in_defaultClause3051); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("default: ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:556:9: ( statementList )?
                {
                    int alt32=2;
                    {
                        int LA32_0 = LA(1);
                        if ( (LA32_0 == SLIST) ) 
                        {
                            alt32=1;
                        }
                    }
                    switch (alt32) 
                    {
                	case 1:
                	    // .//EmersonTree.g:0:0: statementList
                	    {
                	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause3071);
                	        statementList(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledefaultClauseEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                // .//EmersonTree.g:557:9: ( caseClauseSeenDefault )?
                {
                    int alt33=2;
                    {
                        int LA33_0 = LA(1);
                        if ( (LA33_0 == CASE) ) 
                        {
                            alt33=1;
                        }
                    }
                    switch (alt33) 
                    {
                	case 1:
                	    // .//EmersonTree.g:0:0: caseClauseSeenDefault
                	    {
                	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_defaultClause3082);
                	        caseClauseSeenDefault(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledefaultClauseEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start caseClauseSeenDefault
 * .//EmersonTree.g:561:1: caseClauseSeenDefault : ^( CASE expression ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static void
caseClauseSeenDefault(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:562:5: ( ^( CASE expression ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//EmersonTree.g:562:7: ^( CASE expression ( statementList )? ( caseClauseSeenDefault )? )
        {
             MATCHT(CASE, &FOLLOW_CASE_in_caseClauseSeenDefault3110); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("case ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_caseClauseSeenDefault3130);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(":");
                        
            }

            // .//EmersonTree.g:570:9: ( statementList )?
            {
                int alt34=2;
                {
                    int LA34_0 = LA(1);
                    if ( (LA34_0 == SLIST) ) 
                    {
                        alt34=1;
                    }
                }
                switch (alt34) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClauseSeenDefault3150);
            	        statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            // .//EmersonTree.g:571:9: ( caseClauseSeenDefault )?
            {
                int alt35=2;
                {
                    int LA35_0 = LA(1);
                    if ( (LA35_0 == CASE) ) 
                    {
                        alt35=1;
                    }
                }
                switch (alt35) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3161);
            	        caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseSeenDefaultEx; /* Prevent compiler warnings */
    rulecaseClauseSeenDefaultEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseClauseSeenDefault */

/** 
 * $ANTLR start throwStatement
 * .//EmersonTree.g:577:1: throwStatement : ^( THROW expression ) ;
 */
static void
throwStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:578:5: ( ^( THROW expression ) )
        // .//EmersonTree.g:578:7: ^( THROW expression )
        {
             MATCHT(THROW, &FOLLOW_THROW_in_throwStatement3196); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("throw ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_throwStatement3216);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//EmersonTree.g:589:1: tryStatement : ^( TRY statementBlock catchFinallyBlock ) ;
 */
static void
tryStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:590:9: ( ^( TRY statementBlock catchFinallyBlock ) )
        // .//EmersonTree.g:590:11: ^( TRY statementBlock catchFinallyBlock )
        {
             MATCHT(TRY, &FOLLOW_TRY_in_tryStatement3258); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("try\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement3286);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_catchFinallyBlock_in_tryStatement3300);
            catchFinallyBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchFinallyBlock
 * .//EmersonTree.g:599:1: catchFinallyBlock : ( catchBlock ( finallyBlock )? | finallyBlock );
 */
static void
catchFinallyBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:600:9: ( catchBlock ( finallyBlock )? | finallyBlock )
            
            ANTLR3_UINT32 alt37;

            alt37=2;


            {
                int LA37_0 = LA(1);
                if ( (LA37_0 == CATCH) ) 
                {
                    alt37=1;
                }
                else if ( (LA37_0 == FINALLY) ) 
                {
                    alt37=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 37;
                    EXCEPTION->state        = 0;


                    goto rulecatchFinallyBlockEx;
                }
            }
            switch (alt37) 
            {
        	case 1:
        	    // .//EmersonTree.g:600:11: catchBlock ( finallyBlock )?
        	    {
        	        FOLLOWPUSH(FOLLOW_catchBlock_in_catchFinallyBlock3338);
        	        catchBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:600:22: ( finallyBlock )?
        	        {
        	            int alt36=2;
        	            {
        	                int LA36_0 = LA(1);
        	                if ( (LA36_0 == FINALLY) ) 
        	                {
        	                    alt36=1;
        	                }
        	            }
        	            switch (alt36) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: finallyBlock
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3340);
        	        	        finallyBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:601:11: finallyBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3353);
        	        finallyBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchFinallyBlockEx; /* Prevent compiler warnings */
    rulecatchFinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchFinallyBlock */

/** 
 * $ANTLR start catchBlock
 * .//EmersonTree.g:604:1: catchBlock : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchBlock(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier8;

    /* Initialize rule variables
     */


    Identifier8       = NULL;

    {
        // .//EmersonTree.g:605:9: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:605:11: ^( CATCH Identifier statementBlock )
        {
             MATCHT(CATCH, &FOLLOW_CATCH_in_catchBlock3379); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("catch (");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier8 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchBlock3407); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier8->getText(Identifier8))->chars);
                                APP( ")\n");
                                APP(" {  \n");
                                APP(" if ( system.__isResetting() ) \n { \n");
                                APP("throw '__resetting__';\n}\n");
                                CHECK_RESOURCES();
                            
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchBlock3435);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("  } \n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchBlockEx; /* Prevent compiler warnings */
    rulecatchBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchBlock */

/** 
 * $ANTLR start finallyBlock
 * .//EmersonTree.g:625:1: finallyBlock : ^( FINALLY statementBlock ) ;
 */
static void
finallyBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:626:9: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:626:11: ^( FINALLY statementBlock )
        {
             MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyBlock3488); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("finally \n");
                                APP(" {  \n");  
                                APP(" if ( system.__isResetting() ) \n { \n");
                                APP("throw '__resetting__';\n}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyBlock3516);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyBlockEx; /* Prevent compiler warnings */
    rulefinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyBlock */

/** 
 * $ANTLR start msgSendStatement
 * .//EmersonTree.g:640:1: msgSendStatement : ( ^( MESSAGE_SEND_WITHOUT_SENDER leftHandSideExpression leftHandSideExpression ( memberExpression )* ) | ^( MESSAGE_SEND_WITH_SENDER leftHandSideExpression leftHandSideExpression leftHandSideExpression ( memberExpression )* ) );
 */
static void
msgSendStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:641:9: ( ^( MESSAGE_SEND_WITHOUT_SENDER leftHandSideExpression leftHandSideExpression ( memberExpression )* ) | ^( MESSAGE_SEND_WITH_SENDER leftHandSideExpression leftHandSideExpression leftHandSideExpression ( memberExpression )* ) )
            
            ANTLR3_UINT32 alt40;

            alt40=2;


            {
                int LA40_0 = LA(1);
                if ( (LA40_0 == MESSAGE_SEND_WITHOUT_SENDER) ) 
                {
                    alt40=1;
                }
                else if ( (LA40_0 == MESSAGE_SEND_WITH_SENDER) ) 
                {
                    alt40=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 40;
                    EXCEPTION->state        = 0;


                    goto rulemsgSendStatementEx;
                }
            }
            switch (alt40) 
            {
        	case 1:
        	    // .//EmersonTree.g:641:11: ^( MESSAGE_SEND_WITHOUT_SENDER leftHandSideExpression leftHandSideExpression ( memberExpression )* )
        	    {
        	         MATCHT(MESSAGE_SEND_WITHOUT_SENDER, &FOLLOW_MESSAGE_SEND_WITHOUT_SENDER_in_msgSendStatement3569); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("system.sendMessage(system.self," );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement3597);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //message to send
        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement3625);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //recipient
        	                        
        	        }

        	        // .//EmersonTree.g:654:13: ( memberExpression )*

        	        for (;;)
        	        {
        	            int alt38=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA38_0 = LA(1);
        	                if ( (((LA38_0 >= ARRAY_INDEX) && (LA38_0 <= DOT)) || LA38_0 == NEW || LA38_0 == VECTOR || LA38_0 == DOLLAR_EXPRESSION || ((LA38_0 >= ARRAY_LITERAL) && (LA38_0 <= OBJ_LITERAL)) || LA38_0 == FUNC_EXPR || ((LA38_0 >= PAREN) && (LA38_0 <= PATTERN_LITERAL)) || ((LA38_0 >= Identifier) && (LA38_0 <= StringLiteral)) || LA38_0 == 201 || ((LA38_0 >= 203) && (LA38_0 <= 205))) ) 
        	                {
        	                    alt38=1;
        	                }

        	            }
        	            switch (alt38) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:655:16: memberExpression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                                //optional what to do in case of failure
        	        	                                APP(",");
        	        	                           
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement3687);
        	        	        memberExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgSendStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop38;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop38: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" )");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:665:11: ^( MESSAGE_SEND_WITH_SENDER leftHandSideExpression leftHandSideExpression leftHandSideExpression ( memberExpression )* )
        	    {
        	         MATCHT(MESSAGE_SEND_WITH_SENDER, &FOLLOW_MESSAGE_SEND_WITH_SENDER_in_msgSendStatement3741); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("system.sendMessage(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement3769);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //sender
        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement3809);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //message to send
        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement3837);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            //recipient
        	                        
        	        }

        	        // .//EmersonTree.g:683:13: ( memberExpression )*

        	        for (;;)
        	        {
        	            int alt39=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA39_0 = LA(1);
        	                if ( (((LA39_0 >= ARRAY_INDEX) && (LA39_0 <= DOT)) || LA39_0 == NEW || LA39_0 == VECTOR || LA39_0 == DOLLAR_EXPRESSION || ((LA39_0 >= ARRAY_LITERAL) && (LA39_0 <= OBJ_LITERAL)) || LA39_0 == FUNC_EXPR || ((LA39_0 >= PAREN) && (LA39_0 <= PATTERN_LITERAL)) || ((LA39_0 >= Identifier) && (LA39_0 <= StringLiteral)) || LA39_0 == 201 || ((LA39_0 >= 203) && (LA39_0 <= 205))) ) 
        	                {
        	                    alt39=1;
        	                }

        	            }
        	            switch (alt39) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:684:16: memberExpression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                                //optional what to do in case of failure
        	        	                                APP(",");
        	        	                           
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement3899);
        	        	        memberExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgSendStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop39;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop39: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" )");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSendStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSendStatementEx; /* Prevent compiler warnings */
    rulemsgSendStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgSendStatement */

/** 
 * $ANTLR start memAndCallExpression
 * .//EmersonTree.g:758:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static void
memAndCallExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:759:1: ( memberExpression | callExpression )
            
            ANTLR3_UINT32 alt41;

            alt41=2;

            alt41 = cdfa41.predict(ctx, RECOGNIZER, ISTREAM, &cdfa41);
            if  (HASEXCEPTION())
            {
                goto rulememAndCallExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt41) 
            {
        	case 1:
        	    // .//EmersonTree.g:759:3: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memAndCallExpression4024);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:760:3: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_memAndCallExpression4028);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememAndCallExpressionEx; /* Prevent compiler warnings */
    rulememAndCallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memAndCallExpression */

/** 
 * $ANTLR start msgRecvStatement
 * .//EmersonTree.g:763:1: msgRecvStatement : ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression ) | ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression ) | ^( MESSAGE_RECV callExpression leftHandSideExpression ) );
 */
static void
msgRecvStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:764:2: ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression ) | ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression ) | ^( MESSAGE_RECV callExpression leftHandSideExpression ) )
            
            ANTLR3_UINT32 alt42;

            alt42=3;


            {
                int LA42_0 = LA(1);
                if ( (LA42_0 == MESSAGE_RECV) ) 
                {

                    {
                        int LA42_1 = LA(2);
                        if ( (synpred57_EmersonTree(ctx)) ) 
                        {
                            alt42=1;
                        }
                        else if ( (synpred58_EmersonTree(ctx)) ) 
                        {
                            alt42=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt42=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 42;
                            EXCEPTION->state        = 1;


                            goto rulemsgRecvStatementEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 42;
                    EXCEPTION->state        = 0;


                    goto rulemsgRecvStatementEx;
                }
            }
            switch (alt42) 
            {
        	case 1:
        	    // .//EmersonTree.g:764:4: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression )
        	    {
        	         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_msgRecvStatement4047); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("system.registerHandler( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement4063);
        	        memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(", ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement4080);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(", null) ");  // No sender case
        	                
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:781:3: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression )
        	    {
        	         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_msgRecvStatement4108); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP("system.registerHandler( ");
        	                
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement4120);
        	        memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(", ");
        	                
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement4133);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(", ");
        	                
        	        }
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement4145);
        	        memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(") "); // Case with sender
        	               
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:800:3: ^( MESSAGE_RECV callExpression leftHandSideExpression )
        	    {
        	         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_msgRecvStatement4168); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("system.registerHandler( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_msgRecvStatement4184);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(", ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement4201);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(", null) ");  // No sender case
        	                
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvStatementEx; /* Prevent compiler warnings */
    rulemsgRecvStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgRecvStatement */

/** 
 * $ANTLR start catchClause
 * .//EmersonTree.g:819:1: catchClause : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchClause(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier9;

    /* Initialize rule variables
     */


    Identifier9       = NULL;

    {
        // .//EmersonTree.g:820:2: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:820:4: ^( CATCH Identifier statementBlock )
        {
             MATCHT(CATCH, &FOLLOW_CATCH_in_catchClause4227); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                					  APP(" catch ( ");
                					
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier9 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause4242); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                					  APP((const char*)(Identifier9->getText(Identifier9))->chars);
                					  APP(" ) ");

                					
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause4263);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//EmersonTree.g:835:1: finallyClause : ^( FINALLY statementBlock ) ;
 */
static void
finallyClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:836:2: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:836:4: ^( FINALLY statementBlock )
        {
             MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyClause4283); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                				  APP(" finally ");

                				
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause4296);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start expression
 * .//EmersonTree.g:847:1: expression : ( ^( EXPR_LIST assignmentExpression ) | ^( COND_EXPR conditionalExpression ) );
 */
static void
expression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:848:2: ( ^( EXPR_LIST assignmentExpression ) | ^( COND_EXPR conditionalExpression ) )
            
            ANTLR3_UINT32 alt43;

            alt43=2;


            {
                int LA43_0 = LA(1);
                if ( (LA43_0 == EXPR_LIST) ) 
                {
                    alt43=1;
                }
                else if ( (LA43_0 == COND_EXPR) ) 
                {
                    alt43=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 43;
                    EXCEPTION->state        = 0;


                    goto ruleexpressionEx;
                }
            }
            switch (alt43) 
            {
        	case 1:
        	    // .//EmersonTree.g:848:4: ^( EXPR_LIST assignmentExpression )
        	    {
        	         MATCHT(EXPR_LIST, &FOLLOW_EXPR_LIST_in_expression4321); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression4323);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:849:11: ^( COND_EXPR conditionalExpression )
        	    {
        	         MATCHT(COND_EXPR, &FOLLOW_COND_EXPR_in_expression4337); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_expression4339);
        	        conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//EmersonTree.g:852:1: expressionNoIn : ( ^( EXPR_LIST assignmentExpressionNoIn ) | ^( COND_EXPR_NOIN conditionalExpressionNoIn ) );
 */
static void
expressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:853:2: ( ^( EXPR_LIST assignmentExpressionNoIn ) | ^( COND_EXPR_NOIN conditionalExpressionNoIn ) )
            
            ANTLR3_UINT32 alt44;

            alt44=2;


            {
                int LA44_0 = LA(1);
                if ( (LA44_0 == EXPR_LIST) ) 
                {
                    alt44=1;
                }
                else if ( (LA44_0 == COND_EXPR_NOIN) ) 
                {
                    alt44=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 44;
                    EXCEPTION->state        = 0;


                    goto ruleexpressionNoInEx;
                }
            }
            switch (alt44) 
            {
        	case 1:
        	    // .//EmersonTree.g:853:4: ^( EXPR_LIST assignmentExpressionNoIn )
        	    {
        	         MATCHT(EXPR_LIST, &FOLLOW_EXPR_LIST_in_expressionNoIn4353); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn4355);
        	        assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:854:11: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	    {
        	         MATCHT(COND_EXPR_NOIN, &FOLLOW_COND_EXPR_NOIN_in_expressionNoIn4369); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_expressionNoIn4371);
        	        conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//EmersonTree.g:858:1: assignmentExpression : ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpression ) ;
 */
static void
assignmentExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionTop = pEmersonTree_assignmentExpressionPush(ctx);
    {
        // .//EmersonTree.g:864:9: ( ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpression ) )
        // .//EmersonTree.g:864:11: ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpression )
        {

            // .//EmersonTree.g:865:13: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
            {
                int alt45=9;
                switch ( LA(1) ) 
                {
                case ASSIGN:
                	{
                		alt45=1;
                	}
                    break;
                case MULT_ASSIGN:
                	{
                		alt45=2;
                	}
                    break;
                case DIV_ASSIGN:
                	{
                		alt45=3;
                	}
                    break;
                case MOD_ASSIGN:
                	{
                		alt45=4;
                	}
                    break;
                case ADD_ASSIGN:
                	{
                		alt45=5;
                	}
                    break;
                case SUB_ASSIGN:
                	{
                		alt45=6;
                	}
                    break;
                case AND_ASSIGN:
                	{
                		alt45=7;
                	}
                    break;
                case EXP_ASSIGN:
                	{
                		alt45=8;
                	}
                    break;
                case OR_ASSIGN:
                	{
                		alt45=9;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_assignmentExpressionPop(ctx);

                        return ;
                    }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 45;
                    EXCEPTION->state        = 0;


                    goto ruleassignmentExpressionEx;
                }

                switch (alt45) 
                {
            	case 1:
            	    // .//EmersonTree.g:866:17: ASSIGN
            	    {
            	         MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpression4429); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " = ";    
            	        }

            	    }
            	    break;
            	case 2:
            	    // .//EmersonTree.g:867:19: MULT_ASSIGN
            	    {
            	         MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpression4466); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " *= ";  
            	        }

            	    }
            	    break;
            	case 3:
            	    // .//EmersonTree.g:868:19: DIV_ASSIGN
            	    {
            	         MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpression4496); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " /= ";  
            	        }

            	    }
            	    break;
            	case 4:
            	    // .//EmersonTree.g:869:19: MOD_ASSIGN
            	    {
            	         MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpression4527); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " %= ";  
            	        }

            	    }
            	    break;
            	case 5:
            	    // .//EmersonTree.g:870:19: ADD_ASSIGN
            	    {
            	         MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpression4558); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " += ";  
            	        }

            	    }
            	    break;
            	case 6:
            	    // .//EmersonTree.g:871:19: SUB_ASSIGN
            	    {
            	         MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpression4590); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " -= ";  
            	        }

            	    }
            	    break;
            	case 7:
            	    // .//EmersonTree.g:872:19: AND_ASSIGN
            	    {
            	         MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpression4622); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " &= "; 
            	        }

            	    }
            	    break;
            	case 8:
            	    // .//EmersonTree.g:873:19: EXP_ASSIGN
            	    {
            	         MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpression4653); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " ^= "; 
            	        }

            	    }
            	    break;
            	case 9:
            	    // .//EmersonTree.g:874:19: OR_ASSIGN
            	    {
            	         MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpression4684); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_assignmentExpressionPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             	(SCOPE_TOP(assignmentExpression))->op= " |= "; 
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_assignmentExpressionPop(ctx);

                return ;
            }
            FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression4726);
            leftHandSideExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_assignmentExpressionPop(ctx);

                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ");
                                APP(	(SCOPE_TOP(assignmentExpression))->op);
                                APP(" ");
                            
            }
            FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression4755);
            conditionalExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_assignmentExpressionPop(ctx);

                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_assignmentExpressionPop(ctx);

                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    pEmersonTree_assignmentExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//EmersonTree.g:889:1: assignmentExpressionNoIn : ( ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpressionNoIn ) );
 */
static void
assignmentExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionNoInTop = pEmersonTree_assignmentExpressionNoInPush(ctx);
    {
        {
            //  .//EmersonTree.g:894:9: ( ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpressionNoIn ) )
            
            ANTLR3_UINT32 alt47;

            alt47=2;


            {
                int LA47_0 = LA(1);
                if ( (LA47_0 == COND_EXPR_NOIN) ) 
                {
                    alt47=1;
                }
                else if ( (((LA47_0 >= ASSIGN) && (LA47_0 <= OR_ASSIGN))) ) 
                {
                    alt47=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_assignmentExpressionNoInPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 47;
                    EXCEPTION->state        = 0;


                    goto ruleassignmentExpressionNoInEx;
                }
            }
            switch (alt47) 
            {
        	case 1:
        	    // .//EmersonTree.g:894:11: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	    {
        	         MATCHT(COND_EXPR_NOIN, &FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4812); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4814);
        	        conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:895:11: ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression conditionalExpressionNoIn )
        	    {

        	        // .//EmersonTree.g:896:11: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        	        {
        	            int alt46=9;
        	            switch ( LA(1) ) 
        	            {
        	            case ASSIGN:
        	            	{
        	            		alt46=1;
        	            	}
        	                break;
        	            case MULT_ASSIGN:
        	            	{
        	            		alt46=2;
        	            	}
        	                break;
        	            case DIV_ASSIGN:
        	            	{
        	            		alt46=3;
        	            	}
        	                break;
        	            case MOD_ASSIGN:
        	            	{
        	            		alt46=4;
        	            	}
        	                break;
        	            case ADD_ASSIGN:
        	            	{
        	            		alt46=5;
        	            	}
        	                break;
        	            case SUB_ASSIGN:
        	            	{
        	            		alt46=6;
        	            	}
        	                break;
        	            case AND_ASSIGN:
        	            	{
        	            		alt46=7;
        	            	}
        	                break;
        	            case EXP_ASSIGN:
        	            	{
        	            		alt46=8;
        	            	}
        	                break;
        	            case OR_ASSIGN:
        	            	{
        	            		alt46=9;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionNoInPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 46;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionNoInEx;
        	            }

        	            switch (alt46) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:897:13: ASSIGN
        	        	    {
        	        	         MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpressionNoIn4853); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " = ";    
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:898:15: MULT_ASSIGN
        	        	    {
        	        	         MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4878); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " *= ";   
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:899:15: DIV_ASSIGN
        	        	    {
        	        	         MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4896); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " /= ";   
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:900:15: MOD_ASSIGN
        	        	    {
        	        	         MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4915); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " %= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:901:15: ADD_ASSIGN
        	        	    {
        	        	         MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4934); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " += ";   
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // .//EmersonTree.g:902:15: SUB_ASSIGN
        	        	    {
        	        	         MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4954); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " -= ";   
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // .//EmersonTree.g:903:15: AND_ASSIGN
        	        	    {
        	        	         MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4974); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " &= ";   
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // .//EmersonTree.g:904:15: EXP_ASSIGN
        	        	    {
        	        	         MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4993); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " ^= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // .//EmersonTree.g:905:15: OR_ASSIGN
        	        	    {
        	        	         MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn5012); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " |= ";   
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn5055);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	                                              
        	                             APP(" ");
        	                             APP(	(SCOPE_TOP(assignmentExpressionNoIn))->op);
        	                             APP(" ");
        	                       
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn5082);
        	        conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    pEmersonTree_assignmentExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//EmersonTree.g:920:1: leftHandSideExpression : ( callExpression | newExpression );
 */
static void
leftHandSideExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:921:2: ( callExpression | newExpression )
            
            ANTLR3_UINT32 alt48;

            alt48=2;

            alt48 = cdfa48.predict(ctx, RECOGNIZER, ISTREAM, &cdfa48);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt48) 
            {
        	case 1:
        	    // .//EmersonTree.g:921:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression5120);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:922:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression5125);
        	        newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//EmersonTree.g:925:1: newExpression : ( memberExpression | ^( NEW newExpression ) );
 */
static void
newExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:926:2: ( memberExpression | ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt49;

            alt49=2;

            alt49 = cdfa49.predict(ctx, RECOGNIZER, ISTREAM, &cdfa49);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt49) 
            {
        	case 1:
        	    // .//EmersonTree.g:926:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression5137);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:927:4: ^( NEW newExpression )
        	    {
        	         MATCHT(NEW, &FOLLOW_NEW_in_newExpression5144); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression5146);
        	        newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//EmersonTree.g:931:1: propertyReferenceSuffix1 : Identifier ;
 */
static void
propertyReferenceSuffix1(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier10;

    /* Initialize rule variables
     */


    Identifier10       = NULL;

    {
        // .//EmersonTree.g:932:1: ( Identifier )
        // .//EmersonTree.g:932:3: Identifier
        {
            Identifier10 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix15174); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                 APP((const char*)(Identifier10->getText(Identifier10))->chars);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start indexSuffix1
 * .//EmersonTree.g:935:1: indexSuffix1 : expression ;
 */
static void
indexSuffix1(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:936:1: ( expression )
        // .//EmersonTree.g:936:3: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix15186);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//EmersonTree.g:939:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static void
memberExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:940:1: ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) )
            
            ANTLR3_UINT32 alt50;

            alt50=6;

            alt50 = cdfa50.predict(ctx, RECOGNIZER, ISTREAM, &cdfa50);
            if  (HASEXCEPTION())
            {
                goto rulememberExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt50) 
            {
        	case 1:
        	    // .//EmersonTree.g:940:3: primaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression5195);
        	        primaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:941:2: functionExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression5198);
        	        functionExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:942:3: ^( DOT memberExpression propertyReferenceSuffix1 )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_memberExpression5203); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5205);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("."); 
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression5209);
        	        propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:943:3: ^( ARRAY_INDEX memberExpression indexSuffix1 )
        	    {
        	         MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_memberExpression5216); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5218);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression5222);
        	        indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ] "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:944:3: ^( NEW memberExpression arguments )
        	    {
        	         MATCHT(NEW, &FOLLOW_NEW_in_memberExpression5230); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("new "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5234);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_memberExpression5236);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:945:3: ^( DOT memberExpression )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_memberExpression5242); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(".");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5246);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//EmersonTree.g:948:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix );
 */
static void
memberExpressionSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:949:2: ( indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt51;

            alt51=2;


            {
                int LA51_0 = LA(1);
                if ( (LA51_0 == ARRAY_INDEX) ) 
                {
                    alt51=1;
                }
                else if ( (LA51_0 == DOT) ) 
                {
                    alt51=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 51;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt51) 
            {
        	case 1:
        	    // .//EmersonTree.g:949:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix5257);
        	        indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:950:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5262);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//EmersonTree.g:953:1: callExpression : ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) );
 */
static void
callExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:954:2: ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) )
            
            ANTLR3_UINT32 alt52;

            alt52=4;

            switch ( LA(1) ) 
            {
            case CALL:
            	{

            		{
            		    int LA52_1 = LA(2);
            		    if ( (synpred86_EmersonTree(ctx)) ) 
            		    {
            		        alt52=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt52=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return ;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 52;
            		        EXCEPTION->state        = 1;


            		        goto rulecallExpressionEx;
            		    }
            		}
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt52=2;
            	}
                break;
            case DOT:
            	{
            		alt52=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 52;
                EXCEPTION->state        = 0;


                goto rulecallExpressionEx;
            }

            switch (alt52) 
            {
        	case 1:
        	    // .//EmersonTree.g:954:4: ^( CALL memberExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression5275); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression5277);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression5279);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:955:4: ^( ARRAY_INDEX callExpression indexSuffix1 )
        	    {
        	         MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_callExpression5287); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5289);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("[ "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression5293);
        	        indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ]"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:956:4: ^( DOT callExpression propertyReferenceSuffix1 )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_callExpression5302); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5304);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(".");
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression5308);
        	        propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:957:4: ^( CALL callExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression5315); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5317);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression5319);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//EmersonTree.g:962:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix );
 */
static void
callExpressionSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:963:2: ( arguments | indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt53;

            alt53=3;

            switch ( LA(1) ) 
            {
            case ARGLIST:
            	{
            		alt53=1;
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt53=2;
            	}
                break;
            case DOT:
            	{
            		alt53=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 53;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt53) 
            {
        	case 1:
        	    // .//EmersonTree.g:963:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix5333);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:964:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix5338);
        	        indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:965:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5343);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//EmersonTree.g:968:1: arguments : ( ^( ARGLIST ) | ^( ARGLIST ( expression ) ) | ^( ARGLIST expression ( expression )* ) );
 */
static void
arguments(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:969:3: ( ^( ARGLIST ) | ^( ARGLIST ( expression ) ) | ^( ARGLIST expression ( expression )* ) )
            
            ANTLR3_UINT32 alt55;

            alt55=3;


            {
                int LA55_0 = LA(1);
                if ( (LA55_0 == ARGLIST) ) 
                {

                    {
                        int LA55_1 = LA(2);
                        if ( (synpred91_EmersonTree(ctx)) ) 
                        {
                            alt55=1;
                        }
                        else if ( (synpred92_EmersonTree(ctx)) ) 
                        {
                            alt55=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt55=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 55;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 55;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt55) 
            {
        	case 1:
        	    // .//EmersonTree.g:969:5: ^( ARGLIST )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5356); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("( )"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:970:5: ^( ARGLIST ( expression ) )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5366); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:972:8: ( expression )
        	        // .//EmersonTree.g:972:9: expression
        	        {
        	            FOLLOWPUSH(FOLLOW_expression_in_arguments5386);
        	            expression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:976:5: ^( ARGLIST expression ( expression )* )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5411); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP("( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_arguments5427);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:981:7: ( expression )*

        	        for (;;)
        	        {
        	            int alt54=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA54_0 = LA(1);
        	                if ( (((LA54_0 >= EXPR_LIST) && (LA54_0 <= COND_EXPR))) ) 
        	                {
        	                    alt54=1;
        	                }

        	            }
        	            switch (alt54) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:982:9: expression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                        APP(", ");
        	        	                    
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arguments5455);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop54;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop54: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(" ) ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//EmersonTree.g:994:1: indexSuffix : ^( ARRAY_INDEX expression ) ;
 */
static void
indexSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:995:2: ( ^( ARRAY_INDEX expression ) )
        // .//EmersonTree.g:995:4: ^( ARRAY_INDEX expression )
        {
             MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_indexSuffix5495); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix5497);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//EmersonTree.g:998:1: propertyReferenceSuffix : ^( DOT Identifier ) ;
 */
static void
propertyReferenceSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:999:2: ( ^( DOT Identifier ) )
        // .//EmersonTree.g:999:4: ^( DOT Identifier )
        {
             MATCHT(DOT, &FOLLOW_DOT_in_propertyReferenceSuffix5512); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix5514); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//EmersonTree.g:1002:1: assignmentOperator : ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN );
 */
static void
assignmentOperator(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1003:2: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= ASSIGN) && (LA(1) <= OR_ASSIGN)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_assignmentOperator0);    goto ruleassignmentOperatorEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start ternaryExpression
 * .//EmersonTree.g:1008:1: ternaryExpression : ^( TERNARYOP logicalORExpression expression expression ) ;
 */
static void
ternaryExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1009:9: ( ^( TERNARYOP logicalORExpression expression expression ) )
        // .//EmersonTree.g:1009:11: ^( TERNARYOP logicalORExpression expression expression )
        {
             MATCHT(TERNARYOP, &FOLLOW_TERNARYOP_in_ternaryExpression5569); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP( " ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_logicalORExpression_in_ternaryExpression5597);
            logicalORExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP( " ) ? ( ");
                            
            }
            FOLLOWPUSH(FOLLOW_expression_in_ternaryExpression5625);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) : ( ");
                            
            }
            FOLLOWPUSH(FOLLOW_expression_in_ternaryExpression5653);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) " );
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionEx; /* Prevent compiler warnings */
    ruleternaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ternaryExpression */

/** 
 * $ANTLR start ternaryExpressionNoIn
 * .//EmersonTree.g:1028:1: ternaryExpressionNoIn : ^( TERNARYOP logicalORExpressionNoIn expressionNoIn expressionNoIn ) ;
 */
static void
ternaryExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1029:9: ( ^( TERNARYOP logicalORExpressionNoIn expressionNoIn expressionNoIn ) )
        // .//EmersonTree.g:1029:11: ^( TERNARYOP logicalORExpressionNoIn expressionNoIn expressionNoIn )
        {
             MATCHT(TERNARYOP, &FOLLOW_TERNARYOP_in_ternaryExpressionNoIn5706); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP( " ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn5734);
            logicalORExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP( " ) ? ( ");
                            
            }
            FOLLOWPUSH(FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5762);
            expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) : ( ");
                            
            }
            FOLLOWPUSH(FOLLOW_expressionNoIn_in_ternaryExpressionNoIn5790);
            expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) " );
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleternaryExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionNoInEx; /* Prevent compiler warnings */
    ruleternaryExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ternaryExpressionNoIn */

/** 
 * $ANTLR start conditionalExpression
 * .//EmersonTree.g:1048:1: conditionalExpression : ( ternaryExpression | logicalORExpression | msgRecvStatement );
 */
static void
conditionalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1049:2: ( ternaryExpression | logicalORExpression | msgRecvStatement )
            
            ANTLR3_UINT32 alt56;

            alt56=3;

            switch ( LA(1) ) 
            {
            case TERNARYOP:
            	{
            		alt56=1;
            	}
                break;
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 201:
            case 203:
            case 204:
            case 205:
            	{
            		alt56=2;
            	}
                break;
            case MESSAGE_RECV:
            	{
            		alt56=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 56;
                EXCEPTION->state        = 0;


                goto ruleconditionalExpressionEx;
            }

            switch (alt56) 
            {
        	case 1:
        	    // .//EmersonTree.g:1049:4: ternaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_conditionalExpression5835);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1050:11: logicalORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression5847);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1051:11: msgRecvStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_conditionalExpression5859);
        	        msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//EmersonTree.g:1054:1: conditionalExpressionNoIn : ( ternaryExpressionNoIn | logicalORExpressionNoIn | msgRecvStatement );
 */
static void
conditionalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1055:2: ( ternaryExpressionNoIn | logicalORExpressionNoIn | msgRecvStatement )
            
            ANTLR3_UINT32 alt57;

            alt57=3;

            switch ( LA(1) ) 
            {
            case TERNARYOP:
            	{
            		alt57=1;
            	}
                break;
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 201:
            case 203:
            case 204:
            case 205:
            	{
            		alt57=2;
            	}
                break;
            case MESSAGE_RECV:
            	{
            		alt57=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 57;
                EXCEPTION->state        = 0;


                goto ruleconditionalExpressionNoInEx;
            }

            switch (alt57) 
            {
        	case 1:
        	    // .//EmersonTree.g:1055:4: ternaryExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_conditionalExpressionNoIn5878);
        	        ternaryExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1056:11: logicalORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5890);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1057:11: msgRecvStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_conditionalExpressionNoIn5902);
        	        msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpression
 * .//EmersonTree.g:1061:1: logicalANDExpression : ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) );
 */
static void
logicalANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1062:2: ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) )
            
            ANTLR3_UINT32 alt58;

            alt58=2;


            {
                int LA58_0 = LA(1);
                if ( (((LA58_0 >= CALL) && (LA58_0 <= DOT)) || LA58_0 == NEW || LA58_0 == VECTOR || LA58_0 == DOLLAR_EXPRESSION || ((LA58_0 >= BIT_OR) && (LA58_0 <= OBJ_LITERAL)) || ((LA58_0 >= DELETE_OP) && (LA58_0 <= NOT)) || LA58_0 == FUNC_EXPR || ((LA58_0 >= PAREN) && (LA58_0 <= PATTERN_LITERAL)) || ((LA58_0 >= Identifier) && (LA58_0 <= StringLiteral)) || LA58_0 == 201 || ((LA58_0 >= 203) && (LA58_0 <= 205))) ) 
                {
                    alt58=1;
                }
                else if ( (LA58_0 == AND) ) 
                {
                    alt58=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 58;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionEx;
                }
            }
            switch (alt58) 
            {
        	case 1:
        	    // .//EmersonTree.g:1062:4: bitwiseORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression5930);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1063:3: ^( AND logicalANDExpression bitwiseORExpression )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpression5935); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalANDExpression5937);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression5941);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpression
 * .//EmersonTree.g:1067:1: logicalORExpression : ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) );
 */
static void
logicalORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1068:2: ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) )
            
            ANTLR3_UINT32 alt59;

            alt59=2;


            {
                int LA59_0 = LA(1);
                if ( (((LA59_0 >= CALL) && (LA59_0 <= DOT)) || LA59_0 == NEW || LA59_0 == VECTOR || LA59_0 == DOLLAR_EXPRESSION || ((LA59_0 >= AND) && (LA59_0 <= OBJ_LITERAL)) || ((LA59_0 >= DELETE_OP) && (LA59_0 <= NOT)) || LA59_0 == FUNC_EXPR || ((LA59_0 >= PAREN) && (LA59_0 <= PATTERN_LITERAL)) || ((LA59_0 >= Identifier) && (LA59_0 <= StringLiteral)) || LA59_0 == 201 || ((LA59_0 >= 203) && (LA59_0 <= 205))) ) 
                {
                    alt59=1;
                }
                else if ( (LA59_0 == OR) ) 
                {
                    alt59=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 59;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionEx;
                }
            }
            switch (alt59) 
            {
        	case 1:
        	    // .//EmersonTree.g:1068:4: logicalANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression5954);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1069:3: ^( OR logicalORExpression logicalANDExpression )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpression5959); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_logicalORExpression5961);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression5965);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//EmersonTree.g:1072:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) );
 */
static void
logicalORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1073:2: ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt60;

            alt60=2;


            {
                int LA60_0 = LA(1);
                if ( (((LA60_0 >= CALL) && (LA60_0 <= DOT)) || LA60_0 == NEW || LA60_0 == VECTOR || LA60_0 == DOLLAR_EXPRESSION || ((LA60_0 >= AND) && (LA60_0 <= INSTANCE_OF)) || ((LA60_0 >= ADD_OP) && (LA60_0 <= OBJ_LITERAL)) || ((LA60_0 >= DELETE_OP) && (LA60_0 <= NOT)) || LA60_0 == FUNC_EXPR || ((LA60_0 >= PAREN) && (LA60_0 <= PATTERN_LITERAL)) || ((LA60_0 >= Identifier) && (LA60_0 <= StringLiteral)) || LA60_0 == 201 || ((LA60_0 >= 203) && (LA60_0 <= 205))) ) 
                {
                    alt60=1;
                }
                else if ( (LA60_0 == OR) ) 
                {
                    alt60=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 60;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionNoInEx;
                }
            }
            switch (alt60) 
            {
        	case 1:
        	    // .//EmersonTree.g:1073:4: logicalANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5978);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1074:3: ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpressionNoIn5983); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5985);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || ");
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5987);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//EmersonTree.g:1078:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) );
 */
static void
logicalANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1079:2: ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt61;

            alt61=2;


            {
                int LA61_0 = LA(1);
                if ( (((LA61_0 >= CALL) && (LA61_0 <= DOT)) || LA61_0 == NEW || LA61_0 == VECTOR || LA61_0 == DOLLAR_EXPRESSION || ((LA61_0 >= BIT_OR) && (LA61_0 <= INSTANCE_OF)) || ((LA61_0 >= ADD_OP) && (LA61_0 <= OBJ_LITERAL)) || ((LA61_0 >= DELETE_OP) && (LA61_0 <= NOT)) || LA61_0 == FUNC_EXPR || ((LA61_0 >= PAREN) && (LA61_0 <= PATTERN_LITERAL)) || ((LA61_0 >= Identifier) && (LA61_0 <= StringLiteral)) || LA61_0 == 201 || ((LA61_0 >= 203) && (LA61_0 <= 205))) ) 
                {
                    alt61=1;
                }
                else if ( (LA61_0 == AND) ) 
                {
                    alt61=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 61;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionNoInEx;
                }
            }
            switch (alt61) 
            {
        	case 1:
        	    // .//EmersonTree.g:1079:4: bitwiseORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6002);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1080:3: ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpressionNoIn6008); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6010);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6014);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//EmersonTree.g:1083:1: bitwiseORExpression : ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) );
 */
static void
bitwiseORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1084:2: ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) )
            
            ANTLR3_UINT32 alt62;

            alt62=2;


            {
                int LA62_0 = LA(1);
                if ( (((LA62_0 >= CALL) && (LA62_0 <= DOT)) || LA62_0 == NEW || LA62_0 == VECTOR || LA62_0 == DOLLAR_EXPRESSION || ((LA62_0 >= EXP) && (LA62_0 <= OBJ_LITERAL)) || ((LA62_0 >= DELETE_OP) && (LA62_0 <= NOT)) || LA62_0 == FUNC_EXPR || ((LA62_0 >= PAREN) && (LA62_0 <= PATTERN_LITERAL)) || ((LA62_0 >= Identifier) && (LA62_0 <= StringLiteral)) || LA62_0 == 201 || ((LA62_0 >= 203) && (LA62_0 <= 205))) ) 
                {
                    alt62=1;
                }
                else if ( (LA62_0 == BIT_OR) ) 
                {
                    alt62=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 62;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionEx;
                }
            }
            switch (alt62) 
            {
        	case 1:
        	    // .//EmersonTree.g:1084:4: bitwiseXORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6028);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1085:3: ^( BIT_OR bitwiseORExpression bitwiseXORExpression )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpression6034); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_bitwiseORExpression6036);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" | "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6040);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//EmersonTree.g:1088:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) );
 */
static void
bitwiseORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1089:2: ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt63;

            alt63=2;


            {
                int LA63_0 = LA(1);
                if ( (((LA63_0 >= CALL) && (LA63_0 <= DOT)) || LA63_0 == NEW || LA63_0 == VECTOR || LA63_0 == DOLLAR_EXPRESSION || ((LA63_0 >= EXP) && (LA63_0 <= INSTANCE_OF)) || ((LA63_0 >= ADD_OP) && (LA63_0 <= OBJ_LITERAL)) || ((LA63_0 >= DELETE_OP) && (LA63_0 <= NOT)) || LA63_0 == FUNC_EXPR || ((LA63_0 >= PAREN) && (LA63_0 <= PATTERN_LITERAL)) || ((LA63_0 >= Identifier) && (LA63_0 <= StringLiteral)) || LA63_0 == 201 || ((LA63_0 >= 203) && (LA63_0 <= 205))) ) 
                {
                    alt63=1;
                }
                else if ( (LA63_0 == BIT_OR) ) 
                {
                    alt63=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 63;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionNoInEx;
                }
            }
            switch (alt63) 
            {
        	case 1:
        	    // .//EmersonTree.g:1089:4: bitwiseXORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6053);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1090:3: ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6060); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6062);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" | ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6066);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//EmersonTree.g:1093:1: bitwiseXORExpression : ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) );
 */
static void
bitwiseXORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1094:1: ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) )
            
            ANTLR3_UINT32 alt64;

            alt64=2;


            {
                int LA64_0 = LA(1);
                if ( (((LA64_0 >= CALL) && (LA64_0 <= DOT)) || LA64_0 == NEW || LA64_0 == VECTOR || LA64_0 == DOLLAR_EXPRESSION || ((LA64_0 >= BIT_AND) && (LA64_0 <= OBJ_LITERAL)) || ((LA64_0 >= DELETE_OP) && (LA64_0 <= NOT)) || LA64_0 == FUNC_EXPR || ((LA64_0 >= PAREN) && (LA64_0 <= PATTERN_LITERAL)) || ((LA64_0 >= Identifier) && (LA64_0 <= StringLiteral)) || LA64_0 == 201 || ((LA64_0 >= 203) && (LA64_0 <= 205))) ) 
                {
                    alt64=1;
                }
                else if ( (LA64_0 == EXP) ) 
                {
                    alt64=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 64;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionEx;
                }
            }
            switch (alt64) 
            {
        	case 1:
        	    // .//EmersonTree.g:1094:3: bitwiseANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6078);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1095:3: ^( EXP e= bitwiseXORExpression bitwiseANDExpression )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpression6085); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6089);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6093);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//EmersonTree.g:1098:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) );
 */
static void
bitwiseXORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1099:2: ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt65;

            alt65=2;


            {
                int LA65_0 = LA(1);
                if ( (((LA65_0 >= CALL) && (LA65_0 <= DOT)) || LA65_0 == NEW || LA65_0 == VECTOR || LA65_0 == DOLLAR_EXPRESSION || ((LA65_0 >= BIT_AND) && (LA65_0 <= INSTANCE_OF)) || ((LA65_0 >= ADD_OP) && (LA65_0 <= OBJ_LITERAL)) || ((LA65_0 >= DELETE_OP) && (LA65_0 <= NOT)) || LA65_0 == FUNC_EXPR || ((LA65_0 >= PAREN) && (LA65_0 <= PATTERN_LITERAL)) || ((LA65_0 >= Identifier) && (LA65_0 <= StringLiteral)) || LA65_0 == 201 || ((LA65_0 >= 203) && (LA65_0 <= 205))) ) 
                {
                    alt65=1;
                }
                else if ( (LA65_0 == EXP) ) 
                {
                    alt65=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 65;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionNoInEx;
                }
            }
            switch (alt65) 
            {
        	case 1:
        	    // .//EmersonTree.g:1099:4: bitwiseANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6105);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1100:3: ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpressionNoIn6111); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6115);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6118);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//EmersonTree.g:1103:1: bitwiseANDExpression : ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) );
 */
static void
bitwiseANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1104:2: ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) )
            
            ANTLR3_UINT32 alt66;

            alt66=2;


            {
                int LA66_0 = LA(1);
                if ( (((LA66_0 >= CALL) && (LA66_0 <= DOT)) || LA66_0 == NEW || LA66_0 == VECTOR || LA66_0 == DOLLAR_EXPRESSION || ((LA66_0 >= EQUALS) && (LA66_0 <= OBJ_LITERAL)) || ((LA66_0 >= DELETE_OP) && (LA66_0 <= NOT)) || LA66_0 == FUNC_EXPR || ((LA66_0 >= PAREN) && (LA66_0 <= PATTERN_LITERAL)) || ((LA66_0 >= Identifier) && (LA66_0 <= StringLiteral)) || LA66_0 == 201 || ((LA66_0 >= 203) && (LA66_0 <= 205))) ) 
                {
                    alt66=1;
                }
                else if ( (LA66_0 == BIT_AND) ) 
                {
                    alt66=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 66;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionEx;
                }
            }
            switch (alt66) 
            {
        	case 1:
        	    // .//EmersonTree.g:1104:4: equalityExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression6132);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1105:4: ^( BIT_AND e= bitwiseANDExpression equalityExpression )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpression6138); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression6142);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression6146);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//EmersonTree.g:1108:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) );
 */
static void
bitwiseANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1109:2: ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) )
            
            ANTLR3_UINT32 alt67;

            alt67=2;


            {
                int LA67_0 = LA(1);
                if ( (((LA67_0 >= CALL) && (LA67_0 <= DOT)) || LA67_0 == NEW || LA67_0 == VECTOR || LA67_0 == DOLLAR_EXPRESSION || ((LA67_0 >= EQUALS) && (LA67_0 <= INSTANCE_OF)) || ((LA67_0 >= ADD_OP) && (LA67_0 <= OBJ_LITERAL)) || ((LA67_0 >= DELETE_OP) && (LA67_0 <= NOT)) || LA67_0 == FUNC_EXPR || ((LA67_0 >= PAREN) && (LA67_0 <= PATTERN_LITERAL)) || ((LA67_0 >= Identifier) && (LA67_0 <= StringLiteral)) || LA67_0 == 201 || ((LA67_0 >= 203) && (LA67_0 <= 205))) ) 
                {
                    alt67=1;
                }
                else if ( (LA67_0 == BIT_AND) ) 
                {
                    alt67=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 67;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionNoInEx;
                }
            }
            switch (alt67) 
            {
        	case 1:
        	    // .//EmersonTree.g:1109:4: equalityExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6160);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1110:4: ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn6167); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn6171);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn6175);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//EmersonTree.g:1113:1: equalityExpression : ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) );
 */
static void
equalityExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1114:2: ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) )
            
            ANTLR3_UINT32 alt68;

            alt68=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 201:
            case 203:
            case 204:
            case 205:
            	{
            		alt68=1;
            	}
                break;
            case EQUALS:
            	{
            		alt68=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt68=3;
            	}
                break;
            case IDENT:
            	{
            		alt68=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt68=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 68;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionEx;
            }

            switch (alt68) 
            {
        	case 1:
        	    // .//EmersonTree.g:1114:4: relationalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6188);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1115:4: ^( EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpression6194); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression6198);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" == ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6202);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1116:4: ^( NOT_EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpression6209); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression6213);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" != ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6217);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1117:4: ^( IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpression6224); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression6228);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" === ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6232);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1118:4: ^( NOT_IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpression6239); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression6243);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" !== ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression6247);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//EmersonTree.g:1121:1: equalityExpressionNoIn : ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) );
 */
static void
equalityExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1122:1: ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) )
            
            ANTLR3_UINT32 alt69;

            alt69=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 201:
            case 203:
            case 204:
            case 205:
            	{
            		alt69=1;
            	}
                break;
            case EQUALS:
            	{
            		alt69=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt69=3;
            	}
                break;
            case IDENT:
            	{
            		alt69=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt69=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 69;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionNoInEx;
            }

            switch (alt69) 
            {
        	case 1:
        	    // .//EmersonTree.g:1122:3: relationalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6257);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1123:3: ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpressionNoIn6263); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6265);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" == ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6269);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1124:3: ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn6276); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6278);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" != ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6282);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1125:3: ^( IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpressionNoIn6289); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6291);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" === "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6295);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1126:3: ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpressionNoIn6302); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn6304);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" !== ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn6308);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//EmersonTree.g:1131:1: relationalOps : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN );
 */
static void
relationalOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1132:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN )
            
            ANTLR3_UINT32 alt70;

            alt70=6;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt70=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt70=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt70=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt70=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt70=5;
            	}
                break;
            case IN:
            	{
            		alt70=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 70;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt70) 
            {
        	case 1:
        	    // .//EmersonTree.g:1132:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOps6321); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               	(SCOPE_TOP(relationalExpression))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1133:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOps6327); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">" ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1134:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOps6333); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "<=" ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1135:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOps6340); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1136:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOps6346); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "instanceOf" ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1137:3: IN
        	    {
        	         MATCHT(IN, &FOLLOW_IN_in_relationalOps6352); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "in" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//EmersonTree.g:1140:1: relationalExpression : ( additiveExpression | ^( relationalOps e= relationalExpression additiveExpression ) );
 */
static void
relationalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionTop = pEmersonTree_relationalExpressionPush(ctx);
    {
        {
            //  .//EmersonTree.g:1146:2: ( additiveExpression | ^( relationalOps e= relationalExpression additiveExpression ) )
            
            ANTLR3_UINT32 alt71;

            alt71=2;


            {
                int LA71_0 = LA(1);
                if ( (((LA71_0 >= CALL) && (LA71_0 <= DOT)) || LA71_0 == NEW || LA71_0 == VECTOR || LA71_0 == DOLLAR_EXPRESSION || ((LA71_0 >= ADD_OP) && (LA71_0 <= OBJ_LITERAL)) || ((LA71_0 >= DELETE_OP) && (LA71_0 <= NOT)) || LA71_0 == FUNC_EXPR || ((LA71_0 >= PAREN) && (LA71_0 <= PATTERN_LITERAL)) || ((LA71_0 >= Identifier) && (LA71_0 <= StringLiteral)) || LA71_0 == 201 || ((LA71_0 >= 203) && (LA71_0 <= 205))) ) 
                {
                    alt71=1;
                }
                else if ( (((LA71_0 >= LESS_THAN) && (LA71_0 <= IN))) ) 
                {
                    alt71=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 71;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionEx;
                }
            }
            switch (alt71) 
            {
        	case 1:
        	    // .//EmersonTree.g:1146:4: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression6370);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1148:2: ^( relationalOps e= relationalExpression additiveExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression6384);
        	        relationalOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_relationalExpression6393);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            				  APP(" ");
        	            				  APP(	(SCOPE_TOP(relationalExpression))->op );
        	            				  APP(" ");
        	            				
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression6405);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    pEmersonTree_relationalExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//EmersonTree.g:1160:1: relationalOpsNoIn : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF );
 */
static void
relationalOpsNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1161:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF )
            
            ANTLR3_UINT32 alt72;

            alt72=5;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt72=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt72=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt72=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt72=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt72=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 72;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt72) 
            {
        	case 1:
        	    // .//EmersonTree.g:1161:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOpsNoIn6421); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              	(SCOPE_TOP(relationalExpressionNoIn))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1162:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOpsNoIn6427); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">"; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1163:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn6433); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "<= " ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1164:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn6439); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1165:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOpsNoIn6445); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "instanceOf" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//EmersonTree.g:1168:1: relationalExpressionNoIn : ( additiveExpression | ^( relationalOpsNoIn relationalExpressionNoIn additiveExpression ) );
 */
static void
relationalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionNoInTop = pEmersonTree_relationalExpressionNoInPush(ctx);
    {
        {
            //  .//EmersonTree.g:1174:2: ( additiveExpression | ^( relationalOpsNoIn relationalExpressionNoIn additiveExpression ) )
            
            ANTLR3_UINT32 alt73;

            alt73=2;


            {
                int LA73_0 = LA(1);
                if ( (((LA73_0 >= CALL) && (LA73_0 <= DOT)) || LA73_0 == NEW || LA73_0 == VECTOR || LA73_0 == DOLLAR_EXPRESSION || ((LA73_0 >= ADD_OP) && (LA73_0 <= OBJ_LITERAL)) || ((LA73_0 >= DELETE_OP) && (LA73_0 <= NOT)) || LA73_0 == FUNC_EXPR || ((LA73_0 >= PAREN) && (LA73_0 <= PATTERN_LITERAL)) || ((LA73_0 >= Identifier) && (LA73_0 <= StringLiteral)) || LA73_0 == 201 || ((LA73_0 >= 203) && (LA73_0 <= 205))) ) 
                {
                    alt73=1;
                }
                else if ( (((LA73_0 >= LESS_THAN) && (LA73_0 <= INSTANCE_OF))) ) 
                {
                    alt73=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionNoInPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 73;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionNoInEx;
                }
            }
            switch (alt73) 
            {
        	case 1:
        	    // .//EmersonTree.g:1174:4: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn6465);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1175:5: ^( relationalOpsNoIn relationalExpressionNoIn additiveExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn6480);
        	        relationalOpsNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn6488);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            						  APP(" ");
        	            						  APP(	(SCOPE_TOP(relationalExpressionNoIn))->op);
        	            						  APP(" ");
        	            						
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn6504);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    pEmersonTree_relationalExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start additiveExpression
 * .//EmersonTree.g:1191:1: additiveExpression : ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) );
 */
static void
additiveExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1192:9: ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) )
            
            ANTLR3_UINT32 alt74;

            alt74=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 201:
            case 203:
            case 204:
            case 205:
            	{
            		alt74=1;
            	}
                break;
            case ADD_OP:
            	{
            		alt74=2;
            	}
                break;
            case SUB:
            	{
            		alt74=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 74;
                EXCEPTION->state        = 0;


                goto ruleadditiveExpressionEx;
            }

            switch (alt74) 
            {
        	case 1:
        	    // .//EmersonTree.g:1192:11: multiplicativeExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression6536);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1193:11: ^( ADD_OP e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(ADD_OP, &FOLLOW_ADD_OP_in_additiveExpression6549); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.plus( " );
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression6582);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression6612);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1206:11: ^( SUB e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(SUB, &FOLLOW_SUB_in_additiveExpression6655); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.minus( " );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression6686);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression6717);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multiplicativeExpression
 * .//EmersonTree.g:1222:1: multiplicativeExpression : ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) );
 */
static void
multiplicativeExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1234:2: ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) )
            
            ANTLR3_UINT32 alt75;

            alt75=4;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 201:
            case 203:
            case 204:
            case 205:
            	{
            		alt75=1;
            	}
                break;
            case MULT:
            	{
            		alt75=2;
            	}
                break;
            case DIV:
            	{
            		alt75=3;
            	}
                break;
            case MOD:
            	{
            		alt75=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 75;
                EXCEPTION->state        = 0;


                goto rulemultiplicativeExpressionEx;
            }

            switch (alt75) 
            {
        	case 1:
        	    // .//EmersonTree.g:1234:4: unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression6762);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1235:4: ^( MULT multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MULT, &FOLLOW_MULT_in_multiplicativeExpression6769); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression6777);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            					  APP(" * ");
        	            					 
        	            					
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression6793);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1243:4: ^( DIV multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(DIV, &FOLLOW_DIV_in_multiplicativeExpression6806); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression6808);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" / ");
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression6812);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1244:4: ^( MOD multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MOD, &FOLLOW_MOD_in_multiplicativeExpression6819); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression6821);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" % ");
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression6825);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start unaryOps
 * .//EmersonTree.g:1247:1: unaryOps : ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT );
 */
static void
unaryOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1248:1: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= DELETE_OP) && (LA(1) <= NOT)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unaryOps0);    goto ruleunaryOpsEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//EmersonTree.g:1260:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );
 */
static void
unaryExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1261:9: ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) )
            
            ANTLR3_UINT32 alt77;

            alt77=2;

            alt77 = cdfa77.predict(ctx, RECOGNIZER, ISTREAM, &cdfa77);
            if  (HASEXCEPTION())
            {
                goto ruleunaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt77) 
            {
        	case 1:
        	    // .//EmersonTree.g:1261:11: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression6887);
        	        postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1262:4: ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression )
        	    {

        	        // .//EmersonTree.g:1264:6: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT )
        	        {
        	            int alt76=9;
        	            switch ( LA(1) ) 
        	            {
        	            case DELETE_OP:
        	            	{
        	            		alt76=1;
        	            	}
        	                break;
        	            case VOID:
        	            	{
        	            		alt76=2;
        	            	}
        	                break;
        	            case TYPEOF:
        	            	{
        	            		alt76=3;
        	            	}
        	                break;
        	            case PLUSPLUS:
        	            	{
        	            		alt76=4;
        	            	}
        	                break;
        	            case MINUSMINUS:
        	            	{
        	            		alt76=5;
        	            	}
        	                break;
        	            case UNARY_PLUS:
        	            	{
        	            		alt76=6;
        	            	}
        	                break;
        	            case UNARY_MINUS:
        	            	{
        	            		alt76=7;
        	            	}
        	                break;
        	            case COMPLEMENT:
        	            	{
        	            		alt76=8;
        	            	}
        	                break;
        	            case NOT:
        	            	{
        	            		alt76=9;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 76;
        	                EXCEPTION->state        = 0;


        	                goto ruleunaryExpressionEx;
        	            }

        	            switch (alt76) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1265:8: DELETE_OP
        	        	    {
        	        	         MATCHT(DELETE_OP, &FOLLOW_DELETE_OP_in_unaryExpression6911); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("delete ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:1266:10: VOID
        	        	    {
        	        	         MATCHT(VOID, &FOLLOW_VOID_in_unaryExpression6933); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	               APP("void");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:1267:10: TYPEOF
        	        	    {
        	        	         MATCHT(TYPEOF, &FOLLOW_TYPEOF_in_unaryExpression6955); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("typeof ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:1268:10: PLUSPLUS
        	        	    {
        	        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_unaryExpression6975); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("++");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:1269:10: MINUSMINUS
        	        	    {
        	        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_unaryExpression6993); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("--");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // .//EmersonTree.g:1270:10: UNARY_PLUS
        	        	    {
        	        	         MATCHT(UNARY_PLUS, &FOLLOW_UNARY_PLUS_in_unaryExpression7009); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("+");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // .//EmersonTree.g:1271:10: UNARY_MINUS
        	        	    {
        	        	         MATCHT(UNARY_MINUS, &FOLLOW_UNARY_MINUS_in_unaryExpression7025); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("-");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // .//EmersonTree.g:1272:10: COMPLEMENT
        	        	    {
        	        	         MATCHT(COMPLEMENT, &FOLLOW_COMPLEMENT_in_unaryExpression7040); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("~");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // .//EmersonTree.g:1273:10: NOT
        	        	    {
        	        	         MATCHT(NOT, &FOLLOW_NOT_in_unaryExpression7056); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("!");
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression7085);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start postfixExpression
 * .//EmersonTree.g:1282:1: postfixExpression : ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) );
 */
static void
postfixExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1283:9: ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) )
            
            ANTLR3_UINT32 alt78;

            alt78=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 201:
            case 203:
            case 204:
            case 205:
            	{
            		alt78=1;
            	}
                break;
            case MINUSMINUS:
            	{
            		alt78=2;
            	}
                break;
            case PLUSPLUS:
            	{
            		alt78=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 78;
                EXCEPTION->state        = 0;


                goto rulepostfixExpressionEx;
            }

            switch (alt78) 
            {
        	case 1:
        	    // .//EmersonTree.g:1283:10: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression7110);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1284:11: ^( MINUSMINUS leftHandSideExpression )
        	    {
        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_postfixExpression7123); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression7125);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("--");
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1285:4: ^( PLUSPLUS leftHandSideExpression )
        	    {
        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_postfixExpression7134); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression7136);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("++");
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start primaryExpression
 * .//EmersonTree.g:1288:1: primaryExpression : ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | ^( PAREN expression ) | vectorLiteral );
 */
static void
primaryExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier11;

    /* Initialize rule variables
     */


    Identifier11       = NULL;

    {
        {
            //  .//EmersonTree.g:1289:2: ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | ^( PAREN expression ) | vectorLiteral )
            
            ANTLR3_UINT32 alt79;

            alt79=9;

            switch ( LA(1) ) 
            {
            case 201:
            	{
            		alt79=1;
            	}
                break;
            case Identifier:
            	{
            		alt79=2;
            	}
                break;
            case DOLLAR_EXPRESSION:
            	{
            		alt79=3;
            	}
                break;
            case NumericLiteral:
            case StringLiteral:
            case 203:
            case 204:
            case 205:
            	{
            		alt79=4;
            	}
                break;
            case ARRAY_LITERAL:
            	{
            		alt79=5;
            	}
                break;
            case OBJ_LITERAL:
            	{
            		alt79=6;
            	}
                break;
            case PATTERN_LITERAL:
            	{
            		alt79=7;
            	}
                break;
            case PAREN:
            	{
            		alt79=8;
            	}
                break;
            case VECTOR:
            	{
            		alt79=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 79;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt79) 
            {
        	case 1:
        	    // .//EmersonTree.g:1289:4: 'this'
        	    {
        	         MATCHT(201, &FOLLOW_201_in_primaryExpression7157); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("this");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1290:4: Identifier
        	    {
        	        Identifier11 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression7164); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	                        APP((const char*)(Identifier11->getText(Identifier11))->chars);
        	            	  
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1294:11: dollarExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression7182);
        	        dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1295:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression7187);
        	        literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1296:4: arrayLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression7192);
        	        arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1297:4: objectLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression7197);
        	        objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:1298:11: patternLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_patternLiteral_in_primaryExpression7209);
        	        patternLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:1299:4: ^( PAREN expression )
        	    {
        	         MATCHT(PAREN, &FOLLOW_PAREN_in_primaryExpression7215); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression7219);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )");
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // .//EmersonTree.g:1300:11: vectorLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_vectorLiteral_in_primaryExpression7234);
        	        vectorLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start vectorLiteral
 * .//EmersonTree.g:1305:1: vectorLiteral : ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) ) ;
 */
static void
vectorLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1306:9: ( ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) ) )
        // .//EmersonTree.g:1306:11: ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) )
        {
             MATCHT(VECTOR, &FOLLOW_VECTOR_in_vectorLiteral7255); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("( new util.Vec3(");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:1310:13: (exp1= vectorLiteralField )
            // .//EmersonTree.g:1310:14: exp1= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral7286);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1315:13: (exp2= vectorLiteralField )
            // .//EmersonTree.g:1315:14: exp2= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral7333);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1320:13: (exp3= vectorLiteralField )
            // .//EmersonTree.g:1320:14: exp3= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral7380);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(") )");
                                  
                }

            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralEx; /* Prevent compiler warnings */
    rulevectorLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end vectorLiteral */

/** 
 * $ANTLR start vectorLiteralField
 * .//EmersonTree.g:1330:1: vectorLiteralField : ( ternaryExpression | additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static void
vectorLiteralField(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    NumericLiteral12;

    /* Initialize rule variables
     */


    NumericLiteral12       = NULL;

    {
        {
            //  .//EmersonTree.g:1331:9: ( ternaryExpression | additiveExpression | NumericLiteral | callExpression | memberExpression )
            
            ANTLR3_UINT32 alt80;

            alt80=5;

            alt80 = cdfa80.predict(ctx, RECOGNIZER, ISTREAM, &cdfa80);
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralFieldEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt80) 
            {
        	case 1:
        	    // .//EmersonTree.g:1331:11: ternaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_vectorLiteralField7465);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1332:11: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_vectorLiteralField7477);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1333:11: NumericLiteral
        	    {
        	        NumericLiteral12 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_vectorLiteralField7493); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP((const char*)(NumericLiteral12->getText(NumericLiteral12))->chars);
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1334:11: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_vectorLiteralField7507);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1335:11: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_vectorLiteralField7519);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralFieldEx; /* Prevent compiler warnings */
    rulevectorLiteralFieldEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end vectorLiteralField */

/** 
 * $ANTLR start dollarExpression
 * .//EmersonTree.g:1339:1: dollarExpression : ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static void
dollarExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier13;

    /* Initialize rule variables
     */


    Identifier13       = NULL;

    {
        // .//EmersonTree.g:1340:9: ( ^( DOLLAR_EXPRESSION Identifier ) )
        // .//EmersonTree.g:1340:11: ^( DOLLAR_EXPRESSION Identifier )
        {
             MATCHT(DOLLAR_EXPRESSION, &FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression7554); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                if (insideWhenPred)
                                    APP("'),");

                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier13 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression7582); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier13->getText(Identifier13))->chars);

                                if (insideWhenPred)
                                   APP(",util.create_quoted('");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//EmersonTree.g:1359:1: arrayLiteral : ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( expression ) ) | ^( ARRAY_LITERAL expression ( expression )* ) );
 */
static void
arrayLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1360:3: ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( expression ) ) | ^( ARRAY_LITERAL expression ( expression )* ) )
            
            ANTLR3_UINT32 alt82;

            alt82=3;


            {
                int LA82_0 = LA(1);
                if ( (LA82_0 == ARRAY_LITERAL) ) 
                {

                    {
                        int LA82_1 = LA(2);
                        if ( (synpred171_EmersonTree(ctx)) ) 
                        {
                            alt82=1;
                        }
                        else if ( (synpred172_EmersonTree(ctx)) ) 
                        {
                            alt82=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt82=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 82;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 82;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt82) 
            {
        	case 1:
        	    // .//EmersonTree.g:1360:5: ^( ARRAY_LITERAL )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral7647); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("[ ]"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1361:5: ^( ARRAY_LITERAL ( expression ) )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral7657); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1363:8: ( expression )
        	        // .//EmersonTree.g:1363:9: expression
        	        {
        	            FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral7676);
        	            expression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ]"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1366:5: ^( ARRAY_LITERAL expression ( expression )* )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral7699); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("[ ");
        	                 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral7713);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1372:6: ( expression )*

        	        for (;;)
        	        {
        	            int alt81=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA81_0 = LA(1);
        	                if ( (((LA81_0 >= EXPR_LIST) && (LA81_0 <= COND_EXPR))) ) 
        	                {
        	                    alt81=1;
        	                }

        	            }
        	            switch (alt81) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1373:7: expression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                     APP(", ");
        	        	                  
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral7742);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop81;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop81: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP(" ] ");
        	                 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//EmersonTree.g:1385:1: objectLiteral : ( ^( OBJ_LITERAL ) | ^( OBJ_LITERAL ( propertyNameAndValue ) ) | ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static void
objectLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1386:3: ( ^( OBJ_LITERAL ) | ^( OBJ_LITERAL ( propertyNameAndValue ) ) | ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt84;

            alt84=3;


            {
                int LA84_0 = LA(1);
                if ( (LA84_0 == OBJ_LITERAL) ) 
                {

                    {
                        int LA84_1 = LA(2);
                        if ( (synpred174_EmersonTree(ctx)) ) 
                        {
                            alt84=1;
                        }
                        else if ( (synpred175_EmersonTree(ctx)) ) 
                        {
                            alt84=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt84=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 84;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 84;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt84) 
            {
        	case 1:
        	    // .//EmersonTree.g:1386:4: ^( OBJ_LITERAL )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral7779); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("{ }");
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1387:4: ^( OBJ_LITERAL ( propertyNameAndValue ) )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral7789); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("{ "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1390:13: ( propertyNameAndValue )
        	        // .//EmersonTree.g:1390:14: propertyNameAndValue
        	        {
        	            FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral7826);
        	            propertyNameAndValue(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" }"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1394:3: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral7852); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("{ ");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral7870);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1398:5: ( propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt83=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA83_0 = LA(1);
        	                if ( (LA83_0 == NAME_VALUE) ) 
        	                {
        	                    alt83=1;
        	                }

        	            }
        	            switch (alt83) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1399:7: propertyNameAndValue
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             
        	        	            					  APP(", "); 
        	        	            					
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral7899);
        	        	        propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop83;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop83: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	            				  APP(" } "); 
        	            				
        	            				
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start patternLiteral
 * .//EmersonTree.g:1416:1: patternLiteral : ( ^( PATTERN_LITERAL ) | ^( PATTERN_LITERAL nameValueProto ) | ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) );
 */
static void
patternLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1418:3: ( ^( PATTERN_LITERAL ) | ^( PATTERN_LITERAL nameValueProto ) | ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) )
            
            ANTLR3_UINT32 alt86;

            alt86=3;


            {
                int LA86_0 = LA(1);
                if ( (LA86_0 == PATTERN_LITERAL) ) 
                {

                    {
                        int LA86_1 = LA(2);
                        if ( (synpred177_EmersonTree(ctx)) ) 
                        {
                            alt86=1;
                        }
                        else if ( (synpred178_EmersonTree(ctx)) ) 
                        {
                            alt86=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt86=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 86;
                            EXCEPTION->state        = 1;


                            goto rulepatternLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 86;
                    EXCEPTION->state        = 0;


                    goto rulepatternLiteralEx;
                }
            }
            switch (alt86) 
            {
        	case 1:
        	    // .//EmersonTree.g:1418:4: ^( PATTERN_LITERAL )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral7942); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("new util.Pattern()");
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1419:4: ^( PATTERN_LITERAL nameValueProto )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral7952); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral7961);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1422:4: ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral7973); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ ");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral7993);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1426:5: ( nameValueProto )*

        	        for (;;)
        	        {
        	            int alt85=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA85_0 = LA(1);
        	                if ( (((LA85_0 >= NAME_VALUE_PROTO) && (LA85_0 <= BLANK_NAME_VAL_PROT))) ) 
        	                {
        	                    alt85=1;
        	                }

        	            }
        	            switch (alt85) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1427:7: nameValueProto
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             
        	        	            					  APP(", "); 
        	        	            					
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral8022);
        	        	        nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop85;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop85: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	            				  APP(" ] "); 
        	            				
        	            				
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepatternLiteralEx; /* Prevent compiler warnings */
    rulepatternLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end patternLiteral */

/** 
 * $ANTLR start nameValueProto
 * .//EmersonTree.g:1444:1: nameValueProto : ( ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE expression ) )? ( ^( PROTO expression ) )? ) | ^( BLANK_NAME_VAL_PROT ) );
 */
static void
nameValueProto(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1445:3: ( ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE expression ) )? ( ^( PROTO expression ) )? ) | ^( BLANK_NAME_VAL_PROT ) )
            
            ANTLR3_UINT32 alt89;

            alt89=2;


            {
                int LA89_0 = LA(1);
                if ( (LA89_0 == NAME_VALUE_PROTO) ) 
                {
                    alt89=1;
                }
                else if ( (LA89_0 == BLANK_NAME_VAL_PROT) ) 
                {
                    alt89=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 89;
                    EXCEPTION->state        = 0;


                    goto rulenameValueProtoEx;
                }
            }
            switch (alt89) 
            {
        	case 1:
        	    // .//EmersonTree.g:1445:5: ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE expression ) )? ( ^( PROTO expression ) )? )
        	    {
        	         MATCHT(NAME_VALUE_PROTO, &FOLLOW_NAME_VALUE_PROTO_in_nameValueProto8087); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("new util.Pattern( ");
        	                      
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(NAME, &FOLLOW_NAME_in_nameValueProto8110); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyName_in_nameValueProto8122);
        	        propertyName(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1453:10: ( ^( VALUE expression ) )?
        	        {
        	            int alt87=2;
        	            {
        	                int LA87_0 = LA(1);
        	                if ( (LA87_0 == VALUE) ) 
        	                {
        	                    alt87=1;
        	                }
        	            }
        	            switch (alt87) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1454:10: ^( VALUE expression )
        	        	    {
        	        	         MATCHT(VALUE, &FOLLOW_VALUE_in_nameValueProto8165); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                          APP(", ");
        	        	                        
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_nameValueProto8194);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//EmersonTree.g:1462:10: ( ^( PROTO expression ) )?
        	        {
        	            int alt88=2;
        	            {
        	                int LA88_0 = LA(1);
        	                if ( (LA88_0 == PROTO) ) 
        	                {
        	                    alt88=1;
        	                }
        	            }
        	            switch (alt88) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1464:10: ^( PROTO expression )
        	        	    {
        	        	         MATCHT(PROTO, &FOLLOW_PROTO_in_nameValueProto8243); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                          APP(", ");
        	        	                        
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_nameValueProto8271);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(" )");
        	                     
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1475:5: ^( BLANK_NAME_VAL_PROT )
        	    {
        	         MATCHT(BLANK_NAME_VAL_PROT, &FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto8312); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("new util.Pattern()");
        	                    
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenameValueProtoEx; /* Prevent compiler warnings */
    rulenameValueProtoEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end nameValueProto */

/** 
 * $ANTLR start propertyNameAndValue
 * .//EmersonTree.g:1482:1: propertyNameAndValue : ^( NAME_VALUE propertyName expression ) ;
 */
static void
propertyNameAndValue(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1483:2: ( ^( NAME_VALUE propertyName expression ) )
        // .//EmersonTree.g:1483:4: ^( NAME_VALUE propertyName expression )
        {
             MATCHT(NAME_VALUE, &FOLLOW_NAME_VALUE_in_propertyNameAndValue8342); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue8355);
            propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                	APP(" : ");
            }
            FOLLOWPUSH(FOLLOW_expression_in_propertyNameAndValue8374);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start propertyName
 * .//EmersonTree.g:1489:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static void
propertyName(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier14;
    pANTLR3_BASE_TREE    StringLiteral15;
    pANTLR3_BASE_TREE    NumericLiteral16;

    /* Initialize rule variables
     */


    Identifier14       = NULL;
    StringLiteral15       = NULL;
    NumericLiteral16       = NULL;

    {
        {
            //  .//EmersonTree.g:1490:2: ( Identifier | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt90;

            alt90=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            	{
            		alt90=1;
            	}
                break;
            case StringLiteral:
            	{
            		alt90=2;
            	}
                break;
            case NumericLiteral:
            	{
            		alt90=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 90;
                EXCEPTION->state        = 0;


                goto rulepropertyNameEx;
            }

            switch (alt90) 
            {
        	case 1:
        	    // .//EmersonTree.g:1490:4: Identifier
        	    {
        	        Identifier14 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyName8386); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP((const char*)(Identifier14->getText(Identifier14))->chars); 
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1491:4: StringLiteral
        	    {
        	        StringLiteral15 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_propertyName8393); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         APP((const char*)(StringLiteral15->getText(StringLiteral15))->chars);  
        	                      
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1495:4: NumericLiteral
        	    {
        	        NumericLiteral16 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_propertyName8410); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP((const char*)(NumericLiteral16->getText(NumericLiteral16))->chars);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//EmersonTree.g:1499:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static void
literal(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    StringLiteral17;
    pANTLR3_BASE_TREE    NumericLiteral18;

    /* Initialize rule variables
     */


    StringLiteral17       = NULL;
    NumericLiteral18       = NULL;

    {
        {
            //  .//EmersonTree.g:1500:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt91;

            alt91=5;

            switch ( LA(1) ) 
            {
            case 203:
            	{
            		alt91=1;
            	}
                break;
            case 204:
            	{
            		alt91=2;
            	}
                break;
            case 205:
            	{
            		alt91=3;
            	}
                break;
            case StringLiteral:
            	{
            		alt91=4;
            	}
                break;
            case NumericLiteral:
            	{
            		alt91=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 91;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;
            }

            switch (alt91) 
            {
        	case 1:
        	    // .//EmersonTree.g:1500:4: 'null'
        	    {
        	         MATCHT(203, &FOLLOW_203_in_literal8424); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("null");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1501:4: 'true'
        	    {
        	         MATCHT(204, &FOLLOW_204_in_literal8431); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("true"); 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1502:4: 'false'
        	    {
        	         MATCHT(205, &FOLLOW_205_in_literal8438); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP("false");
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1503:4: StringLiteral
        	    {
        	        StringLiteral17 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_literal8444); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                          const char* input = (const char*)(StringLiteral17->getText(StringLiteral17))->chars;
        	                          int len = (StringLiteral17->getText(StringLiteral17))->size;
        	                          char firstChar = *input;
        	                          if(firstChar == '@')
        	                          {
        	                            std::string str_input(input,len);
        	                            str_input = str_input.substr(1, str_input.size() -2);
        	                            std::string escaped = emerson_escapeMultiline(str_input.c_str());
        	                            APP("\"");
        	                            APP(escaped.c_str());
        	                            APP("\"");
        	                          }
        	                          else APP((const char*)(StringLiteral17->getText(StringLiteral17))->chars);
        	                    
        	                    
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1520:4: NumericLiteral
        	    {
        	        NumericLiteral18 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_literal8461); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP((const char*)(NumericLiteral18->getText(NumericLiteral18))->chars);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end literal */

// $ANTLR start synpred28_EmersonTree
static void synpred28_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:297:14: ( statement )
    // .//EmersonTree.g:297:14: statement
    {
        FOLLOWPUSH(FOLLOW_statement_in_synpred28_EmersonTree1592);
        statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred28_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred28_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred28_EmersonTreeEx: ;

}
// $ANTLR end synpred28_EmersonTree

// $ANTLR start synpred45_EmersonTree
static void synpred45_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:527:7: ( ^( CASE expression ( statementList )? ( caseClause )? ) )
    // .//EmersonTree.g:527:7: ^( CASE expression ( statementList )? ( caseClause )? )
    {
         MATCHT(CASE, &FOLLOW_CASE_in_synpred45_EmersonTree2901); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred45_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred45_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expression_in_synpred45_EmersonTree2921);
        expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred45_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//EmersonTree.g:535:9: ( statementList )?
        {
            int alt93=2;
            {
                int LA93_0 = LA(1);
                if ( (LA93_0 == SLIST) ) 
                {
                    alt93=1;
                }
            }
            switch (alt93) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: statementList
        	    {
        	        FOLLOWPUSH(FOLLOW_statementList_in_synpred45_EmersonTree2941);
        	        statementList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred45_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//EmersonTree.g:536:9: ( caseClause )?
        {
            int alt94=2;
            {
                int LA94_0 = LA(1);
                if ( (LA94_0 == CASE) ) 
                {
                    alt94=1;
                }
            }
            switch (alt94) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: caseClause
        	    {
        	        FOLLOWPUSH(FOLLOW_caseClause_in_synpred45_EmersonTree2952);
        	        caseClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred45_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred45_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred45_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred45_EmersonTreeEx: ;

}
// $ANTLR end synpred45_EmersonTree

// $ANTLR start synpred56_EmersonTree
static void synpred56_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:759:3: ( memberExpression )
    // .//EmersonTree.g:759:3: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred56_EmersonTree4024);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred56_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred56_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred56_EmersonTreeEx: ;

}
// $ANTLR end synpred56_EmersonTree

// $ANTLR start synpred57_EmersonTree
static void synpred57_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:764:4: ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression ) )
    // .//EmersonTree.g:764:4: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression )
    {
         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree4047); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred57_EmersonTree4063);
        memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree4080);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred57_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred57_EmersonTreeEx: ;

}
// $ANTLR end synpred57_EmersonTree

// $ANTLR start synpred58_EmersonTree
static void synpred58_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:781:3: ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression ) )
    // .//EmersonTree.g:781:3: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression )
    {
         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree4108); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4120);
        memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree4133);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred58_EmersonTree4145);
        memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred58_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred58_EmersonTreeEx: ;

}
// $ANTLR end synpred58_EmersonTree

// $ANTLR start synpred78_EmersonTree
static void synpred78_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:921:4: ( callExpression )
    // .//EmersonTree.g:921:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred78_EmersonTree5120);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred78_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred78_EmersonTreeEx: ;

}
// $ANTLR end synpred78_EmersonTree

// $ANTLR start synpred79_EmersonTree
static void synpred79_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:926:4: ( memberExpression )
    // .//EmersonTree.g:926:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred79_EmersonTree5137);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred79_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred79_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred79_EmersonTreeEx: ;

}
// $ANTLR end synpred79_EmersonTree

// $ANTLR start synpred82_EmersonTree
static void synpred82_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:942:3: ( ^( DOT memberExpression propertyReferenceSuffix1 ) )
    // .//EmersonTree.g:942:3: ^( DOT memberExpression propertyReferenceSuffix1 )
    {
         MATCHT(DOT, &FOLLOW_DOT_in_synpred82_EmersonTree5203); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred82_EmersonTree5205);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred82_EmersonTree5209);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred82_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred82_EmersonTreeEx: ;

}
// $ANTLR end synpred82_EmersonTree

// $ANTLR start synpred86_EmersonTree
static void synpred86_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:954:4: ( ^( CALL memberExpression arguments ) )
    // .//EmersonTree.g:954:4: ^( CALL memberExpression arguments )
    {
         MATCHT(CALL, &FOLLOW_CALL_in_synpred86_EmersonTree5275); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred86_EmersonTree5277);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_arguments_in_synpred86_EmersonTree5279);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred86_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred86_EmersonTreeEx: ;

}
// $ANTLR end synpred86_EmersonTree

// $ANTLR start synpred91_EmersonTree
static void synpred91_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:969:5: ( ^( ARGLIST ) )
    // .//EmersonTree.g:969:5: ^( ARGLIST )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred91_EmersonTree5356); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred91_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred91_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred91_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred91_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred91_EmersonTreeEx: ;

}
// $ANTLR end synpred91_EmersonTree

// $ANTLR start synpred92_EmersonTree
static void synpred92_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:970:5: ( ^( ARGLIST ( expression ) ) )
    // .//EmersonTree.g:970:5: ^( ARGLIST ( expression ) )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred92_EmersonTree5366); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred92_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred92_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:972:8: ( expression )
        // .//EmersonTree.g:972:9: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_synpred92_EmersonTree5386);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred92_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred92_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred92_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred92_EmersonTreeEx: ;

}
// $ANTLR end synpred92_EmersonTree

// $ANTLR start synpred148_EmersonTree
static void synpred148_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1261:11: ( postfixExpression )
    // .//EmersonTree.g:1261:11: postfixExpression
    {
        FOLLOWPUSH(FOLLOW_postfixExpression_in_synpred148_EmersonTree6887);
        postfixExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred148_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred148_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred148_EmersonTreeEx: ;

}
// $ANTLR end synpred148_EmersonTree

// $ANTLR start synpred168_EmersonTree
static void synpred168_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1332:11: ( additiveExpression )
    // .//EmersonTree.g:1332:11: additiveExpression
    {
        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred168_EmersonTree7477);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred168_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred168_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred168_EmersonTreeEx: ;

}
// $ANTLR end synpred168_EmersonTree

// $ANTLR start synpred169_EmersonTree
static void synpred169_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1333:11: ( NumericLiteral )
    // .//EmersonTree.g:1333:11: NumericLiteral
    {
         MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_synpred169_EmersonTree7493); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred169_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred169_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred169_EmersonTreeEx: ;

}
// $ANTLR end synpred169_EmersonTree

// $ANTLR start synpred170_EmersonTree
static void synpred170_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1334:11: ( callExpression )
    // .//EmersonTree.g:1334:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred170_EmersonTree7507);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred170_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred170_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred170_EmersonTreeEx: ;

}
// $ANTLR end synpred170_EmersonTree

// $ANTLR start synpred171_EmersonTree
static void synpred171_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1360:5: ( ^( ARRAY_LITERAL ) )
    // .//EmersonTree.g:1360:5: ^( ARRAY_LITERAL )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree7647); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred171_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred171_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred171_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred171_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred171_EmersonTreeEx: ;

}
// $ANTLR end synpred171_EmersonTree

// $ANTLR start synpred172_EmersonTree
static void synpred172_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1361:5: ( ^( ARRAY_LITERAL ( expression ) ) )
    // .//EmersonTree.g:1361:5: ^( ARRAY_LITERAL ( expression ) )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree7657); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1363:8: ( expression )
        // .//EmersonTree.g:1363:9: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_synpred172_EmersonTree7676);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred172_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred172_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred172_EmersonTreeEx: ;

}
// $ANTLR end synpred172_EmersonTree

// $ANTLR start synpred174_EmersonTree
static void synpred174_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1386:4: ( ^( OBJ_LITERAL ) )
    // .//EmersonTree.g:1386:4: ^( OBJ_LITERAL )
    {
         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree7779); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred174_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred174_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred174_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred174_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred174_EmersonTreeEx: ;

}
// $ANTLR end synpred174_EmersonTree

// $ANTLR start synpred175_EmersonTree
static void synpred175_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1387:4: ( ^( OBJ_LITERAL ( propertyNameAndValue ) ) )
    // .//EmersonTree.g:1387:4: ^( OBJ_LITERAL ( propertyNameAndValue ) )
    {
         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree7789); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1390:13: ( propertyNameAndValue )
        // .//EmersonTree.g:1390:14: propertyNameAndValue
        {
            FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree7826);
            propertyNameAndValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred175_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred175_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred175_EmersonTreeEx: ;

}
// $ANTLR end synpred175_EmersonTree

// $ANTLR start synpred177_EmersonTree
static void synpred177_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1418:4: ( ^( PATTERN_LITERAL ) )
    // .//EmersonTree.g:1418:4: ^( PATTERN_LITERAL )
    {
         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree7942); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred177_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred177_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred177_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred177_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred177_EmersonTreeEx: ;

}
// $ANTLR end synpred177_EmersonTree

// $ANTLR start synpred178_EmersonTree
static void synpred178_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1419:4: ( ^( PATTERN_LITERAL nameValueProto ) )
    // .//EmersonTree.g:1419:4: ^( PATTERN_LITERAL nameValueProto )
    {
         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree7952); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_nameValueProto_in_synpred178_EmersonTree7961);
        nameValueProto(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred178_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred178_EmersonTreeEx: ;

}
// $ANTLR end synpred178_EmersonTree
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred148_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred148_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred78_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred78_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred86_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred86_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred170_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred170_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred178_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred178_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred174_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred174_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred177_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred177_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred169_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred169_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred92_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred92_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred28_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred28_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred172_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred172_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred79_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred79_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred82_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred82_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred171_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred171_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred91_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred91_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred58_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred58_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred45_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred45_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred56_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred56_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred175_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred175_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred57_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred57_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred168_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred168_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
