/*  CBR
 *  Session.pbj
 *
 *  Copyright (c) 2009, Ewen Cheslack-Postava
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of Sirikata nor the names of its contributors may
 *    be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

"pbj-0.0.3"

import "TimedMotionVector.pbj";

package Sirikata.Protocol.Session;

/// Object Oriented Session Messages

// Connection request sent to space server, for new or migration connections
message Connect {
    enum ConnectionType {
        Fresh = 1;
        Migration = 2;
    }

    required ConnectionType type = 1;
    required uuid object = 2;
    optional Sirikata.Protocol._prefix_.TimedMotionVector loc = 3;
    optional boundingsphere3f bounds = 4;
    optional float query_angle = 5;
}

// Response to a connection request
message ConnectResponse {
    enum Response {
        Success = 1;
        Redirect = 2;
        Error = 3;
    }

    required Response response = 1;
    optional uint64 redirect = 2;
}

// Acknowledges that a successful connection response was receive.
// Once the OH has sent this to the space, the space will start
// delivering data.
message ConnectAck {
}

// Message sent from space server to object host telling
// it that it needs to migrate
message InitiateMigration {
    required uint64 new_server = 1;
}

// Notification of disconnect - explicit ending of session
// May be sent in either direction to notify that the
// session is closed. Explicit notification is an
// optimization -- both sides will eventually close sessions
// due to timeouts
message Disconnect {
    required uuid object = 1;
    optional string reason = 2;
}

// Container for session messages.
message Container {
    optional Connect connect = 1;
    optional ConnectResponse connect_response = 2;
    optional ConnectAck connect_ack = 3;

    optional InitiateMigration init_migration = 4;

    optional Disconnect disconnect = 5;
}
